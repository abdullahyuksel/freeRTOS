
freeRTOS_HAL_Semaphore_Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000681c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  080069ac  080069ac  000169ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b74  08006b74  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006b74  08006b74  00016b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b7c  08006b7c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b7c  08006b7c  00016b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b80  08006b80  00016b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e78  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012ef0  20012ef0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013108  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b4e  00000000  00000000  000331b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00035d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001048  00000000  00000000  00036e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232a1  00000000  00000000  00037ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b09  00000000  00000000  0005b149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d55b5  00000000  00000000  0006ec52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144207  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053bc  00000000  00000000  00144258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006994 	.word	0x08006994

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006994 	.word	0x08006994

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <sendMessage>:
void Slave_Task_Handler(void *parameters);

void sendMessage(char *message);

void sendMessage(char *message)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) != SET);
 800058c:	bf00      	nop
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <sendMessage+0x38>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000598:	2b80      	cmp	r3, #128	; 0x80
 800059a:	d1f8      	bne.n	800058e <sendMessage+0xa>
	HAL_UART_Transmit (&huart2, &message[0], strlen(message), portMAX_DELAY);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff fe17 	bl	80001d0 <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <sendMessage+0x38>)
 80005ae:	f001 fdc8 	bl	8002142 <HAL_UART_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000094 	.word	0x20000094

080005c0 <Master_Task_Handler>:

void Master_Task_Handler(void *parameters)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	int masterId=0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
	portBASE_TYPE status;

	xSemaphoreGive(xSemaphore);
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <Master_Task_Handler+0x68>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	f002 fabb 	bl	8002b50 <xQueueGenericSend>
	while(1)
	{
		masterId = (rand() & 0x1ff );
 80005da:	f004 ffd5 	bl	8005588 <rand>
 80005de:	4603      	mov	r3, r0
 80005e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005e4:	60bb      	str	r3, [r7, #8]

		status = xQueueSend(xQueue, &masterId, portMAX_DELAY);
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <Master_Task_Handler+0x6c>)
 80005e8:	6818      	ldr	r0, [r3, #0]
 80005ea:	f107 0108 	add.w	r1, r7, #8
 80005ee:	2300      	movs	r3, #0
 80005f0:	f04f 32ff 	mov.w	r2, #4294967295
 80005f4:	f002 faac 	bl	8002b50 <xQueueGenericSend>
 80005f8:	60f8      	str	r0, [r7, #12]

		if(status != pdPASS)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d003      	beq.n	8000608 <Master_Task_Handler+0x48>
		{
			sendMessage("could not send to queue");
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <Master_Task_Handler+0x70>)
 8000602:	f7ff ffbf 	bl	8000584 <sendMessage>
 8000606:	e006      	b.n	8000616 <Master_Task_Handler+0x56>
		}
		else
			xSemaphoreGive(xSemaphore);
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <Master_Task_Handler+0x68>)
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	f002 fa9d 	bl	8002b50 <xQueueGenericSend>

		taskYIELD();
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <Master_Task_Handler+0x74>)
 8000618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	f3bf 8f6f 	isb	sy
		masterId = (rand() & 0x1ff );
 8000626:	e7d8      	b.n	80005da <Master_Task_Handler+0x1a>
 8000628:	200000e4 	.word	0x200000e4
 800062c:	200000e0 	.word	0x200000e0
 8000630:	080069ac 	.word	0x080069ac
 8000634:	e000ed04 	.word	0xe000ed04

08000638 <slaveWorkFunc>:

	}
}

void slaveWorkFunc(unsigned int passid)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b090      	sub	sp, #64	; 0x40
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	char message[50]={0};
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	222e      	movs	r2, #46	; 0x2e
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f004 ff93 	bl	8005578 <memset>
	sprintf(message, "pasId: %d\n\r", passid);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	4907      	ldr	r1, [pc, #28]	; (8000678 <slaveWorkFunc+0x40>)
 800065a:	4618      	mov	r0, r3
 800065c:	f004 ffd2 	bl	8005604 <siprintf>
	sendMessage(message);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff8d 	bl	8000584 <sendMessage>

	vTaskDelay(passid);
 800066a:	6878      	ldr	r0, [r7, #4]
 800066c:	f003 f880 	bl	8003770 <vTaskDelay>
}
 8000670:	bf00      	nop
 8000672:	3740      	adds	r7, #64	; 0x40
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	080069c4 	.word	0x080069c4

0800067c <Slave_Task_Handler>:

void Slave_Task_Handler(void *parameters)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	int slaveMasterId=0;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
	portBASE_TYPE status;

	while(1)
	{
		xSemaphoreTake(xSemaphore, 0);
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <Slave_Task_Handler+0x44>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f002 fc3c 	bl	8002f0c <xQueueSemaphoreTake>

		status = xQueueReceive(xQueue, &slaveMasterId, portMAX_DELAY);
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <Slave_Task_Handler+0x48>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f107 0108 	add.w	r1, r7, #8
 800069c:	f04f 32ff 	mov.w	r2, #4294967295
 80006a0:	4618      	mov	r0, r3
 80006a2:	f002 fb53 	bl	8002d4c <xQueueReceive>
 80006a6:	60f8      	str	r0, [r7, #12]

		if(status != pdPASS)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d003      	beq.n	80006b6 <Slave_Task_Handler+0x3a>
		{
			sendMessage("This queue is empty");
 80006ae:	4806      	ldr	r0, [pc, #24]	; (80006c8 <Slave_Task_Handler+0x4c>)
 80006b0:	f7ff ff68 	bl	8000584 <sendMessage>
 80006b4:	e7e8      	b.n	8000688 <Slave_Task_Handler+0xc>
		}
		else
			slaveWorkFunc(slaveMasterId);
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ffbd 	bl	8000638 <slaveWorkFunc>
		xSemaphoreTake(xSemaphore, 0);
 80006be:	e7e3      	b.n	8000688 <Slave_Task_Handler+0xc>
 80006c0:	200000e4 	.word	0x200000e4
 80006c4:	200000e0 	.word	0x200000e0
 80006c8:	080069d0 	.word	0x080069d0

080006cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006d2:	f000 faf1 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d6:	f000 f851 	bl	800077c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006da:	f000 f8d7 	bl	800088c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006de:	f000 f8ab 	bl	8000838 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  xQueue = xQueueCreate(1, sizeof(int));
 80006e2:	2200      	movs	r2, #0
 80006e4:	2104      	movs	r1, #4
 80006e6:	2001      	movs	r0, #1
 80006e8:	f002 f9c0 	bl	8002a6c <xQueueGenericCreate>
 80006ec:	4603      	mov	r3, r0
 80006ee:	4a1b      	ldr	r2, [pc, #108]	; (800075c <main+0x90>)
 80006f0:	6013      	str	r3, [r2, #0]

  vSemaphoreCreateBinary(xSemaphore);
 80006f2:	2203      	movs	r2, #3
 80006f4:	2100      	movs	r1, #0
 80006f6:	2001      	movs	r0, #1
 80006f8:	f002 f9b8 	bl	8002a6c <xQueueGenericCreate>
 80006fc:	4603      	mov	r3, r0
 80006fe:	4a18      	ldr	r2, [pc, #96]	; (8000760 <main+0x94>)
 8000700:	6013      	str	r3, [r2, #0]
 8000702:	4b17      	ldr	r3, [pc, #92]	; (8000760 <main+0x94>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d006      	beq.n	8000718 <main+0x4c>
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <main+0x94>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	2200      	movs	r2, #0
 8000712:	2100      	movs	r1, #0
 8000714:	f002 fa1c 	bl	8002b50 <xQueueGenericSend>

  if((xQueue != NULL) && (xSemaphore != NULL))
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <main+0x90>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d01b      	beq.n	8000758 <main+0x8c>
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <main+0x94>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d017      	beq.n	8000758 <main+0x8c>
  {
	  xTaskCreate(Master_Task_Handler,
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <main+0x98>)
 800072a:	9301      	str	r3, [sp, #4]
 800072c:	2303      	movs	r3, #3
 800072e:	9300      	str	r3, [sp, #0]
 8000730:	2300      	movs	r3, #0
 8000732:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8000736:	490c      	ldr	r1, [pc, #48]	; (8000768 <main+0x9c>)
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <main+0xa0>)
 800073a:	f002 fe9d 	bl	8003478 <xTaskCreate>
				  configMINIMAL_STACK_SIZE*3,
				  NULL,
				  3,
				  &task1Master);

	  xTaskCreate(Slave_Task_Handler,
 800073e:	4b0c      	ldr	r3, [pc, #48]	; (8000770 <main+0xa4>)
 8000740:	9301      	str	r3, [sp, #4]
 8000742:	2301      	movs	r3, #1
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2300      	movs	r3, #0
 8000748:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800074c:	4909      	ldr	r1, [pc, #36]	; (8000774 <main+0xa8>)
 800074e:	480a      	ldr	r0, [pc, #40]	; (8000778 <main+0xac>)
 8000750:	f002 fe92 	bl	8003478 <xTaskCreate>
				  configMINIMAL_STACK_SIZE*3,
				  NULL,
				  1,
				  &task2Slave);

	  vTaskStartScheduler();
 8000754:	f003 f840 	bl	80037d8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000758:	e7fe      	b.n	8000758 <main+0x8c>
 800075a:	bf00      	nop
 800075c:	200000e0 	.word	0x200000e0
 8000760:	200000e4 	.word	0x200000e4
 8000764:	200000d8 	.word	0x200000d8
 8000768:	080069e4 	.word	0x080069e4
 800076c:	080005c1 	.word	0x080005c1
 8000770:	200000dc 	.word	0x200000dc
 8000774:	080069f0 	.word	0x080069f0
 8000778:	0800067d 	.word	0x0800067d

0800077c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b094      	sub	sp, #80	; 0x50
 8000780:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000782:	f107 0320 	add.w	r3, r7, #32
 8000786:	2230      	movs	r2, #48	; 0x30
 8000788:	2100      	movs	r1, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f004 fef4 	bl	8005578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2200      	movs	r2, #0
 8000796:	601a      	str	r2, [r3, #0]
 8000798:	605a      	str	r2, [r3, #4]
 800079a:	609a      	str	r2, [r3, #8]
 800079c:	60da      	str	r2, [r3, #12]
 800079e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemClock_Config+0xb4>)
 80007a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a8:	4a21      	ldr	r2, [pc, #132]	; (8000830 <SystemClock_Config+0xb4>)
 80007aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007ae:	6413      	str	r3, [r2, #64]	; 0x40
 80007b0:	4b1f      	ldr	r3, [pc, #124]	; (8000830 <SystemClock_Config+0xb4>)
 80007b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b8:	60bb      	str	r3, [r7, #8]
 80007ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	4b1c      	ldr	r3, [pc, #112]	; (8000834 <SystemClock_Config+0xb8>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a1b      	ldr	r2, [pc, #108]	; (8000834 <SystemClock_Config+0xb8>)
 80007c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ca:	6013      	str	r3, [r2, #0]
 80007cc:	4b19      	ldr	r3, [pc, #100]	; (8000834 <SystemClock_Config+0xb8>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d4:	607b      	str	r3, [r7, #4]
 80007d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d8:	2302      	movs	r3, #2
 80007da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007dc:	2301      	movs	r3, #1
 80007de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007e0:	2310      	movs	r3, #16
 80007e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fd23 	bl	8001238 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007f8:	f000 f874 	bl	80008e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000800:	2300      	movs	r3, #0
 8000802:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f000 ff86 	bl	8001728 <HAL_RCC_ClockConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000822:	f000 f85f 	bl	80008e4 <Error_Handler>
  }
}
 8000826:	bf00      	nop
 8000828:	3750      	adds	r7, #80	; 0x50
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40023800 	.word	0x40023800
 8000834:	40007000 	.word	0x40007000

08000838 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800083e:	4a12      	ldr	r2, [pc, #72]	; (8000888 <MX_USART2_UART_Init+0x50>)
 8000840:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000844:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000848:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800084a:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000850:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800085c:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800085e:	220c      	movs	r2, #12
 8000860:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000862:	4b08      	ldr	r3, [pc, #32]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_USART2_UART_Init+0x4c>)
 8000870:	f001 fc1a 	bl	80020a8 <HAL_UART_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800087a:	f000 f833 	bl	80008e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000094 	.word	0x20000094
 8000888:	40004400 	.word	0x40004400

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <MX_GPIO_Init+0x30>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <MX_GPIO_Init+0x30>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <MX_GPIO_Init+0x30>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]

}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d101      	bne.n	80008d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008d2:	f000 fa13 	bl	8000cfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40001000 	.word	0x40001000

080008e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e8:	b672      	cpsid	i
}
 80008ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ec:	e7fe      	b.n	80008ec <Error_Handler+0x8>
	...

080008f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <HAL_MspInit+0x4c>)
 80008fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <HAL_MspInit+0x4c>)
 8000900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000904:	6453      	str	r3, [r2, #68]	; 0x44
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <HAL_MspInit+0x4c>)
 8000908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	603b      	str	r3, [r7, #0]
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <HAL_MspInit+0x4c>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a08      	ldr	r2, [pc, #32]	; (800093c <HAL_MspInit+0x4c>)
 800091c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <HAL_MspInit+0x4c>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	; 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a19      	ldr	r2, [pc, #100]	; (80009c4 <HAL_UART_MspInit+0x84>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d12b      	bne.n	80009ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b18      	ldr	r3, [pc, #96]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a17      	ldr	r2, [pc, #92]	; (80009c8 <HAL_UART_MspInit+0x88>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b11      	ldr	r3, [pc, #68]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a10      	ldr	r2, [pc, #64]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800099a:	230c      	movs	r3, #12
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009aa:	2307      	movs	r3, #7
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <HAL_UART_MspInit+0x8c>)
 80009b6:	f000 faa3 	bl	8000f00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	2036      	movs	r0, #54	; 0x36
 80009e6:	f000 fa61 	bl	8000eac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009ea:	2036      	movs	r0, #54	; 0x36
 80009ec:	f000 fa7a 	bl	8000ee4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4b1e      	ldr	r3, [pc, #120]	; (8000a70 <HAL_InitTick+0xa0>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	4a1d      	ldr	r2, [pc, #116]	; (8000a70 <HAL_InitTick+0xa0>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <HAL_InitTick+0xa0>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a04:	f003 0310 	and.w	r3, r3, #16
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a0c:	f107 0210 	add.w	r2, r7, #16
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4611      	mov	r1, r2
 8000a16:	4618      	mov	r0, r3
 8000a18:	f001 f866 	bl	8001ae8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a1c:	f001 f83c 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 8000a20:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a24:	4a13      	ldr	r2, [pc, #76]	; (8000a74 <HAL_InitTick+0xa4>)
 8000a26:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2a:	0c9b      	lsrs	r3, r3, #18
 8000a2c:	3b01      	subs	r3, #1
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <HAL_InitTick+0xa8>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <HAL_InitTick+0xac>)
 8000a34:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <HAL_InitTick+0xa8>)
 8000a38:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a3c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a3e:	4a0e      	ldr	r2, [pc, #56]	; (8000a78 <HAL_InitTick+0xa8>)
 8000a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a42:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <HAL_InitTick+0xa8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <HAL_InitTick+0xa8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a50:	4809      	ldr	r0, [pc, #36]	; (8000a78 <HAL_InitTick+0xa8>)
 8000a52:	f001 f87b 	bl	8001b4c <HAL_TIM_Base_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d104      	bne.n	8000a66 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <HAL_InitTick+0xa8>)
 8000a5e:	f001 f8cf 	bl	8001c00 <HAL_TIM_Base_Start_IT>
 8000a62:	4603      	mov	r3, r0
 8000a64:	e000      	b.n	8000a68 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3730      	adds	r7, #48	; 0x30
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	431bde83 	.word	0x431bde83
 8000a78:	200000e8 	.word	0x200000e8
 8000a7c:	40001000 	.word	0x40001000

08000a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <MemManage_Handler+0x4>

08000a86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <BusFault_Handler+0x4>

08000a8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <UsageFault_Handler+0x4>

08000a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr

08000aa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aa4:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <TIM6_DAC_IRQHandler+0x10>)
 8000aa6:	f001 f91b 	bl	8001ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200000e8 	.word	0x200000e8

08000ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
	return 1;
 8000ab8:	2301      	movs	r3, #1
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <_kill>:

int _kill(int pid, int sig)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ace:	f004 fd1b 	bl	8005508 <__errno>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2216      	movs	r2, #22
 8000ad6:	601a      	str	r2, [r3, #0]
	return -1;
 8000ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <_exit>:

void _exit (int status)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ffe7 	bl	8000ac4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000af6:	e7fe      	b.n	8000af6 <_exit+0x12>

08000af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	60f8      	str	r0, [r7, #12]
 8000b00:	60b9      	str	r1, [r7, #8]
 8000b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	e00a      	b.n	8000b20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b0a:	f3af 8000 	nop.w
 8000b0e:	4601      	mov	r1, r0
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	1c5a      	adds	r2, r3, #1
 8000b14:	60ba      	str	r2, [r7, #8]
 8000b16:	b2ca      	uxtb	r2, r1
 8000b18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	dbf0      	blt.n	8000b0a <_read+0x12>
	}

return len;
 8000b28:	687b      	ldr	r3, [r7, #4]
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	60f8      	str	r0, [r7, #12]
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	2300      	movs	r3, #0
 8000b40:	617b      	str	r3, [r7, #20]
 8000b42:	e009      	b.n	8000b58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	1c5a      	adds	r2, r3, #1
 8000b48:	60ba      	str	r2, [r7, #8]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	3301      	adds	r3, #1
 8000b56:	617b      	str	r3, [r7, #20]
 8000b58:	697a      	ldr	r2, [r7, #20]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbf1      	blt.n	8000b44 <_write+0x12>
	}
	return len;
 8000b60:	687b      	ldr	r3, [r7, #4]
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <_close>:

int _close(int file)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b083      	sub	sp, #12
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
	return -1;
 8000b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b92:	605a      	str	r2, [r3, #4]
	return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <_isatty>:

int _isatty(int file)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	return 1;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b086      	sub	sp, #24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bdc:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <_sbrk+0x5c>)
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <_sbrk+0x60>)
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <_sbrk+0x64>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d102      	bne.n	8000bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf0:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <_sbrk+0x64>)
 8000bf2:	4a12      	ldr	r2, [pc, #72]	; (8000c3c <_sbrk+0x68>)
 8000bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf6:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	d207      	bcs.n	8000c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c04:	f004 fc80 	bl	8005508 <__errno>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c12:	e009      	b.n	8000c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c1a:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <_sbrk+0x64>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4413      	add	r3, r2
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <_sbrk+0x64>)
 8000c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c26:	68fb      	ldr	r3, [r7, #12]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3718      	adds	r7, #24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20020000 	.word	0x20020000
 8000c34:	00000400 	.word	0x00000400
 8000c38:	20000130 	.word	0x20000130
 8000c3c:	20012ef0 	.word	0x20012ef0

08000c40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c44:	4b06      	ldr	r3, [pc, #24]	; (8000c60 <SystemInit+0x20>)
 8000c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <SystemInit+0x20>)
 8000c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000ed00 	.word	0xe000ed00

08000c64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c68:	480d      	ldr	r0, [pc, #52]	; (8000ca0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c6a:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c70:	e002      	b.n	8000c78 <LoopCopyDataInit>

08000c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c76:	3304      	adds	r3, #4

08000c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c7c:	d3f9      	bcc.n	8000c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7e:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c80:	4c0b      	ldr	r4, [pc, #44]	; (8000cb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c84:	e001      	b.n	8000c8a <LoopFillZerobss>

08000c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c88:	3204      	adds	r2, #4

08000c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c8c:	d3fb      	bcc.n	8000c86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8e:	f7ff ffd7 	bl	8000c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c92:	f004 fc3f 	bl	8005514 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c96:	f7ff fd19 	bl	80006cc <main>
  bx  lr    
 8000c9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ca8:	08006b84 	.word	0x08006b84
  ldr r2, =_sbss
 8000cac:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cb0:	20012ef0 	.word	0x20012ef0

08000cb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cbc:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <HAL_Init+0x40>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	; (8000cf8 <HAL_Init+0x40>)
 8000cc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <HAL_Init+0x40>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_Init+0x40>)
 8000cce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd4:	4b08      	ldr	r3, [pc, #32]	; (8000cf8 <HAL_Init+0x40>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a07      	ldr	r2, [pc, #28]	; (8000cf8 <HAL_Init+0x40>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	f000 f8d8 	bl	8000e96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f7ff fe72 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cec:	f7ff fe00 	bl	80008f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40023c00 	.word	0x40023c00

08000cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x20>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	461a      	mov	r2, r3
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_IncTick+0x24>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	4a04      	ldr	r2, [pc, #16]	; (8000d20 <HAL_IncTick+0x24>)
 8000d0e:	6013      	str	r3, [r2, #0]
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	20000008 	.word	0x20000008
 8000d20:	20000134 	.word	0x20000134

08000d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  return uwTick;
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_GetTick+0x14>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000134 	.word	0x20000134

08000d3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b085      	sub	sp, #20
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d58:	4013      	ands	r3, r2
 8000d5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6e:	4a04      	ldr	r2, [pc, #16]	; (8000d80 <__NVIC_SetPriorityGrouping+0x44>)
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	60d3      	str	r3, [r2, #12]
}
 8000d74:	bf00      	nop
 8000d76:	3714      	adds	r7, #20
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <__NVIC_GetPriorityGrouping+0x18>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	0a1b      	lsrs	r3, r3, #8
 8000d8e:	f003 0307 	and.w	r3, r3, #7
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	4603      	mov	r3, r0
 8000da8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	db0b      	blt.n	8000dca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f003 021f 	and.w	r2, r3, #31
 8000db8:	4907      	ldr	r1, [pc, #28]	; (8000dd8 <__NVIC_EnableIRQ+0x38>)
 8000dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	e000e100 	.word	0xe000e100

08000ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	6039      	str	r1, [r7, #0]
 8000de6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	db0a      	blt.n	8000e06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	490c      	ldr	r1, [pc, #48]	; (8000e28 <__NVIC_SetPriority+0x4c>)
 8000df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfa:	0112      	lsls	r2, r2, #4
 8000dfc:	b2d2      	uxtb	r2, r2
 8000dfe:	440b      	add	r3, r1
 8000e00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e04:	e00a      	b.n	8000e1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4908      	ldr	r1, [pc, #32]	; (8000e2c <__NVIC_SetPriority+0x50>)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	f003 030f 	and.w	r3, r3, #15
 8000e12:	3b04      	subs	r3, #4
 8000e14:	0112      	lsls	r2, r2, #4
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	440b      	add	r3, r1
 8000e1a:	761a      	strb	r2, [r3, #24]
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000e100 	.word	0xe000e100
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b089      	sub	sp, #36	; 0x24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	f1c3 0307 	rsb	r3, r3, #7
 8000e4a:	2b04      	cmp	r3, #4
 8000e4c:	bf28      	it	cs
 8000e4e:	2304      	movcs	r3, #4
 8000e50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3304      	adds	r3, #4
 8000e56:	2b06      	cmp	r3, #6
 8000e58:	d902      	bls.n	8000e60 <NVIC_EncodePriority+0x30>
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3b03      	subs	r3, #3
 8000e5e:	e000      	b.n	8000e62 <NVIC_EncodePriority+0x32>
 8000e60:	2300      	movs	r3, #0
 8000e62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e64:	f04f 32ff 	mov.w	r2, #4294967295
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	401a      	ands	r2, r3
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	43d9      	mvns	r1, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e88:	4313      	orrs	r3, r2
         );
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3724      	adds	r7, #36	; 0x24
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr

08000e96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff ff4c 	bl	8000d3c <__NVIC_SetPriorityGrouping>
}
 8000ea4:	bf00      	nop
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
 8000eb8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ebe:	f7ff ff61 	bl	8000d84 <__NVIC_GetPriorityGrouping>
 8000ec2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	68b9      	ldr	r1, [r7, #8]
 8000ec8:	6978      	ldr	r0, [r7, #20]
 8000eca:	f7ff ffb1 	bl	8000e30 <NVIC_EncodePriority>
 8000ece:	4602      	mov	r2, r0
 8000ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f7ff ff80 	bl	8000ddc <__NVIC_SetPriority>
}
 8000edc:	bf00      	nop
 8000ede:	3718      	adds	r7, #24
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f7ff ff54 	bl	8000da0 <__NVIC_EnableIRQ>
}
 8000ef8:	bf00      	nop
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
 8000f1a:	e16b      	b.n	80011f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	697a      	ldr	r2, [r7, #20]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	f040 815a 	bne.w	80011ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d005      	beq.n	8000f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d130      	bne.n	8000fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	2203      	movs	r2, #3
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68da      	ldr	r2, [r3, #12]
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f88:	2201      	movs	r2, #1
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	091b      	lsrs	r3, r3, #4
 8000f9e:	f003 0201 	and.w	r2, r3, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f003 0303 	and.w	r3, r3, #3
 8000fbc:	2b03      	cmp	r3, #3
 8000fbe:	d017      	beq.n	8000ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689a      	ldr	r2, [r3, #8]
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0303 	and.w	r3, r3, #3
 8000ff8:	2b02      	cmp	r3, #2
 8000ffa:	d123      	bne.n	8001044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	220f      	movs	r2, #15
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	691a      	ldr	r2, [r3, #16]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	69b9      	ldr	r1, [r7, #24]
 8001040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	2203      	movs	r2, #3
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0203 	and.w	r2, r3, #3
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001080:	2b00      	cmp	r3, #0
 8001082:	f000 80b4 	beq.w	80011ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b60      	ldr	r3, [pc, #384]	; (800120c <HAL_GPIO_Init+0x30c>)
 800108c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108e:	4a5f      	ldr	r2, [pc, #380]	; (800120c <HAL_GPIO_Init+0x30c>)
 8001090:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001094:	6453      	str	r3, [r2, #68]	; 0x44
 8001096:	4b5d      	ldr	r3, [pc, #372]	; (800120c <HAL_GPIO_Init+0x30c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010a2:	4a5b      	ldr	r2, [pc, #364]	; (8001210 <HAL_GPIO_Init+0x310>)
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	3302      	adds	r3, #2
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	220f      	movs	r2, #15
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4013      	ands	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_GPIO_Init+0x314>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d02b      	beq.n	8001126 <HAL_GPIO_Init+0x226>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a51      	ldr	r2, [pc, #324]	; (8001218 <HAL_GPIO_Init+0x318>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d025      	beq.n	8001122 <HAL_GPIO_Init+0x222>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a50      	ldr	r2, [pc, #320]	; (800121c <HAL_GPIO_Init+0x31c>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d01f      	beq.n	800111e <HAL_GPIO_Init+0x21e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a4f      	ldr	r2, [pc, #316]	; (8001220 <HAL_GPIO_Init+0x320>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a4e      	ldr	r2, [pc, #312]	; (8001224 <HAL_GPIO_Init+0x324>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a4d      	ldr	r2, [pc, #308]	; (8001228 <HAL_GPIO_Init+0x328>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a4c      	ldr	r2, [pc, #304]	; (800122c <HAL_GPIO_Init+0x32c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x20e>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a4b      	ldr	r2, [pc, #300]	; (8001230 <HAL_GPIO_Init+0x330>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x20a>
 8001106:	2307      	movs	r3, #7
 8001108:	e00e      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110a:	2308      	movs	r3, #8
 800110c:	e00c      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800110e:	2306      	movs	r3, #6
 8001110:	e00a      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001112:	2305      	movs	r3, #5
 8001114:	e008      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001116:	2304      	movs	r3, #4
 8001118:	e006      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111a:	2303      	movs	r3, #3
 800111c:	e004      	b.n	8001128 <HAL_GPIO_Init+0x228>
 800111e:	2302      	movs	r3, #2
 8001120:	e002      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001122:	2301      	movs	r3, #1
 8001124:	e000      	b.n	8001128 <HAL_GPIO_Init+0x228>
 8001126:	2300      	movs	r3, #0
 8001128:	69fa      	ldr	r2, [r7, #28]
 800112a:	f002 0203 	and.w	r2, r2, #3
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	4093      	lsls	r3, r2
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001138:	4935      	ldr	r1, [pc, #212]	; (8001210 <HAL_GPIO_Init+0x310>)
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	089b      	lsrs	r3, r3, #2
 800113e:	3302      	adds	r3, #2
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001146:	4b3b      	ldr	r3, [pc, #236]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800116a:	4a32      	ldr	r2, [pc, #200]	; (8001234 <HAL_GPIO_Init+0x334>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001194:	4a27      	ldr	r2, [pc, #156]	; (8001234 <HAL_GPIO_Init+0x334>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <HAL_GPIO_Init+0x334>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011be:	4a1d      	ldr	r2, [pc, #116]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e8:	4a12      	ldr	r2, [pc, #72]	; (8001234 <HAL_GPIO_Init+0x334>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	3301      	adds	r3, #1
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	f67f ae90 	bls.w	8000f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	3724      	adds	r7, #36	; 0x24
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800
 8001210:	40013800 	.word	0x40013800
 8001214:	40020000 	.word	0x40020000
 8001218:	40020400 	.word	0x40020400
 800121c:	40020800 	.word	0x40020800
 8001220:	40020c00 	.word	0x40020c00
 8001224:	40021000 	.word	0x40021000
 8001228:	40021400 	.word	0x40021400
 800122c:	40021800 	.word	0x40021800
 8001230:	40021c00 	.word	0x40021c00
 8001234:	40013c00 	.word	0x40013c00

08001238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e267      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	2b00      	cmp	r3, #0
 8001254:	d075      	beq.n	8001342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001256:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	2b04      	cmp	r3, #4
 8001260:	d00c      	beq.n	800127c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001262:	4b85      	ldr	r3, [pc, #532]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	2b08      	cmp	r3, #8
 800126c:	d112      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b82      	ldr	r3, [pc, #520]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800127a:	d10b      	bne.n	8001294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127c:	4b7e      	ldr	r3, [pc, #504]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d05b      	beq.n	8001340 <HAL_RCC_OscConfig+0x108>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d157      	bne.n	8001340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	e242      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800129c:	d106      	bne.n	80012ac <HAL_RCC_OscConfig+0x74>
 800129e:	4b76      	ldr	r3, [pc, #472]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a75      	ldr	r2, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e01d      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b4:	d10c      	bne.n	80012d0 <HAL_RCC_OscConfig+0x98>
 80012b6:	4b70      	ldr	r3, [pc, #448]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a6f      	ldr	r2, [pc, #444]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012c0:	6013      	str	r3, [r2, #0]
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e00b      	b.n	80012e8 <HAL_RCC_OscConfig+0xb0>
 80012d0:	4b69      	ldr	r3, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a68      	ldr	r2, [pc, #416]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	4b66      	ldr	r3, [pc, #408]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a65      	ldr	r2, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d013      	beq.n	8001318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fd18 	bl	8000d24 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f8:	f7ff fd14 	bl	8000d24 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b64      	cmp	r3, #100	; 0x64
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e207      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	4b5b      	ldr	r3, [pc, #364]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0xc0>
 8001316:	e014      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fd04 	bl	8000d24 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001320:	f7ff fd00 	bl	8000d24 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b64      	cmp	r3, #100	; 0x64
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e1f3      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	4b51      	ldr	r3, [pc, #324]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0xe8>
 800133e:	e000      	b.n	8001342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d063      	beq.n	8001416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134e:	4b4a      	ldr	r3, [pc, #296]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	f003 030c 	and.w	r3, r3, #12
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00b      	beq.n	8001372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800135a:	4b47      	ldr	r3, [pc, #284]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	2b08      	cmp	r3, #8
 8001364:	d11c      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b44      	ldr	r3, [pc, #272]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136e:	2b00      	cmp	r3, #0
 8001370:	d116      	bne.n	80013a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	4b41      	ldr	r3, [pc, #260]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0302 	and.w	r3, r3, #2
 800137a:	2b00      	cmp	r3, #0
 800137c:	d005      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d001      	beq.n	800138a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e1c7      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800138a:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	00db      	lsls	r3, r3, #3
 8001398:	4937      	ldr	r1, [pc, #220]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800139a:	4313      	orrs	r3, r2
 800139c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139e:	e03a      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d020      	beq.n	80013ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a8:	4b34      	ldr	r3, [pc, #208]	; (800147c <HAL_RCC_OscConfig+0x244>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ae:	f7ff fcb9 	bl	8000d24 <HAL_GetTick>
 80013b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b6:	f7ff fcb5 	bl	8000d24 <HAL_GetTick>
 80013ba:	4602      	mov	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a8      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	4b2b      	ldr	r3, [pc, #172]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d0f0      	beq.n	80013b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d4:	4b28      	ldr	r3, [pc, #160]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	00db      	lsls	r3, r3, #3
 80013e2:	4925      	ldr	r1, [pc, #148]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 80013e4:	4313      	orrs	r3, r2
 80013e6:	600b      	str	r3, [r1, #0]
 80013e8:	e015      	b.n	8001416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ea:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_RCC_OscConfig+0x244>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f0:	f7ff fc98 	bl	8000d24 <HAL_GetTick>
 80013f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f6:	e008      	b.n	800140a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f8:	f7ff fc94 	bl	8000d24 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	2b02      	cmp	r3, #2
 8001404:	d901      	bls.n	800140a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001406:	2303      	movs	r3, #3
 8001408:	e187      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d036      	beq.n	8001490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d016      	beq.n	8001458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <HAL_RCC_OscConfig+0x248>)
 800142c:	2201      	movs	r2, #1
 800142e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fc78 	bl	8000d24 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001436:	e008      	b.n	800144a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001438:	f7ff fc74 	bl	8000d24 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	2b02      	cmp	r3, #2
 8001444:	d901      	bls.n	800144a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001446:	2303      	movs	r3, #3
 8001448:	e167      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <HAL_RCC_OscConfig+0x240>)
 800144c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144e:	f003 0302 	and.w	r3, r3, #2
 8001452:	2b00      	cmp	r3, #0
 8001454:	d0f0      	beq.n	8001438 <HAL_RCC_OscConfig+0x200>
 8001456:	e01b      	b.n	8001490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001458:	4b09      	ldr	r3, [pc, #36]	; (8001480 <HAL_RCC_OscConfig+0x248>)
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145e:	f7ff fc61 	bl	8000d24 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001464:	e00e      	b.n	8001484 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fc5d 	bl	8000d24 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d907      	bls.n	8001484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e150      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 8001478:	40023800 	.word	0x40023800
 800147c:	42470000 	.word	0x42470000
 8001480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001484:	4b88      	ldr	r3, [pc, #544]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1ea      	bne.n	8001466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 8097 	beq.w	80015cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149e:	2300      	movs	r3, #0
 80014a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014a2:	4b81      	ldr	r3, [pc, #516]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d10f      	bne.n	80014ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b7d      	ldr	r3, [pc, #500]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b6:	4a7c      	ldr	r2, [pc, #496]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
 80014be:	4b7a      	ldr	r3, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014ca:	2301      	movs	r3, #1
 80014cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ce:	4b77      	ldr	r3, [pc, #476]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d118      	bne.n	800150c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014da:	4b74      	ldr	r3, [pc, #464]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a73      	ldr	r2, [pc, #460]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 80014e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e6:	f7ff fc1d 	bl	8000d24 <HAL_GetTick>
 80014ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ec:	e008      	b.n	8001500 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ee:	f7ff fc19 	bl	8000d24 <HAL_GetTick>
 80014f2:	4602      	mov	r2, r0
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e10c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b6a      	ldr	r3, [pc, #424]	; (80016ac <HAL_RCC_OscConfig+0x474>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0f0      	beq.n	80014ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b01      	cmp	r3, #1
 8001512:	d106      	bne.n	8001522 <HAL_RCC_OscConfig+0x2ea>
 8001514:	4b64      	ldr	r3, [pc, #400]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001518:	4a63      	ldr	r2, [pc, #396]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6713      	str	r3, [r2, #112]	; 0x70
 8001520:	e01c      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b05      	cmp	r3, #5
 8001528:	d10c      	bne.n	8001544 <HAL_RCC_OscConfig+0x30c>
 800152a:	4b5f      	ldr	r3, [pc, #380]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a5e      	ldr	r2, [pc, #376]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	4b5c      	ldr	r3, [pc, #368]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
 8001542:	e00b      	b.n	800155c <HAL_RCC_OscConfig+0x324>
 8001544:	4b58      	ldr	r3, [pc, #352]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001548:	4a57      	ldr	r2, [pc, #348]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800154a:	f023 0301 	bic.w	r3, r3, #1
 800154e:	6713      	str	r3, [r2, #112]	; 0x70
 8001550:	4b55      	ldr	r3, [pc, #340]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a54      	ldr	r2, [pc, #336]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0304 	bic.w	r3, r3, #4
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d015      	beq.n	8001590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001564:	f7ff fbde 	bl	8000d24 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156a:	e00a      	b.n	8001582 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff fbda 	bl	8000d24 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	f241 3288 	movw	r2, #5000	; 0x1388
 800157a:	4293      	cmp	r3, r2
 800157c:	d901      	bls.n	8001582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157e:	2303      	movs	r3, #3
 8001580:	e0cb      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d0ee      	beq.n	800156c <HAL_RCC_OscConfig+0x334>
 800158e:	e014      	b.n	80015ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001590:	f7ff fbc8 	bl	8000d24 <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001596:	e00a      	b.n	80015ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001598:	f7ff fbc4 	bl	8000d24 <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d901      	bls.n	80015ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e0b5      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ae:	4b3e      	ldr	r3, [pc, #248]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d1ee      	bne.n	8001598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ba:	7dfb      	ldrb	r3, [r7, #23]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d105      	bne.n	80015cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c0:	4b39      	ldr	r3, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	4a38      	ldr	r2, [pc, #224]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a1 	beq.w	8001718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 030c 	and.w	r3, r3, #12
 80015de:	2b08      	cmp	r3, #8
 80015e0:	d05c      	beq.n	800169c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b02      	cmp	r3, #2
 80015e8:	d141      	bne.n	800166e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fb98 	bl	8000d24 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f8:	f7ff fb94 	bl	8000d24 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e087      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69da      	ldr	r2, [r3, #28]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	019b      	lsls	r3, r3, #6
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	085b      	lsrs	r3, r3, #1
 800162e:	3b01      	subs	r3, #1
 8001630:	041b      	lsls	r3, r3, #16
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001638:	061b      	lsls	r3, r3, #24
 800163a:	491b      	ldr	r1, [pc, #108]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 800163c:	4313      	orrs	r3, r2
 800163e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001646:	f7ff fb6d 	bl	8000d24 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164e:	f7ff fb69 	bl	8000d24 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e05c      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x416>
 800166c:	e054      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb56 	bl	8000d24 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb52 	bl	8000d24 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e045      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x444>
 800169a:	e03d      	b.n	8001718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d107      	bne.n	80016b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e038      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40007000 	.word	0x40007000
 80016b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <HAL_RCC_OscConfig+0x4ec>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d028      	beq.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d121      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d11a      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e4:	4013      	ands	r3, r2
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d111      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fa:	085b      	lsrs	r3, r3, #1
 80016fc:	3b01      	subs	r3, #1
 80016fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0cc      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b68      	ldr	r3, [pc, #416]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d90c      	bls.n	8001764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b65      	ldr	r3, [pc, #404]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	b2d2      	uxtb	r2, r2
 8001750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001752:	4b63      	ldr	r3, [pc, #396]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	683a      	ldr	r2, [r7, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d001      	beq.n	8001764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e0b8      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0302 	and.w	r3, r3, #2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d020      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0304 	and.w	r3, r3, #4
 8001778:	2b00      	cmp	r3, #0
 800177a:	d005      	beq.n	8001788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800177c:	4b59      	ldr	r3, [pc, #356]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	4a58      	ldr	r2, [pc, #352]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001794:	4b53      	ldr	r3, [pc, #332]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	4a52      	ldr	r2, [pc, #328]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b50      	ldr	r3, [pc, #320]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	494d      	ldr	r1, [pc, #308]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d044      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c6:	4b47      	ldr	r3, [pc, #284]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d119      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e07f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b3f      	ldr	r3, [pc, #252]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e06f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3b      	ldr	r3, [pc, #236]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e067      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b37      	ldr	r3, [pc, #220]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4934      	ldr	r1, [pc, #208]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	4313      	orrs	r3, r2
 8001816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7ff fa84 	bl	8000d24 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fa80 	bl	8000d24 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e04f      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d20c      	bcs.n	8001870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185e:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d001      	beq.n	8001870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e032      	b.n	80018d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0304 	and.w	r3, r3, #4
 8001878:	2b00      	cmp	r3, #0
 800187a:	d008      	beq.n	800188e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800187c:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4916      	ldr	r1, [pc, #88]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	4313      	orrs	r3, r2
 800188c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	d009      	beq.n	80018ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	490e      	ldr	r1, [pc, #56]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ae:	f000 f821 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 80018b2:	4602      	mov	r2, r0
 80018b4:	4b0b      	ldr	r3, [pc, #44]	; (80018e4 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	091b      	lsrs	r3, r3, #4
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	490a      	ldr	r1, [pc, #40]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 80018c0:	5ccb      	ldrb	r3, [r1, r3]
 80018c2:	fa22 f303 	lsr.w	r3, r2, r3
 80018c6:	4a09      	ldr	r2, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7ff f87e 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40023c00 	.word	0x40023c00
 80018e4:	40023800 	.word	0x40023800
 80018e8:	08006a14 	.word	0x08006a14
 80018ec:	20000000 	.word	0x20000000
 80018f0:	20000004 	.word	0x20000004

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b090      	sub	sp, #64	; 0x40
 80018fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001900:	2300      	movs	r3, #0
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001904:	2300      	movs	r3, #0
 8001906:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800190c:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f003 030c 	and.w	r3, r3, #12
 8001914:	2b08      	cmp	r3, #8
 8001916:	d00d      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x40>
 8001918:	2b08      	cmp	r3, #8
 800191a:	f200 80a1 	bhi.w	8001a60 <HAL_RCC_GetSysClockFreq+0x16c>
 800191e:	2b00      	cmp	r3, #0
 8001920:	d002      	beq.n	8001928 <HAL_RCC_GetSysClockFreq+0x34>
 8001922:	2b04      	cmp	r3, #4
 8001924:	d003      	beq.n	800192e <HAL_RCC_GetSysClockFreq+0x3a>
 8001926:	e09b      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001928:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x184>)
 800192a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800192c:	e09b      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192e:	4b53      	ldr	r3, [pc, #332]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001930:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001932:	e098      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001934:	4b4f      	ldr	r3, [pc, #316]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800193c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193e:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d028      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194a:	4b4a      	ldr	r3, [pc, #296]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	099b      	lsrs	r3, r3, #6
 8001950:	2200      	movs	r2, #0
 8001952:	623b      	str	r3, [r7, #32]
 8001954:	627a      	str	r2, [r7, #36]	; 0x24
 8001956:	6a3b      	ldr	r3, [r7, #32]
 8001958:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800195c:	2100      	movs	r1, #0
 800195e:	4b47      	ldr	r3, [pc, #284]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x188>)
 8001960:	fb03 f201 	mul.w	r2, r3, r1
 8001964:	2300      	movs	r3, #0
 8001966:	fb00 f303 	mul.w	r3, r0, r3
 800196a:	4413      	add	r3, r2
 800196c:	4a43      	ldr	r2, [pc, #268]	; (8001a7c <HAL_RCC_GetSysClockFreq+0x188>)
 800196e:	fba0 1202 	umull	r1, r2, r0, r2
 8001972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001974:	460a      	mov	r2, r1
 8001976:	62ba      	str	r2, [r7, #40]	; 0x28
 8001978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197a:	4413      	add	r3, r2
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001980:	2200      	movs	r2, #0
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	61fa      	str	r2, [r7, #28]
 8001986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800198a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800198e:	f7fe fc77 	bl	8000280 <__aeabi_uldivmod>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4613      	mov	r3, r2
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800199a:	e053      	b.n	8001a44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199c:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	099b      	lsrs	r3, r3, #6
 80019a2:	2200      	movs	r2, #0
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	617a      	str	r2, [r7, #20]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019ae:	f04f 0b00 	mov.w	fp, #0
 80019b2:	4652      	mov	r2, sl
 80019b4:	465b      	mov	r3, fp
 80019b6:	f04f 0000 	mov.w	r0, #0
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	0159      	lsls	r1, r3, #5
 80019c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c4:	0150      	lsls	r0, r2, #5
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	ebb2 080a 	subs.w	r8, r2, sl
 80019ce:	eb63 090b 	sbc.w	r9, r3, fp
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019e6:	ebb2 0408 	subs.w	r4, r2, r8
 80019ea:	eb63 0509 	sbc.w	r5, r3, r9
 80019ee:	f04f 0200 	mov.w	r2, #0
 80019f2:	f04f 0300 	mov.w	r3, #0
 80019f6:	00eb      	lsls	r3, r5, #3
 80019f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019fc:	00e2      	lsls	r2, r4, #3
 80019fe:	4614      	mov	r4, r2
 8001a00:	461d      	mov	r5, r3
 8001a02:	eb14 030a 	adds.w	r3, r4, sl
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	eb45 030b 	adc.w	r3, r5, fp
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	f04f 0200 	mov.w	r2, #0
 8001a12:	f04f 0300 	mov.w	r3, #0
 8001a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	028b      	lsls	r3, r1, #10
 8001a1e:	4621      	mov	r1, r4
 8001a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a24:	4621      	mov	r1, r4
 8001a26:	028a      	lsls	r2, r1, #10
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2e:	2200      	movs	r2, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	60fa      	str	r2, [r7, #12]
 8001a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a38:	f7fe fc22 	bl	8000280 <__aeabi_uldivmod>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4613      	mov	r3, r2
 8001a42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a44:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	0c1b      	lsrs	r3, r3, #16
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	3301      	adds	r3, #1
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a5e:	e002      	b.n	8001a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3740      	adds	r7, #64	; 0x40
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	00f42400 	.word	0x00f42400
 8001a7c:	017d7840 	.word	0x017d7840

08001a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000000 	.word	0x20000000

08001a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a9c:	f7ff fff0 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	0a9b      	lsrs	r3, r3, #10
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	4903      	ldr	r1, [pc, #12]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aae:	5ccb      	ldrb	r3, [r1, r3]
 8001ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	08006a24 	.word	0x08006a24

08001ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac4:	f7ff ffdc 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	0b5b      	lsrs	r3, r3, #13
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	4903      	ldr	r1, [pc, #12]	; (8001ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad6:	5ccb      	ldrb	r3, [r1, r3]
 8001ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	08006a24 	.word	0x08006a24

08001ae8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	220f      	movs	r2, #15
 8001af6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_RCC_GetClockConfig+0x5c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f003 0203 	and.w	r2, r3, #3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_RCC_GetClockConfig+0x5c>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_RCC_GetClockConfig+0x5c>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b2a:	4b07      	ldr	r3, [pc, #28]	; (8001b48 <HAL_RCC_GetClockConfig+0x60>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0207 	and.w	r2, r3, #7
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	601a      	str	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	40023c00 	.word	0x40023c00

08001b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e041      	b.n	8001be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d106      	bne.n	8001b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f839 	bl	8001bea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3304      	adds	r3, #4
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	f000 f9d8 	bl	8001f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b083      	sub	sp, #12
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
	...

08001c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d001      	beq.n	8001c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e04e      	b.n	8001cb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2202      	movs	r2, #2
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d022      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c42:	d01d      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a1f      	ldr	r2, [pc, #124]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d018      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <HAL_TIM_Base_Start_IT+0xcc>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d013      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a1c      	ldr	r2, [pc, #112]	; (8001cd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d00e      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d009      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d004      	beq.n	8001c80 <HAL_TIM_Base_Start_IT+0x80>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a18      	ldr	r2, [pc, #96]	; (8001cdc <HAL_TIM_Base_Start_IT+0xdc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d111      	bne.n	8001ca4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2b06      	cmp	r3, #6
 8001c90:	d010      	beq.n	8001cb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f042 0201 	orr.w	r2, r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca2:	e007      	b.n	8001cb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	40000400 	.word	0x40000400
 8001ccc:	40000800 	.word	0x40000800
 8001cd0:	40000c00 	.word	0x40000c00
 8001cd4:	40010400 	.word	0x40010400
 8001cd8:	40014000 	.word	0x40014000
 8001cdc:	40001800 	.word	0x40001800

08001ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d122      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d11b      	bne.n	8001d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f06f 0202 	mvn.w	r2, #2
 8001d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d003      	beq.n	8001d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f8ee 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001d28:	e005      	b.n	8001d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f000 f8e0 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f8f1 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	2b04      	cmp	r3, #4
 8001d48:	d122      	bne.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d11b      	bne.n	8001d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f06f 0204 	mvn.w	r2, #4
 8001d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2202      	movs	r2, #2
 8001d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8c4 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001d7c:	e005      	b.n	8001d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 f8b6 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f000 f8c7 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	f003 0308 	and.w	r3, r3, #8
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d122      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	f003 0308 	and.w	r3, r3, #8
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d11b      	bne.n	8001de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f06f 0208 	mvn.w	r2, #8
 8001db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f89a 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001dd0:	e005      	b.n	8001dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f88c 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f89d 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b10      	cmp	r3, #16
 8001df0:	d122      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b10      	cmp	r3, #16
 8001dfe:	d11b      	bne.n	8001e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f06f 0210 	mvn.w	r2, #16
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	69db      	ldr	r3, [r3, #28]
 8001e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d003      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f870 	bl	8001f04 <HAL_TIM_IC_CaptureCallback>
 8001e24:	e005      	b.n	8001e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 f862 	bl	8001ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2c:	6878      	ldr	r0, [r7, #4]
 8001e2e:	f000 f873 	bl	8001f18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	691b      	ldr	r3, [r3, #16]
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d107      	bne.n	8001e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f06f 0201 	mvn.w	r2, #1
 8001e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fd2e 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6e:	2b80      	cmp	r3, #128	; 0x80
 8001e70:	d10e      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7c:	2b80      	cmp	r3, #128	; 0x80
 8001e7e:	d107      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f902 	bl	8002094 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691b      	ldr	r3, [r3, #16]
 8001e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e9a:	2b40      	cmp	r3, #64	; 0x40
 8001e9c:	d10e      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea8:	2b40      	cmp	r3, #64	; 0x40
 8001eaa:	d107      	bne.n	8001ebc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 f838 	bl	8001f2c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0320 	and.w	r3, r3, #32
 8001ec6:	2b20      	cmp	r3, #32
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0320 	and.w	r3, r3, #32
 8001ed4:	2b20      	cmp	r3, #32
 8001ed6:	d107      	bne.n	8001ee8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f06f 0220 	mvn.w	r2, #32
 8001ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8cc 	bl	8002080 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a40      	ldr	r2, [pc, #256]	; (8002054 <TIM_Base_SetConfig+0x114>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d013      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5e:	d00f      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3d      	ldr	r2, [pc, #244]	; (8002058 <TIM_Base_SetConfig+0x118>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d00b      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	4a3c      	ldr	r2, [pc, #240]	; (800205c <TIM_Base_SetConfig+0x11c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d007      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4a3b      	ldr	r2, [pc, #236]	; (8002060 <TIM_Base_SetConfig+0x120>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d003      	beq.n	8001f80 <TIM_Base_SetConfig+0x40>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <TIM_Base_SetConfig+0x124>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d108      	bne.n	8001f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <TIM_Base_SetConfig+0x114>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d02b      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa0:	d027      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a2c      	ldr	r2, [pc, #176]	; (8002058 <TIM_Base_SetConfig+0x118>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d023      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a2b      	ldr	r2, [pc, #172]	; (800205c <TIM_Base_SetConfig+0x11c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01f      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a2a      	ldr	r2, [pc, #168]	; (8002060 <TIM_Base_SetConfig+0x120>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01b      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a29      	ldr	r2, [pc, #164]	; (8002064 <TIM_Base_SetConfig+0x124>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d017      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a28      	ldr	r2, [pc, #160]	; (8002068 <TIM_Base_SetConfig+0x128>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a27      	ldr	r2, [pc, #156]	; (800206c <TIM_Base_SetConfig+0x12c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00f      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a26      	ldr	r2, [pc, #152]	; (8002070 <TIM_Base_SetConfig+0x130>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00b      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	; (8002074 <TIM_Base_SetConfig+0x134>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d007      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <TIM_Base_SetConfig+0x138>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d003      	beq.n	8001ff2 <TIM_Base_SetConfig+0xb2>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a23      	ldr	r2, [pc, #140]	; (800207c <TIM_Base_SetConfig+0x13c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d108      	bne.n	8002004 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4313      	orrs	r3, r2
 8002002:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a0a      	ldr	r2, [pc, #40]	; (8002054 <TIM_Base_SetConfig+0x114>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d003      	beq.n	8002038 <TIM_Base_SetConfig+0xf8>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <TIM_Base_SetConfig+0x124>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d103      	bne.n	8002040 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	691a      	ldr	r2, [r3, #16]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	615a      	str	r2, [r3, #20]
}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40010000 	.word	0x40010000
 8002058:	40000400 	.word	0x40000400
 800205c:	40000800 	.word	0x40000800
 8002060:	40000c00 	.word	0x40000c00
 8002064:	40010400 	.word	0x40010400
 8002068:	40014000 	.word	0x40014000
 800206c:	40014400 	.word	0x40014400
 8002070:	40014800 	.word	0x40014800
 8002074:	40001800 	.word	0x40001800
 8002078:	40001c00 	.word	0x40001c00
 800207c:	40002000 	.word	0x40002000

08002080 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e03f      	b.n	800213a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d106      	bne.n	80020d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fc36 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2224      	movs	r2, #36	; 0x24
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68da      	ldr	r2, [r3, #12]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f929 	bl	8002344 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002100:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695a      	ldr	r2, [r3, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002110:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002120:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2220      	movs	r2, #32
 8002134:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b08a      	sub	sp, #40	; 0x28
 8002146:	af02      	add	r7, sp, #8
 8002148:	60f8      	str	r0, [r7, #12]
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4613      	mov	r3, r2
 8002150:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b20      	cmp	r3, #32
 8002160:	d17c      	bne.n	800225c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_UART_Transmit+0x2c>
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e075      	b.n	800225e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002178:	2b01      	cmp	r3, #1
 800217a:	d101      	bne.n	8002180 <HAL_UART_Transmit+0x3e>
 800217c:	2302      	movs	r3, #2
 800217e:	e06e      	b.n	800225e <HAL_UART_Transmit+0x11c>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2221      	movs	r2, #33	; 0x21
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002196:	f7fe fdc5 	bl	8000d24 <HAL_GetTick>
 800219a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	88fa      	ldrh	r2, [r7, #6]
 80021a0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	88fa      	ldrh	r2, [r7, #6]
 80021a6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b0:	d108      	bne.n	80021c4 <HAL_UART_Transmit+0x82>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d104      	bne.n	80021c4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	61bb      	str	r3, [r7, #24]
 80021c2:	e003      	b.n	80021cc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021d4:	e02a      	b.n	800222c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2200      	movs	r2, #0
 80021de:	2180      	movs	r1, #128	; 0x80
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 f840 	bl	8002266 <UART_WaitOnFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e036      	b.n	800225e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10b      	bne.n	800220e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	881b      	ldrh	r3, [r3, #0]
 80021fa:	461a      	mov	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002204:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	3302      	adds	r3, #2
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e007      	b.n	800221e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	781a      	ldrb	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	3301      	adds	r3, #1
 800221c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1cf      	bne.n	80021d6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	2200      	movs	r2, #0
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	f000 f810 	bl	8002266 <UART_WaitOnFlagUntilTimeout>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e006      	b.n	800225e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2220      	movs	r2, #32
 8002254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	e000      	b.n	800225e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800225c:	2302      	movs	r3, #2
  }
}
 800225e:	4618      	mov	r0, r3
 8002260:	3720      	adds	r7, #32
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b090      	sub	sp, #64	; 0x40
 800226a:	af00      	add	r7, sp, #0
 800226c:	60f8      	str	r0, [r7, #12]
 800226e:	60b9      	str	r1, [r7, #8]
 8002270:	603b      	str	r3, [r7, #0]
 8002272:	4613      	mov	r3, r2
 8002274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002276:	e050      	b.n	800231a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227e:	d04c      	beq.n	800231a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002280:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002282:	2b00      	cmp	r3, #0
 8002284:	d007      	beq.n	8002296 <UART_WaitOnFlagUntilTimeout+0x30>
 8002286:	f7fe fd4d 	bl	8000d24 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002292:	429a      	cmp	r2, r3
 8002294:	d241      	bcs.n	800231a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	330c      	adds	r3, #12
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	e853 3f00 	ldrex	r3, [r3]
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	330c      	adds	r3, #12
 80022b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022b6:	637a      	str	r2, [r7, #52]	; 0x34
 80022b8:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022be:	e841 2300 	strex	r3, r2, [r1]
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e5      	bne.n	8002296 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3314      	adds	r3, #20
 80022d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	e853 3f00 	ldrex	r3, [r3]
 80022d8:	613b      	str	r3, [r7, #16]
   return(result);
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3314      	adds	r3, #20
 80022e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022ea:	623a      	str	r2, [r7, #32]
 80022ec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ee:	69f9      	ldr	r1, [r7, #28]
 80022f0:	6a3a      	ldr	r2, [r7, #32]
 80022f2:	e841 2300 	strex	r3, r2, [r1]
 80022f6:	61bb      	str	r3, [r7, #24]
   return(result);
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1e5      	bne.n	80022ca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e00f      	b.n	800233a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	4013      	ands	r3, r2
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	429a      	cmp	r2, r3
 8002328:	bf0c      	ite	eq
 800232a:	2301      	moveq	r3, #1
 800232c:	2300      	movne	r3, #0
 800232e:	b2db      	uxtb	r3, r3
 8002330:	461a      	mov	r2, r3
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	429a      	cmp	r2, r3
 8002336:	d09f      	beq.n	8002278 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3740      	adds	r7, #64	; 0x40
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
	...

08002344 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002348:	b0c0      	sub	sp, #256	; 0x100
 800234a:	af00      	add	r7, sp, #0
 800234c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800235c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002360:	68d9      	ldr	r1, [r3, #12]
 8002362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	ea40 0301 	orr.w	r3, r0, r1
 800236c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800236e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	431a      	orrs	r2, r3
 800237c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	431a      	orrs	r2, r3
 8002384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4313      	orrs	r3, r2
 800238c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800239c:	f021 010c 	bic.w	r1, r1, #12
 80023a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023aa:	430b      	orrs	r3, r1
 80023ac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023be:	6999      	ldr	r1, [r3, #24]
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	ea40 0301 	orr.w	r3, r0, r1
 80023ca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b8f      	ldr	r3, [pc, #572]	; (8002610 <UART_SetConfig+0x2cc>)
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d005      	beq.n	80023e4 <UART_SetConfig+0xa0>
 80023d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b8d      	ldr	r3, [pc, #564]	; (8002614 <UART_SetConfig+0x2d0>)
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d104      	bne.n	80023ee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023e4:	f7ff fb6c 	bl	8001ac0 <HAL_RCC_GetPCLK2Freq>
 80023e8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023ec:	e003      	b.n	80023f6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023ee:	f7ff fb53 	bl	8001a98 <HAL_RCC_GetPCLK1Freq>
 80023f2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023fa:	69db      	ldr	r3, [r3, #28]
 80023fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002400:	f040 810c 	bne.w	800261c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002408:	2200      	movs	r2, #0
 800240a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800240e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002412:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002416:	4622      	mov	r2, r4
 8002418:	462b      	mov	r3, r5
 800241a:	1891      	adds	r1, r2, r2
 800241c:	65b9      	str	r1, [r7, #88]	; 0x58
 800241e:	415b      	adcs	r3, r3
 8002420:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002422:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002426:	4621      	mov	r1, r4
 8002428:	eb12 0801 	adds.w	r8, r2, r1
 800242c:	4629      	mov	r1, r5
 800242e:	eb43 0901 	adc.w	r9, r3, r1
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	f04f 0300 	mov.w	r3, #0
 800243a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800243e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002442:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002446:	4690      	mov	r8, r2
 8002448:	4699      	mov	r9, r3
 800244a:	4623      	mov	r3, r4
 800244c:	eb18 0303 	adds.w	r3, r8, r3
 8002450:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002454:	462b      	mov	r3, r5
 8002456:	eb49 0303 	adc.w	r3, r9, r3
 800245a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800245e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800246a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800246e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002472:	460b      	mov	r3, r1
 8002474:	18db      	adds	r3, r3, r3
 8002476:	653b      	str	r3, [r7, #80]	; 0x50
 8002478:	4613      	mov	r3, r2
 800247a:	eb42 0303 	adc.w	r3, r2, r3
 800247e:	657b      	str	r3, [r7, #84]	; 0x54
 8002480:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002484:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002488:	f7fd fefa 	bl	8000280 <__aeabi_uldivmod>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4b61      	ldr	r3, [pc, #388]	; (8002618 <UART_SetConfig+0x2d4>)
 8002492:	fba3 2302 	umull	r2, r3, r3, r2
 8002496:	095b      	lsrs	r3, r3, #5
 8002498:	011c      	lsls	r4, r3, #4
 800249a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800249e:	2200      	movs	r2, #0
 80024a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024a4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024a8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024ac:	4642      	mov	r2, r8
 80024ae:	464b      	mov	r3, r9
 80024b0:	1891      	adds	r1, r2, r2
 80024b2:	64b9      	str	r1, [r7, #72]	; 0x48
 80024b4:	415b      	adcs	r3, r3
 80024b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024bc:	4641      	mov	r1, r8
 80024be:	eb12 0a01 	adds.w	sl, r2, r1
 80024c2:	4649      	mov	r1, r9
 80024c4:	eb43 0b01 	adc.w	fp, r3, r1
 80024c8:	f04f 0200 	mov.w	r2, #0
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024d4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024d8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024dc:	4692      	mov	sl, r2
 80024de:	469b      	mov	fp, r3
 80024e0:	4643      	mov	r3, r8
 80024e2:	eb1a 0303 	adds.w	r3, sl, r3
 80024e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024ea:	464b      	mov	r3, r9
 80024ec:	eb4b 0303 	adc.w	r3, fp, r3
 80024f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002500:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002504:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002508:	460b      	mov	r3, r1
 800250a:	18db      	adds	r3, r3, r3
 800250c:	643b      	str	r3, [r7, #64]	; 0x40
 800250e:	4613      	mov	r3, r2
 8002510:	eb42 0303 	adc.w	r3, r2, r3
 8002514:	647b      	str	r3, [r7, #68]	; 0x44
 8002516:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800251a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800251e:	f7fd feaf 	bl	8000280 <__aeabi_uldivmod>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4611      	mov	r1, r2
 8002528:	4b3b      	ldr	r3, [pc, #236]	; (8002618 <UART_SetConfig+0x2d4>)
 800252a:	fba3 2301 	umull	r2, r3, r3, r1
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	2264      	movs	r2, #100	; 0x64
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	1acb      	subs	r3, r1, r3
 8002538:	00db      	lsls	r3, r3, #3
 800253a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800253e:	4b36      	ldr	r3, [pc, #216]	; (8002618 <UART_SetConfig+0x2d4>)
 8002540:	fba3 2302 	umull	r2, r3, r3, r2
 8002544:	095b      	lsrs	r3, r3, #5
 8002546:	005b      	lsls	r3, r3, #1
 8002548:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800254c:	441c      	add	r4, r3
 800254e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002552:	2200      	movs	r2, #0
 8002554:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002558:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800255c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002560:	4642      	mov	r2, r8
 8002562:	464b      	mov	r3, r9
 8002564:	1891      	adds	r1, r2, r2
 8002566:	63b9      	str	r1, [r7, #56]	; 0x38
 8002568:	415b      	adcs	r3, r3
 800256a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800256c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002570:	4641      	mov	r1, r8
 8002572:	1851      	adds	r1, r2, r1
 8002574:	6339      	str	r1, [r7, #48]	; 0x30
 8002576:	4649      	mov	r1, r9
 8002578:	414b      	adcs	r3, r1
 800257a:	637b      	str	r3, [r7, #52]	; 0x34
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002588:	4659      	mov	r1, fp
 800258a:	00cb      	lsls	r3, r1, #3
 800258c:	4651      	mov	r1, sl
 800258e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002592:	4651      	mov	r1, sl
 8002594:	00ca      	lsls	r2, r1, #3
 8002596:	4610      	mov	r0, r2
 8002598:	4619      	mov	r1, r3
 800259a:	4603      	mov	r3, r0
 800259c:	4642      	mov	r2, r8
 800259e:	189b      	adds	r3, r3, r2
 80025a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025a4:	464b      	mov	r3, r9
 80025a6:	460a      	mov	r2, r1
 80025a8:	eb42 0303 	adc.w	r3, r2, r3
 80025ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025bc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025c4:	460b      	mov	r3, r1
 80025c6:	18db      	adds	r3, r3, r3
 80025c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80025ca:	4613      	mov	r3, r2
 80025cc:	eb42 0303 	adc.w	r3, r2, r3
 80025d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025d6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025da:	f7fd fe51 	bl	8000280 <__aeabi_uldivmod>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <UART_SetConfig+0x2d4>)
 80025e4:	fba3 1302 	umull	r1, r3, r3, r2
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	2164      	movs	r1, #100	; 0x64
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	3332      	adds	r3, #50	; 0x32
 80025f6:	4a08      	ldr	r2, [pc, #32]	; (8002618 <UART_SetConfig+0x2d4>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	095b      	lsrs	r3, r3, #5
 80025fe:	f003 0207 	and.w	r2, r3, #7
 8002602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4422      	add	r2, r4
 800260a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800260c:	e105      	b.n	800281a <UART_SetConfig+0x4d6>
 800260e:	bf00      	nop
 8002610:	40011000 	.word	0x40011000
 8002614:	40011400 	.word	0x40011400
 8002618:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800261c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002620:	2200      	movs	r2, #0
 8002622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002626:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800262a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800262e:	4642      	mov	r2, r8
 8002630:	464b      	mov	r3, r9
 8002632:	1891      	adds	r1, r2, r2
 8002634:	6239      	str	r1, [r7, #32]
 8002636:	415b      	adcs	r3, r3
 8002638:	627b      	str	r3, [r7, #36]	; 0x24
 800263a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800263e:	4641      	mov	r1, r8
 8002640:	1854      	adds	r4, r2, r1
 8002642:	4649      	mov	r1, r9
 8002644:	eb43 0501 	adc.w	r5, r3, r1
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	f04f 0300 	mov.w	r3, #0
 8002650:	00eb      	lsls	r3, r5, #3
 8002652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002656:	00e2      	lsls	r2, r4, #3
 8002658:	4614      	mov	r4, r2
 800265a:	461d      	mov	r5, r3
 800265c:	4643      	mov	r3, r8
 800265e:	18e3      	adds	r3, r4, r3
 8002660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002664:	464b      	mov	r3, r9
 8002666:	eb45 0303 	adc.w	r3, r5, r3
 800266a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800266e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800267a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	f04f 0300 	mov.w	r3, #0
 8002686:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800268a:	4629      	mov	r1, r5
 800268c:	008b      	lsls	r3, r1, #2
 800268e:	4621      	mov	r1, r4
 8002690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002694:	4621      	mov	r1, r4
 8002696:	008a      	lsls	r2, r1, #2
 8002698:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800269c:	f7fd fdf0 	bl	8000280 <__aeabi_uldivmod>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4b60      	ldr	r3, [pc, #384]	; (8002828 <UART_SetConfig+0x4e4>)
 80026a6:	fba3 2302 	umull	r2, r3, r3, r2
 80026aa:	095b      	lsrs	r3, r3, #5
 80026ac:	011c      	lsls	r4, r3, #4
 80026ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026b2:	2200      	movs	r2, #0
 80026b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026b8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026c0:	4642      	mov	r2, r8
 80026c2:	464b      	mov	r3, r9
 80026c4:	1891      	adds	r1, r2, r2
 80026c6:	61b9      	str	r1, [r7, #24]
 80026c8:	415b      	adcs	r3, r3
 80026ca:	61fb      	str	r3, [r7, #28]
 80026cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026d0:	4641      	mov	r1, r8
 80026d2:	1851      	adds	r1, r2, r1
 80026d4:	6139      	str	r1, [r7, #16]
 80026d6:	4649      	mov	r1, r9
 80026d8:	414b      	adcs	r3, r1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026e8:	4659      	mov	r1, fp
 80026ea:	00cb      	lsls	r3, r1, #3
 80026ec:	4651      	mov	r1, sl
 80026ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026f2:	4651      	mov	r1, sl
 80026f4:	00ca      	lsls	r2, r1, #3
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	4603      	mov	r3, r0
 80026fc:	4642      	mov	r2, r8
 80026fe:	189b      	adds	r3, r3, r2
 8002700:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002704:	464b      	mov	r3, r9
 8002706:	460a      	mov	r2, r1
 8002708:	eb42 0303 	adc.w	r3, r2, r3
 800270c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	67bb      	str	r3, [r7, #120]	; 0x78
 800271a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800271c:	f04f 0200 	mov.w	r2, #0
 8002720:	f04f 0300 	mov.w	r3, #0
 8002724:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002728:	4649      	mov	r1, r9
 800272a:	008b      	lsls	r3, r1, #2
 800272c:	4641      	mov	r1, r8
 800272e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002732:	4641      	mov	r1, r8
 8002734:	008a      	lsls	r2, r1, #2
 8002736:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800273a:	f7fd fda1 	bl	8000280 <__aeabi_uldivmod>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	4b39      	ldr	r3, [pc, #228]	; (8002828 <UART_SetConfig+0x4e4>)
 8002744:	fba3 1302 	umull	r1, r3, r3, r2
 8002748:	095b      	lsrs	r3, r3, #5
 800274a:	2164      	movs	r1, #100	; 0x64
 800274c:	fb01 f303 	mul.w	r3, r1, r3
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	3332      	adds	r3, #50	; 0x32
 8002756:	4a34      	ldr	r2, [pc, #208]	; (8002828 <UART_SetConfig+0x4e4>)
 8002758:	fba2 2303 	umull	r2, r3, r2, r3
 800275c:	095b      	lsrs	r3, r3, #5
 800275e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002762:	441c      	add	r4, r3
 8002764:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002768:	2200      	movs	r2, #0
 800276a:	673b      	str	r3, [r7, #112]	; 0x70
 800276c:	677a      	str	r2, [r7, #116]	; 0x74
 800276e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002772:	4642      	mov	r2, r8
 8002774:	464b      	mov	r3, r9
 8002776:	1891      	adds	r1, r2, r2
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	415b      	adcs	r3, r3
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002782:	4641      	mov	r1, r8
 8002784:	1851      	adds	r1, r2, r1
 8002786:	6039      	str	r1, [r7, #0]
 8002788:	4649      	mov	r1, r9
 800278a:	414b      	adcs	r3, r1
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800279a:	4659      	mov	r1, fp
 800279c:	00cb      	lsls	r3, r1, #3
 800279e:	4651      	mov	r1, sl
 80027a0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a4:	4651      	mov	r1, sl
 80027a6:	00ca      	lsls	r2, r1, #3
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	4603      	mov	r3, r0
 80027ae:	4642      	mov	r2, r8
 80027b0:	189b      	adds	r3, r3, r2
 80027b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80027b4:	464b      	mov	r3, r9
 80027b6:	460a      	mov	r2, r1
 80027b8:	eb42 0303 	adc.w	r3, r2, r3
 80027bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	663b      	str	r3, [r7, #96]	; 0x60
 80027c8:	667a      	str	r2, [r7, #100]	; 0x64
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027d6:	4649      	mov	r1, r9
 80027d8:	008b      	lsls	r3, r1, #2
 80027da:	4641      	mov	r1, r8
 80027dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027e0:	4641      	mov	r1, r8
 80027e2:	008a      	lsls	r2, r1, #2
 80027e4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027e8:	f7fd fd4a 	bl	8000280 <__aeabi_uldivmod>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4b0d      	ldr	r3, [pc, #52]	; (8002828 <UART_SetConfig+0x4e4>)
 80027f2:	fba3 1302 	umull	r1, r3, r3, r2
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2164      	movs	r1, #100	; 0x64
 80027fa:	fb01 f303 	mul.w	r3, r1, r3
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	3332      	adds	r3, #50	; 0x32
 8002804:	4a08      	ldr	r2, [pc, #32]	; (8002828 <UART_SetConfig+0x4e4>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4422      	add	r2, r4
 8002818:	609a      	str	r2, [r3, #8]
}
 800281a:	bf00      	nop
 800281c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002820:	46bd      	mov	sp, r7
 8002822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002826:	bf00      	nop
 8002828:	51eb851f 	.word	0x51eb851f

0800282c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f103 0208 	add.w	r2, r3, #8
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f103 0208 	add.w	r2, r3, #8
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f103 0208 	add.w	r2, r3, #8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800287a:	bf00      	nop
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr

08002886 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002886:	b480      	push	{r7}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
 800288e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289c:	d103      	bne.n	80028a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	e00c      	b.n	80028c0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3308      	adds	r3, #8
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e002      	b.n	80028b4 <vListInsert+0x2e>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d2f6      	bcs.n	80028ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	601a      	str	r2, [r3, #0]
}
 80028ec:	bf00      	nop
 80028ee:	3714      	adds	r7, #20
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6892      	ldr	r2, [r2, #8]
 800290e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6852      	ldr	r2, [r2, #4]
 8002918:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	d103      	bne.n	800292c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	1e5a      	subs	r2, r3, #1
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002956:	2301      	movs	r3, #1
 8002958:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002976:	bf00      	nop
 8002978:	e7fe      	b.n	8002978 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d05d      	beq.n	8002a3c <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002984:	2b00      	cmp	r3, #0
 8002986:	d059      	beq.n	8002a3c <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002990:	2100      	movs	r1, #0
 8002992:	fba3 2302 	umull	r2, r3, r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d000      	beq.n	800299c <xQueueGenericReset+0x50>
 800299a:	2101      	movs	r1, #1
 800299c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d14c      	bne.n	8002a3c <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80029a2:	f002 fad1 	bl	8004f48 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ae:	6939      	ldr	r1, [r7, #16]
 80029b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029b2:	fb01 f303 	mul.w	r3, r1, r3
 80029b6:	441a      	add	r2, r3
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	2200      	movs	r2, #0
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	3b01      	subs	r3, #1
 80029d4:	6939      	ldr	r1, [r7, #16]
 80029d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d8:	fb01 f303 	mul.w	r3, r1, r3
 80029dc:	441a      	add	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	22ff      	movs	r2, #255	; 0xff
 80029e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	22ff      	movs	r2, #255	; 0xff
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d114      	bne.n	8002a22 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01a      	beq.n	8002a36 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	3310      	adds	r3, #16
 8002a04:	4618      	mov	r0, r3
 8002a06:	f001 fa2f 	bl	8003e68 <xTaskRemoveFromEventList>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d012      	beq.n	8002a36 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a10:	4b15      	ldr	r3, [pc, #84]	; (8002a68 <xQueueGenericReset+0x11c>)
 8002a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	f3bf 8f4f 	dsb	sy
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	e009      	b.n	8002a36 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	3310      	adds	r3, #16
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff ff00 	bl	800282c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	3324      	adds	r3, #36	; 0x24
 8002a30:	4618      	mov	r0, r3
 8002a32:	f7ff fefb 	bl	800282c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002a36:	f002 fab7 	bl	8004fa8 <vPortExitCritical>
 8002a3a:	e001      	b.n	8002a40 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10a      	bne.n	8002a5c <xQueueGenericReset+0x110>
        __asm volatile
 8002a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4a:	f383 8811 	msr	BASEPRI, r3
 8002a4e:	f3bf 8f6f 	isb	sy
 8002a52:	f3bf 8f4f 	dsb	sy
 8002a56:	60bb      	str	r3, [r7, #8]
    }
 8002a58:	bf00      	nop
 8002a5a:	e7fe      	b.n	8002a5a <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002a5c:	697b      	ldr	r3, [r7, #20]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	e000ed04 	.word	0xe000ed04

08002a6c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b08a      	sub	sp, #40	; 0x28
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	4613      	mov	r3, r2
 8002a78:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d02e      	beq.n	8002ae2 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a84:	2100      	movs	r1, #0
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d000      	beq.n	8002a94 <xQueueGenericCreate+0x28>
 8002a92:	2101      	movs	r1, #1
 8002a94:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d123      	bne.n	8002ae2 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002aa2:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002aa6:	d81c      	bhi.n	8002ae2 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	fb02 f303 	mul.w	r3, r2, r3
 8002ab0:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	3350      	adds	r3, #80	; 0x50
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f002 fb28 	bl	800510c <pvPortMalloc>
 8002abc:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01c      	beq.n	8002afe <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3350      	adds	r3, #80	; 0x50
 8002acc:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002ace:	79fa      	ldrb	r2, [r7, #7]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	68b9      	ldr	r1, [r7, #8]
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 f814 	bl	8002b08 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002ae0:	e00d      	b.n	8002afe <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d10a      	bne.n	8002afe <xQueueGenericCreate+0x92>
        __asm volatile
 8002ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aec:	f383 8811 	msr	BASEPRI, r3
 8002af0:	f3bf 8f6f 	isb	sy
 8002af4:	f3bf 8f4f 	dsb	sy
 8002af8:	613b      	str	r3, [r7, #16]
    }
 8002afa:	bf00      	nop
 8002afc:	e7fe      	b.n	8002afc <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002afe:	69fb      	ldr	r3, [r7, #28]
    }
 8002b00:	4618      	mov	r0, r3
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d103      	bne.n	8002b24 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	601a      	str	r2, [r3, #0]
 8002b22:	e002      	b.n	8002b2a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b36:	2101      	movs	r1, #1
 8002b38:	69b8      	ldr	r0, [r7, #24]
 8002b3a:	f7ff ff07 	bl	800294c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002b46:	bf00      	nop
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
	...

08002b50 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b08e      	sub	sp, #56	; 0x38
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
 8002b5c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10a      	bne.n	8002b82 <xQueueGenericSend+0x32>
        __asm volatile
 8002b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b70:	f383 8811 	msr	BASEPRI, r3
 8002b74:	f3bf 8f6f 	isb	sy
 8002b78:	f3bf 8f4f 	dsb	sy
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002b7e:	bf00      	nop
 8002b80:	e7fe      	b.n	8002b80 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <xQueueGenericSend+0x40>
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d101      	bne.n	8002b94 <xQueueGenericSend+0x44>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <xQueueGenericSend+0x46>
 8002b94:	2300      	movs	r3, #0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10a      	bne.n	8002bb0 <xQueueGenericSend+0x60>
        __asm volatile
 8002b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002bac:	bf00      	nop
 8002bae:	e7fe      	b.n	8002bae <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d103      	bne.n	8002bbe <xQueueGenericSend+0x6e>
 8002bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <xQueueGenericSend+0x72>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <xQueueGenericSend+0x74>
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d10a      	bne.n	8002bde <xQueueGenericSend+0x8e>
        __asm volatile
 8002bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bcc:	f383 8811 	msr	BASEPRI, r3
 8002bd0:	f3bf 8f6f 	isb	sy
 8002bd4:	f3bf 8f4f 	dsb	sy
 8002bd8:	623b      	str	r3, [r7, #32]
    }
 8002bda:	bf00      	nop
 8002bdc:	e7fe      	b.n	8002bdc <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bde:	f001 fb53 	bl	8004288 <xTaskGetSchedulerState>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <xQueueGenericSend+0x9e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <xQueueGenericSend+0xa2>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <xQueueGenericSend+0xa4>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <xQueueGenericSend+0xbe>
        __asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	61fb      	str	r3, [r7, #28]
    }
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c0e:	f002 f99b 	bl	8004f48 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d302      	bcc.n	8002c24 <xQueueGenericSend+0xd4>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d129      	bne.n	8002c78 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	68b9      	ldr	r1, [r7, #8]
 8002c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c2a:	f000 fa93 	bl	8003154 <prvCopyDataToQueue>
 8002c2e:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d010      	beq.n	8002c5a <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3a:	3324      	adds	r3, #36	; 0x24
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f001 f913 	bl	8003e68 <xTaskRemoveFromEventList>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d013      	beq.n	8002c70 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002c48:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <xQueueGenericSend+0x1f8>)
 8002c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	f3bf 8f6f 	isb	sy
 8002c58:	e00a      	b.n	8002c70 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d007      	beq.n	8002c70 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002c60:	4b39      	ldr	r3, [pc, #228]	; (8002d48 <xQueueGenericSend+0x1f8>)
 8002c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002c70:	f002 f99a 	bl	8004fa8 <vPortExitCritical>
                return pdPASS;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e063      	b.n	8002d40 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d103      	bne.n	8002c86 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c7e:	f002 f993 	bl	8004fa8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	e05c      	b.n	8002d40 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d106      	bne.n	8002c9a <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c8c:	f107 0314 	add.w	r3, r7, #20
 8002c90:	4618      	mov	r0, r3
 8002c92:	f001 f9bf 	bl	8004014 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c9a:	f002 f985 	bl	8004fa8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c9e:	f000 fded 	bl	800387c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ca2:	f002 f951 	bl	8004f48 <vPortEnterCritical>
 8002ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cac:	b25b      	sxtb	r3, r3
 8002cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb2:	d103      	bne.n	8002cbc <xQueueGenericSend+0x16c>
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d103      	bne.n	8002cd2 <xQueueGenericSend+0x182>
 8002cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cd2:	f002 f969 	bl	8004fa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cd6:	1d3a      	adds	r2, r7, #4
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	4611      	mov	r1, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 f9ae 	bl	8004040 <xTaskCheckForTimeOut>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d124      	bne.n	8002d34 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cec:	f000 fb2a 	bl	8003344 <prvIsQueueFull>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d018      	beq.n	8002d28 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	3310      	adds	r3, #16
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 f848 	bl	8003d94 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d06:	f000 fab5 	bl	8003274 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002d0a:	f000 fdc5 	bl	8003898 <xTaskResumeAll>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af7c 	bne.w	8002c0e <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002d16:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <xQueueGenericSend+0x1f8>)
 8002d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	f3bf 8f4f 	dsb	sy
 8002d22:	f3bf 8f6f 	isb	sy
 8002d26:	e772      	b.n	8002c0e <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d2a:	f000 faa3 	bl	8003274 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d2e:	f000 fdb3 	bl	8003898 <xTaskResumeAll>
 8002d32:	e76c      	b.n	8002c0e <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d36:	f000 fa9d 	bl	8003274 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d3a:	f000 fdad 	bl	8003898 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002d3e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3738      	adds	r7, #56	; 0x38
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	e000ed04 	.word	0xe000ed04

08002d4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b08c      	sub	sp, #48	; 0x30
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <xQueueReceive+0x30>
        __asm volatile
 8002d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6a:	f383 8811 	msr	BASEPRI, r3
 8002d6e:	f3bf 8f6f 	isb	sy
 8002d72:	f3bf 8f4f 	dsb	sy
 8002d76:	623b      	str	r3, [r7, #32]
    }
 8002d78:	bf00      	nop
 8002d7a:	e7fe      	b.n	8002d7a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d103      	bne.n	8002d8a <xQueueReceive+0x3e>
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <xQueueReceive+0x42>
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e000      	b.n	8002d90 <xQueueReceive+0x44>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d10a      	bne.n	8002daa <xQueueReceive+0x5e>
        __asm volatile
 8002d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d98:	f383 8811 	msr	BASEPRI, r3
 8002d9c:	f3bf 8f6f 	isb	sy
 8002da0:	f3bf 8f4f 	dsb	sy
 8002da4:	61fb      	str	r3, [r7, #28]
    }
 8002da6:	bf00      	nop
 8002da8:	e7fe      	b.n	8002da8 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002daa:	f001 fa6d 	bl	8004288 <xTaskGetSchedulerState>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <xQueueReceive+0x6e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <xQueueReceive+0x72>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <xQueueReceive+0x74>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10a      	bne.n	8002dda <xQueueReceive+0x8e>
        __asm volatile
 8002dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc8:	f383 8811 	msr	BASEPRI, r3
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	f3bf 8f4f 	dsb	sy
 8002dd4:	61bb      	str	r3, [r7, #24]
    }
 8002dd6:	bf00      	nop
 8002dd8:	e7fe      	b.n	8002dd8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002dda:	f002 f8b5 	bl	8004f48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01f      	beq.n	8002e2a <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dee:	f000 fa1b 	bl	8003228 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	1e5a      	subs	r2, r3, #1
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00f      	beq.n	8002e22 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e04:	3310      	adds	r3, #16
 8002e06:	4618      	mov	r0, r3
 8002e08:	f001 f82e 	bl	8003e68 <xTaskRemoveFromEventList>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e12:	4b3d      	ldr	r3, [pc, #244]	; (8002f08 <xQueueReceive+0x1bc>)
 8002e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e18:	601a      	str	r2, [r3, #0]
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002e22:	f002 f8c1 	bl	8004fa8 <vPortExitCritical>
                return pdPASS;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e069      	b.n	8002efe <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d103      	bne.n	8002e38 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e30:	f002 f8ba 	bl	8004fa8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002e34:	2300      	movs	r3, #0
 8002e36:	e062      	b.n	8002efe <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d106      	bne.n	8002e4c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e3e:	f107 0310 	add.w	r3, r7, #16
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 f8e6 	bl	8004014 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e4c:	f002 f8ac 	bl	8004fa8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e50:	f000 fd14 	bl	800387c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e54:	f002 f878 	bl	8004f48 <vPortEnterCritical>
 8002e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d103      	bne.n	8002e6e <xQueueReceive+0x122>
 8002e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e74:	b25b      	sxtb	r3, r3
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e7a:	d103      	bne.n	8002e84 <xQueueReceive+0x138>
 8002e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e84:	f002 f890 	bl	8004fa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e88:	1d3a      	adds	r2, r7, #4
 8002e8a:	f107 0310 	add.w	r3, r7, #16
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f001 f8d5 	bl	8004040 <xTaskCheckForTimeOut>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d123      	bne.n	8002ee4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e9e:	f000 fa3b 	bl	8003318 <prvIsQueueEmpty>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d017      	beq.n	8002ed8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eaa:	3324      	adds	r3, #36	; 0x24
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f000 ff6f 	bl	8003d94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb8:	f000 f9dc 	bl	8003274 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002ebc:	f000 fcec 	bl	8003898 <xTaskResumeAll>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d189      	bne.n	8002dda <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ec6:	4b10      	ldr	r3, [pc, #64]	; (8002f08 <xQueueReceive+0x1bc>)
 8002ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	f3bf 8f4f 	dsb	sy
 8002ed2:	f3bf 8f6f 	isb	sy
 8002ed6:	e780      	b.n	8002dda <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eda:	f000 f9cb 	bl	8003274 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ede:	f000 fcdb 	bl	8003898 <xTaskResumeAll>
 8002ee2:	e77a      	b.n	8002dda <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee6:	f000 f9c5 	bl	8003274 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002eea:	f000 fcd5 	bl	8003898 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef0:	f000 fa12 	bl	8003318 <prvIsQueueEmpty>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f43f af6f 	beq.w	8002dda <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002efc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3730      	adds	r7, #48	; 0x30
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b08e      	sub	sp, #56	; 0x38
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d10a      	bne.n	8002f3e <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	f383 8811 	msr	BASEPRI, r3
 8002f30:	f3bf 8f6f 	isb	sy
 8002f34:	f3bf 8f4f 	dsb	sy
 8002f38:	623b      	str	r3, [r7, #32]
    }
 8002f3a:	bf00      	nop
 8002f3c:	e7fe      	b.n	8002f3c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00a      	beq.n	8002f5c <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	61fb      	str	r3, [r7, #28]
    }
 8002f58:	bf00      	nop
 8002f5a:	e7fe      	b.n	8002f5a <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f5c:	f001 f994 	bl	8004288 <xTaskGetSchedulerState>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d102      	bne.n	8002f6c <xQueueSemaphoreTake+0x60>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <xQueueSemaphoreTake+0x64>
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e000      	b.n	8002f72 <xQueueSemaphoreTake+0x66>
 8002f70:	2300      	movs	r3, #0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10a      	bne.n	8002f8c <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	f383 8811 	msr	BASEPRI, r3
 8002f7e:	f3bf 8f6f 	isb	sy
 8002f82:	f3bf 8f4f 	dsb	sy
 8002f86:	61bb      	str	r3, [r7, #24]
    }
 8002f88:	bf00      	nop
 8002f8a:	e7fe      	b.n	8002f8a <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f8c:	f001 ffdc 	bl	8004f48 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d024      	beq.n	8002fe6 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	1e5a      	subs	r2, r3, #1
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002fac:	f001 fb84 	bl	80046b8 <pvTaskIncrementMutexHeldCount>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00f      	beq.n	8002fde <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc0:	3310      	adds	r3, #16
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f000 ff50 	bl	8003e68 <xTaskRemoveFromEventList>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002fce:	4b54      	ldr	r3, [pc, #336]	; (8003120 <xQueueSemaphoreTake+0x214>)
 8002fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd4:	601a      	str	r2, [r3, #0]
 8002fd6:	f3bf 8f4f 	dsb	sy
 8002fda:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002fde:	f001 ffe3 	bl	8004fa8 <vPortExitCritical>
                return pdPASS;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e097      	b.n	8003116 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d111      	bne.n	8003010 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00a      	beq.n	8003008 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8002ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	617b      	str	r3, [r7, #20]
    }
 8003004:	bf00      	nop
 8003006:	e7fe      	b.n	8003006 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003008:	f001 ffce 	bl	8004fa8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800300c:	2300      	movs	r3, #0
 800300e:	e082      	b.n	8003116 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003016:	f107 030c 	add.w	r3, r7, #12
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fffa 	bl	8004014 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003020:	2301      	movs	r3, #1
 8003022:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003024:	f001 ffc0 	bl	8004fa8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003028:	f000 fc28 	bl	800387c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800302c:	f001 ff8c 	bl	8004f48 <vPortEnterCritical>
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003036:	b25b      	sxtb	r3, r3
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800303c:	d103      	bne.n	8003046 <xQueueSemaphoreTake+0x13a>
 800303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800304c:	b25b      	sxtb	r3, r3
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003052:	d103      	bne.n	800305c <xQueueSemaphoreTake+0x150>
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800305c:	f001 ffa4 	bl	8004fa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003060:	463a      	mov	r2, r7
 8003062:	f107 030c 	add.w	r3, r7, #12
 8003066:	4611      	mov	r1, r2
 8003068:	4618      	mov	r0, r3
 800306a:	f000 ffe9 	bl	8004040 <xTaskCheckForTimeOut>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d132      	bne.n	80030da <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003074:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003076:	f000 f94f 	bl	8003318 <prvIsQueueEmpty>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d026      	beq.n	80030ce <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d109      	bne.n	800309c <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8003088:	f001 ff5e 	bl	8004f48 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4618      	mov	r0, r3
 8003092:	f001 f917 	bl	80042c4 <xTaskPriorityInherit>
 8003096:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003098:	f001 ff86 	bl	8004fa8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800309c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309e:	3324      	adds	r3, #36	; 0x24
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f000 fe75 	bl	8003d94 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030ac:	f000 f8e2 	bl	8003274 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030b0:	f000 fbf2 	bl	8003898 <xTaskResumeAll>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f47f af68 	bne.w	8002f8c <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80030bc:	4b18      	ldr	r3, [pc, #96]	; (8003120 <xQueueSemaphoreTake+0x214>)
 80030be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	f3bf 8f6f 	isb	sy
 80030cc:	e75e      	b.n	8002f8c <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80030ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030d0:	f000 f8d0 	bl	8003274 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030d4:	f000 fbe0 	bl	8003898 <xTaskResumeAll>
 80030d8:	e758      	b.n	8002f8c <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80030da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030dc:	f000 f8ca 	bl	8003274 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80030e0:	f000 fbda 	bl	8003898 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030e6:	f000 f917 	bl	8003318 <prvIsQueueEmpty>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f43f af4d 	beq.w	8002f8c <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00d      	beq.n	8003114 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 80030f8:	f001 ff26 	bl	8004f48 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80030fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030fe:	f000 f811 	bl	8003124 <prvGetDisinheritPriorityAfterTimeout>
 8003102:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800310a:	4618      	mov	r0, r3
 800310c:	f001 fa1c 	bl	8004548 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8003110:	f001 ff4a 	bl	8004fa8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003114:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003116:	4618      	mov	r0, r3
 8003118:	3738      	adds	r7, #56	; 0x38
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	e000ed04 	.word	0xe000ed04

08003124 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2b00      	cmp	r3, #0
 8003132:	d006      	beq.n	8003142 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f1c3 0305 	rsb	r3, r3, #5
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	e001      	b.n	8003146 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003142:	2300      	movs	r3, #0
 8003144:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003146:	68fb      	ldr	r3, [r7, #12]
    }
 8003148:	4618      	mov	r0, r3
 800314a:	3714      	adds	r7, #20
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003160:	2300      	movs	r3, #0
 8003162:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10d      	bne.n	800318e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d14d      	bne.n	8003216 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	4618      	mov	r0, r3
 8003180:	f001 f93e 	bl	8004400 <xTaskPriorityDisinherit>
 8003184:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	e043      	b.n	8003216 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d119      	bne.n	80031c8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6858      	ldr	r0, [r3, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	461a      	mov	r2, r3
 800319e:	68b9      	ldr	r1, [r7, #8]
 80031a0:	f002 f9dc 	bl	800555c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	441a      	add	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d32b      	bcc.n	8003216 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e026      	b.n	8003216 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	68d8      	ldr	r0, [r3, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	461a      	mov	r2, r3
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	f002 f9c2 	bl	800555c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	68da      	ldr	r2, [r3, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	425b      	negs	r3, r3
 80031e2:	441a      	add	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	68da      	ldr	r2, [r3, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d207      	bcs.n	8003204 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	425b      	negs	r3, r3
 80031fe:	441a      	add	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d105      	bne.n	8003216 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d002      	beq.n	8003216 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	3b01      	subs	r3, #1
 8003214:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800321e:	697b      	ldr	r3, [r7, #20]
}
 8003220:	4618      	mov	r0, r3
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2b00      	cmp	r3, #0
 8003238:	d018      	beq.n	800326c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	441a      	add	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68da      	ldr	r2, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	d303      	bcc.n	800325c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68d9      	ldr	r1, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	461a      	mov	r2, r3
 8003266:	6838      	ldr	r0, [r7, #0]
 8003268:	f002 f978 	bl	800555c <memcpy>
    }
}
 800326c:	bf00      	nop
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800327c:	f001 fe64 	bl	8004f48 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003286:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003288:	e011      	b.n	80032ae <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	2b00      	cmp	r3, #0
 8003290:	d012      	beq.n	80032b8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3324      	adds	r3, #36	; 0x24
 8003296:	4618      	mov	r0, r3
 8003298:	f000 fde6 	bl	8003e68 <xTaskRemoveFromEventList>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80032a2:	f000 ff33 	bl	800410c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80032a6:	7bfb      	ldrb	r3, [r7, #15]
 80032a8:	3b01      	subs	r3, #1
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	dce9      	bgt.n	800328a <prvUnlockQueue+0x16>
 80032b6:	e000      	b.n	80032ba <prvUnlockQueue+0x46>
                        break;
 80032b8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	22ff      	movs	r2, #255	; 0xff
 80032be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80032c2:	f001 fe71 	bl	8004fa8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80032c6:	f001 fe3f 	bl	8004f48 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032d0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032d2:	e011      	b.n	80032f8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d012      	beq.n	8003302 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3310      	adds	r3, #16
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fdc1 	bl	8003e68 <xTaskRemoveFromEventList>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80032ec:	f000 ff0e 	bl	800410c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	dce9      	bgt.n	80032d4 <prvUnlockQueue+0x60>
 8003300:	e000      	b.n	8003304 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003302:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	22ff      	movs	r2, #255	; 0xff
 8003308:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800330c:	f001 fe4c 	bl	8004fa8 <vPortExitCritical>
}
 8003310:	bf00      	nop
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003320:	f001 fe12 	bl	8004f48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	2b00      	cmp	r3, #0
 800332a:	d102      	bne.n	8003332 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800332c:	2301      	movs	r3, #1
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	e001      	b.n	8003336 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003336:	f001 fe37 	bl	8004fa8 <vPortExitCritical>

    return xReturn;
 800333a:	68fb      	ldr	r3, [r7, #12]
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800334c:	f001 fdfc 	bl	8004f48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003358:	429a      	cmp	r2, r3
 800335a:	d102      	bne.n	8003362 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800335c:	2301      	movs	r3, #1
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e001      	b.n	8003366 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003366:	f001 fe1f 	bl	8004fa8 <vPortExitCritical>

    return xReturn;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003374:	b480      	push	{r7}
 8003376:	b087      	sub	sp, #28
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d10a      	bne.n	800339a <vQueueAddToRegistry+0x26>
        __asm volatile
 8003384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003388:	f383 8811 	msr	BASEPRI, r3
 800338c:	f3bf 8f6f 	isb	sy
 8003390:	f3bf 8f4f 	dsb	sy
 8003394:	60fb      	str	r3, [r7, #12]
    }
 8003396:	bf00      	nop
 8003398:	e7fe      	b.n	8003398 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800339a:	2300      	movs	r3, #0
 800339c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d024      	beq.n	80033ee <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
 80033a8:	e01e      	b.n	80033e8 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80033aa:	4a18      	ldr	r2, [pc, #96]	; (800340c <vQueueAddToRegistry+0x98>)
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	687a      	ldr	r2, [r7, #4]
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d105      	bne.n	80033c6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	4a13      	ldr	r2, [pc, #76]	; (800340c <vQueueAddToRegistry+0x98>)
 80033c0:	4413      	add	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
                    break;
 80033c4:	e013      	b.n	80033ee <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <vQueueAddToRegistry+0x6e>
 80033cc:	4a0f      	ldr	r2, [pc, #60]	; (800340c <vQueueAddToRegistry+0x98>)
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d104      	bne.n	80033e2 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	4a0b      	ldr	r2, [pc, #44]	; (800340c <vQueueAddToRegistry+0x98>)
 80033de:	4413      	add	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	3301      	adds	r3, #1
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	2b07      	cmp	r3, #7
 80033ec:	d9dd      	bls.n	80033aa <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003400:	bf00      	nop
 8003402:	371c      	adds	r7, #28
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	20000138 	.word	0x20000138

08003410 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	60b9      	str	r1, [r7, #8]
 800341a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003420:	f001 fd92 	bl	8004f48 <vPortEnterCritical>
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800342a:	b25b      	sxtb	r3, r3
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003430:	d103      	bne.n	800343a <vQueueWaitForMessageRestricted+0x2a>
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003440:	b25b      	sxtb	r3, r3
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d103      	bne.n	8003450 <vQueueWaitForMessageRestricted+0x40>
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003450:	f001 fdaa 	bl	8004fa8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	3324      	adds	r3, #36	; 0x24
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	68b9      	ldr	r1, [r7, #8]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fcb9 	bl	8003ddc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800346a:	6978      	ldr	r0, [r7, #20]
 800346c:	f7ff ff02 	bl	8003274 <prvUnlockQueue>
    }
 8003470:	bf00      	nop
 8003472:	3718      	adds	r7, #24
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003478:	b580      	push	{r7, lr}
 800347a:	b08c      	sub	sp, #48	; 0x30
 800347c:	af04      	add	r7, sp, #16
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	603b      	str	r3, [r7, #0]
 8003484:	4613      	mov	r3, r2
 8003486:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003488:	88fb      	ldrh	r3, [r7, #6]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4618      	mov	r0, r3
 800348e:	f001 fe3d 	bl	800510c <pvPortMalloc>
 8003492:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00e      	beq.n	80034b8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800349a:	2058      	movs	r0, #88	; 0x58
 800349c:	f001 fe36 	bl	800510c <pvPortMalloc>
 80034a0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	631a      	str	r2, [r3, #48]	; 0x30
 80034ae:	e005      	b.n	80034bc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80034b0:	6978      	ldr	r0, [r7, #20]
 80034b2:	f001 ff0b 	bl	80052cc <vPortFree>
 80034b6:	e001      	b.n	80034bc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d013      	beq.n	80034ea <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	2300      	movs	r3, #0
 80034c6:	9303      	str	r3, [sp, #12]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	9302      	str	r3, [sp, #8]
 80034cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68b9      	ldr	r1, [r7, #8]
 80034d8:	68f8      	ldr	r0, [r7, #12]
 80034da:	f000 f80e 	bl	80034fa <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80034de:	69f8      	ldr	r0, [r7, #28]
 80034e0:	f000 f8b0 	bl	8003644 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80034e4:	2301      	movs	r3, #1
 80034e6:	61bb      	str	r3, [r7, #24]
 80034e8:	e002      	b.n	80034f0 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
 80034ee:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80034f0:	69bb      	ldr	r3, [r7, #24]
    }
 80034f2:	4618      	mov	r0, r3
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b088      	sub	sp, #32
 80034fe:	af00      	add	r7, sp, #0
 8003500:	60f8      	str	r0, [r7, #12]
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	461a      	mov	r2, r3
 8003512:	21a5      	movs	r1, #165	; 0xa5
 8003514:	f002 f830 	bl	8005578 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003522:	3b01      	subs	r3, #1
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	f023 0307 	bic.w	r3, r3, #7
 8003530:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	f003 0307 	and.w	r3, r3, #7
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <prvInitialiseNewTask+0x58>
        __asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	617b      	str	r3, [r7, #20]
    }
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01f      	beq.n	8003598 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003558:	2300      	movs	r3, #0
 800355a:	61fb      	str	r3, [r7, #28]
 800355c:	e012      	b.n	8003584 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800355e:	68ba      	ldr	r2, [r7, #8]
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	4413      	add	r3, r2
 8003564:	7819      	ldrb	r1, [r3, #0]
 8003566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	4413      	add	r3, r2
 800356c:	3334      	adds	r3, #52	; 0x34
 800356e:	460a      	mov	r2, r1
 8003570:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	4413      	add	r3, r2
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d006      	beq.n	800358c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	3301      	adds	r3, #1
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	2b09      	cmp	r3, #9
 8003588:	d9e9      	bls.n	800355e <prvInitialiseNewTask+0x64>
 800358a:	e000      	b.n	800358e <prvInitialiseNewTask+0x94>
            {
                break;
 800358c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800358e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003596:	e003      	b.n	80035a0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	2200      	movs	r2, #0
 800359c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80035a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d90a      	bls.n	80035bc <prvInitialiseNewTask+0xc2>
        __asm volatile
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	f383 8811 	msr	BASEPRI, r3
 80035ae:	f3bf 8f6f 	isb	sy
 80035b2:	f3bf 8f4f 	dsb	sy
 80035b6:	613b      	str	r3, [r7, #16]
    }
 80035b8:	bf00      	nop
 80035ba:	e7fe      	b.n	80035ba <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d901      	bls.n	80035c6 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035c2:	2304      	movs	r3, #4
 80035c4:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80035c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80035cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035d0:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80035d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d4:	2200      	movs	r2, #0
 80035d6:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	3304      	adds	r3, #4
 80035dc:	4618      	mov	r0, r3
 80035de:	f7ff f945 	bl	800286c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e4:	3318      	adds	r3, #24
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f940 	bl	800286c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035f0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	f1c3 0205 	rsb	r2, r3, #5
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003604:	3350      	adds	r3, #80	; 0x50
 8003606:	2204      	movs	r2, #4
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f001 ffb4 	bl	8005578 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003612:	3354      	adds	r3, #84	; 0x54
 8003614:	2201      	movs	r2, #1
 8003616:	2100      	movs	r1, #0
 8003618:	4618      	mov	r0, r3
 800361a:	f001 ffad 	bl	8005578 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	68f9      	ldr	r1, [r7, #12]
 8003622:	69b8      	ldr	r0, [r7, #24]
 8003624:	f001 fb60 	bl	8004ce8 <pxPortInitialiseStack>
 8003628:	4602      	mov	r2, r0
 800362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800362c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800362e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003638:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800363a:	bf00      	nop
 800363c:	3720      	adds	r7, #32
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800364c:	f001 fc7c 	bl	8004f48 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8003650:	4b40      	ldr	r3, [pc, #256]	; (8003754 <prvAddNewTaskToReadyList+0x110>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3301      	adds	r3, #1
 8003656:	4a3f      	ldr	r2, [pc, #252]	; (8003754 <prvAddNewTaskToReadyList+0x110>)
 8003658:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800365a:	4b3f      	ldr	r3, [pc, #252]	; (8003758 <prvAddNewTaskToReadyList+0x114>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8003662:	4a3d      	ldr	r2, [pc, #244]	; (8003758 <prvAddNewTaskToReadyList+0x114>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003668:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <prvAddNewTaskToReadyList+0x110>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d110      	bne.n	8003692 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8003670:	f000 fd70 	bl	8004154 <prvInitialiseTaskLists>
 8003674:	e00d      	b.n	8003692 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003676:	4b39      	ldr	r3, [pc, #228]	; (800375c <prvAddNewTaskToReadyList+0x118>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800367e:	4b36      	ldr	r3, [pc, #216]	; (8003758 <prvAddNewTaskToReadyList+0x114>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003688:	429a      	cmp	r2, r3
 800368a:	d802      	bhi.n	8003692 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800368c:	4a32      	ldr	r2, [pc, #200]	; (8003758 <prvAddNewTaskToReadyList+0x114>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003692:	4b33      	ldr	r3, [pc, #204]	; (8003760 <prvAddNewTaskToReadyList+0x11c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	3301      	adds	r3, #1
 8003698:	4a31      	ldr	r2, [pc, #196]	; (8003760 <prvAddNewTaskToReadyList+0x11c>)
 800369a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800369c:	4b30      	ldr	r3, [pc, #192]	; (8003760 <prvAddNewTaskToReadyList+0x11c>)
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2201      	movs	r2, #1
 80036aa:	409a      	lsls	r2, r3
 80036ac:	4b2d      	ldr	r3, [pc, #180]	; (8003764 <prvAddNewTaskToReadyList+0x120>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <prvAddNewTaskToReadyList+0x120>)
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	492b      	ldr	r1, [pc, #172]	; (8003768 <prvAddNewTaskToReadyList+0x124>)
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	3304      	adds	r3, #4
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60fb      	str	r3, [r7, #12]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	609a      	str	r2, [r3, #8]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	60da      	str	r2, [r3, #12]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	3204      	adds	r2, #4
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	1d1a      	adds	r2, r3, #4
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4a1b      	ldr	r2, [pc, #108]	; (8003768 <prvAddNewTaskToReadyList+0x124>)
 80036fa:	441a      	add	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	615a      	str	r2, [r3, #20]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003704:	4918      	ldr	r1, [pc, #96]	; (8003768 <prvAddNewTaskToReadyList+0x124>)
 8003706:	4613      	mov	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	1c59      	adds	r1, r3, #1
 8003714:	4814      	ldr	r0, [pc, #80]	; (8003768 <prvAddNewTaskToReadyList+0x124>)
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4403      	add	r3, r0
 8003720:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003722:	f001 fc41 	bl	8004fa8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003726:	4b0d      	ldr	r3, [pc, #52]	; (800375c <prvAddNewTaskToReadyList+0x118>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00e      	beq.n	800374c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800372e:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <prvAddNewTaskToReadyList+0x114>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003738:	429a      	cmp	r2, r3
 800373a:	d207      	bcs.n	800374c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800373c:	4b0b      	ldr	r3, [pc, #44]	; (800376c <prvAddNewTaskToReadyList+0x128>)
 800373e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003742:	601a      	str	r2, [r3, #0]
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20000250 	.word	0x20000250
 8003758:	20000178 	.word	0x20000178
 800375c:	2000025c 	.word	0x2000025c
 8003760:	2000026c 	.word	0x2000026c
 8003764:	20000258 	.word	0x20000258
 8003768:	2000017c 	.word	0x2000017c
 800376c:	e000ed04 	.word	0xe000ed04

08003770 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003778:	2300      	movs	r3, #0
 800377a:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d017      	beq.n	80037b2 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8003782:	4b13      	ldr	r3, [pc, #76]	; (80037d0 <vTaskDelay+0x60>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <vTaskDelay+0x30>
        __asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	60bb      	str	r3, [r7, #8]
    }
 800379c:	bf00      	nop
 800379e:	e7fe      	b.n	800379e <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80037a0:	f000 f86c 	bl	800387c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037a4:	2100      	movs	r1, #0
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 ff9a 	bl	80046e0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80037ac:	f000 f874 	bl	8003898 <xTaskResumeAll>
 80037b0:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <vTaskDelay+0x64>)
 80037ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000278 	.word	0x20000278
 80037d4:	e000ed04 	.word	0xe000ed04

080037d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80037de:	4b20      	ldr	r3, [pc, #128]	; (8003860 <vTaskStartScheduler+0x88>)
 80037e0:	9301      	str	r3, [sp, #4]
 80037e2:	2300      	movs	r3, #0
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	2300      	movs	r3, #0
 80037e8:	2282      	movs	r2, #130	; 0x82
 80037ea:	491e      	ldr	r1, [pc, #120]	; (8003864 <vTaskStartScheduler+0x8c>)
 80037ec:	481e      	ldr	r0, [pc, #120]	; (8003868 <vTaskStartScheduler+0x90>)
 80037ee:	f7ff fe43 	bl	8003478 <xTaskCreate>
 80037f2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d102      	bne.n	8003800 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80037fa:	f000 fff1 	bl	80047e0 <xTimerCreateTimerTask>
 80037fe:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d116      	bne.n	8003834 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	60bb      	str	r3, [r7, #8]
    }
 8003818:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800381a:	4b14      	ldr	r3, [pc, #80]	; (800386c <vTaskStartScheduler+0x94>)
 800381c:	f04f 32ff 	mov.w	r2, #4294967295
 8003820:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003822:	4b13      	ldr	r3, [pc, #76]	; (8003870 <vTaskStartScheduler+0x98>)
 8003824:	2201      	movs	r2, #1
 8003826:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003828:	4b12      	ldr	r3, [pc, #72]	; (8003874 <vTaskStartScheduler+0x9c>)
 800382a:	2200      	movs	r2, #0
 800382c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800382e:	f001 fae9 	bl	8004e04 <xPortStartScheduler>
 8003832:	e00e      	b.n	8003852 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383a:	d10a      	bne.n	8003852 <vTaskStartScheduler+0x7a>
        __asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	607b      	str	r3, [r7, #4]
    }
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003852:	4b09      	ldr	r3, [pc, #36]	; (8003878 <vTaskStartScheduler+0xa0>)
 8003854:	681b      	ldr	r3, [r3, #0]
}
 8003856:	bf00      	nop
 8003858:	3710      	adds	r7, #16
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}
 800385e:	bf00      	nop
 8003860:	20000274 	.word	0x20000274
 8003864:	080069fc 	.word	0x080069fc
 8003868:	08004125 	.word	0x08004125
 800386c:	20000270 	.word	0x20000270
 8003870:	2000025c 	.word	0x2000025c
 8003874:	20000254 	.word	0x20000254
 8003878:	2000000c 	.word	0x2000000c

0800387c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <vTaskSuspendAll+0x18>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	4a03      	ldr	r2, [pc, #12]	; (8003894 <vTaskSuspendAll+0x18>)
 8003888:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800388a:	bf00      	nop
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr
 8003894:	20000278 	.word	0x20000278

08003898 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80038a6:	4b71      	ldr	r3, [pc, #452]	; (8003a6c <xTaskResumeAll+0x1d4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d10a      	bne.n	80038c4 <xTaskResumeAll+0x2c>
        __asm volatile
 80038ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b2:	f383 8811 	msr	BASEPRI, r3
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	607b      	str	r3, [r7, #4]
    }
 80038c0:	bf00      	nop
 80038c2:	e7fe      	b.n	80038c2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80038c4:	f001 fb40 	bl	8004f48 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80038c8:	4b68      	ldr	r3, [pc, #416]	; (8003a6c <xTaskResumeAll+0x1d4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	4a67      	ldr	r2, [pc, #412]	; (8003a6c <xTaskResumeAll+0x1d4>)
 80038d0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038d2:	4b66      	ldr	r3, [pc, #408]	; (8003a6c <xTaskResumeAll+0x1d4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 80c0 	bne.w	8003a5c <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80038dc:	4b64      	ldr	r3, [pc, #400]	; (8003a70 <xTaskResumeAll+0x1d8>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 80bb 	beq.w	8003a5c <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80038e6:	e08a      	b.n	80039fe <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038e8:	4b62      	ldr	r3, [pc, #392]	; (8003a74 <xTaskResumeAll+0x1dc>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	69fa      	ldr	r2, [r7, #28]
 80038fc:	6a12      	ldr	r2, [r2, #32]
 80038fe:	609a      	str	r2, [r3, #8]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	69d2      	ldr	r2, [r2, #28]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3318      	adds	r3, #24
 8003912:	429a      	cmp	r2, r3
 8003914:	d103      	bne.n	800391e <xTaskResumeAll+0x86>
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	6a1a      	ldr	r2, [r3, #32]
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	2200      	movs	r2, #0
 8003922:	629a      	str	r2, [r3, #40]	; 0x28
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	1e5a      	subs	r2, r3, #1
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	695b      	ldr	r3, [r3, #20]
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	68d2      	ldr	r2, [r2, #12]
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	6892      	ldr	r2, [r2, #8]
 8003946:	605a      	str	r2, [r3, #4]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	3304      	adds	r3, #4
 8003950:	429a      	cmp	r2, r3
 8003952:	d103      	bne.n	800395c <xTaskResumeAll+0xc4>
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	68da      	ldr	r2, [r3, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2200      	movs	r2, #0
 8003960:	615a      	str	r2, [r3, #20]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	1e5a      	subs	r2, r3, #1
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003970:	2201      	movs	r2, #1
 8003972:	409a      	lsls	r2, r3
 8003974:	4b40      	ldr	r3, [pc, #256]	; (8003a78 <xTaskResumeAll+0x1e0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	4a3f      	ldr	r2, [pc, #252]	; (8003a78 <xTaskResumeAll+0x1e0>)
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003982:	493e      	ldr	r1, [pc, #248]	; (8003a7c <xTaskResumeAll+0x1e4>)
 8003984:	4613      	mov	r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	3304      	adds	r3, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	60da      	str	r2, [r3, #12]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	69fa      	ldr	r2, [r7, #28]
 80039a8:	3204      	adds	r2, #4
 80039aa:	605a      	str	r2, [r3, #4]
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	1d1a      	adds	r2, r3, #4
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4a2e      	ldr	r2, [pc, #184]	; (8003a7c <xTaskResumeAll+0x1e4>)
 80039c2:	441a      	add	r2, r3
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	615a      	str	r2, [r3, #20]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	492b      	ldr	r1, [pc, #172]	; (8003a7c <xTaskResumeAll+0x1e4>)
 80039ce:	4613      	mov	r3, r2
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	4413      	add	r3, r2
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	440b      	add	r3, r1
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	1c59      	adds	r1, r3, #1
 80039dc:	4827      	ldr	r0, [pc, #156]	; (8003a7c <xTaskResumeAll+0x1e4>)
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4403      	add	r3, r0
 80039e8:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ee:	4b24      	ldr	r3, [pc, #144]	; (8003a80 <xTaskResumeAll+0x1e8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d302      	bcc.n	80039fe <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80039f8:	4b22      	ldr	r3, [pc, #136]	; (8003a84 <xTaskResumeAll+0x1ec>)
 80039fa:	2201      	movs	r2, #1
 80039fc:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039fe:	4b1d      	ldr	r3, [pc, #116]	; (8003a74 <xTaskResumeAll+0x1dc>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	f47f af70 	bne.w	80038e8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d001      	beq.n	8003a12 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003a0e:	f000 fc1f 	bl	8004250 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a12:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <xTaskResumeAll+0x1f0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d010      	beq.n	8003a40 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003a1e:	f000 f847 	bl	8003ab0 <xTaskIncrementTick>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003a28:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <xTaskResumeAll+0x1ec>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3b01      	subs	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d1f1      	bne.n	8003a1e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003a3a:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <xTaskResumeAll+0x1f0>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003a40:	4b10      	ldr	r3, [pc, #64]	; (8003a84 <xTaskResumeAll+0x1ec>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d009      	beq.n	8003a5c <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003a4c:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <xTaskResumeAll+0x1f4>)
 8003a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003a5c:	f001 faa4 	bl	8004fa8 <vPortExitCritical>

    return xAlreadyYielded;
 8003a60:	69bb      	ldr	r3, [r7, #24]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	20000278 	.word	0x20000278
 8003a70:	20000250 	.word	0x20000250
 8003a74:	20000210 	.word	0x20000210
 8003a78:	20000258 	.word	0x20000258
 8003a7c:	2000017c 	.word	0x2000017c
 8003a80:	20000178 	.word	0x20000178
 8003a84:	20000264 	.word	0x20000264
 8003a88:	20000260 	.word	0x20000260
 8003a8c:	e000ed04 	.word	0xe000ed04

08003a90 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003a96:	4b05      	ldr	r3, [pc, #20]	; (8003aac <xTaskGetTickCount+0x1c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003a9c:	687b      	ldr	r3, [r7, #4]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000254 	.word	0x20000254

08003ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aba:	4b7d      	ldr	r3, [pc, #500]	; (8003cb0 <xTaskIncrementTick+0x200>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f040 80ec 	bne.w	8003c9c <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ac4:	4b7b      	ldr	r3, [pc, #492]	; (8003cb4 <xTaskIncrementTick+0x204>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003acc:	4a79      	ldr	r2, [pc, #484]	; (8003cb4 <xTaskIncrementTick+0x204>)
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d120      	bne.n	8003b1a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003ad8:	4b77      	ldr	r3, [pc, #476]	; (8003cb8 <xTaskIncrementTick+0x208>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <xTaskIncrementTick+0x48>
        __asm volatile
 8003ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	607b      	str	r3, [r7, #4]
    }
 8003af4:	bf00      	nop
 8003af6:	e7fe      	b.n	8003af6 <xTaskIncrementTick+0x46>
 8003af8:	4b6f      	ldr	r3, [pc, #444]	; (8003cb8 <xTaskIncrementTick+0x208>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	61fb      	str	r3, [r7, #28]
 8003afe:	4b6f      	ldr	r3, [pc, #444]	; (8003cbc <xTaskIncrementTick+0x20c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a6d      	ldr	r2, [pc, #436]	; (8003cb8 <xTaskIncrementTick+0x208>)
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	4a6d      	ldr	r2, [pc, #436]	; (8003cbc <xTaskIncrementTick+0x20c>)
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	6013      	str	r3, [r2, #0]
 8003b0c:	4b6c      	ldr	r3, [pc, #432]	; (8003cc0 <xTaskIncrementTick+0x210>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	4a6b      	ldr	r2, [pc, #428]	; (8003cc0 <xTaskIncrementTick+0x210>)
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	f000 fb9b 	bl	8004250 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003b1a:	4b6a      	ldr	r3, [pc, #424]	; (8003cc4 <xTaskIncrementTick+0x214>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	6a3a      	ldr	r2, [r7, #32]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	f0c0 80a6 	bcc.w	8003c72 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b26:	4b64      	ldr	r3, [pc, #400]	; (8003cb8 <xTaskIncrementTick+0x208>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b30:	4b64      	ldr	r3, [pc, #400]	; (8003cc4 <xTaskIncrementTick+0x214>)
 8003b32:	f04f 32ff 	mov.w	r2, #4294967295
 8003b36:	601a      	str	r2, [r3, #0]
                    break;
 8003b38:	e09b      	b.n	8003c72 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b3a:	4b5f      	ldr	r3, [pc, #380]	; (8003cb8 <xTaskIncrementTick+0x208>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003b4a:	6a3a      	ldr	r2, [r7, #32]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d203      	bcs.n	8003b5a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003b52:	4a5c      	ldr	r2, [pc, #368]	; (8003cc4 <xTaskIncrementTick+0x214>)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003b58:	e08b      	b.n	8003c72 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	695b      	ldr	r3, [r3, #20]
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	69bb      	ldr	r3, [r7, #24]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	68d2      	ldr	r2, [r2, #12]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	605a      	str	r2, [r3, #4]
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d103      	bne.n	8003b88 <xTaskIncrementTick+0xd8>
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	615a      	str	r2, [r3, #20]
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	1e5a      	subs	r2, r3, #1
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01e      	beq.n	8003bde <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	6a12      	ldr	r2, [r2, #32]
 8003bae:	609a      	str	r2, [r3, #8]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	69ba      	ldr	r2, [r7, #24]
 8003bb6:	69d2      	ldr	r2, [r2, #28]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685a      	ldr	r2, [r3, #4]
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	3318      	adds	r3, #24
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d103      	bne.n	8003bce <xTaskIncrementTick+0x11e>
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	6a1a      	ldr	r2, [r3, #32]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	605a      	str	r2, [r3, #4]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	1e5a      	subs	r2, r3, #1
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be2:	2201      	movs	r2, #1
 8003be4:	409a      	lsls	r2, r3
 8003be6:	4b38      	ldr	r3, [pc, #224]	; (8003cc8 <xTaskIncrementTick+0x218>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	4a36      	ldr	r2, [pc, #216]	; (8003cc8 <xTaskIncrementTick+0x218>)
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4935      	ldr	r1, [pc, #212]	; (8003ccc <xTaskIncrementTick+0x21c>)
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	3304      	adds	r3, #4
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	609a      	str	r2, [r3, #8]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	60da      	str	r2, [r3, #12]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	3204      	adds	r2, #4
 8003c1c:	605a      	str	r2, [r3, #4]
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	1d1a      	adds	r2, r3, #4
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	609a      	str	r2, [r3, #8]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4a26      	ldr	r2, [pc, #152]	; (8003ccc <xTaskIncrementTick+0x21c>)
 8003c34:	441a      	add	r2, r3
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	615a      	str	r2, [r3, #20]
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c3e:	4923      	ldr	r1, [pc, #140]	; (8003ccc <xTaskIncrementTick+0x21c>)
 8003c40:	4613      	mov	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	440b      	add	r3, r1
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	1c59      	adds	r1, r3, #1
 8003c4e:	481f      	ldr	r0, [pc, #124]	; (8003ccc <xTaskIncrementTick+0x21c>)
 8003c50:	4613      	mov	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4413      	add	r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4403      	add	r3, r0
 8003c5a:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <xTaskIncrementTick+0x220>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c66:	429a      	cmp	r2, r3
 8003c68:	f4ff af5d 	bcc.w	8003b26 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c70:	e759      	b.n	8003b26 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c72:	4b17      	ldr	r3, [pc, #92]	; (8003cd0 <xTaskIncrementTick+0x220>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	4914      	ldr	r1, [pc, #80]	; (8003ccc <xTaskIncrementTick+0x21c>)
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d901      	bls.n	8003c8e <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003c8e:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <xTaskIncrementTick+0x224>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8003c96:	2301      	movs	r3, #1
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
 8003c9a:	e004      	b.n	8003ca6 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <xTaskIncrementTick+0x228>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	4a0d      	ldr	r2, [pc, #52]	; (8003cd8 <xTaskIncrementTick+0x228>)
 8003ca4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3728      	adds	r7, #40	; 0x28
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}
 8003cb0:	20000278 	.word	0x20000278
 8003cb4:	20000254 	.word	0x20000254
 8003cb8:	20000208 	.word	0x20000208
 8003cbc:	2000020c 	.word	0x2000020c
 8003cc0:	20000268 	.word	0x20000268
 8003cc4:	20000270 	.word	0x20000270
 8003cc8:	20000258 	.word	0x20000258
 8003ccc:	2000017c 	.word	0x2000017c
 8003cd0:	20000178 	.word	0x20000178
 8003cd4:	20000264 	.word	0x20000264
 8003cd8:	20000260 	.word	0x20000260

08003cdc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <vTaskSwitchContext+0xa4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003cea:	4b26      	ldr	r3, [pc, #152]	; (8003d84 <vTaskSwitchContext+0xa8>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003cf0:	e03f      	b.n	8003d72 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <vTaskSwitchContext+0xa8>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <vTaskSwitchContext+0xac>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	fab3 f383 	clz	r3, r3
 8003d04:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003d06:	7afb      	ldrb	r3, [r7, #11]
 8003d08:	f1c3 031f 	rsb	r3, r3, #31
 8003d0c:	617b      	str	r3, [r7, #20]
 8003d0e:	491f      	ldr	r1, [pc, #124]	; (8003d8c <vTaskSwitchContext+0xb0>)
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	4613      	mov	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	607b      	str	r3, [r7, #4]
    }
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <vTaskSwitchContext+0x5a>
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4a12      	ldr	r2, [pc, #72]	; (8003d8c <vTaskSwitchContext+0xb0>)
 8003d44:	4413      	add	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	605a      	str	r2, [r3, #4]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	3308      	adds	r3, #8
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d104      	bne.n	8003d68 <vTaskSwitchContext+0x8c>
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	605a      	str	r2, [r3, #4]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	4a08      	ldr	r2, [pc, #32]	; (8003d90 <vTaskSwitchContext+0xb4>)
 8003d70:	6013      	str	r3, [r2, #0]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000278 	.word	0x20000278
 8003d84:	20000264 	.word	0x20000264
 8003d88:	20000258 	.word	0x20000258
 8003d8c:	2000017c 	.word	0x2000017c
 8003d90:	20000178 	.word	0x20000178

08003d94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10a      	bne.n	8003dba <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	60fb      	str	r3, [r7, #12]
    }
 8003db6:	bf00      	nop
 8003db8:	e7fe      	b.n	8003db8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dba:	4b07      	ldr	r3, [pc, #28]	; (8003dd8 <vTaskPlaceOnEventList+0x44>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3318      	adds	r3, #24
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7fe fd5f 	bl	8002886 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003dc8:	2101      	movs	r1, #1
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f000 fc88 	bl	80046e0 <prvAddCurrentTaskToDelayedList>
}
 8003dd0:	bf00      	nop
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	20000178 	.word	0x20000178

08003ddc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df2:	f383 8811 	msr	BASEPRI, r3
 8003df6:	f3bf 8f6f 	isb	sy
 8003dfa:	f3bf 8f4f 	dsb	sy
 8003dfe:	613b      	str	r3, [r7, #16]
    }
 8003e00:	bf00      	nop
 8003e02:	e7fe      	b.n	8003e02 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	4b16      	ldr	r3, [pc, #88]	; (8003e64 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	61da      	str	r2, [r3, #28]
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	6892      	ldr	r2, [r2, #8]
 8003e1a:	621a      	str	r2, [r3, #32]
 8003e1c:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	3218      	adds	r2, #24
 8003e26:	605a      	str	r2, [r3, #4]
 8003e28:	4b0e      	ldr	r3, [pc, #56]	; (8003e64 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f103 0218 	add.w	r2, r3, #24
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <vTaskPlaceOnEventListRestricted+0x88>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	1c5a      	adds	r2, r3, #1
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e50:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	68b8      	ldr	r0, [r7, #8]
 8003e56:	f000 fc43 	bl	80046e0 <prvAddCurrentTaskToDelayedList>
    }
 8003e5a:	bf00      	nop
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000178 	.word	0x20000178

08003e68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b08b      	sub	sp, #44	; 0x2c
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10a      	bne.n	8003e94 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	60fb      	str	r3, [r7, #12]
    }
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	61fb      	str	r3, [r7, #28]
 8003e9a:	6a3b      	ldr	r3, [r7, #32]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	6a3a      	ldr	r2, [r7, #32]
 8003ea0:	6a12      	ldr	r2, [r2, #32]
 8003ea2:	609a      	str	r2, [r3, #8]
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	6a3a      	ldr	r2, [r7, #32]
 8003eaa:	69d2      	ldr	r2, [r2, #28]
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	3318      	adds	r3, #24
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d103      	bne.n	8003ec2 <xTaskRemoveFromEventList+0x5a>
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	6a1a      	ldr	r2, [r3, #32]
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	6a3b      	ldr	r3, [r7, #32]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	1e5a      	subs	r2, r3, #1
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ed2:	4b4a      	ldr	r3, [pc, #296]	; (8003ffc <xTaskRemoveFromEventList+0x194>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d15e      	bne.n	8003f98 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	617b      	str	r3, [r7, #20]
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	68d2      	ldr	r2, [r2, #12]
 8003ee8:	609a      	str	r2, [r3, #8]
 8003eea:	6a3b      	ldr	r3, [r7, #32]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	6a3a      	ldr	r2, [r7, #32]
 8003ef0:	6892      	ldr	r2, [r2, #8]
 8003ef2:	605a      	str	r2, [r3, #4]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	6a3b      	ldr	r3, [r7, #32]
 8003efa:	3304      	adds	r3, #4
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d103      	bne.n	8003f08 <xTaskRemoveFromEventList+0xa0>
 8003f00:	6a3b      	ldr	r3, [r7, #32]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	615a      	str	r2, [r3, #20]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	1e5a      	subs	r2, r3, #1
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003f18:	6a3b      	ldr	r3, [r7, #32]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	409a      	lsls	r2, r3
 8003f20:	4b37      	ldr	r3, [pc, #220]	; (8004000 <xTaskRemoveFromEventList+0x198>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	4a36      	ldr	r2, [pc, #216]	; (8004000 <xTaskRemoveFromEventList+0x198>)
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2e:	4935      	ldr	r1, [pc, #212]	; (8004004 <xTaskRemoveFromEventList+0x19c>)
 8003f30:	4613      	mov	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4413      	add	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	613b      	str	r3, [r7, #16]
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	609a      	str	r2, [r3, #8]
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	3204      	adds	r2, #4
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	1d1a      	adds	r2, r3, #4
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	609a      	str	r2, [r3, #8]
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	4a25      	ldr	r2, [pc, #148]	; (8004004 <xTaskRemoveFromEventList+0x19c>)
 8003f6e:	441a      	add	r2, r3
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	615a      	str	r2, [r3, #20]
 8003f74:	6a3b      	ldr	r3, [r7, #32]
 8003f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f78:	4922      	ldr	r1, [pc, #136]	; (8004004 <xTaskRemoveFromEventList+0x19c>)
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	1c59      	adds	r1, r3, #1
 8003f88:	481e      	ldr	r0, [pc, #120]	; (8004004 <xTaskRemoveFromEventList+0x19c>)
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	4403      	add	r3, r0
 8003f94:	6019      	str	r1, [r3, #0]
 8003f96:	e01b      	b.n	8003fd0 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f98:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <xTaskRemoveFromEventList+0x1a0>)
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	61da      	str	r2, [r3, #28]
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	621a      	str	r2, [r3, #32]
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	6a3a      	ldr	r2, [r7, #32]
 8003fb2:	3218      	adds	r2, #24
 8003fb4:	605a      	str	r2, [r3, #4]
 8003fb6:	6a3b      	ldr	r3, [r7, #32]
 8003fb8:	f103 0218 	add.w	r2, r3, #24
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	609a      	str	r2, [r3, #8]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	4a11      	ldr	r2, [pc, #68]	; (8004008 <xTaskRemoveFromEventList+0x1a0>)
 8003fc4:	629a      	str	r2, [r3, #40]	; 0x28
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <xTaskRemoveFromEventList+0x1a0>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	4a0e      	ldr	r2, [pc, #56]	; (8004008 <xTaskRemoveFromEventList+0x1a0>)
 8003fce:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	; (800400c <xTaskRemoveFromEventList+0x1a4>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d905      	bls.n	8003fea <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <xTaskRemoveFromEventList+0x1a8>)
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
 8003fe8:	e001      	b.n	8003fee <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003fea:	2300      	movs	r3, #0
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	372c      	adds	r7, #44	; 0x2c
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	20000278 	.word	0x20000278
 8004000:	20000258 	.word	0x20000258
 8004004:	2000017c 	.word	0x2000017c
 8004008:	20000210 	.word	0x20000210
 800400c:	20000178 	.word	0x20000178
 8004010:	20000264 	.word	0x20000264

08004014 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800401c:	4b06      	ldr	r3, [pc, #24]	; (8004038 <vTaskInternalSetTimeOutState+0x24>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <vTaskInternalSetTimeOutState+0x28>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	605a      	str	r2, [r3, #4]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	20000268 	.word	0x20000268
 800403c:	20000254 	.word	0x20000254

08004040 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	613b      	str	r3, [r7, #16]
    }
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10a      	bne.n	8004082 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004070:	f383 8811 	msr	BASEPRI, r3
 8004074:	f3bf 8f6f 	isb	sy
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	60fb      	str	r3, [r7, #12]
    }
 800407e:	bf00      	nop
 8004080:	e7fe      	b.n	8004080 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004082:	f000 ff61 	bl	8004f48 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004086:	4b1f      	ldr	r3, [pc, #124]	; (8004104 <xTaskCheckForTimeOut+0xc4>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	d102      	bne.n	80040a6 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	e026      	b.n	80040f4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <xTaskCheckForTimeOut+0xc8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d00a      	beq.n	80040c8 <xTaskCheckForTimeOut+0x88>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d305      	bcc.n	80040c8 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80040bc:	2301      	movs	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
 80040c6:	e015      	b.n	80040f4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d20b      	bcs.n	80040ea <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	1ad2      	subs	r2, r2, r3
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ff98 	bl	8004014 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80040e4:	2300      	movs	r3, #0
 80040e6:	61fb      	str	r3, [r7, #28]
 80040e8:	e004      	b.n	80040f4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80040f0:	2301      	movs	r3, #1
 80040f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80040f4:	f000 ff58 	bl	8004fa8 <vPortExitCritical>

    return xReturn;
 80040f8:	69fb      	ldr	r3, [r7, #28]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000254 	.word	0x20000254
 8004108:	20000268 	.word	0x20000268

0800410c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <vTaskMissedYield+0x14>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	20000264 	.word	0x20000264

08004124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800412c:	f000 f852 	bl	80041d4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <prvIdleTask+0x28>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d9f9      	bls.n	800412c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <prvIdleTask+0x2c>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004148:	e7f0      	b.n	800412c <prvIdleTask+0x8>
 800414a:	bf00      	nop
 800414c:	2000017c 	.word	0x2000017c
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	e00c      	b.n	800417a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <prvInitialiseTaskLists+0x60>)
 800416c:	4413      	add	r3, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fb5c 	bl	800282c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3301      	adds	r3, #1
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b04      	cmp	r3, #4
 800417e:	d9ef      	bls.n	8004160 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004180:	480d      	ldr	r0, [pc, #52]	; (80041b8 <prvInitialiseTaskLists+0x64>)
 8004182:	f7fe fb53 	bl	800282c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004186:	480d      	ldr	r0, [pc, #52]	; (80041bc <prvInitialiseTaskLists+0x68>)
 8004188:	f7fe fb50 	bl	800282c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800418c:	480c      	ldr	r0, [pc, #48]	; (80041c0 <prvInitialiseTaskLists+0x6c>)
 800418e:	f7fe fb4d 	bl	800282c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004192:	480c      	ldr	r0, [pc, #48]	; (80041c4 <prvInitialiseTaskLists+0x70>)
 8004194:	f7fe fb4a 	bl	800282c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004198:	480b      	ldr	r0, [pc, #44]	; (80041c8 <prvInitialiseTaskLists+0x74>)
 800419a:	f7fe fb47 	bl	800282c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <prvInitialiseTaskLists+0x78>)
 80041a0:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <prvInitialiseTaskLists+0x64>)
 80041a2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041a4:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <prvInitialiseTaskLists+0x7c>)
 80041a6:	4a05      	ldr	r2, [pc, #20]	; (80041bc <prvInitialiseTaskLists+0x68>)
 80041a8:	601a      	str	r2, [r3, #0]
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	2000017c 	.word	0x2000017c
 80041b8:	200001e0 	.word	0x200001e0
 80041bc:	200001f4 	.word	0x200001f4
 80041c0:	20000210 	.word	0x20000210
 80041c4:	20000224 	.word	0x20000224
 80041c8:	2000023c 	.word	0x2000023c
 80041cc:	20000208 	.word	0x20000208
 80041d0:	2000020c 	.word	0x2000020c

080041d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041da:	e019      	b.n	8004210 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80041dc:	f000 feb4 	bl	8004f48 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e0:	4b10      	ldr	r3, [pc, #64]	; (8004224 <prvCheckTasksWaitingTermination+0x50>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fe fb83 	bl	80028f8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80041f2:	4b0d      	ldr	r3, [pc, #52]	; (8004228 <prvCheckTasksWaitingTermination+0x54>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	4a0b      	ldr	r2, [pc, #44]	; (8004228 <prvCheckTasksWaitingTermination+0x54>)
 80041fa:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <prvCheckTasksWaitingTermination+0x58>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3b01      	subs	r3, #1
 8004202:	4a0a      	ldr	r2, [pc, #40]	; (800422c <prvCheckTasksWaitingTermination+0x58>)
 8004204:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004206:	f000 fecf 	bl	8004fa8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f810 	bl	8004230 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004210:	4b06      	ldr	r3, [pc, #24]	; (800422c <prvCheckTasksWaitingTermination+0x58>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e1      	bne.n	80041dc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000224 	.word	0x20000224
 8004228:	20000250 	.word	0x20000250
 800422c:	20000238 	.word	0x20000238

08004230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800423c:	4618      	mov	r0, r3
 800423e:	f001 f845 	bl	80052cc <vPortFree>
                vPortFree( pxTCB );
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f001 f842 	bl	80052cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <prvResetNextTaskUnblockTime+0x30>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d104      	bne.n	8004268 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800425e:	4b09      	ldr	r3, [pc, #36]	; (8004284 <prvResetNextTaskUnblockTime+0x34>)
 8004260:	f04f 32ff 	mov.w	r2, #4294967295
 8004264:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004266:	e005      	b.n	8004274 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <prvResetNextTaskUnblockTime+0x30>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a04      	ldr	r2, [pc, #16]	; (8004284 <prvResetNextTaskUnblockTime+0x34>)
 8004272:	6013      	str	r3, [r2, #0]
}
 8004274:	bf00      	nop
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000208 	.word	0x20000208
 8004284:	20000270 	.word	0x20000270

08004288 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800428e:	4b0b      	ldr	r3, [pc, #44]	; (80042bc <xTaskGetSchedulerState+0x34>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004296:	2301      	movs	r3, #1
 8004298:	607b      	str	r3, [r7, #4]
 800429a:	e008      	b.n	80042ae <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800429c:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <xTaskGetSchedulerState+0x38>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d102      	bne.n	80042aa <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80042a4:	2302      	movs	r3, #2
 80042a6:	607b      	str	r3, [r7, #4]
 80042a8:	e001      	b.n	80042ae <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80042ae:	687b      	ldr	r3, [r7, #4]
    }
 80042b0:	4618      	mov	r0, r3
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	2000025c 	.word	0x2000025c
 80042c0:	20000278 	.word	0x20000278

080042c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 8087 	beq.w	80043ea <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e0:	4b44      	ldr	r3, [pc, #272]	; (80043f4 <xTaskPriorityInherit+0x130>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d276      	bcs.n	80043d8 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	699b      	ldr	r3, [r3, #24]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	db06      	blt.n	8004300 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042f2:	4b40      	ldr	r3, [pc, #256]	; (80043f4 <xTaskPriorityInherit+0x130>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042f8:	f1c3 0205 	rsb	r2, r3, #5
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	6959      	ldr	r1, [r3, #20]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004308:	4613      	mov	r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4a39      	ldr	r2, [pc, #228]	; (80043f8 <xTaskPriorityInherit+0x134>)
 8004312:	4413      	add	r3, r2
 8004314:	4299      	cmp	r1, r3
 8004316:	d157      	bne.n	80043c8 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe faeb 	bl	80028f8 <uxListRemove>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10a      	bne.n	800433e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	2201      	movs	r2, #1
 800432e:	fa02 f303 	lsl.w	r3, r2, r3
 8004332:	43da      	mvns	r2, r3
 8004334:	4b31      	ldr	r3, [pc, #196]	; (80043fc <xTaskPriorityInherit+0x138>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4013      	ands	r3, r2
 800433a:	4a30      	ldr	r2, [pc, #192]	; (80043fc <xTaskPriorityInherit+0x138>)
 800433c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800433e:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <xTaskPriorityInherit+0x130>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800434c:	2201      	movs	r2, #1
 800434e:	409a      	lsls	r2, r3
 8004350:	4b2a      	ldr	r3, [pc, #168]	; (80043fc <xTaskPriorityInherit+0x138>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4313      	orrs	r3, r2
 8004356:	4a29      	ldr	r2, [pc, #164]	; (80043fc <xTaskPriorityInherit+0x138>)
 8004358:	6013      	str	r3, [r2, #0]
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435e:	4926      	ldr	r1, [pc, #152]	; (80043f8 <xTaskPriorityInherit+0x134>)
 8004360:	4613      	mov	r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	3304      	adds	r3, #4
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	60fb      	str	r3, [r7, #12]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	609a      	str	r2, [r3, #8]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	3204      	adds	r2, #4
 8004386:	605a      	str	r2, [r3, #4]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1d1a      	adds	r2, r3, #4
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	609a      	str	r2, [r3, #8]
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	4a16      	ldr	r2, [pc, #88]	; (80043f8 <xTaskPriorityInherit+0x134>)
 800439e:	441a      	add	r2, r3
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	615a      	str	r2, [r3, #20]
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a8:	4913      	ldr	r1, [pc, #76]	; (80043f8 <xTaskPriorityInherit+0x134>)
 80043aa:	4613      	mov	r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	480f      	ldr	r0, [pc, #60]	; (80043f8 <xTaskPriorityInherit+0x134>)
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	4403      	add	r3, r0
 80043c4:	6019      	str	r1, [r3, #0]
 80043c6:	e004      	b.n	80043d2 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <xTaskPriorityInherit+0x130>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80043d2:	2301      	movs	r3, #1
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e008      	b.n	80043ea <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043dc:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <xTaskPriorityInherit+0x130>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d201      	bcs.n	80043ea <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80043e6:	2301      	movs	r3, #1
 80043e8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80043ea:	697b      	ldr	r3, [r7, #20]
    }
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	20000178 	.word	0x20000178
 80043f8:	2000017c 	.word	0x2000017c
 80043fc:	20000258 	.word	0x20000258

08004400 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 808c 	beq.w	8004530 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004418:	4b48      	ldr	r3, [pc, #288]	; (800453c <xTaskPriorityDisinherit+0x13c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	429a      	cmp	r2, r3
 8004420:	d00a      	beq.n	8004438 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	613b      	str	r3, [r7, #16]
    }
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443c:	2b00      	cmp	r3, #0
 800443e:	d10a      	bne.n	8004456 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60fb      	str	r3, [r7, #12]
    }
 8004452:	bf00      	nop
 8004454:	e7fe      	b.n	8004454 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	1e5a      	subs	r2, r3, #1
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	429a      	cmp	r2, r3
 800446a:	d061      	beq.n	8004530 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004470:	2b00      	cmp	r3, #0
 8004472:	d15d      	bne.n	8004530 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	3304      	adds	r3, #4
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe fa3d 	bl	80028f8 <uxListRemove>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	2201      	movs	r2, #1
 800448a:	fa02 f303 	lsl.w	r3, r2, r3
 800448e:	43da      	mvns	r2, r3
 8004490:	4b2b      	ldr	r3, [pc, #172]	; (8004540 <xTaskPriorityDisinherit+0x140>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4013      	ands	r3, r2
 8004496:	4a2a      	ldr	r2, [pc, #168]	; (8004540 <xTaskPriorityDisinherit+0x140>)
 8004498:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a6:	f1c3 0205 	rsb	r2, r3, #5
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b2:	2201      	movs	r2, #1
 80044b4:	409a      	lsls	r2, r3
 80044b6:	4b22      	ldr	r3, [pc, #136]	; (8004540 <xTaskPriorityDisinherit+0x140>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	4a20      	ldr	r2, [pc, #128]	; (8004540 <xTaskPriorityDisinherit+0x140>)
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	491f      	ldr	r1, [pc, #124]	; (8004544 <xTaskPriorityDisinherit+0x144>)
 80044c6:	4613      	mov	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	3304      	adds	r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	609a      	str	r2, [r3, #8]
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	60da      	str	r2, [r3, #12]
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	3204      	adds	r2, #4
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	1d1a      	adds	r2, r3, #4
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	609a      	str	r2, [r3, #8]
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044fa:	4613      	mov	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	4a10      	ldr	r2, [pc, #64]	; (8004544 <xTaskPriorityDisinherit+0x144>)
 8004504:	441a      	add	r2, r3
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	615a      	str	r2, [r3, #20]
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800450e:	490d      	ldr	r1, [pc, #52]	; (8004544 <xTaskPriorityDisinherit+0x144>)
 8004510:	4613      	mov	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	009b      	lsls	r3, r3, #2
 8004518:	440b      	add	r3, r1
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	1c59      	adds	r1, r3, #1
 800451e:	4809      	ldr	r0, [pc, #36]	; (8004544 <xTaskPriorityDisinherit+0x144>)
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4403      	add	r3, r0
 800452a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800452c:	2301      	movs	r3, #1
 800452e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004530:	69fb      	ldr	r3, [r7, #28]
    }
 8004532:	4618      	mov	r0, r3
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000178 	.word	0x20000178
 8004540:	20000258 	.word	0x20000258
 8004544:	2000017c 	.word	0x2000017c

08004548 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004548:	b580      	push	{r7, lr}
 800454a:	b08a      	sub	sp, #40	; 0x28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004556:	2301      	movs	r3, #1
 8004558:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 80a1 	beq.w	80046a4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10a      	bne.n	8004580 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	613b      	str	r3, [r7, #16]
    }
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	429a      	cmp	r2, r3
 8004588:	d902      	bls.n	8004590 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	627b      	str	r3, [r7, #36]	; 0x24
 800458e:	e002      	b.n	8004596 <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004590:	6a3b      	ldr	r3, [r7, #32]
 8004592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004596:	6a3b      	ldr	r3, [r7, #32]
 8004598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800459a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800459c:	429a      	cmp	r2, r3
 800459e:	f000 8081 	beq.w	80046a4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d17b      	bne.n	80046a4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80045ac:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <vTaskPriorityDisinheritAfterTimeout+0x164>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6a3a      	ldr	r2, [r7, #32]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d10a      	bne.n	80045cc <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	60fb      	str	r3, [r7, #12]
    }
 80045c8:	bf00      	nop
 80045ca:	e7fe      	b.n	80045ca <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d0:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80045d2:	6a3b      	ldr	r3, [r7, #32]
 80045d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d6:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db04      	blt.n	80045ea <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e2:	f1c3 0205 	rsb	r2, r3, #5
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	6959      	ldr	r1, [r3, #20]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	4613      	mov	r3, r2
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4413      	add	r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	4a2d      	ldr	r2, [pc, #180]	; (80046b0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80045fa:	4413      	add	r3, r2
 80045fc:	4299      	cmp	r1, r3
 80045fe:	d151      	bne.n	80046a4 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	3304      	adds	r3, #4
 8004604:	4618      	mov	r0, r3
 8004606:	f7fe f977 	bl	80028f8 <uxListRemove>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10a      	bne.n	8004626 <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004610:	6a3b      	ldr	r3, [r7, #32]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2201      	movs	r2, #1
 8004616:	fa02 f303 	lsl.w	r3, r2, r3
 800461a:	43da      	mvns	r2, r3
 800461c:	4b25      	ldr	r3, [pc, #148]	; (80046b4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4013      	ands	r3, r2
 8004622:	4a24      	ldr	r2, [pc, #144]	; (80046b4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004624:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462a:	2201      	movs	r2, #1
 800462c:	409a      	lsls	r2, r3
 800462e:	4b21      	ldr	r3, [pc, #132]	; (80046b4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4313      	orrs	r3, r2
 8004634:	4a1f      	ldr	r2, [pc, #124]	; (80046b4 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	491c      	ldr	r1, [pc, #112]	; (80046b0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800463e:	4613      	mov	r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	440b      	add	r3, r1
 8004648:	3304      	adds	r3, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	609a      	str	r2, [r3, #8]
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	60da      	str	r2, [r3, #12]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	6a3a      	ldr	r2, [r7, #32]
 8004662:	3204      	adds	r2, #4
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	6a3b      	ldr	r3, [r7, #32]
 8004668:	1d1a      	adds	r2, r3, #4
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	609a      	str	r2, [r3, #8]
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004672:	4613      	mov	r3, r2
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	4413      	add	r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4a0d      	ldr	r2, [pc, #52]	; (80046b0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800467c:	441a      	add	r2, r3
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	615a      	str	r2, [r3, #20]
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004686:	490a      	ldr	r1, [pc, #40]	; (80046b0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	1c59      	adds	r1, r3, #1
 8004696:	4806      	ldr	r0, [pc, #24]	; (80046b0 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	4403      	add	r3, r0
 80046a2:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80046a4:	bf00      	nop
 80046a6:	3728      	adds	r7, #40	; 0x28
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	20000178 	.word	0x20000178
 80046b0:	2000017c 	.word	0x2000017c
 80046b4:	20000258 	.word	0x20000258

080046b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80046b8:	b480      	push	{r7}
 80046ba:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80046bc:	4b07      	ldr	r3, [pc, #28]	; (80046dc <pvTaskIncrementMutexHeldCount+0x24>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <pvTaskIncrementMutexHeldCount+0x24>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046ca:	3201      	adds	r2, #1
 80046cc:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80046ce:	4b03      	ldr	r3, [pc, #12]	; (80046dc <pvTaskIncrementMutexHeldCount+0x24>)
 80046d0:	681b      	ldr	r3, [r3, #0]
    }
 80046d2:	4618      	mov	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	20000178 	.word	0x20000178

080046e0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046ea:	4b36      	ldr	r3, [pc, #216]	; (80047c4 <prvAddCurrentTaskToDelayedList+0xe4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046f0:	4b35      	ldr	r3, [pc, #212]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3304      	adds	r3, #4
 80046f6:	4618      	mov	r0, r3
 80046f8:	f7fe f8fe 	bl	80028f8 <uxListRemove>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004702:	4b31      	ldr	r3, [pc, #196]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004708:	2201      	movs	r2, #1
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43da      	mvns	r2, r3
 8004710:	4b2e      	ldr	r3, [pc, #184]	; (80047cc <prvAddCurrentTaskToDelayedList+0xec>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4013      	ands	r3, r2
 8004716:	4a2d      	ldr	r2, [pc, #180]	; (80047cc <prvAddCurrentTaskToDelayedList+0xec>)
 8004718:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d124      	bne.n	800476c <prvAddCurrentTaskToDelayedList+0x8c>
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d021      	beq.n	800476c <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004728:	4b29      	ldr	r3, [pc, #164]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]
 800472e:	4b26      	ldr	r3, [pc, #152]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	609a      	str	r2, [r3, #8]
 8004736:	4b24      	ldr	r3, [pc, #144]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	6892      	ldr	r2, [r2, #8]
 800473e:	60da      	str	r2, [r3, #12]
 8004740:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	3204      	adds	r2, #4
 800474a:	605a      	str	r2, [r3, #4]
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	1d1a      	adds	r2, r3, #4
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	609a      	str	r2, [r3, #8]
 8004756:	4b1c      	ldr	r3, [pc, #112]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xf0>)
 800475c:	615a      	str	r2, [r3, #20]
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3301      	adds	r3, #1
 8004764:	4a1a      	ldr	r2, [pc, #104]	; (80047d0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800476a:	e026      	b.n	80047ba <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4413      	add	r3, r2
 8004772:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004774:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	429a      	cmp	r2, r3
 8004782:	d209      	bcs.n	8004798 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004784:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	4b0f      	ldr	r3, [pc, #60]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3304      	adds	r3, #4
 800478e:	4619      	mov	r1, r3
 8004790:	4610      	mov	r0, r2
 8004792:	f7fe f878 	bl	8002886 <vListInsert>
}
 8004796:	e010      	b.n	80047ba <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <prvAddCurrentTaskToDelayedList+0xf8>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <prvAddCurrentTaskToDelayedList+0xe8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	3304      	adds	r3, #4
 80047a2:	4619      	mov	r1, r3
 80047a4:	4610      	mov	r0, r2
 80047a6:	f7fe f86e 	bl	8002886 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <prvAddCurrentTaskToDelayedList+0xfc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68fa      	ldr	r2, [r7, #12]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d202      	bcs.n	80047ba <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80047b4:	4a09      	ldr	r2, [pc, #36]	; (80047dc <prvAddCurrentTaskToDelayedList+0xfc>)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6013      	str	r3, [r2, #0]
}
 80047ba:	bf00      	nop
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	20000254 	.word	0x20000254
 80047c8:	20000178 	.word	0x20000178
 80047cc:	20000258 	.word	0x20000258
 80047d0:	2000023c 	.word	0x2000023c
 80047d4:	2000020c 	.word	0x2000020c
 80047d8:	20000208 	.word	0x20000208
 80047dc:	20000270 	.word	0x20000270

080047e0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80047ea:	f000 fa47 	bl	8004c7c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80047ee:	4b11      	ldr	r3, [pc, #68]	; (8004834 <xTimerCreateTimerTask+0x54>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80047f6:	4b10      	ldr	r3, [pc, #64]	; (8004838 <xTimerCreateTimerTask+0x58>)
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	2302      	movs	r3, #2
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	2300      	movs	r3, #0
 8004800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004804:	490d      	ldr	r1, [pc, #52]	; (800483c <xTimerCreateTimerTask+0x5c>)
 8004806:	480e      	ldr	r0, [pc, #56]	; (8004840 <xTimerCreateTimerTask+0x60>)
 8004808:	f7fe fe36 	bl	8003478 <xTaskCreate>
 800480c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004818:	f383 8811 	msr	BASEPRI, r3
 800481c:	f3bf 8f6f 	isb	sy
 8004820:	f3bf 8f4f 	dsb	sy
 8004824:	603b      	str	r3, [r7, #0]
    }
 8004826:	bf00      	nop
 8004828:	e7fe      	b.n	8004828 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800482a:	687b      	ldr	r3, [r7, #4]
    }
 800482c:	4618      	mov	r0, r3
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	200002ac 	.word	0x200002ac
 8004838:	200002b0 	.word	0x200002b0
 800483c:	08006a04 	.word	0x08006a04
 8004840:	080048e9 	.word	0x080048e9

08004844 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004850:	e008      	b.n	8004864 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	699b      	ldr	r3, [r3, #24]
 8004856:	68ba      	ldr	r2, [r7, #8]
 8004858:	4413      	add	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	699a      	ldr	r2, [r3, #24]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	18d1      	adds	r1, r2, r3
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f8dd 	bl	8004a30 <prvInsertTimerInActiveList>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ea      	bne.n	8004852 <prvReloadTimer+0xe>
        }
    }
 800487c:	bf00      	nop
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004892:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <prvProcessExpiredTimer+0x5c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3304      	adds	r3, #4
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe f829 	bl	80028f8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	6879      	ldr	r1, [r7, #4]
 80048b8:	68f8      	ldr	r0, [r7, #12]
 80048ba:	f7ff ffc3 	bl	8004844 <prvReloadTimer>
 80048be:	e008      	b.n	80048d2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048c6:	f023 0301 	bic.w	r3, r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	4798      	blx	r3
    }
 80048da:	bf00      	nop
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	200002a4 	.word	0x200002a4

080048e8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80048f0:	f107 0308 	add.w	r3, r7, #8
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 f857 	bl	80049a8 <prvGetNextExpireTime>
 80048fa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	4619      	mov	r1, r3
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f803 	bl	800490c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004906:	f000 f8d5 	bl	8004ab4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800490a:	e7f1      	b.n	80048f0 <prvTimerTask+0x8>

0800490c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004916:	f7fe ffb1 	bl	800387c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800491a:	f107 0308 	add.w	r3, r7, #8
 800491e:	4618      	mov	r0, r3
 8004920:	f000 f866 	bl	80049f0 <prvSampleTimeNow>
 8004924:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d130      	bne.n	800498e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <prvProcessTimerOrBlockTask+0x3c>
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	429a      	cmp	r2, r3
 8004938:	d806      	bhi.n	8004948 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800493a:	f7fe ffad 	bl	8003898 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800493e:	68f9      	ldr	r1, [r7, #12]
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7ff ffa1 	bl	8004888 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004946:	e024      	b.n	8004992 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d008      	beq.n	8004960 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800494e:	4b13      	ldr	r3, [pc, #76]	; (800499c <prvProcessTimerOrBlockTask+0x90>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <prvProcessTimerOrBlockTask+0x50>
 8004958:	2301      	movs	r3, #1
 800495a:	e000      	b.n	800495e <prvProcessTimerOrBlockTask+0x52>
 800495c:	2300      	movs	r3, #0
 800495e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004960:	4b0f      	ldr	r3, [pc, #60]	; (80049a0 <prvProcessTimerOrBlockTask+0x94>)
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	4619      	mov	r1, r3
 800496e:	f7fe fd4f 	bl	8003410 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004972:	f7fe ff91 	bl	8003898 <xTaskResumeAll>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10a      	bne.n	8004992 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800497c:	4b09      	ldr	r3, [pc, #36]	; (80049a4 <prvProcessTimerOrBlockTask+0x98>)
 800497e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	f3bf 8f4f 	dsb	sy
 8004988:	f3bf 8f6f 	isb	sy
    }
 800498c:	e001      	b.n	8004992 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800498e:	f7fe ff83 	bl	8003898 <xTaskResumeAll>
    }
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	200002a8 	.word	0x200002a8
 80049a0:	200002ac 	.word	0x200002ac
 80049a4:	e000ed04 	.word	0xe000ed04

080049a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <prvGetNextExpireTime+0x44>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <prvGetNextExpireTime+0x16>
 80049ba:	2201      	movs	r2, #1
 80049bc:	e000      	b.n	80049c0 <prvGetNextExpireTime+0x18>
 80049be:	2200      	movs	r2, #0
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d105      	bne.n	80049d8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049cc:	4b07      	ldr	r3, [pc, #28]	; (80049ec <prvGetNextExpireTime+0x44>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e001      	b.n	80049dc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80049d8:	2300      	movs	r3, #0
 80049da:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80049dc:	68fb      	ldr	r3, [r7, #12]
    }
 80049de:	4618      	mov	r0, r3
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	200002a4 	.word	0x200002a4

080049f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80049f8:	f7ff f84a 	bl	8003a90 <xTaskGetTickCount>
 80049fc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80049fe:	4b0b      	ldr	r3, [pc, #44]	; (8004a2c <prvSampleTimeNow+0x3c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d205      	bcs.n	8004a14 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004a08:	f000 f912 	bl	8004c30 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
 8004a12:	e002      	b.n	8004a1a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004a1a:	4a04      	ldr	r2, [pc, #16]	; (8004a2c <prvSampleTimeNow+0x3c>)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004a20:	68fb      	ldr	r3, [r7, #12]
    }
 8004a22:	4618      	mov	r0, r3
 8004a24:	3710      	adds	r7, #16
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	200002b4 	.word	0x200002b4

08004a30 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	68ba      	ldr	r2, [r7, #8]
 8004a46:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d812      	bhi.n	8004a7c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a56:	687a      	ldr	r2, [r7, #4]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	1ad2      	subs	r2, r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d302      	bcc.n	8004a6a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004a64:	2301      	movs	r3, #1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e01b      	b.n	8004aa2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <prvInsertTimerInActiveList+0x7c>)
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	4610      	mov	r0, r2
 8004a76:	f7fd ff06 	bl	8002886 <vListInsert>
 8004a7a:	e012      	b.n	8004aa2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d206      	bcs.n	8004a92 <prvInsertTimerInActiveList+0x62>
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e007      	b.n	8004aa2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <prvInsertTimerInActiveList+0x80>)
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	3304      	adds	r3, #4
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	4610      	mov	r0, r2
 8004a9e:	f7fd fef2 	bl	8002886 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004aa2:	697b      	ldr	r3, [r7, #20]
    }
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	200002a8 	.word	0x200002a8
 8004ab0:	200002a4 	.word	0x200002a4

08004ab4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b088      	sub	sp, #32
 8004ab8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004aba:	e0a6      	b.n	8004c0a <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f2c0 80a2 	blt.w	8004c08 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	695b      	ldr	r3, [r3, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d004      	beq.n	8004ada <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	3304      	adds	r3, #4
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fd ff0f 	bl	80028f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	4618      	mov	r0, r3
 8004ade:	f7ff ff87 	bl	80049f0 <prvSampleTimeNow>
 8004ae2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	f200 808e 	bhi.w	8004c0a <prvProcessReceivedCommands+0x156>
 8004aee:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <prvProcessReceivedCommands+0x40>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b19 	.word	0x08004b19
 8004af8:	08004b19 	.word	0x08004b19
 8004afc:	08004b81 	.word	0x08004b81
 8004b00:	08004b95 	.word	0x08004b95
 8004b04:	08004bdf 	.word	0x08004bdf
 8004b08:	08004b19 	.word	0x08004b19
 8004b0c:	08004b19 	.word	0x08004b19
 8004b10:	08004b81 	.word	0x08004b81
 8004b14:	08004b95 	.word	0x08004b95
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b2a:	68fa      	ldr	r2, [r7, #12]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	18d1      	adds	r1, r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	69f8      	ldr	r0, [r7, #28]
 8004b38:	f7ff ff7a 	bl	8004a30 <prvInsertTimerInActiveList>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d063      	beq.n	8004c0a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d009      	beq.n	8004b64 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004b50:	68fa      	ldr	r2, [r7, #12]
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	4413      	add	r3, r2
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	69f8      	ldr	r0, [r7, #28]
 8004b5e:	f7ff fe71 	bl	8004844 <prvReloadTimer>
 8004b62:	e008      	b.n	8004b76 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b6a:	f023 0301 	bic.w	r3, r3, #1
 8004b6e:	b2da      	uxtb	r2, r3
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	69f8      	ldr	r0, [r7, #28]
 8004b7c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004b7e:	e044      	b.n	8004c0a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004b92:	e03a      	b.n	8004c0a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	b2da      	uxtb	r2, r3
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004bac:	69fb      	ldr	r3, [r7, #28]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	617b      	str	r3, [r7, #20]
    }
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	18d1      	adds	r1, r2, r3
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	69f8      	ldr	r0, [r7, #28]
 8004bd8:	f7ff ff2a 	bl	8004a30 <prvInsertTimerInActiveList>
                        break;
 8004bdc:	e015      	b.n	8004c0a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d103      	bne.n	8004bf4 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004bec:	69f8      	ldr	r0, [r7, #28]
 8004bee:	f000 fb6d 	bl	80052cc <vPortFree>
 8004bf2:	e00a      	b.n	8004c0a <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bfa:	f023 0301 	bic.w	r3, r3, #1
 8004bfe:	b2da      	uxtb	r2, r3
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004c06:	e000      	b.n	8004c0a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004c08:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <prvProcessReceivedCommands+0x178>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f107 0108 	add.w	r1, r7, #8
 8004c12:	2200      	movs	r2, #0
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe f899 	bl	8002d4c <xQueueReceive>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f47f af4d 	bne.w	8004abc <prvProcessReceivedCommands+0x8>
        }
    }
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	3720      	adds	r7, #32
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	200002ac 	.word	0x200002ac

08004c30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c36:	e009      	b.n	8004c4c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004c38:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <prvSwitchTimerLists+0x44>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004c42:	f04f 31ff 	mov.w	r1, #4294967295
 8004c46:	6838      	ldr	r0, [r7, #0]
 8004c48:	f7ff fe1e 	bl	8004888 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c4c:	4b09      	ldr	r3, [pc, #36]	; (8004c74 <prvSwitchTimerLists+0x44>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004c56:	4b07      	ldr	r3, [pc, #28]	; (8004c74 <prvSwitchTimerLists+0x44>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004c5c:	4b06      	ldr	r3, [pc, #24]	; (8004c78 <prvSwitchTimerLists+0x48>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a04      	ldr	r2, [pc, #16]	; (8004c74 <prvSwitchTimerLists+0x44>)
 8004c62:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <prvSwitchTimerLists+0x48>)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6013      	str	r3, [r2, #0]
    }
 8004c6a:	bf00      	nop
 8004c6c:	3708      	adds	r7, #8
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	200002a4 	.word	0x200002a4
 8004c78:	200002a8 	.word	0x200002a8

08004c7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004c80:	f000 f962 	bl	8004f48 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004c84:	4b12      	ldr	r3, [pc, #72]	; (8004cd0 <prvCheckForValidListAndQueue+0x54>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d11d      	bne.n	8004cc8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004c8c:	4811      	ldr	r0, [pc, #68]	; (8004cd4 <prvCheckForValidListAndQueue+0x58>)
 8004c8e:	f7fd fdcd 	bl	800282c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004c92:	4811      	ldr	r0, [pc, #68]	; (8004cd8 <prvCheckForValidListAndQueue+0x5c>)
 8004c94:	f7fd fdca 	bl	800282c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004c98:	4b10      	ldr	r3, [pc, #64]	; (8004cdc <prvCheckForValidListAndQueue+0x60>)
 8004c9a:	4a0e      	ldr	r2, [pc, #56]	; (8004cd4 <prvCheckForValidListAndQueue+0x58>)
 8004c9c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004c9e:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <prvCheckForValidListAndQueue+0x64>)
 8004ca0:	4a0d      	ldr	r2, [pc, #52]	; (8004cd8 <prvCheckForValidListAndQueue+0x5c>)
 8004ca2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	210c      	movs	r1, #12
 8004ca8:	200a      	movs	r0, #10
 8004caa:	f7fd fedf 	bl	8002a6c <xQueueGenericCreate>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	4a07      	ldr	r2, [pc, #28]	; (8004cd0 <prvCheckForValidListAndQueue+0x54>)
 8004cb2:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004cb4:	4b06      	ldr	r3, [pc, #24]	; (8004cd0 <prvCheckForValidListAndQueue+0x54>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cbc:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <prvCheckForValidListAndQueue+0x54>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4908      	ldr	r1, [pc, #32]	; (8004ce4 <prvCheckForValidListAndQueue+0x68>)
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fe fb56 	bl	8003374 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004cc8:	f000 f96e 	bl	8004fa8 <vPortExitCritical>
    }
 8004ccc:	bf00      	nop
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	200002ac 	.word	0x200002ac
 8004cd4:	2000027c 	.word	0x2000027c
 8004cd8:	20000290 	.word	0x20000290
 8004cdc:	200002a4 	.word	0x200002a4
 8004ce0:	200002a8 	.word	0x200002a8
 8004ce4:	08006a0c 	.word	0x08006a0c

08004ce8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3b04      	subs	r3, #4
 8004cf8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004d00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	3b04      	subs	r3, #4
 8004d06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	f023 0201 	bic.w	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3b04      	subs	r3, #4
 8004d16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004d18:	4a0c      	ldr	r2, [pc, #48]	; (8004d4c <pxPortInitialiseStack+0x64>)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b14      	subs	r3, #20
 8004d22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3b04      	subs	r3, #4
 8004d2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f06f 0202 	mvn.w	r2, #2
 8004d36:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	3b20      	subs	r3, #32
 8004d3c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3714      	adds	r7, #20
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	08004d51 	.word	0x08004d51

08004d50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004d5a:	4b12      	ldr	r3, [pc, #72]	; (8004da4 <prvTaskExitError+0x54>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d00a      	beq.n	8004d7a <prvTaskExitError+0x2a>
        __asm volatile
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	60fb      	str	r3, [r7, #12]
    }
 8004d76:	bf00      	nop
 8004d78:	e7fe      	b.n	8004d78 <prvTaskExitError+0x28>
        __asm volatile
 8004d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7e:	f383 8811 	msr	BASEPRI, r3
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	f3bf 8f4f 	dsb	sy
 8004d8a:	60bb      	str	r3, [r7, #8]
    }
 8004d8c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004d8e:	bf00      	nop
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d0fc      	beq.n	8004d90 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004d96:	bf00      	nop
 8004d98:	bf00      	nop
 8004d9a:	3714      	adds	r7, #20
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	20000010 	.word	0x20000010
	...

08004db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004db0:	4b07      	ldr	r3, [pc, #28]	; (8004dd0 <pxCurrentTCBConst2>)
 8004db2:	6819      	ldr	r1, [r3, #0]
 8004db4:	6808      	ldr	r0, [r1, #0]
 8004db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dba:	f380 8809 	msr	PSP, r0
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	4770      	bx	lr
 8004dcc:	f3af 8000 	nop.w

08004dd0 <pxCurrentTCBConst2>:
 8004dd0:	20000178 	.word	0x20000178
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop

08004dd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004dd8:	4808      	ldr	r0, [pc, #32]	; (8004dfc <prvPortStartFirstTask+0x24>)
 8004dda:	6800      	ldr	r0, [r0, #0]
 8004ddc:	6800      	ldr	r0, [r0, #0]
 8004dde:	f380 8808 	msr	MSP, r0
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8814 	msr	CONTROL, r0
 8004dea:	b662      	cpsie	i
 8004dec:	b661      	cpsie	f
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	f3bf 8f6f 	isb	sy
 8004df6:	df00      	svc	0
 8004df8:	bf00      	nop
 8004dfa:	0000      	.short	0x0000
 8004dfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop

08004e04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e0a:	4b46      	ldr	r3, [pc, #280]	; (8004f24 <xPortStartScheduler+0x120>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a46      	ldr	r2, [pc, #280]	; (8004f28 <xPortStartScheduler+0x124>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d10a      	bne.n	8004e2a <xPortStartScheduler+0x26>
        __asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	613b      	str	r3, [r7, #16]
    }
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e2a:	4b3e      	ldr	r3, [pc, #248]	; (8004f24 <xPortStartScheduler+0x120>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a3f      	ldr	r2, [pc, #252]	; (8004f2c <xPortStartScheduler+0x128>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d10a      	bne.n	8004e4a <xPortStartScheduler+0x46>
        __asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	60fb      	str	r3, [r7, #12]
    }
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e4a:	4b39      	ldr	r3, [pc, #228]	; (8004f30 <xPortStartScheduler+0x12c>)
 8004e4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	22ff      	movs	r2, #255	; 0xff
 8004e5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	4b31      	ldr	r3, [pc, #196]	; (8004f34 <xPortStartScheduler+0x130>)
 8004e70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e72:	4b31      	ldr	r3, [pc, #196]	; (8004f38 <xPortStartScheduler+0x134>)
 8004e74:	2207      	movs	r2, #7
 8004e76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e78:	e009      	b.n	8004e8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004e7a:	4b2f      	ldr	r3, [pc, #188]	; (8004f38 <xPortStartScheduler+0x134>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	4a2d      	ldr	r2, [pc, #180]	; (8004f38 <xPortStartScheduler+0x134>)
 8004e82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e8e:	78fb      	ldrb	r3, [r7, #3]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e96:	2b80      	cmp	r3, #128	; 0x80
 8004e98:	d0ef      	beq.n	8004e7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e9a:	4b27      	ldr	r3, [pc, #156]	; (8004f38 <xPortStartScheduler+0x134>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f1c3 0307 	rsb	r3, r3, #7
 8004ea2:	2b04      	cmp	r3, #4
 8004ea4:	d00a      	beq.n	8004ebc <xPortStartScheduler+0xb8>
        __asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	60bb      	str	r3, [r7, #8]
    }
 8004eb8:	bf00      	nop
 8004eba:	e7fe      	b.n	8004eba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004ebc:	4b1e      	ldr	r3, [pc, #120]	; (8004f38 <xPortStartScheduler+0x134>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	4a1d      	ldr	r2, [pc, #116]	; (8004f38 <xPortStartScheduler+0x134>)
 8004ec4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ec6:	4b1c      	ldr	r3, [pc, #112]	; (8004f38 <xPortStartScheduler+0x134>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ece:	4a1a      	ldr	r2, [pc, #104]	; (8004f38 <xPortStartScheduler+0x134>)
 8004ed0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	b2da      	uxtb	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004eda:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <xPortStartScheduler+0x138>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a17      	ldr	r2, [pc, #92]	; (8004f3c <xPortStartScheduler+0x138>)
 8004ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ee4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004ee6:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <xPortStartScheduler+0x138>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a14      	ldr	r2, [pc, #80]	; (8004f3c <xPortStartScheduler+0x138>)
 8004eec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004ef0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004ef2:	f000 f8db 	bl	80050ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004ef6:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <xPortStartScheduler+0x13c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004efc:	f000 f8fa 	bl	80050f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f00:	4b10      	ldr	r3, [pc, #64]	; (8004f44 <xPortStartScheduler+0x140>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a0f      	ldr	r2, [pc, #60]	; (8004f44 <xPortStartScheduler+0x140>)
 8004f06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004f0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004f0c:	f7ff ff64 	bl	8004dd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004f10:	f7fe fee4 	bl	8003cdc <vTaskSwitchContext>
    prvTaskExitError();
 8004f14:	f7ff ff1c 	bl	8004d50 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	e000ed00 	.word	0xe000ed00
 8004f28:	410fc271 	.word	0x410fc271
 8004f2c:	410fc270 	.word	0x410fc270
 8004f30:	e000e400 	.word	0xe000e400
 8004f34:	200002b8 	.word	0x200002b8
 8004f38:	200002bc 	.word	0x200002bc
 8004f3c:	e000ed20 	.word	0xe000ed20
 8004f40:	20000010 	.word	0x20000010
 8004f44:	e000ef34 	.word	0xe000ef34

08004f48 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
        __asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	607b      	str	r3, [r7, #4]
    }
 8004f60:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004f62:	4b0f      	ldr	r3, [pc, #60]	; (8004fa0 <vPortEnterCritical+0x58>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	3301      	adds	r3, #1
 8004f68:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <vPortEnterCritical+0x58>)
 8004f6a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004f6c:	4b0c      	ldr	r3, [pc, #48]	; (8004fa0 <vPortEnterCritical+0x58>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d10f      	bne.n	8004f94 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f74:	4b0b      	ldr	r3, [pc, #44]	; (8004fa4 <vPortEnterCritical+0x5c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <vPortEnterCritical+0x4c>
        __asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	603b      	str	r3, [r7, #0]
    }
 8004f90:	bf00      	nop
 8004f92:	e7fe      	b.n	8004f92 <vPortEnterCritical+0x4a>
    }
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr
 8004fa0:	20000010 	.word	0x20000010
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004fae:	4b12      	ldr	r3, [pc, #72]	; (8004ff8 <vPortExitCritical+0x50>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d10a      	bne.n	8004fcc <vPortExitCritical+0x24>
        __asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	607b      	str	r3, [r7, #4]
    }
 8004fc8:	bf00      	nop
 8004fca:	e7fe      	b.n	8004fca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004fcc:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <vPortExitCritical+0x50>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	3b01      	subs	r3, #1
 8004fd2:	4a09      	ldr	r2, [pc, #36]	; (8004ff8 <vPortExitCritical+0x50>)
 8004fd4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004fd6:	4b08      	ldr	r3, [pc, #32]	; (8004ff8 <vPortExitCritical+0x50>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d105      	bne.n	8004fea <vPortExitCritical+0x42>
 8004fde:	2300      	movs	r3, #0
 8004fe0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004fe8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000010 	.word	0x20000010
 8004ffc:	00000000 	.word	0x00000000

08005000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005000:	f3ef 8009 	mrs	r0, PSP
 8005004:	f3bf 8f6f 	isb	sy
 8005008:	4b15      	ldr	r3, [pc, #84]	; (8005060 <pxCurrentTCBConst>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	f01e 0f10 	tst.w	lr, #16
 8005010:	bf08      	it	eq
 8005012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501a:	6010      	str	r0, [r2, #0]
 800501c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005024:	f380 8811 	msr	BASEPRI, r0
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f7fe fe54 	bl	8003cdc <vTaskSwitchContext>
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f380 8811 	msr	BASEPRI, r0
 800503c:	bc09      	pop	{r0, r3}
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	6808      	ldr	r0, [r1, #0]
 8005042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005046:	f01e 0f10 	tst.w	lr, #16
 800504a:	bf08      	it	eq
 800504c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005050:	f380 8809 	msr	PSP, r0
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop
 800505c:	f3af 8000 	nop.w

08005060 <pxCurrentTCBConst>:
 8005060:	20000178 	.word	0x20000178
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005064:	bf00      	nop
 8005066:	bf00      	nop

08005068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
        __asm volatile
 800506e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005072:	f383 8811 	msr	BASEPRI, r3
 8005076:	f3bf 8f6f 	isb	sy
 800507a:	f3bf 8f4f 	dsb	sy
 800507e:	607b      	str	r3, [r7, #4]
    }
 8005080:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005082:	f7fe fd15 	bl	8003ab0 <xTaskIncrementTick>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d003      	beq.n	8005094 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800508c:	4b06      	ldr	r3, [pc, #24]	; (80050a8 <SysTick_Handler+0x40>)
 800508e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	2300      	movs	r3, #0
 8005096:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	f383 8811 	msr	BASEPRI, r3
    }
 800509e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80050a0:	bf00      	nop
 80050a2:	3708      	adds	r7, #8
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	e000ed04 	.word	0xe000ed04

080050ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050b0:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <vPortSetupTimerInterrupt+0x38>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <vPortSetupTimerInterrupt+0x3c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <vPortSetupTimerInterrupt+0x40>)
 80050c2:	fba2 2303 	umull	r2, r3, r2, r3
 80050c6:	099b      	lsrs	r3, r3, #6
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <vPortSetupTimerInterrupt+0x44>)
 80050ca:	3b01      	subs	r3, #1
 80050cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <vPortSetupTimerInterrupt+0x34>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010
 80050e4:	e000e018 	.word	0xe000e018
 80050e8:	20000000 	.word	0x20000000
 80050ec:	10624dd3 	.word	0x10624dd3
 80050f0:	e000e014 	.word	0xe000e014

080050f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80050f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005104 <vPortEnableVFP+0x10>
 80050f8:	6801      	ldr	r1, [r0, #0]
 80050fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80050fe:	6001      	str	r1, [r0, #0]
 8005100:	4770      	bx	lr
 8005102:	0000      	.short	0x0000
 8005104:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop

0800510c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005114:	2300      	movs	r3, #0
 8005116:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005118:	f7fe fbb0 	bl	800387c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800511c:	4b65      	ldr	r3, [pc, #404]	; (80052b4 <pvPortMalloc+0x1a8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005124:	f000 f934 	bl	8005390 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005128:	4b63      	ldr	r3, [pc, #396]	; (80052b8 <pvPortMalloc+0x1ac>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4013      	ands	r3, r2
 8005130:	2b00      	cmp	r3, #0
 8005132:	f040 80a7 	bne.w	8005284 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d02d      	beq.n	8005198 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800513c:	2208      	movs	r2, #8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	429a      	cmp	r2, r3
 8005146:	d227      	bcs.n	8005198 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005148:	2208      	movs	r2, #8
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	2b00      	cmp	r3, #0
 8005158:	d021      	beq.n	800519e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f023 0307 	bic.w	r3, r3, #7
 8005160:	3308      	adds	r3, #8
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d214      	bcs.n	8005192 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f023 0307 	bic.w	r3, r3, #7
 800516e:	3308      	adds	r3, #8
 8005170:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f003 0307 	and.w	r3, r3, #7
 8005178:	2b00      	cmp	r3, #0
 800517a:	d010      	beq.n	800519e <pvPortMalloc+0x92>
        __asm volatile
 800517c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005180:	f383 8811 	msr	BASEPRI, r3
 8005184:	f3bf 8f6f 	isb	sy
 8005188:	f3bf 8f4f 	dsb	sy
 800518c:	617b      	str	r3, [r7, #20]
    }
 800518e:	bf00      	nop
 8005190:	e7fe      	b.n	8005190 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005192:	2300      	movs	r3, #0
 8005194:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005196:	e002      	b.n	800519e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8005198:	2300      	movs	r3, #0
 800519a:	607b      	str	r3, [r7, #4]
 800519c:	e000      	b.n	80051a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800519e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d06e      	beq.n	8005284 <pvPortMalloc+0x178>
 80051a6:	4b45      	ldr	r3, [pc, #276]	; (80052bc <pvPortMalloc+0x1b0>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d869      	bhi.n	8005284 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80051b0:	4b43      	ldr	r3, [pc, #268]	; (80052c0 <pvPortMalloc+0x1b4>)
 80051b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80051b4:	4b42      	ldr	r3, [pc, #264]	; (80052c0 <pvPortMalloc+0x1b4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051ba:	e004      	b.n	80051c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80051c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80051c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d903      	bls.n	80051d8 <pvPortMalloc+0xcc>
 80051d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d1f1      	bne.n	80051bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80051d8:	4b36      	ldr	r3, [pc, #216]	; (80052b4 <pvPortMalloc+0x1a8>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051de:	429a      	cmp	r2, r3
 80051e0:	d050      	beq.n	8005284 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2208      	movs	r2, #8
 80051e8:	4413      	add	r3, r2
 80051ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	6a3b      	ldr	r3, [r7, #32]
 80051f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	1ad2      	subs	r2, r2, r3
 80051fc:	2308      	movs	r3, #8
 80051fe:	005b      	lsls	r3, r3, #1
 8005200:	429a      	cmp	r2, r3
 8005202:	d91f      	bls.n	8005244 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4413      	add	r3, r2
 800520a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f003 0307 	and.w	r3, r3, #7
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00a      	beq.n	800522c <pvPortMalloc+0x120>
        __asm volatile
 8005216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521a:	f383 8811 	msr	BASEPRI, r3
 800521e:	f3bf 8f6f 	isb	sy
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	613b      	str	r3, [r7, #16]
    }
 8005228:	bf00      	nop
 800522a:	e7fe      	b.n	800522a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	1ad2      	subs	r2, r2, r3
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800523e:	69b8      	ldr	r0, [r7, #24]
 8005240:	f000 f908 	bl	8005454 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005244:	4b1d      	ldr	r3, [pc, #116]	; (80052bc <pvPortMalloc+0x1b0>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <pvPortMalloc+0x1b0>)
 8005250:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005252:	4b1a      	ldr	r3, [pc, #104]	; (80052bc <pvPortMalloc+0x1b0>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4b1b      	ldr	r3, [pc, #108]	; (80052c4 <pvPortMalloc+0x1b8>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d203      	bcs.n	8005266 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800525e:	4b17      	ldr	r3, [pc, #92]	; (80052bc <pvPortMalloc+0x1b0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <pvPortMalloc+0x1b8>)
 8005264:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <pvPortMalloc+0x1ac>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	431a      	orrs	r2, r3
 8005270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005272:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005276:	2200      	movs	r2, #0
 8005278:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800527a:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <pvPortMalloc+0x1bc>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	3301      	adds	r3, #1
 8005280:	4a11      	ldr	r2, [pc, #68]	; (80052c8 <pvPortMalloc+0x1bc>)
 8005282:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005284:	f7fe fb08 	bl	8003898 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	f003 0307 	and.w	r3, r3, #7
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00a      	beq.n	80052a8 <pvPortMalloc+0x19c>
        __asm volatile
 8005292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005296:	f383 8811 	msr	BASEPRI, r3
 800529a:	f3bf 8f6f 	isb	sy
 800529e:	f3bf 8f4f 	dsb	sy
 80052a2:	60fb      	str	r3, [r7, #12]
    }
 80052a4:	bf00      	nop
 80052a6:	e7fe      	b.n	80052a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80052a8:	69fb      	ldr	r3, [r7, #28]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3728      	adds	r7, #40	; 0x28
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20012ec8 	.word	0x20012ec8
 80052b8:	20012edc 	.word	0x20012edc
 80052bc:	20012ecc 	.word	0x20012ecc
 80052c0:	20012ec0 	.word	0x20012ec0
 80052c4:	20012ed0 	.word	0x20012ed0
 80052c8:	20012ed4 	.word	0x20012ed4

080052cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d04d      	beq.n	800537a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80052de:	2308      	movs	r3, #8
 80052e0:	425b      	negs	r3, r3
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4413      	add	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	4b24      	ldr	r3, [pc, #144]	; (8005384 <vPortFree+0xb8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d10a      	bne.n	8005310 <vPortFree+0x44>
        __asm volatile
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	60fb      	str	r3, [r7, #12]
    }
 800530c:	bf00      	nop
 800530e:	e7fe      	b.n	800530e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <vPortFree+0x62>
        __asm volatile
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	60bb      	str	r3, [r7, #8]
    }
 800532a:	bf00      	nop
 800532c:	e7fe      	b.n	800532c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	4b14      	ldr	r3, [pc, #80]	; (8005384 <vPortFree+0xb8>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4013      	ands	r3, r2
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01e      	beq.n	800537a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d11a      	bne.n	800537a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	4b0e      	ldr	r3, [pc, #56]	; (8005384 <vPortFree+0xb8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	43db      	mvns	r3, r3
 800534e:	401a      	ands	r2, r3
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005354:	f7fe fa92 	bl	800387c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	685a      	ldr	r2, [r3, #4]
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <vPortFree+0xbc>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4413      	add	r3, r2
 8005362:	4a09      	ldr	r2, [pc, #36]	; (8005388 <vPortFree+0xbc>)
 8005364:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005366:	6938      	ldr	r0, [r7, #16]
 8005368:	f000 f874 	bl	8005454 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800536c:	4b07      	ldr	r3, [pc, #28]	; (800538c <vPortFree+0xc0>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3301      	adds	r3, #1
 8005372:	4a06      	ldr	r2, [pc, #24]	; (800538c <vPortFree+0xc0>)
 8005374:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005376:	f7fe fa8f 	bl	8003898 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800537a:	bf00      	nop
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20012edc 	.word	0x20012edc
 8005388:	20012ecc 	.word	0x20012ecc
 800538c:	20012ed8 	.word	0x20012ed8

08005390 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005396:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800539a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800539c:	4b27      	ldr	r3, [pc, #156]	; (800543c <prvHeapInit+0xac>)
 800539e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 0307 	and.w	r3, r3, #7
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3307      	adds	r3, #7
 80053ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 0307 	bic.w	r3, r3, #7
 80053b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	4a1f      	ldr	r2, [pc, #124]	; (800543c <prvHeapInit+0xac>)
 80053c0:	4413      	add	r3, r2
 80053c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80053c8:	4a1d      	ldr	r2, [pc, #116]	; (8005440 <prvHeapInit+0xb0>)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80053ce:	4b1c      	ldr	r3, [pc, #112]	; (8005440 <prvHeapInit+0xb0>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	4413      	add	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80053dc:	2208      	movs	r2, #8
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 0307 	bic.w	r3, r3, #7
 80053ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	4a15      	ldr	r2, [pc, #84]	; (8005444 <prvHeapInit+0xb4>)
 80053f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80053f2:	4b14      	ldr	r3, [pc, #80]	; (8005444 <prvHeapInit+0xb4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2200      	movs	r2, #0
 80053f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80053fa:	4b12      	ldr	r3, [pc, #72]	; (8005444 <prvHeapInit+0xb4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	68fa      	ldr	r2, [r7, #12]
 800540a:	1ad2      	subs	r2, r2, r3
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005410:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <prvHeapInit+0xb4>)
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	4a0a      	ldr	r2, [pc, #40]	; (8005448 <prvHeapInit+0xb8>)
 800541e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	4a09      	ldr	r2, [pc, #36]	; (800544c <prvHeapInit+0xbc>)
 8005426:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <prvHeapInit+0xc0>)
 800542a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800542e:	601a      	str	r2, [r3, #0]
}
 8005430:	bf00      	nop
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr
 800543c:	200002c0 	.word	0x200002c0
 8005440:	20012ec0 	.word	0x20012ec0
 8005444:	20012ec8 	.word	0x20012ec8
 8005448:	20012ed0 	.word	0x20012ed0
 800544c:	20012ecc 	.word	0x20012ecc
 8005450:	20012edc 	.word	0x20012edc

08005454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800545c:	4b28      	ldr	r3, [pc, #160]	; (8005500 <prvInsertBlockIntoFreeList+0xac>)
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	e002      	b.n	8005468 <prvInsertBlockIntoFreeList+0x14>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	429a      	cmp	r2, r3
 8005470:	d8f7      	bhi.n	8005462 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	4413      	add	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	429a      	cmp	r2, r3
 8005482:	d108      	bne.n	8005496 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	441a      	add	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	68ba      	ldr	r2, [r7, #8]
 80054a0:	441a      	add	r2, r3
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d118      	bne.n	80054dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4b15      	ldr	r3, [pc, #84]	; (8005504 <prvInsertBlockIntoFreeList+0xb0>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d00d      	beq.n	80054d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	441a      	add	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e008      	b.n	80054e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054d2:	4b0c      	ldr	r3, [pc, #48]	; (8005504 <prvInsertBlockIntoFreeList+0xb0>)
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	601a      	str	r2, [r3, #0]
 80054da:	e003      	b.n	80054e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d002      	beq.n	80054f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80054f2:	bf00      	nop
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20012ec0 	.word	0x20012ec0
 8005504:	20012ec8 	.word	0x20012ec8

08005508 <__errno>:
 8005508:	4b01      	ldr	r3, [pc, #4]	; (8005510 <__errno+0x8>)
 800550a:	6818      	ldr	r0, [r3, #0]
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000014 	.word	0x20000014

08005514 <__libc_init_array>:
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	4d0d      	ldr	r5, [pc, #52]	; (800554c <__libc_init_array+0x38>)
 8005518:	4c0d      	ldr	r4, [pc, #52]	; (8005550 <__libc_init_array+0x3c>)
 800551a:	1b64      	subs	r4, r4, r5
 800551c:	10a4      	asrs	r4, r4, #2
 800551e:	2600      	movs	r6, #0
 8005520:	42a6      	cmp	r6, r4
 8005522:	d109      	bne.n	8005538 <__libc_init_array+0x24>
 8005524:	4d0b      	ldr	r5, [pc, #44]	; (8005554 <__libc_init_array+0x40>)
 8005526:	4c0c      	ldr	r4, [pc, #48]	; (8005558 <__libc_init_array+0x44>)
 8005528:	f001 fa34 	bl	8006994 <_init>
 800552c:	1b64      	subs	r4, r4, r5
 800552e:	10a4      	asrs	r4, r4, #2
 8005530:	2600      	movs	r6, #0
 8005532:	42a6      	cmp	r6, r4
 8005534:	d105      	bne.n	8005542 <__libc_init_array+0x2e>
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	f855 3b04 	ldr.w	r3, [r5], #4
 800553c:	4798      	blx	r3
 800553e:	3601      	adds	r6, #1
 8005540:	e7ee      	b.n	8005520 <__libc_init_array+0xc>
 8005542:	f855 3b04 	ldr.w	r3, [r5], #4
 8005546:	4798      	blx	r3
 8005548:	3601      	adds	r6, #1
 800554a:	e7f2      	b.n	8005532 <__libc_init_array+0x1e>
 800554c:	08006b7c 	.word	0x08006b7c
 8005550:	08006b7c 	.word	0x08006b7c
 8005554:	08006b7c 	.word	0x08006b7c
 8005558:	08006b80 	.word	0x08006b80

0800555c <memcpy>:
 800555c:	440a      	add	r2, r1
 800555e:	4291      	cmp	r1, r2
 8005560:	f100 33ff 	add.w	r3, r0, #4294967295
 8005564:	d100      	bne.n	8005568 <memcpy+0xc>
 8005566:	4770      	bx	lr
 8005568:	b510      	push	{r4, lr}
 800556a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800556e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005572:	4291      	cmp	r1, r2
 8005574:	d1f9      	bne.n	800556a <memcpy+0xe>
 8005576:	bd10      	pop	{r4, pc}

08005578 <memset>:
 8005578:	4402      	add	r2, r0
 800557a:	4603      	mov	r3, r0
 800557c:	4293      	cmp	r3, r2
 800557e:	d100      	bne.n	8005582 <memset+0xa>
 8005580:	4770      	bx	lr
 8005582:	f803 1b01 	strb.w	r1, [r3], #1
 8005586:	e7f9      	b.n	800557c <memset+0x4>

08005588 <rand>:
 8005588:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <rand+0x5c>)
 800558a:	b510      	push	{r4, lr}
 800558c:	681c      	ldr	r4, [r3, #0]
 800558e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005590:	b9b3      	cbnz	r3, 80055c0 <rand+0x38>
 8005592:	2018      	movs	r0, #24
 8005594:	f000 f886 	bl	80056a4 <malloc>
 8005598:	63a0      	str	r0, [r4, #56]	; 0x38
 800559a:	b928      	cbnz	r0, 80055a8 <rand+0x20>
 800559c:	4602      	mov	r2, r0
 800559e:	4b12      	ldr	r3, [pc, #72]	; (80055e8 <rand+0x60>)
 80055a0:	4812      	ldr	r0, [pc, #72]	; (80055ec <rand+0x64>)
 80055a2:	214e      	movs	r1, #78	; 0x4e
 80055a4:	f000 f84e 	bl	8005644 <__assert_func>
 80055a8:	4a11      	ldr	r2, [pc, #68]	; (80055f0 <rand+0x68>)
 80055aa:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <rand+0x6c>)
 80055ac:	e9c0 2300 	strd	r2, r3, [r0]
 80055b0:	4b11      	ldr	r3, [pc, #68]	; (80055f8 <rand+0x70>)
 80055b2:	6083      	str	r3, [r0, #8]
 80055b4:	230b      	movs	r3, #11
 80055b6:	8183      	strh	r3, [r0, #12]
 80055b8:	2201      	movs	r2, #1
 80055ba:	2300      	movs	r3, #0
 80055bc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80055c0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80055c2:	4a0e      	ldr	r2, [pc, #56]	; (80055fc <rand+0x74>)
 80055c4:	6920      	ldr	r0, [r4, #16]
 80055c6:	6963      	ldr	r3, [r4, #20]
 80055c8:	490d      	ldr	r1, [pc, #52]	; (8005600 <rand+0x78>)
 80055ca:	4342      	muls	r2, r0
 80055cc:	fb01 2203 	mla	r2, r1, r3, r2
 80055d0:	fba0 0101 	umull	r0, r1, r0, r1
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	eb42 0001 	adc.w	r0, r2, r1
 80055da:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80055de:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80055e2:	bd10      	pop	{r4, pc}
 80055e4:	20000014 	.word	0x20000014
 80055e8:	08006a30 	.word	0x08006a30
 80055ec:	08006a47 	.word	0x08006a47
 80055f0:	abcd330e 	.word	0xabcd330e
 80055f4:	e66d1234 	.word	0xe66d1234
 80055f8:	0005deec 	.word	0x0005deec
 80055fc:	5851f42d 	.word	0x5851f42d
 8005600:	4c957f2d 	.word	0x4c957f2d

08005604 <siprintf>:
 8005604:	b40e      	push	{r1, r2, r3}
 8005606:	b500      	push	{lr}
 8005608:	b09c      	sub	sp, #112	; 0x70
 800560a:	ab1d      	add	r3, sp, #116	; 0x74
 800560c:	9002      	str	r0, [sp, #8]
 800560e:	9006      	str	r0, [sp, #24]
 8005610:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005614:	4809      	ldr	r0, [pc, #36]	; (800563c <siprintf+0x38>)
 8005616:	9107      	str	r1, [sp, #28]
 8005618:	9104      	str	r1, [sp, #16]
 800561a:	4909      	ldr	r1, [pc, #36]	; (8005640 <siprintf+0x3c>)
 800561c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005620:	9105      	str	r1, [sp, #20]
 8005622:	6800      	ldr	r0, [r0, #0]
 8005624:	9301      	str	r3, [sp, #4]
 8005626:	a902      	add	r1, sp, #8
 8005628:	f000 f980 	bl	800592c <_svfiprintf_r>
 800562c:	9b02      	ldr	r3, [sp, #8]
 800562e:	2200      	movs	r2, #0
 8005630:	701a      	strb	r2, [r3, #0]
 8005632:	b01c      	add	sp, #112	; 0x70
 8005634:	f85d eb04 	ldr.w	lr, [sp], #4
 8005638:	b003      	add	sp, #12
 800563a:	4770      	bx	lr
 800563c:	20000014 	.word	0x20000014
 8005640:	ffff0208 	.word	0xffff0208

08005644 <__assert_func>:
 8005644:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005646:	4614      	mov	r4, r2
 8005648:	461a      	mov	r2, r3
 800564a:	4b09      	ldr	r3, [pc, #36]	; (8005670 <__assert_func+0x2c>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4605      	mov	r5, r0
 8005650:	68d8      	ldr	r0, [r3, #12]
 8005652:	b14c      	cbz	r4, 8005668 <__assert_func+0x24>
 8005654:	4b07      	ldr	r3, [pc, #28]	; (8005674 <__assert_func+0x30>)
 8005656:	9100      	str	r1, [sp, #0]
 8005658:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800565c:	4906      	ldr	r1, [pc, #24]	; (8005678 <__assert_func+0x34>)
 800565e:	462b      	mov	r3, r5
 8005660:	f000 f80e 	bl	8005680 <fiprintf>
 8005664:	f000 fe20 	bl	80062a8 <abort>
 8005668:	4b04      	ldr	r3, [pc, #16]	; (800567c <__assert_func+0x38>)
 800566a:	461c      	mov	r4, r3
 800566c:	e7f3      	b.n	8005656 <__assert_func+0x12>
 800566e:	bf00      	nop
 8005670:	20000014 	.word	0x20000014
 8005674:	08006aa2 	.word	0x08006aa2
 8005678:	08006aaf 	.word	0x08006aaf
 800567c:	08006add 	.word	0x08006add

08005680 <fiprintf>:
 8005680:	b40e      	push	{r1, r2, r3}
 8005682:	b503      	push	{r0, r1, lr}
 8005684:	4601      	mov	r1, r0
 8005686:	ab03      	add	r3, sp, #12
 8005688:	4805      	ldr	r0, [pc, #20]	; (80056a0 <fiprintf+0x20>)
 800568a:	f853 2b04 	ldr.w	r2, [r3], #4
 800568e:	6800      	ldr	r0, [r0, #0]
 8005690:	9301      	str	r3, [sp, #4]
 8005692:	f000 fa75 	bl	8005b80 <_vfiprintf_r>
 8005696:	b002      	add	sp, #8
 8005698:	f85d eb04 	ldr.w	lr, [sp], #4
 800569c:	b003      	add	sp, #12
 800569e:	4770      	bx	lr
 80056a0:	20000014 	.word	0x20000014

080056a4 <malloc>:
 80056a4:	4b02      	ldr	r3, [pc, #8]	; (80056b0 <malloc+0xc>)
 80056a6:	4601      	mov	r1, r0
 80056a8:	6818      	ldr	r0, [r3, #0]
 80056aa:	f000 b86f 	b.w	800578c <_malloc_r>
 80056ae:	bf00      	nop
 80056b0:	20000014 	.word	0x20000014

080056b4 <_free_r>:
 80056b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80056b6:	2900      	cmp	r1, #0
 80056b8:	d044      	beq.n	8005744 <_free_r+0x90>
 80056ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056be:	9001      	str	r0, [sp, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f1a1 0404 	sub.w	r4, r1, #4
 80056c6:	bfb8      	it	lt
 80056c8:	18e4      	addlt	r4, r4, r3
 80056ca:	f001 f82f 	bl	800672c <__malloc_lock>
 80056ce:	4a1e      	ldr	r2, [pc, #120]	; (8005748 <_free_r+0x94>)
 80056d0:	9801      	ldr	r0, [sp, #4]
 80056d2:	6813      	ldr	r3, [r2, #0]
 80056d4:	b933      	cbnz	r3, 80056e4 <_free_r+0x30>
 80056d6:	6063      	str	r3, [r4, #4]
 80056d8:	6014      	str	r4, [r2, #0]
 80056da:	b003      	add	sp, #12
 80056dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056e0:	f001 b82a 	b.w	8006738 <__malloc_unlock>
 80056e4:	42a3      	cmp	r3, r4
 80056e6:	d908      	bls.n	80056fa <_free_r+0x46>
 80056e8:	6825      	ldr	r5, [r4, #0]
 80056ea:	1961      	adds	r1, r4, r5
 80056ec:	428b      	cmp	r3, r1
 80056ee:	bf01      	itttt	eq
 80056f0:	6819      	ldreq	r1, [r3, #0]
 80056f2:	685b      	ldreq	r3, [r3, #4]
 80056f4:	1949      	addeq	r1, r1, r5
 80056f6:	6021      	streq	r1, [r4, #0]
 80056f8:	e7ed      	b.n	80056d6 <_free_r+0x22>
 80056fa:	461a      	mov	r2, r3
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	b10b      	cbz	r3, 8005704 <_free_r+0x50>
 8005700:	42a3      	cmp	r3, r4
 8005702:	d9fa      	bls.n	80056fa <_free_r+0x46>
 8005704:	6811      	ldr	r1, [r2, #0]
 8005706:	1855      	adds	r5, r2, r1
 8005708:	42a5      	cmp	r5, r4
 800570a:	d10b      	bne.n	8005724 <_free_r+0x70>
 800570c:	6824      	ldr	r4, [r4, #0]
 800570e:	4421      	add	r1, r4
 8005710:	1854      	adds	r4, r2, r1
 8005712:	42a3      	cmp	r3, r4
 8005714:	6011      	str	r1, [r2, #0]
 8005716:	d1e0      	bne.n	80056da <_free_r+0x26>
 8005718:	681c      	ldr	r4, [r3, #0]
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	6053      	str	r3, [r2, #4]
 800571e:	4421      	add	r1, r4
 8005720:	6011      	str	r1, [r2, #0]
 8005722:	e7da      	b.n	80056da <_free_r+0x26>
 8005724:	d902      	bls.n	800572c <_free_r+0x78>
 8005726:	230c      	movs	r3, #12
 8005728:	6003      	str	r3, [r0, #0]
 800572a:	e7d6      	b.n	80056da <_free_r+0x26>
 800572c:	6825      	ldr	r5, [r4, #0]
 800572e:	1961      	adds	r1, r4, r5
 8005730:	428b      	cmp	r3, r1
 8005732:	bf04      	itt	eq
 8005734:	6819      	ldreq	r1, [r3, #0]
 8005736:	685b      	ldreq	r3, [r3, #4]
 8005738:	6063      	str	r3, [r4, #4]
 800573a:	bf04      	itt	eq
 800573c:	1949      	addeq	r1, r1, r5
 800573e:	6021      	streq	r1, [r4, #0]
 8005740:	6054      	str	r4, [r2, #4]
 8005742:	e7ca      	b.n	80056da <_free_r+0x26>
 8005744:	b003      	add	sp, #12
 8005746:	bd30      	pop	{r4, r5, pc}
 8005748:	20012ee0 	.word	0x20012ee0

0800574c <sbrk_aligned>:
 800574c:	b570      	push	{r4, r5, r6, lr}
 800574e:	4e0e      	ldr	r6, [pc, #56]	; (8005788 <sbrk_aligned+0x3c>)
 8005750:	460c      	mov	r4, r1
 8005752:	6831      	ldr	r1, [r6, #0]
 8005754:	4605      	mov	r5, r0
 8005756:	b911      	cbnz	r1, 800575e <sbrk_aligned+0x12>
 8005758:	f000 fcd6 	bl	8006108 <_sbrk_r>
 800575c:	6030      	str	r0, [r6, #0]
 800575e:	4621      	mov	r1, r4
 8005760:	4628      	mov	r0, r5
 8005762:	f000 fcd1 	bl	8006108 <_sbrk_r>
 8005766:	1c43      	adds	r3, r0, #1
 8005768:	d00a      	beq.n	8005780 <sbrk_aligned+0x34>
 800576a:	1cc4      	adds	r4, r0, #3
 800576c:	f024 0403 	bic.w	r4, r4, #3
 8005770:	42a0      	cmp	r0, r4
 8005772:	d007      	beq.n	8005784 <sbrk_aligned+0x38>
 8005774:	1a21      	subs	r1, r4, r0
 8005776:	4628      	mov	r0, r5
 8005778:	f000 fcc6 	bl	8006108 <_sbrk_r>
 800577c:	3001      	adds	r0, #1
 800577e:	d101      	bne.n	8005784 <sbrk_aligned+0x38>
 8005780:	f04f 34ff 	mov.w	r4, #4294967295
 8005784:	4620      	mov	r0, r4
 8005786:	bd70      	pop	{r4, r5, r6, pc}
 8005788:	20012ee4 	.word	0x20012ee4

0800578c <_malloc_r>:
 800578c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005790:	1ccd      	adds	r5, r1, #3
 8005792:	f025 0503 	bic.w	r5, r5, #3
 8005796:	3508      	adds	r5, #8
 8005798:	2d0c      	cmp	r5, #12
 800579a:	bf38      	it	cc
 800579c:	250c      	movcc	r5, #12
 800579e:	2d00      	cmp	r5, #0
 80057a0:	4607      	mov	r7, r0
 80057a2:	db01      	blt.n	80057a8 <_malloc_r+0x1c>
 80057a4:	42a9      	cmp	r1, r5
 80057a6:	d905      	bls.n	80057b4 <_malloc_r+0x28>
 80057a8:	230c      	movs	r3, #12
 80057aa:	603b      	str	r3, [r7, #0]
 80057ac:	2600      	movs	r6, #0
 80057ae:	4630      	mov	r0, r6
 80057b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b4:	4e2e      	ldr	r6, [pc, #184]	; (8005870 <_malloc_r+0xe4>)
 80057b6:	f000 ffb9 	bl	800672c <__malloc_lock>
 80057ba:	6833      	ldr	r3, [r6, #0]
 80057bc:	461c      	mov	r4, r3
 80057be:	bb34      	cbnz	r4, 800580e <_malloc_r+0x82>
 80057c0:	4629      	mov	r1, r5
 80057c2:	4638      	mov	r0, r7
 80057c4:	f7ff ffc2 	bl	800574c <sbrk_aligned>
 80057c8:	1c43      	adds	r3, r0, #1
 80057ca:	4604      	mov	r4, r0
 80057cc:	d14d      	bne.n	800586a <_malloc_r+0xde>
 80057ce:	6834      	ldr	r4, [r6, #0]
 80057d0:	4626      	mov	r6, r4
 80057d2:	2e00      	cmp	r6, #0
 80057d4:	d140      	bne.n	8005858 <_malloc_r+0xcc>
 80057d6:	6823      	ldr	r3, [r4, #0]
 80057d8:	4631      	mov	r1, r6
 80057da:	4638      	mov	r0, r7
 80057dc:	eb04 0803 	add.w	r8, r4, r3
 80057e0:	f000 fc92 	bl	8006108 <_sbrk_r>
 80057e4:	4580      	cmp	r8, r0
 80057e6:	d13a      	bne.n	800585e <_malloc_r+0xd2>
 80057e8:	6821      	ldr	r1, [r4, #0]
 80057ea:	3503      	adds	r5, #3
 80057ec:	1a6d      	subs	r5, r5, r1
 80057ee:	f025 0503 	bic.w	r5, r5, #3
 80057f2:	3508      	adds	r5, #8
 80057f4:	2d0c      	cmp	r5, #12
 80057f6:	bf38      	it	cc
 80057f8:	250c      	movcc	r5, #12
 80057fa:	4629      	mov	r1, r5
 80057fc:	4638      	mov	r0, r7
 80057fe:	f7ff ffa5 	bl	800574c <sbrk_aligned>
 8005802:	3001      	adds	r0, #1
 8005804:	d02b      	beq.n	800585e <_malloc_r+0xd2>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	442b      	add	r3, r5
 800580a:	6023      	str	r3, [r4, #0]
 800580c:	e00e      	b.n	800582c <_malloc_r+0xa0>
 800580e:	6822      	ldr	r2, [r4, #0]
 8005810:	1b52      	subs	r2, r2, r5
 8005812:	d41e      	bmi.n	8005852 <_malloc_r+0xc6>
 8005814:	2a0b      	cmp	r2, #11
 8005816:	d916      	bls.n	8005846 <_malloc_r+0xba>
 8005818:	1961      	adds	r1, r4, r5
 800581a:	42a3      	cmp	r3, r4
 800581c:	6025      	str	r5, [r4, #0]
 800581e:	bf18      	it	ne
 8005820:	6059      	strne	r1, [r3, #4]
 8005822:	6863      	ldr	r3, [r4, #4]
 8005824:	bf08      	it	eq
 8005826:	6031      	streq	r1, [r6, #0]
 8005828:	5162      	str	r2, [r4, r5]
 800582a:	604b      	str	r3, [r1, #4]
 800582c:	4638      	mov	r0, r7
 800582e:	f104 060b 	add.w	r6, r4, #11
 8005832:	f000 ff81 	bl	8006738 <__malloc_unlock>
 8005836:	f026 0607 	bic.w	r6, r6, #7
 800583a:	1d23      	adds	r3, r4, #4
 800583c:	1af2      	subs	r2, r6, r3
 800583e:	d0b6      	beq.n	80057ae <_malloc_r+0x22>
 8005840:	1b9b      	subs	r3, r3, r6
 8005842:	50a3      	str	r3, [r4, r2]
 8005844:	e7b3      	b.n	80057ae <_malloc_r+0x22>
 8005846:	6862      	ldr	r2, [r4, #4]
 8005848:	42a3      	cmp	r3, r4
 800584a:	bf0c      	ite	eq
 800584c:	6032      	streq	r2, [r6, #0]
 800584e:	605a      	strne	r2, [r3, #4]
 8005850:	e7ec      	b.n	800582c <_malloc_r+0xa0>
 8005852:	4623      	mov	r3, r4
 8005854:	6864      	ldr	r4, [r4, #4]
 8005856:	e7b2      	b.n	80057be <_malloc_r+0x32>
 8005858:	4634      	mov	r4, r6
 800585a:	6876      	ldr	r6, [r6, #4]
 800585c:	e7b9      	b.n	80057d2 <_malloc_r+0x46>
 800585e:	230c      	movs	r3, #12
 8005860:	603b      	str	r3, [r7, #0]
 8005862:	4638      	mov	r0, r7
 8005864:	f000 ff68 	bl	8006738 <__malloc_unlock>
 8005868:	e7a1      	b.n	80057ae <_malloc_r+0x22>
 800586a:	6025      	str	r5, [r4, #0]
 800586c:	e7de      	b.n	800582c <_malloc_r+0xa0>
 800586e:	bf00      	nop
 8005870:	20012ee0 	.word	0x20012ee0

08005874 <__ssputs_r>:
 8005874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005878:	688e      	ldr	r6, [r1, #8]
 800587a:	429e      	cmp	r6, r3
 800587c:	4682      	mov	sl, r0
 800587e:	460c      	mov	r4, r1
 8005880:	4690      	mov	r8, r2
 8005882:	461f      	mov	r7, r3
 8005884:	d838      	bhi.n	80058f8 <__ssputs_r+0x84>
 8005886:	898a      	ldrh	r2, [r1, #12]
 8005888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800588c:	d032      	beq.n	80058f4 <__ssputs_r+0x80>
 800588e:	6825      	ldr	r5, [r4, #0]
 8005890:	6909      	ldr	r1, [r1, #16]
 8005892:	eba5 0901 	sub.w	r9, r5, r1
 8005896:	6965      	ldr	r5, [r4, #20]
 8005898:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800589c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80058a0:	3301      	adds	r3, #1
 80058a2:	444b      	add	r3, r9
 80058a4:	106d      	asrs	r5, r5, #1
 80058a6:	429d      	cmp	r5, r3
 80058a8:	bf38      	it	cc
 80058aa:	461d      	movcc	r5, r3
 80058ac:	0553      	lsls	r3, r2, #21
 80058ae:	d531      	bpl.n	8005914 <__ssputs_r+0xa0>
 80058b0:	4629      	mov	r1, r5
 80058b2:	f7ff ff6b 	bl	800578c <_malloc_r>
 80058b6:	4606      	mov	r6, r0
 80058b8:	b950      	cbnz	r0, 80058d0 <__ssputs_r+0x5c>
 80058ba:	230c      	movs	r3, #12
 80058bc:	f8ca 3000 	str.w	r3, [sl]
 80058c0:	89a3      	ldrh	r3, [r4, #12]
 80058c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058c6:	81a3      	strh	r3, [r4, #12]
 80058c8:	f04f 30ff 	mov.w	r0, #4294967295
 80058cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d0:	6921      	ldr	r1, [r4, #16]
 80058d2:	464a      	mov	r2, r9
 80058d4:	f7ff fe42 	bl	800555c <memcpy>
 80058d8:	89a3      	ldrh	r3, [r4, #12]
 80058da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80058de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058e2:	81a3      	strh	r3, [r4, #12]
 80058e4:	6126      	str	r6, [r4, #16]
 80058e6:	6165      	str	r5, [r4, #20]
 80058e8:	444e      	add	r6, r9
 80058ea:	eba5 0509 	sub.w	r5, r5, r9
 80058ee:	6026      	str	r6, [r4, #0]
 80058f0:	60a5      	str	r5, [r4, #8]
 80058f2:	463e      	mov	r6, r7
 80058f4:	42be      	cmp	r6, r7
 80058f6:	d900      	bls.n	80058fa <__ssputs_r+0x86>
 80058f8:	463e      	mov	r6, r7
 80058fa:	6820      	ldr	r0, [r4, #0]
 80058fc:	4632      	mov	r2, r6
 80058fe:	4641      	mov	r1, r8
 8005900:	f000 fefa 	bl	80066f8 <memmove>
 8005904:	68a3      	ldr	r3, [r4, #8]
 8005906:	1b9b      	subs	r3, r3, r6
 8005908:	60a3      	str	r3, [r4, #8]
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	4433      	add	r3, r6
 800590e:	6023      	str	r3, [r4, #0]
 8005910:	2000      	movs	r0, #0
 8005912:	e7db      	b.n	80058cc <__ssputs_r+0x58>
 8005914:	462a      	mov	r2, r5
 8005916:	f000 ff15 	bl	8006744 <_realloc_r>
 800591a:	4606      	mov	r6, r0
 800591c:	2800      	cmp	r0, #0
 800591e:	d1e1      	bne.n	80058e4 <__ssputs_r+0x70>
 8005920:	6921      	ldr	r1, [r4, #16]
 8005922:	4650      	mov	r0, sl
 8005924:	f7ff fec6 	bl	80056b4 <_free_r>
 8005928:	e7c7      	b.n	80058ba <__ssputs_r+0x46>
	...

0800592c <_svfiprintf_r>:
 800592c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005930:	4698      	mov	r8, r3
 8005932:	898b      	ldrh	r3, [r1, #12]
 8005934:	061b      	lsls	r3, r3, #24
 8005936:	b09d      	sub	sp, #116	; 0x74
 8005938:	4607      	mov	r7, r0
 800593a:	460d      	mov	r5, r1
 800593c:	4614      	mov	r4, r2
 800593e:	d50e      	bpl.n	800595e <_svfiprintf_r+0x32>
 8005940:	690b      	ldr	r3, [r1, #16]
 8005942:	b963      	cbnz	r3, 800595e <_svfiprintf_r+0x32>
 8005944:	2140      	movs	r1, #64	; 0x40
 8005946:	f7ff ff21 	bl	800578c <_malloc_r>
 800594a:	6028      	str	r0, [r5, #0]
 800594c:	6128      	str	r0, [r5, #16]
 800594e:	b920      	cbnz	r0, 800595a <_svfiprintf_r+0x2e>
 8005950:	230c      	movs	r3, #12
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	f04f 30ff 	mov.w	r0, #4294967295
 8005958:	e0d1      	b.n	8005afe <_svfiprintf_r+0x1d2>
 800595a:	2340      	movs	r3, #64	; 0x40
 800595c:	616b      	str	r3, [r5, #20]
 800595e:	2300      	movs	r3, #0
 8005960:	9309      	str	r3, [sp, #36]	; 0x24
 8005962:	2320      	movs	r3, #32
 8005964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005968:	f8cd 800c 	str.w	r8, [sp, #12]
 800596c:	2330      	movs	r3, #48	; 0x30
 800596e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005b18 <_svfiprintf_r+0x1ec>
 8005972:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005976:	f04f 0901 	mov.w	r9, #1
 800597a:	4623      	mov	r3, r4
 800597c:	469a      	mov	sl, r3
 800597e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005982:	b10a      	cbz	r2, 8005988 <_svfiprintf_r+0x5c>
 8005984:	2a25      	cmp	r2, #37	; 0x25
 8005986:	d1f9      	bne.n	800597c <_svfiprintf_r+0x50>
 8005988:	ebba 0b04 	subs.w	fp, sl, r4
 800598c:	d00b      	beq.n	80059a6 <_svfiprintf_r+0x7a>
 800598e:	465b      	mov	r3, fp
 8005990:	4622      	mov	r2, r4
 8005992:	4629      	mov	r1, r5
 8005994:	4638      	mov	r0, r7
 8005996:	f7ff ff6d 	bl	8005874 <__ssputs_r>
 800599a:	3001      	adds	r0, #1
 800599c:	f000 80aa 	beq.w	8005af4 <_svfiprintf_r+0x1c8>
 80059a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059a2:	445a      	add	r2, fp
 80059a4:	9209      	str	r2, [sp, #36]	; 0x24
 80059a6:	f89a 3000 	ldrb.w	r3, [sl]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80a2 	beq.w	8005af4 <_svfiprintf_r+0x1c8>
 80059b0:	2300      	movs	r3, #0
 80059b2:	f04f 32ff 	mov.w	r2, #4294967295
 80059b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059ba:	f10a 0a01 	add.w	sl, sl, #1
 80059be:	9304      	str	r3, [sp, #16]
 80059c0:	9307      	str	r3, [sp, #28]
 80059c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059c6:	931a      	str	r3, [sp, #104]	; 0x68
 80059c8:	4654      	mov	r4, sl
 80059ca:	2205      	movs	r2, #5
 80059cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d0:	4851      	ldr	r0, [pc, #324]	; (8005b18 <_svfiprintf_r+0x1ec>)
 80059d2:	f7fa fc05 	bl	80001e0 <memchr>
 80059d6:	9a04      	ldr	r2, [sp, #16]
 80059d8:	b9d8      	cbnz	r0, 8005a12 <_svfiprintf_r+0xe6>
 80059da:	06d0      	lsls	r0, r2, #27
 80059dc:	bf44      	itt	mi
 80059de:	2320      	movmi	r3, #32
 80059e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059e4:	0711      	lsls	r1, r2, #28
 80059e6:	bf44      	itt	mi
 80059e8:	232b      	movmi	r3, #43	; 0x2b
 80059ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ee:	f89a 3000 	ldrb.w	r3, [sl]
 80059f2:	2b2a      	cmp	r3, #42	; 0x2a
 80059f4:	d015      	beq.n	8005a22 <_svfiprintf_r+0xf6>
 80059f6:	9a07      	ldr	r2, [sp, #28]
 80059f8:	4654      	mov	r4, sl
 80059fa:	2000      	movs	r0, #0
 80059fc:	f04f 0c0a 	mov.w	ip, #10
 8005a00:	4621      	mov	r1, r4
 8005a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a06:	3b30      	subs	r3, #48	; 0x30
 8005a08:	2b09      	cmp	r3, #9
 8005a0a:	d94e      	bls.n	8005aaa <_svfiprintf_r+0x17e>
 8005a0c:	b1b0      	cbz	r0, 8005a3c <_svfiprintf_r+0x110>
 8005a0e:	9207      	str	r2, [sp, #28]
 8005a10:	e014      	b.n	8005a3c <_svfiprintf_r+0x110>
 8005a12:	eba0 0308 	sub.w	r3, r0, r8
 8005a16:	fa09 f303 	lsl.w	r3, r9, r3
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	9304      	str	r3, [sp, #16]
 8005a1e:	46a2      	mov	sl, r4
 8005a20:	e7d2      	b.n	80059c8 <_svfiprintf_r+0x9c>
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	1d19      	adds	r1, r3, #4
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	9103      	str	r1, [sp, #12]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bfbb      	ittet	lt
 8005a2e:	425b      	neglt	r3, r3
 8005a30:	f042 0202 	orrlt.w	r2, r2, #2
 8005a34:	9307      	strge	r3, [sp, #28]
 8005a36:	9307      	strlt	r3, [sp, #28]
 8005a38:	bfb8      	it	lt
 8005a3a:	9204      	strlt	r2, [sp, #16]
 8005a3c:	7823      	ldrb	r3, [r4, #0]
 8005a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005a40:	d10c      	bne.n	8005a5c <_svfiprintf_r+0x130>
 8005a42:	7863      	ldrb	r3, [r4, #1]
 8005a44:	2b2a      	cmp	r3, #42	; 0x2a
 8005a46:	d135      	bne.n	8005ab4 <_svfiprintf_r+0x188>
 8005a48:	9b03      	ldr	r3, [sp, #12]
 8005a4a:	1d1a      	adds	r2, r3, #4
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	9203      	str	r2, [sp, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	bfb8      	it	lt
 8005a54:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a58:	3402      	adds	r4, #2
 8005a5a:	9305      	str	r3, [sp, #20]
 8005a5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b28 <_svfiprintf_r+0x1fc>
 8005a60:	7821      	ldrb	r1, [r4, #0]
 8005a62:	2203      	movs	r2, #3
 8005a64:	4650      	mov	r0, sl
 8005a66:	f7fa fbbb 	bl	80001e0 <memchr>
 8005a6a:	b140      	cbz	r0, 8005a7e <_svfiprintf_r+0x152>
 8005a6c:	2340      	movs	r3, #64	; 0x40
 8005a6e:	eba0 000a 	sub.w	r0, r0, sl
 8005a72:	fa03 f000 	lsl.w	r0, r3, r0
 8005a76:	9b04      	ldr	r3, [sp, #16]
 8005a78:	4303      	orrs	r3, r0
 8005a7a:	3401      	adds	r4, #1
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a82:	4826      	ldr	r0, [pc, #152]	; (8005b1c <_svfiprintf_r+0x1f0>)
 8005a84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a88:	2206      	movs	r2, #6
 8005a8a:	f7fa fba9 	bl	80001e0 <memchr>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	d038      	beq.n	8005b04 <_svfiprintf_r+0x1d8>
 8005a92:	4b23      	ldr	r3, [pc, #140]	; (8005b20 <_svfiprintf_r+0x1f4>)
 8005a94:	bb1b      	cbnz	r3, 8005ade <_svfiprintf_r+0x1b2>
 8005a96:	9b03      	ldr	r3, [sp, #12]
 8005a98:	3307      	adds	r3, #7
 8005a9a:	f023 0307 	bic.w	r3, r3, #7
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	9303      	str	r3, [sp, #12]
 8005aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005aa4:	4433      	add	r3, r6
 8005aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa8:	e767      	b.n	800597a <_svfiprintf_r+0x4e>
 8005aaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8005aae:	460c      	mov	r4, r1
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	e7a5      	b.n	8005a00 <_svfiprintf_r+0xd4>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	3401      	adds	r4, #1
 8005ab8:	9305      	str	r3, [sp, #20]
 8005aba:	4619      	mov	r1, r3
 8005abc:	f04f 0c0a 	mov.w	ip, #10
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ac6:	3a30      	subs	r2, #48	; 0x30
 8005ac8:	2a09      	cmp	r2, #9
 8005aca:	d903      	bls.n	8005ad4 <_svfiprintf_r+0x1a8>
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0c5      	beq.n	8005a5c <_svfiprintf_r+0x130>
 8005ad0:	9105      	str	r1, [sp, #20]
 8005ad2:	e7c3      	b.n	8005a5c <_svfiprintf_r+0x130>
 8005ad4:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ad8:	4604      	mov	r4, r0
 8005ada:	2301      	movs	r3, #1
 8005adc:	e7f0      	b.n	8005ac0 <_svfiprintf_r+0x194>
 8005ade:	ab03      	add	r3, sp, #12
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	462a      	mov	r2, r5
 8005ae4:	4b0f      	ldr	r3, [pc, #60]	; (8005b24 <_svfiprintf_r+0x1f8>)
 8005ae6:	a904      	add	r1, sp, #16
 8005ae8:	4638      	mov	r0, r7
 8005aea:	f3af 8000 	nop.w
 8005aee:	1c42      	adds	r2, r0, #1
 8005af0:	4606      	mov	r6, r0
 8005af2:	d1d6      	bne.n	8005aa2 <_svfiprintf_r+0x176>
 8005af4:	89ab      	ldrh	r3, [r5, #12]
 8005af6:	065b      	lsls	r3, r3, #25
 8005af8:	f53f af2c 	bmi.w	8005954 <_svfiprintf_r+0x28>
 8005afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005afe:	b01d      	add	sp, #116	; 0x74
 8005b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b04:	ab03      	add	r3, sp, #12
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	462a      	mov	r2, r5
 8005b0a:	4b06      	ldr	r3, [pc, #24]	; (8005b24 <_svfiprintf_r+0x1f8>)
 8005b0c:	a904      	add	r1, sp, #16
 8005b0e:	4638      	mov	r0, r7
 8005b10:	f000 f9d4 	bl	8005ebc <_printf_i>
 8005b14:	e7eb      	b.n	8005aee <_svfiprintf_r+0x1c2>
 8005b16:	bf00      	nop
 8005b18:	08006ade 	.word	0x08006ade
 8005b1c:	08006ae8 	.word	0x08006ae8
 8005b20:	00000000 	.word	0x00000000
 8005b24:	08005875 	.word	0x08005875
 8005b28:	08006ae4 	.word	0x08006ae4

08005b2c <__sfputc_r>:
 8005b2c:	6893      	ldr	r3, [r2, #8]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	b410      	push	{r4}
 8005b34:	6093      	str	r3, [r2, #8]
 8005b36:	da08      	bge.n	8005b4a <__sfputc_r+0x1e>
 8005b38:	6994      	ldr	r4, [r2, #24]
 8005b3a:	42a3      	cmp	r3, r4
 8005b3c:	db01      	blt.n	8005b42 <__sfputc_r+0x16>
 8005b3e:	290a      	cmp	r1, #10
 8005b40:	d103      	bne.n	8005b4a <__sfputc_r+0x1e>
 8005b42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b46:	f000 baef 	b.w	8006128 <__swbuf_r>
 8005b4a:	6813      	ldr	r3, [r2, #0]
 8005b4c:	1c58      	adds	r0, r3, #1
 8005b4e:	6010      	str	r0, [r2, #0]
 8005b50:	7019      	strb	r1, [r3, #0]
 8005b52:	4608      	mov	r0, r1
 8005b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b58:	4770      	bx	lr

08005b5a <__sfputs_r>:
 8005b5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	460f      	mov	r7, r1
 8005b60:	4614      	mov	r4, r2
 8005b62:	18d5      	adds	r5, r2, r3
 8005b64:	42ac      	cmp	r4, r5
 8005b66:	d101      	bne.n	8005b6c <__sfputs_r+0x12>
 8005b68:	2000      	movs	r0, #0
 8005b6a:	e007      	b.n	8005b7c <__sfputs_r+0x22>
 8005b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b70:	463a      	mov	r2, r7
 8005b72:	4630      	mov	r0, r6
 8005b74:	f7ff ffda 	bl	8005b2c <__sfputc_r>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d1f3      	bne.n	8005b64 <__sfputs_r+0xa>
 8005b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b80 <_vfiprintf_r>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	460d      	mov	r5, r1
 8005b86:	b09d      	sub	sp, #116	; 0x74
 8005b88:	4614      	mov	r4, r2
 8005b8a:	4698      	mov	r8, r3
 8005b8c:	4606      	mov	r6, r0
 8005b8e:	b118      	cbz	r0, 8005b98 <_vfiprintf_r+0x18>
 8005b90:	6983      	ldr	r3, [r0, #24]
 8005b92:	b90b      	cbnz	r3, 8005b98 <_vfiprintf_r+0x18>
 8005b94:	f000 fcaa 	bl	80064ec <__sinit>
 8005b98:	4b89      	ldr	r3, [pc, #548]	; (8005dc0 <_vfiprintf_r+0x240>)
 8005b9a:	429d      	cmp	r5, r3
 8005b9c:	d11b      	bne.n	8005bd6 <_vfiprintf_r+0x56>
 8005b9e:	6875      	ldr	r5, [r6, #4]
 8005ba0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ba2:	07d9      	lsls	r1, r3, #31
 8005ba4:	d405      	bmi.n	8005bb2 <_vfiprintf_r+0x32>
 8005ba6:	89ab      	ldrh	r3, [r5, #12]
 8005ba8:	059a      	lsls	r2, r3, #22
 8005baa:	d402      	bmi.n	8005bb2 <_vfiprintf_r+0x32>
 8005bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bae:	f000 fd3b 	bl	8006628 <__retarget_lock_acquire_recursive>
 8005bb2:	89ab      	ldrh	r3, [r5, #12]
 8005bb4:	071b      	lsls	r3, r3, #28
 8005bb6:	d501      	bpl.n	8005bbc <_vfiprintf_r+0x3c>
 8005bb8:	692b      	ldr	r3, [r5, #16]
 8005bba:	b9eb      	cbnz	r3, 8005bf8 <_vfiprintf_r+0x78>
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f000 fb04 	bl	80061cc <__swsetup_r>
 8005bc4:	b1c0      	cbz	r0, 8005bf8 <_vfiprintf_r+0x78>
 8005bc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bc8:	07dc      	lsls	r4, r3, #31
 8005bca:	d50e      	bpl.n	8005bea <_vfiprintf_r+0x6a>
 8005bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005bd0:	b01d      	add	sp, #116	; 0x74
 8005bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd6:	4b7b      	ldr	r3, [pc, #492]	; (8005dc4 <_vfiprintf_r+0x244>)
 8005bd8:	429d      	cmp	r5, r3
 8005bda:	d101      	bne.n	8005be0 <_vfiprintf_r+0x60>
 8005bdc:	68b5      	ldr	r5, [r6, #8]
 8005bde:	e7df      	b.n	8005ba0 <_vfiprintf_r+0x20>
 8005be0:	4b79      	ldr	r3, [pc, #484]	; (8005dc8 <_vfiprintf_r+0x248>)
 8005be2:	429d      	cmp	r5, r3
 8005be4:	bf08      	it	eq
 8005be6:	68f5      	ldreq	r5, [r6, #12]
 8005be8:	e7da      	b.n	8005ba0 <_vfiprintf_r+0x20>
 8005bea:	89ab      	ldrh	r3, [r5, #12]
 8005bec:	0598      	lsls	r0, r3, #22
 8005bee:	d4ed      	bmi.n	8005bcc <_vfiprintf_r+0x4c>
 8005bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bf2:	f000 fd1a 	bl	800662a <__retarget_lock_release_recursive>
 8005bf6:	e7e9      	b.n	8005bcc <_vfiprintf_r+0x4c>
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfc:	2320      	movs	r3, #32
 8005bfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c02:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c06:	2330      	movs	r3, #48	; 0x30
 8005c08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005dcc <_vfiprintf_r+0x24c>
 8005c0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c10:	f04f 0901 	mov.w	r9, #1
 8005c14:	4623      	mov	r3, r4
 8005c16:	469a      	mov	sl, r3
 8005c18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c1c:	b10a      	cbz	r2, 8005c22 <_vfiprintf_r+0xa2>
 8005c1e:	2a25      	cmp	r2, #37	; 0x25
 8005c20:	d1f9      	bne.n	8005c16 <_vfiprintf_r+0x96>
 8005c22:	ebba 0b04 	subs.w	fp, sl, r4
 8005c26:	d00b      	beq.n	8005c40 <_vfiprintf_r+0xc0>
 8005c28:	465b      	mov	r3, fp
 8005c2a:	4622      	mov	r2, r4
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f7ff ff93 	bl	8005b5a <__sfputs_r>
 8005c34:	3001      	adds	r0, #1
 8005c36:	f000 80aa 	beq.w	8005d8e <_vfiprintf_r+0x20e>
 8005c3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c3c:	445a      	add	r2, fp
 8005c3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005c40:	f89a 3000 	ldrb.w	r3, [sl]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	f000 80a2 	beq.w	8005d8e <_vfiprintf_r+0x20e>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c54:	f10a 0a01 	add.w	sl, sl, #1
 8005c58:	9304      	str	r3, [sp, #16]
 8005c5a:	9307      	str	r3, [sp, #28]
 8005c5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c60:	931a      	str	r3, [sp, #104]	; 0x68
 8005c62:	4654      	mov	r4, sl
 8005c64:	2205      	movs	r2, #5
 8005c66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6a:	4858      	ldr	r0, [pc, #352]	; (8005dcc <_vfiprintf_r+0x24c>)
 8005c6c:	f7fa fab8 	bl	80001e0 <memchr>
 8005c70:	9a04      	ldr	r2, [sp, #16]
 8005c72:	b9d8      	cbnz	r0, 8005cac <_vfiprintf_r+0x12c>
 8005c74:	06d1      	lsls	r1, r2, #27
 8005c76:	bf44      	itt	mi
 8005c78:	2320      	movmi	r3, #32
 8005c7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c7e:	0713      	lsls	r3, r2, #28
 8005c80:	bf44      	itt	mi
 8005c82:	232b      	movmi	r3, #43	; 0x2b
 8005c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c88:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c8e:	d015      	beq.n	8005cbc <_vfiprintf_r+0x13c>
 8005c90:	9a07      	ldr	r2, [sp, #28]
 8005c92:	4654      	mov	r4, sl
 8005c94:	2000      	movs	r0, #0
 8005c96:	f04f 0c0a 	mov.w	ip, #10
 8005c9a:	4621      	mov	r1, r4
 8005c9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ca0:	3b30      	subs	r3, #48	; 0x30
 8005ca2:	2b09      	cmp	r3, #9
 8005ca4:	d94e      	bls.n	8005d44 <_vfiprintf_r+0x1c4>
 8005ca6:	b1b0      	cbz	r0, 8005cd6 <_vfiprintf_r+0x156>
 8005ca8:	9207      	str	r2, [sp, #28]
 8005caa:	e014      	b.n	8005cd6 <_vfiprintf_r+0x156>
 8005cac:	eba0 0308 	sub.w	r3, r0, r8
 8005cb0:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	9304      	str	r3, [sp, #16]
 8005cb8:	46a2      	mov	sl, r4
 8005cba:	e7d2      	b.n	8005c62 <_vfiprintf_r+0xe2>
 8005cbc:	9b03      	ldr	r3, [sp, #12]
 8005cbe:	1d19      	adds	r1, r3, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	9103      	str	r1, [sp, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bfbb      	ittet	lt
 8005cc8:	425b      	neglt	r3, r3
 8005cca:	f042 0202 	orrlt.w	r2, r2, #2
 8005cce:	9307      	strge	r3, [sp, #28]
 8005cd0:	9307      	strlt	r3, [sp, #28]
 8005cd2:	bfb8      	it	lt
 8005cd4:	9204      	strlt	r2, [sp, #16]
 8005cd6:	7823      	ldrb	r3, [r4, #0]
 8005cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8005cda:	d10c      	bne.n	8005cf6 <_vfiprintf_r+0x176>
 8005cdc:	7863      	ldrb	r3, [r4, #1]
 8005cde:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce0:	d135      	bne.n	8005d4e <_vfiprintf_r+0x1ce>
 8005ce2:	9b03      	ldr	r3, [sp, #12]
 8005ce4:	1d1a      	adds	r2, r3, #4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	9203      	str	r2, [sp, #12]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	bfb8      	it	lt
 8005cee:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cf2:	3402      	adds	r4, #2
 8005cf4:	9305      	str	r3, [sp, #20]
 8005cf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ddc <_vfiprintf_r+0x25c>
 8005cfa:	7821      	ldrb	r1, [r4, #0]
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	4650      	mov	r0, sl
 8005d00:	f7fa fa6e 	bl	80001e0 <memchr>
 8005d04:	b140      	cbz	r0, 8005d18 <_vfiprintf_r+0x198>
 8005d06:	2340      	movs	r3, #64	; 0x40
 8005d08:	eba0 000a 	sub.w	r0, r0, sl
 8005d0c:	fa03 f000 	lsl.w	r0, r3, r0
 8005d10:	9b04      	ldr	r3, [sp, #16]
 8005d12:	4303      	orrs	r3, r0
 8005d14:	3401      	adds	r4, #1
 8005d16:	9304      	str	r3, [sp, #16]
 8005d18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1c:	482c      	ldr	r0, [pc, #176]	; (8005dd0 <_vfiprintf_r+0x250>)
 8005d1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d22:	2206      	movs	r2, #6
 8005d24:	f7fa fa5c 	bl	80001e0 <memchr>
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	d03f      	beq.n	8005dac <_vfiprintf_r+0x22c>
 8005d2c:	4b29      	ldr	r3, [pc, #164]	; (8005dd4 <_vfiprintf_r+0x254>)
 8005d2e:	bb1b      	cbnz	r3, 8005d78 <_vfiprintf_r+0x1f8>
 8005d30:	9b03      	ldr	r3, [sp, #12]
 8005d32:	3307      	adds	r3, #7
 8005d34:	f023 0307 	bic.w	r3, r3, #7
 8005d38:	3308      	adds	r3, #8
 8005d3a:	9303      	str	r3, [sp, #12]
 8005d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d3e:	443b      	add	r3, r7
 8005d40:	9309      	str	r3, [sp, #36]	; 0x24
 8005d42:	e767      	b.n	8005c14 <_vfiprintf_r+0x94>
 8005d44:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d48:	460c      	mov	r4, r1
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	e7a5      	b.n	8005c9a <_vfiprintf_r+0x11a>
 8005d4e:	2300      	movs	r3, #0
 8005d50:	3401      	adds	r4, #1
 8005d52:	9305      	str	r3, [sp, #20]
 8005d54:	4619      	mov	r1, r3
 8005d56:	f04f 0c0a 	mov.w	ip, #10
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d60:	3a30      	subs	r2, #48	; 0x30
 8005d62:	2a09      	cmp	r2, #9
 8005d64:	d903      	bls.n	8005d6e <_vfiprintf_r+0x1ee>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d0c5      	beq.n	8005cf6 <_vfiprintf_r+0x176>
 8005d6a:	9105      	str	r1, [sp, #20]
 8005d6c:	e7c3      	b.n	8005cf6 <_vfiprintf_r+0x176>
 8005d6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d72:	4604      	mov	r4, r0
 8005d74:	2301      	movs	r3, #1
 8005d76:	e7f0      	b.n	8005d5a <_vfiprintf_r+0x1da>
 8005d78:	ab03      	add	r3, sp, #12
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	462a      	mov	r2, r5
 8005d7e:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <_vfiprintf_r+0x258>)
 8005d80:	a904      	add	r1, sp, #16
 8005d82:	4630      	mov	r0, r6
 8005d84:	f3af 8000 	nop.w
 8005d88:	4607      	mov	r7, r0
 8005d8a:	1c78      	adds	r0, r7, #1
 8005d8c:	d1d6      	bne.n	8005d3c <_vfiprintf_r+0x1bc>
 8005d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d90:	07d9      	lsls	r1, r3, #31
 8005d92:	d405      	bmi.n	8005da0 <_vfiprintf_r+0x220>
 8005d94:	89ab      	ldrh	r3, [r5, #12]
 8005d96:	059a      	lsls	r2, r3, #22
 8005d98:	d402      	bmi.n	8005da0 <_vfiprintf_r+0x220>
 8005d9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d9c:	f000 fc45 	bl	800662a <__retarget_lock_release_recursive>
 8005da0:	89ab      	ldrh	r3, [r5, #12]
 8005da2:	065b      	lsls	r3, r3, #25
 8005da4:	f53f af12 	bmi.w	8005bcc <_vfiprintf_r+0x4c>
 8005da8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005daa:	e711      	b.n	8005bd0 <_vfiprintf_r+0x50>
 8005dac:	ab03      	add	r3, sp, #12
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	462a      	mov	r2, r5
 8005db2:	4b09      	ldr	r3, [pc, #36]	; (8005dd8 <_vfiprintf_r+0x258>)
 8005db4:	a904      	add	r1, sp, #16
 8005db6:	4630      	mov	r0, r6
 8005db8:	f000 f880 	bl	8005ebc <_printf_i>
 8005dbc:	e7e4      	b.n	8005d88 <_vfiprintf_r+0x208>
 8005dbe:	bf00      	nop
 8005dc0:	08006b34 	.word	0x08006b34
 8005dc4:	08006b54 	.word	0x08006b54
 8005dc8:	08006b14 	.word	0x08006b14
 8005dcc:	08006ade 	.word	0x08006ade
 8005dd0:	08006ae8 	.word	0x08006ae8
 8005dd4:	00000000 	.word	0x00000000
 8005dd8:	08005b5b 	.word	0x08005b5b
 8005ddc:	08006ae4 	.word	0x08006ae4

08005de0 <_printf_common>:
 8005de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de4:	4616      	mov	r6, r2
 8005de6:	4699      	mov	r9, r3
 8005de8:	688a      	ldr	r2, [r1, #8]
 8005dea:	690b      	ldr	r3, [r1, #16]
 8005dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df0:	4293      	cmp	r3, r2
 8005df2:	bfb8      	it	lt
 8005df4:	4613      	movlt	r3, r2
 8005df6:	6033      	str	r3, [r6, #0]
 8005df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	460c      	mov	r4, r1
 8005e00:	b10a      	cbz	r2, 8005e06 <_printf_common+0x26>
 8005e02:	3301      	adds	r3, #1
 8005e04:	6033      	str	r3, [r6, #0]
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	0699      	lsls	r1, r3, #26
 8005e0a:	bf42      	ittt	mi
 8005e0c:	6833      	ldrmi	r3, [r6, #0]
 8005e0e:	3302      	addmi	r3, #2
 8005e10:	6033      	strmi	r3, [r6, #0]
 8005e12:	6825      	ldr	r5, [r4, #0]
 8005e14:	f015 0506 	ands.w	r5, r5, #6
 8005e18:	d106      	bne.n	8005e28 <_printf_common+0x48>
 8005e1a:	f104 0a19 	add.w	sl, r4, #25
 8005e1e:	68e3      	ldr	r3, [r4, #12]
 8005e20:	6832      	ldr	r2, [r6, #0]
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	42ab      	cmp	r3, r5
 8005e26:	dc26      	bgt.n	8005e76 <_printf_common+0x96>
 8005e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e2c:	1e13      	subs	r3, r2, #0
 8005e2e:	6822      	ldr	r2, [r4, #0]
 8005e30:	bf18      	it	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	0692      	lsls	r2, r2, #26
 8005e36:	d42b      	bmi.n	8005e90 <_printf_common+0xb0>
 8005e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d01e      	beq.n	8005e84 <_printf_common+0xa4>
 8005e46:	6823      	ldr	r3, [r4, #0]
 8005e48:	68e5      	ldr	r5, [r4, #12]
 8005e4a:	6832      	ldr	r2, [r6, #0]
 8005e4c:	f003 0306 	and.w	r3, r3, #6
 8005e50:	2b04      	cmp	r3, #4
 8005e52:	bf08      	it	eq
 8005e54:	1aad      	subeq	r5, r5, r2
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	6922      	ldr	r2, [r4, #16]
 8005e5a:	bf0c      	ite	eq
 8005e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e60:	2500      	movne	r5, #0
 8005e62:	4293      	cmp	r3, r2
 8005e64:	bfc4      	itt	gt
 8005e66:	1a9b      	subgt	r3, r3, r2
 8005e68:	18ed      	addgt	r5, r5, r3
 8005e6a:	2600      	movs	r6, #0
 8005e6c:	341a      	adds	r4, #26
 8005e6e:	42b5      	cmp	r5, r6
 8005e70:	d11a      	bne.n	8005ea8 <_printf_common+0xc8>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e008      	b.n	8005e88 <_printf_common+0xa8>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4652      	mov	r2, sl
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	47c0      	blx	r8
 8005e80:	3001      	adds	r0, #1
 8005e82:	d103      	bne.n	8005e8c <_printf_common+0xac>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	3501      	adds	r5, #1
 8005e8e:	e7c6      	b.n	8005e1e <_printf_common+0x3e>
 8005e90:	18e1      	adds	r1, r4, r3
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	2030      	movs	r0, #48	; 0x30
 8005e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e9a:	4422      	add	r2, r4
 8005e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ea4:	3302      	adds	r3, #2
 8005ea6:	e7c7      	b.n	8005e38 <_printf_common+0x58>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4622      	mov	r2, r4
 8005eac:	4649      	mov	r1, r9
 8005eae:	4638      	mov	r0, r7
 8005eb0:	47c0      	blx	r8
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d0e6      	beq.n	8005e84 <_printf_common+0xa4>
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7d9      	b.n	8005e6e <_printf_common+0x8e>
	...

08005ebc <_printf_i>:
 8005ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec0:	7e0f      	ldrb	r7, [r1, #24]
 8005ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ec4:	2f78      	cmp	r7, #120	; 0x78
 8005ec6:	4691      	mov	r9, r2
 8005ec8:	4680      	mov	r8, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	469a      	mov	sl, r3
 8005ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ed2:	d807      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ed4:	2f62      	cmp	r7, #98	; 0x62
 8005ed6:	d80a      	bhi.n	8005eee <_printf_i+0x32>
 8005ed8:	2f00      	cmp	r7, #0
 8005eda:	f000 80d8 	beq.w	800608e <_printf_i+0x1d2>
 8005ede:	2f58      	cmp	r7, #88	; 0x58
 8005ee0:	f000 80a3 	beq.w	800602a <_printf_i+0x16e>
 8005ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eec:	e03a      	b.n	8005f64 <_printf_i+0xa8>
 8005eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef2:	2b15      	cmp	r3, #21
 8005ef4:	d8f6      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ef6:	a101      	add	r1, pc, #4	; (adr r1, 8005efc <_printf_i+0x40>)
 8005ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005efc:	08005f55 	.word	0x08005f55
 8005f00:	08005f69 	.word	0x08005f69
 8005f04:	08005ee5 	.word	0x08005ee5
 8005f08:	08005ee5 	.word	0x08005ee5
 8005f0c:	08005ee5 	.word	0x08005ee5
 8005f10:	08005ee5 	.word	0x08005ee5
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005ee5 	.word	0x08005ee5
 8005f1c:	08005ee5 	.word	0x08005ee5
 8005f20:	08005ee5 	.word	0x08005ee5
 8005f24:	08005ee5 	.word	0x08005ee5
 8005f28:	08006075 	.word	0x08006075
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08006057 	.word	0x08006057
 8005f34:	08005ee5 	.word	0x08005ee5
 8005f38:	08005ee5 	.word	0x08005ee5
 8005f3c:	08006097 	.word	0x08006097
 8005f40:	08005ee5 	.word	0x08005ee5
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005ee5 	.word	0x08005ee5
 8005f4c:	08005ee5 	.word	0x08005ee5
 8005f50:	0800605f 	.word	0x0800605f
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	602a      	str	r2, [r5, #0]
 8005f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0a3      	b.n	80060b0 <_printf_i+0x1f4>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	6829      	ldr	r1, [r5, #0]
 8005f6c:	0606      	lsls	r6, r0, #24
 8005f6e:	f101 0304 	add.w	r3, r1, #4
 8005f72:	d50a      	bpl.n	8005f8a <_printf_i+0xce>
 8005f74:	680e      	ldr	r6, [r1, #0]
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	da03      	bge.n	8005f84 <_printf_i+0xc8>
 8005f7c:	232d      	movs	r3, #45	; 0x2d
 8005f7e:	4276      	negs	r6, r6
 8005f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f84:	485e      	ldr	r0, [pc, #376]	; (8006100 <_printf_i+0x244>)
 8005f86:	230a      	movs	r3, #10
 8005f88:	e019      	b.n	8005fbe <_printf_i+0x102>
 8005f8a:	680e      	ldr	r6, [r1, #0]
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f92:	bf18      	it	ne
 8005f94:	b236      	sxthne	r6, r6
 8005f96:	e7ef      	b.n	8005f78 <_printf_i+0xbc>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	1d19      	adds	r1, r3, #4
 8005f9e:	6029      	str	r1, [r5, #0]
 8005fa0:	0601      	lsls	r1, r0, #24
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0xec>
 8005fa4:	681e      	ldr	r6, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <_printf_i+0xf2>
 8005fa8:	0646      	lsls	r6, r0, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0xe8>
 8005fac:	881e      	ldrh	r6, [r3, #0]
 8005fae:	4854      	ldr	r0, [pc, #336]	; (8006100 <_printf_i+0x244>)
 8005fb0:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb2:	bf0c      	ite	eq
 8005fb4:	2308      	moveq	r3, #8
 8005fb6:	230a      	movne	r3, #10
 8005fb8:	2100      	movs	r1, #0
 8005fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fbe:	6865      	ldr	r5, [r4, #4]
 8005fc0:	60a5      	str	r5, [r4, #8]
 8005fc2:	2d00      	cmp	r5, #0
 8005fc4:	bfa2      	ittt	ge
 8005fc6:	6821      	ldrge	r1, [r4, #0]
 8005fc8:	f021 0104 	bicge.w	r1, r1, #4
 8005fcc:	6021      	strge	r1, [r4, #0]
 8005fce:	b90e      	cbnz	r6, 8005fd4 <_printf_i+0x118>
 8005fd0:	2d00      	cmp	r5, #0
 8005fd2:	d04d      	beq.n	8006070 <_printf_i+0x1b4>
 8005fd4:	4615      	mov	r5, r2
 8005fd6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fda:	fb03 6711 	mls	r7, r3, r1, r6
 8005fde:	5dc7      	ldrb	r7, [r0, r7]
 8005fe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fe4:	4637      	mov	r7, r6
 8005fe6:	42bb      	cmp	r3, r7
 8005fe8:	460e      	mov	r6, r1
 8005fea:	d9f4      	bls.n	8005fd6 <_printf_i+0x11a>
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d10b      	bne.n	8006008 <_printf_i+0x14c>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	07de      	lsls	r6, r3, #31
 8005ff4:	d508      	bpl.n	8006008 <_printf_i+0x14c>
 8005ff6:	6923      	ldr	r3, [r4, #16]
 8005ff8:	6861      	ldr	r1, [r4, #4]
 8005ffa:	4299      	cmp	r1, r3
 8005ffc:	bfde      	ittt	le
 8005ffe:	2330      	movle	r3, #48	; 0x30
 8006000:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006004:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006008:	1b52      	subs	r2, r2, r5
 800600a:	6122      	str	r2, [r4, #16]
 800600c:	f8cd a000 	str.w	sl, [sp]
 8006010:	464b      	mov	r3, r9
 8006012:	aa03      	add	r2, sp, #12
 8006014:	4621      	mov	r1, r4
 8006016:	4640      	mov	r0, r8
 8006018:	f7ff fee2 	bl	8005de0 <_printf_common>
 800601c:	3001      	adds	r0, #1
 800601e:	d14c      	bne.n	80060ba <_printf_i+0x1fe>
 8006020:	f04f 30ff 	mov.w	r0, #4294967295
 8006024:	b004      	add	sp, #16
 8006026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602a:	4835      	ldr	r0, [pc, #212]	; (8006100 <_printf_i+0x244>)
 800602c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006030:	6829      	ldr	r1, [r5, #0]
 8006032:	6823      	ldr	r3, [r4, #0]
 8006034:	f851 6b04 	ldr.w	r6, [r1], #4
 8006038:	6029      	str	r1, [r5, #0]
 800603a:	061d      	lsls	r5, r3, #24
 800603c:	d514      	bpl.n	8006068 <_printf_i+0x1ac>
 800603e:	07df      	lsls	r7, r3, #31
 8006040:	bf44      	itt	mi
 8006042:	f043 0320 	orrmi.w	r3, r3, #32
 8006046:	6023      	strmi	r3, [r4, #0]
 8006048:	b91e      	cbnz	r6, 8006052 <_printf_i+0x196>
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	f023 0320 	bic.w	r3, r3, #32
 8006050:	6023      	str	r3, [r4, #0]
 8006052:	2310      	movs	r3, #16
 8006054:	e7b0      	b.n	8005fb8 <_printf_i+0xfc>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	f043 0320 	orr.w	r3, r3, #32
 800605c:	6023      	str	r3, [r4, #0]
 800605e:	2378      	movs	r3, #120	; 0x78
 8006060:	4828      	ldr	r0, [pc, #160]	; (8006104 <_printf_i+0x248>)
 8006062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006066:	e7e3      	b.n	8006030 <_printf_i+0x174>
 8006068:	0659      	lsls	r1, r3, #25
 800606a:	bf48      	it	mi
 800606c:	b2b6      	uxthmi	r6, r6
 800606e:	e7e6      	b.n	800603e <_printf_i+0x182>
 8006070:	4615      	mov	r5, r2
 8006072:	e7bb      	b.n	8005fec <_printf_i+0x130>
 8006074:	682b      	ldr	r3, [r5, #0]
 8006076:	6826      	ldr	r6, [r4, #0]
 8006078:	6961      	ldr	r1, [r4, #20]
 800607a:	1d18      	adds	r0, r3, #4
 800607c:	6028      	str	r0, [r5, #0]
 800607e:	0635      	lsls	r5, r6, #24
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	d501      	bpl.n	8006088 <_printf_i+0x1cc>
 8006084:	6019      	str	r1, [r3, #0]
 8006086:	e002      	b.n	800608e <_printf_i+0x1d2>
 8006088:	0670      	lsls	r0, r6, #25
 800608a:	d5fb      	bpl.n	8006084 <_printf_i+0x1c8>
 800608c:	8019      	strh	r1, [r3, #0]
 800608e:	2300      	movs	r3, #0
 8006090:	6123      	str	r3, [r4, #16]
 8006092:	4615      	mov	r5, r2
 8006094:	e7ba      	b.n	800600c <_printf_i+0x150>
 8006096:	682b      	ldr	r3, [r5, #0]
 8006098:	1d1a      	adds	r2, r3, #4
 800609a:	602a      	str	r2, [r5, #0]
 800609c:	681d      	ldr	r5, [r3, #0]
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	2100      	movs	r1, #0
 80060a2:	4628      	mov	r0, r5
 80060a4:	f7fa f89c 	bl	80001e0 <memchr>
 80060a8:	b108      	cbz	r0, 80060ae <_printf_i+0x1f2>
 80060aa:	1b40      	subs	r0, r0, r5
 80060ac:	6060      	str	r0, [r4, #4]
 80060ae:	6863      	ldr	r3, [r4, #4]
 80060b0:	6123      	str	r3, [r4, #16]
 80060b2:	2300      	movs	r3, #0
 80060b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060b8:	e7a8      	b.n	800600c <_printf_i+0x150>
 80060ba:	6923      	ldr	r3, [r4, #16]
 80060bc:	462a      	mov	r2, r5
 80060be:	4649      	mov	r1, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	47d0      	blx	sl
 80060c4:	3001      	adds	r0, #1
 80060c6:	d0ab      	beq.n	8006020 <_printf_i+0x164>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	079b      	lsls	r3, r3, #30
 80060cc:	d413      	bmi.n	80060f6 <_printf_i+0x23a>
 80060ce:	68e0      	ldr	r0, [r4, #12]
 80060d0:	9b03      	ldr	r3, [sp, #12]
 80060d2:	4298      	cmp	r0, r3
 80060d4:	bfb8      	it	lt
 80060d6:	4618      	movlt	r0, r3
 80060d8:	e7a4      	b.n	8006024 <_printf_i+0x168>
 80060da:	2301      	movs	r3, #1
 80060dc:	4632      	mov	r2, r6
 80060de:	4649      	mov	r1, r9
 80060e0:	4640      	mov	r0, r8
 80060e2:	47d0      	blx	sl
 80060e4:	3001      	adds	r0, #1
 80060e6:	d09b      	beq.n	8006020 <_printf_i+0x164>
 80060e8:	3501      	adds	r5, #1
 80060ea:	68e3      	ldr	r3, [r4, #12]
 80060ec:	9903      	ldr	r1, [sp, #12]
 80060ee:	1a5b      	subs	r3, r3, r1
 80060f0:	42ab      	cmp	r3, r5
 80060f2:	dcf2      	bgt.n	80060da <_printf_i+0x21e>
 80060f4:	e7eb      	b.n	80060ce <_printf_i+0x212>
 80060f6:	2500      	movs	r5, #0
 80060f8:	f104 0619 	add.w	r6, r4, #25
 80060fc:	e7f5      	b.n	80060ea <_printf_i+0x22e>
 80060fe:	bf00      	nop
 8006100:	08006aef 	.word	0x08006aef
 8006104:	08006b00 	.word	0x08006b00

08006108 <_sbrk_r>:
 8006108:	b538      	push	{r3, r4, r5, lr}
 800610a:	4d06      	ldr	r5, [pc, #24]	; (8006124 <_sbrk_r+0x1c>)
 800610c:	2300      	movs	r3, #0
 800610e:	4604      	mov	r4, r0
 8006110:	4608      	mov	r0, r1
 8006112:	602b      	str	r3, [r5, #0]
 8006114:	f7fa fd5e 	bl	8000bd4 <_sbrk>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d102      	bne.n	8006122 <_sbrk_r+0x1a>
 800611c:	682b      	ldr	r3, [r5, #0]
 800611e:	b103      	cbz	r3, 8006122 <_sbrk_r+0x1a>
 8006120:	6023      	str	r3, [r4, #0]
 8006122:	bd38      	pop	{r3, r4, r5, pc}
 8006124:	20012eec 	.word	0x20012eec

08006128 <__swbuf_r>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	460e      	mov	r6, r1
 800612c:	4614      	mov	r4, r2
 800612e:	4605      	mov	r5, r0
 8006130:	b118      	cbz	r0, 800613a <__swbuf_r+0x12>
 8006132:	6983      	ldr	r3, [r0, #24]
 8006134:	b90b      	cbnz	r3, 800613a <__swbuf_r+0x12>
 8006136:	f000 f9d9 	bl	80064ec <__sinit>
 800613a:	4b21      	ldr	r3, [pc, #132]	; (80061c0 <__swbuf_r+0x98>)
 800613c:	429c      	cmp	r4, r3
 800613e:	d12b      	bne.n	8006198 <__swbuf_r+0x70>
 8006140:	686c      	ldr	r4, [r5, #4]
 8006142:	69a3      	ldr	r3, [r4, #24]
 8006144:	60a3      	str	r3, [r4, #8]
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	071a      	lsls	r2, r3, #28
 800614a:	d52f      	bpl.n	80061ac <__swbuf_r+0x84>
 800614c:	6923      	ldr	r3, [r4, #16]
 800614e:	b36b      	cbz	r3, 80061ac <__swbuf_r+0x84>
 8006150:	6923      	ldr	r3, [r4, #16]
 8006152:	6820      	ldr	r0, [r4, #0]
 8006154:	1ac0      	subs	r0, r0, r3
 8006156:	6963      	ldr	r3, [r4, #20]
 8006158:	b2f6      	uxtb	r6, r6
 800615a:	4283      	cmp	r3, r0
 800615c:	4637      	mov	r7, r6
 800615e:	dc04      	bgt.n	800616a <__swbuf_r+0x42>
 8006160:	4621      	mov	r1, r4
 8006162:	4628      	mov	r0, r5
 8006164:	f000 f92e 	bl	80063c4 <_fflush_r>
 8006168:	bb30      	cbnz	r0, 80061b8 <__swbuf_r+0x90>
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	3b01      	subs	r3, #1
 800616e:	60a3      	str	r3, [r4, #8]
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	1c5a      	adds	r2, r3, #1
 8006174:	6022      	str	r2, [r4, #0]
 8006176:	701e      	strb	r6, [r3, #0]
 8006178:	6963      	ldr	r3, [r4, #20]
 800617a:	3001      	adds	r0, #1
 800617c:	4283      	cmp	r3, r0
 800617e:	d004      	beq.n	800618a <__swbuf_r+0x62>
 8006180:	89a3      	ldrh	r3, [r4, #12]
 8006182:	07db      	lsls	r3, r3, #31
 8006184:	d506      	bpl.n	8006194 <__swbuf_r+0x6c>
 8006186:	2e0a      	cmp	r6, #10
 8006188:	d104      	bne.n	8006194 <__swbuf_r+0x6c>
 800618a:	4621      	mov	r1, r4
 800618c:	4628      	mov	r0, r5
 800618e:	f000 f919 	bl	80063c4 <_fflush_r>
 8006192:	b988      	cbnz	r0, 80061b8 <__swbuf_r+0x90>
 8006194:	4638      	mov	r0, r7
 8006196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006198:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <__swbuf_r+0x9c>)
 800619a:	429c      	cmp	r4, r3
 800619c:	d101      	bne.n	80061a2 <__swbuf_r+0x7a>
 800619e:	68ac      	ldr	r4, [r5, #8]
 80061a0:	e7cf      	b.n	8006142 <__swbuf_r+0x1a>
 80061a2:	4b09      	ldr	r3, [pc, #36]	; (80061c8 <__swbuf_r+0xa0>)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	bf08      	it	eq
 80061a8:	68ec      	ldreq	r4, [r5, #12]
 80061aa:	e7ca      	b.n	8006142 <__swbuf_r+0x1a>
 80061ac:	4621      	mov	r1, r4
 80061ae:	4628      	mov	r0, r5
 80061b0:	f000 f80c 	bl	80061cc <__swsetup_r>
 80061b4:	2800      	cmp	r0, #0
 80061b6:	d0cb      	beq.n	8006150 <__swbuf_r+0x28>
 80061b8:	f04f 37ff 	mov.w	r7, #4294967295
 80061bc:	e7ea      	b.n	8006194 <__swbuf_r+0x6c>
 80061be:	bf00      	nop
 80061c0:	08006b34 	.word	0x08006b34
 80061c4:	08006b54 	.word	0x08006b54
 80061c8:	08006b14 	.word	0x08006b14

080061cc <__swsetup_r>:
 80061cc:	4b32      	ldr	r3, [pc, #200]	; (8006298 <__swsetup_r+0xcc>)
 80061ce:	b570      	push	{r4, r5, r6, lr}
 80061d0:	681d      	ldr	r5, [r3, #0]
 80061d2:	4606      	mov	r6, r0
 80061d4:	460c      	mov	r4, r1
 80061d6:	b125      	cbz	r5, 80061e2 <__swsetup_r+0x16>
 80061d8:	69ab      	ldr	r3, [r5, #24]
 80061da:	b913      	cbnz	r3, 80061e2 <__swsetup_r+0x16>
 80061dc:	4628      	mov	r0, r5
 80061de:	f000 f985 	bl	80064ec <__sinit>
 80061e2:	4b2e      	ldr	r3, [pc, #184]	; (800629c <__swsetup_r+0xd0>)
 80061e4:	429c      	cmp	r4, r3
 80061e6:	d10f      	bne.n	8006208 <__swsetup_r+0x3c>
 80061e8:	686c      	ldr	r4, [r5, #4]
 80061ea:	89a3      	ldrh	r3, [r4, #12]
 80061ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061f0:	0719      	lsls	r1, r3, #28
 80061f2:	d42c      	bmi.n	800624e <__swsetup_r+0x82>
 80061f4:	06dd      	lsls	r5, r3, #27
 80061f6:	d411      	bmi.n	800621c <__swsetup_r+0x50>
 80061f8:	2309      	movs	r3, #9
 80061fa:	6033      	str	r3, [r6, #0]
 80061fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006200:	81a3      	strh	r3, [r4, #12]
 8006202:	f04f 30ff 	mov.w	r0, #4294967295
 8006206:	e03e      	b.n	8006286 <__swsetup_r+0xba>
 8006208:	4b25      	ldr	r3, [pc, #148]	; (80062a0 <__swsetup_r+0xd4>)
 800620a:	429c      	cmp	r4, r3
 800620c:	d101      	bne.n	8006212 <__swsetup_r+0x46>
 800620e:	68ac      	ldr	r4, [r5, #8]
 8006210:	e7eb      	b.n	80061ea <__swsetup_r+0x1e>
 8006212:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <__swsetup_r+0xd8>)
 8006214:	429c      	cmp	r4, r3
 8006216:	bf08      	it	eq
 8006218:	68ec      	ldreq	r4, [r5, #12]
 800621a:	e7e6      	b.n	80061ea <__swsetup_r+0x1e>
 800621c:	0758      	lsls	r0, r3, #29
 800621e:	d512      	bpl.n	8006246 <__swsetup_r+0x7a>
 8006220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006222:	b141      	cbz	r1, 8006236 <__swsetup_r+0x6a>
 8006224:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006228:	4299      	cmp	r1, r3
 800622a:	d002      	beq.n	8006232 <__swsetup_r+0x66>
 800622c:	4630      	mov	r0, r6
 800622e:	f7ff fa41 	bl	80056b4 <_free_r>
 8006232:	2300      	movs	r3, #0
 8006234:	6363      	str	r3, [r4, #52]	; 0x34
 8006236:	89a3      	ldrh	r3, [r4, #12]
 8006238:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800623c:	81a3      	strh	r3, [r4, #12]
 800623e:	2300      	movs	r3, #0
 8006240:	6063      	str	r3, [r4, #4]
 8006242:	6923      	ldr	r3, [r4, #16]
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	89a3      	ldrh	r3, [r4, #12]
 8006248:	f043 0308 	orr.w	r3, r3, #8
 800624c:	81a3      	strh	r3, [r4, #12]
 800624e:	6923      	ldr	r3, [r4, #16]
 8006250:	b94b      	cbnz	r3, 8006266 <__swsetup_r+0x9a>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800625c:	d003      	beq.n	8006266 <__swsetup_r+0x9a>
 800625e:	4621      	mov	r1, r4
 8006260:	4630      	mov	r0, r6
 8006262:	f000 fa09 	bl	8006678 <__smakebuf_r>
 8006266:	89a0      	ldrh	r0, [r4, #12]
 8006268:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800626c:	f010 0301 	ands.w	r3, r0, #1
 8006270:	d00a      	beq.n	8006288 <__swsetup_r+0xbc>
 8006272:	2300      	movs	r3, #0
 8006274:	60a3      	str	r3, [r4, #8]
 8006276:	6963      	ldr	r3, [r4, #20]
 8006278:	425b      	negs	r3, r3
 800627a:	61a3      	str	r3, [r4, #24]
 800627c:	6923      	ldr	r3, [r4, #16]
 800627e:	b943      	cbnz	r3, 8006292 <__swsetup_r+0xc6>
 8006280:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006284:	d1ba      	bne.n	80061fc <__swsetup_r+0x30>
 8006286:	bd70      	pop	{r4, r5, r6, pc}
 8006288:	0781      	lsls	r1, r0, #30
 800628a:	bf58      	it	pl
 800628c:	6963      	ldrpl	r3, [r4, #20]
 800628e:	60a3      	str	r3, [r4, #8]
 8006290:	e7f4      	b.n	800627c <__swsetup_r+0xb0>
 8006292:	2000      	movs	r0, #0
 8006294:	e7f7      	b.n	8006286 <__swsetup_r+0xba>
 8006296:	bf00      	nop
 8006298:	20000014 	.word	0x20000014
 800629c:	08006b34 	.word	0x08006b34
 80062a0:	08006b54 	.word	0x08006b54
 80062a4:	08006b14 	.word	0x08006b14

080062a8 <abort>:
 80062a8:	b508      	push	{r3, lr}
 80062aa:	2006      	movs	r0, #6
 80062ac:	f000 faa2 	bl	80067f4 <raise>
 80062b0:	2001      	movs	r0, #1
 80062b2:	f7fa fc17 	bl	8000ae4 <_exit>
	...

080062b8 <__sflush_r>:
 80062b8:	898a      	ldrh	r2, [r1, #12]
 80062ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062be:	4605      	mov	r5, r0
 80062c0:	0710      	lsls	r0, r2, #28
 80062c2:	460c      	mov	r4, r1
 80062c4:	d458      	bmi.n	8006378 <__sflush_r+0xc0>
 80062c6:	684b      	ldr	r3, [r1, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	dc05      	bgt.n	80062d8 <__sflush_r+0x20>
 80062cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dc02      	bgt.n	80062d8 <__sflush_r+0x20>
 80062d2:	2000      	movs	r0, #0
 80062d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062da:	2e00      	cmp	r6, #0
 80062dc:	d0f9      	beq.n	80062d2 <__sflush_r+0x1a>
 80062de:	2300      	movs	r3, #0
 80062e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062e4:	682f      	ldr	r7, [r5, #0]
 80062e6:	602b      	str	r3, [r5, #0]
 80062e8:	d032      	beq.n	8006350 <__sflush_r+0x98>
 80062ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062ec:	89a3      	ldrh	r3, [r4, #12]
 80062ee:	075a      	lsls	r2, r3, #29
 80062f0:	d505      	bpl.n	80062fe <__sflush_r+0x46>
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	1ac0      	subs	r0, r0, r3
 80062f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062f8:	b10b      	cbz	r3, 80062fe <__sflush_r+0x46>
 80062fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062fc:	1ac0      	subs	r0, r0, r3
 80062fe:	2300      	movs	r3, #0
 8006300:	4602      	mov	r2, r0
 8006302:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006304:	6a21      	ldr	r1, [r4, #32]
 8006306:	4628      	mov	r0, r5
 8006308:	47b0      	blx	r6
 800630a:	1c43      	adds	r3, r0, #1
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	d106      	bne.n	800631e <__sflush_r+0x66>
 8006310:	6829      	ldr	r1, [r5, #0]
 8006312:	291d      	cmp	r1, #29
 8006314:	d82c      	bhi.n	8006370 <__sflush_r+0xb8>
 8006316:	4a2a      	ldr	r2, [pc, #168]	; (80063c0 <__sflush_r+0x108>)
 8006318:	40ca      	lsrs	r2, r1
 800631a:	07d6      	lsls	r6, r2, #31
 800631c:	d528      	bpl.n	8006370 <__sflush_r+0xb8>
 800631e:	2200      	movs	r2, #0
 8006320:	6062      	str	r2, [r4, #4]
 8006322:	04d9      	lsls	r1, r3, #19
 8006324:	6922      	ldr	r2, [r4, #16]
 8006326:	6022      	str	r2, [r4, #0]
 8006328:	d504      	bpl.n	8006334 <__sflush_r+0x7c>
 800632a:	1c42      	adds	r2, r0, #1
 800632c:	d101      	bne.n	8006332 <__sflush_r+0x7a>
 800632e:	682b      	ldr	r3, [r5, #0]
 8006330:	b903      	cbnz	r3, 8006334 <__sflush_r+0x7c>
 8006332:	6560      	str	r0, [r4, #84]	; 0x54
 8006334:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006336:	602f      	str	r7, [r5, #0]
 8006338:	2900      	cmp	r1, #0
 800633a:	d0ca      	beq.n	80062d2 <__sflush_r+0x1a>
 800633c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006340:	4299      	cmp	r1, r3
 8006342:	d002      	beq.n	800634a <__sflush_r+0x92>
 8006344:	4628      	mov	r0, r5
 8006346:	f7ff f9b5 	bl	80056b4 <_free_r>
 800634a:	2000      	movs	r0, #0
 800634c:	6360      	str	r0, [r4, #52]	; 0x34
 800634e:	e7c1      	b.n	80062d4 <__sflush_r+0x1c>
 8006350:	6a21      	ldr	r1, [r4, #32]
 8006352:	2301      	movs	r3, #1
 8006354:	4628      	mov	r0, r5
 8006356:	47b0      	blx	r6
 8006358:	1c41      	adds	r1, r0, #1
 800635a:	d1c7      	bne.n	80062ec <__sflush_r+0x34>
 800635c:	682b      	ldr	r3, [r5, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0c4      	beq.n	80062ec <__sflush_r+0x34>
 8006362:	2b1d      	cmp	r3, #29
 8006364:	d001      	beq.n	800636a <__sflush_r+0xb2>
 8006366:	2b16      	cmp	r3, #22
 8006368:	d101      	bne.n	800636e <__sflush_r+0xb6>
 800636a:	602f      	str	r7, [r5, #0]
 800636c:	e7b1      	b.n	80062d2 <__sflush_r+0x1a>
 800636e:	89a3      	ldrh	r3, [r4, #12]
 8006370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006374:	81a3      	strh	r3, [r4, #12]
 8006376:	e7ad      	b.n	80062d4 <__sflush_r+0x1c>
 8006378:	690f      	ldr	r7, [r1, #16]
 800637a:	2f00      	cmp	r7, #0
 800637c:	d0a9      	beq.n	80062d2 <__sflush_r+0x1a>
 800637e:	0793      	lsls	r3, r2, #30
 8006380:	680e      	ldr	r6, [r1, #0]
 8006382:	bf08      	it	eq
 8006384:	694b      	ldreq	r3, [r1, #20]
 8006386:	600f      	str	r7, [r1, #0]
 8006388:	bf18      	it	ne
 800638a:	2300      	movne	r3, #0
 800638c:	eba6 0807 	sub.w	r8, r6, r7
 8006390:	608b      	str	r3, [r1, #8]
 8006392:	f1b8 0f00 	cmp.w	r8, #0
 8006396:	dd9c      	ble.n	80062d2 <__sflush_r+0x1a>
 8006398:	6a21      	ldr	r1, [r4, #32]
 800639a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800639c:	4643      	mov	r3, r8
 800639e:	463a      	mov	r2, r7
 80063a0:	4628      	mov	r0, r5
 80063a2:	47b0      	blx	r6
 80063a4:	2800      	cmp	r0, #0
 80063a6:	dc06      	bgt.n	80063b6 <__sflush_r+0xfe>
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	e78e      	b.n	80062d4 <__sflush_r+0x1c>
 80063b6:	4407      	add	r7, r0
 80063b8:	eba8 0800 	sub.w	r8, r8, r0
 80063bc:	e7e9      	b.n	8006392 <__sflush_r+0xda>
 80063be:	bf00      	nop
 80063c0:	20400001 	.word	0x20400001

080063c4 <_fflush_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	690b      	ldr	r3, [r1, #16]
 80063c8:	4605      	mov	r5, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	b913      	cbnz	r3, 80063d4 <_fflush_r+0x10>
 80063ce:	2500      	movs	r5, #0
 80063d0:	4628      	mov	r0, r5
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	b118      	cbz	r0, 80063de <_fflush_r+0x1a>
 80063d6:	6983      	ldr	r3, [r0, #24]
 80063d8:	b90b      	cbnz	r3, 80063de <_fflush_r+0x1a>
 80063da:	f000 f887 	bl	80064ec <__sinit>
 80063de:	4b14      	ldr	r3, [pc, #80]	; (8006430 <_fflush_r+0x6c>)
 80063e0:	429c      	cmp	r4, r3
 80063e2:	d11b      	bne.n	800641c <_fflush_r+0x58>
 80063e4:	686c      	ldr	r4, [r5, #4]
 80063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0ef      	beq.n	80063ce <_fflush_r+0xa>
 80063ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063f0:	07d0      	lsls	r0, r2, #31
 80063f2:	d404      	bmi.n	80063fe <_fflush_r+0x3a>
 80063f4:	0599      	lsls	r1, r3, #22
 80063f6:	d402      	bmi.n	80063fe <_fflush_r+0x3a>
 80063f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063fa:	f000 f915 	bl	8006628 <__retarget_lock_acquire_recursive>
 80063fe:	4628      	mov	r0, r5
 8006400:	4621      	mov	r1, r4
 8006402:	f7ff ff59 	bl	80062b8 <__sflush_r>
 8006406:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006408:	07da      	lsls	r2, r3, #31
 800640a:	4605      	mov	r5, r0
 800640c:	d4e0      	bmi.n	80063d0 <_fflush_r+0xc>
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	059b      	lsls	r3, r3, #22
 8006412:	d4dd      	bmi.n	80063d0 <_fflush_r+0xc>
 8006414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006416:	f000 f908 	bl	800662a <__retarget_lock_release_recursive>
 800641a:	e7d9      	b.n	80063d0 <_fflush_r+0xc>
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <_fflush_r+0x70>)
 800641e:	429c      	cmp	r4, r3
 8006420:	d101      	bne.n	8006426 <_fflush_r+0x62>
 8006422:	68ac      	ldr	r4, [r5, #8]
 8006424:	e7df      	b.n	80063e6 <_fflush_r+0x22>
 8006426:	4b04      	ldr	r3, [pc, #16]	; (8006438 <_fflush_r+0x74>)
 8006428:	429c      	cmp	r4, r3
 800642a:	bf08      	it	eq
 800642c:	68ec      	ldreq	r4, [r5, #12]
 800642e:	e7da      	b.n	80063e6 <_fflush_r+0x22>
 8006430:	08006b34 	.word	0x08006b34
 8006434:	08006b54 	.word	0x08006b54
 8006438:	08006b14 	.word	0x08006b14

0800643c <std>:
 800643c:	2300      	movs	r3, #0
 800643e:	b510      	push	{r4, lr}
 8006440:	4604      	mov	r4, r0
 8006442:	e9c0 3300 	strd	r3, r3, [r0]
 8006446:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800644a:	6083      	str	r3, [r0, #8]
 800644c:	8181      	strh	r1, [r0, #12]
 800644e:	6643      	str	r3, [r0, #100]	; 0x64
 8006450:	81c2      	strh	r2, [r0, #14]
 8006452:	6183      	str	r3, [r0, #24]
 8006454:	4619      	mov	r1, r3
 8006456:	2208      	movs	r2, #8
 8006458:	305c      	adds	r0, #92	; 0x5c
 800645a:	f7ff f88d 	bl	8005578 <memset>
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <std+0x38>)
 8006460:	6263      	str	r3, [r4, #36]	; 0x24
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <std+0x3c>)
 8006464:	62a3      	str	r3, [r4, #40]	; 0x28
 8006466:	4b05      	ldr	r3, [pc, #20]	; (800647c <std+0x40>)
 8006468:	62e3      	str	r3, [r4, #44]	; 0x2c
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <std+0x44>)
 800646c:	6224      	str	r4, [r4, #32]
 800646e:	6323      	str	r3, [r4, #48]	; 0x30
 8006470:	bd10      	pop	{r4, pc}
 8006472:	bf00      	nop
 8006474:	0800682d 	.word	0x0800682d
 8006478:	0800684f 	.word	0x0800684f
 800647c:	08006887 	.word	0x08006887
 8006480:	080068ab 	.word	0x080068ab

08006484 <_cleanup_r>:
 8006484:	4901      	ldr	r1, [pc, #4]	; (800648c <_cleanup_r+0x8>)
 8006486:	f000 b8af 	b.w	80065e8 <_fwalk_reent>
 800648a:	bf00      	nop
 800648c:	080063c5 	.word	0x080063c5

08006490 <__sfmoreglue>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	2268      	movs	r2, #104	; 0x68
 8006494:	1e4d      	subs	r5, r1, #1
 8006496:	4355      	muls	r5, r2
 8006498:	460e      	mov	r6, r1
 800649a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800649e:	f7ff f975 	bl	800578c <_malloc_r>
 80064a2:	4604      	mov	r4, r0
 80064a4:	b140      	cbz	r0, 80064b8 <__sfmoreglue+0x28>
 80064a6:	2100      	movs	r1, #0
 80064a8:	e9c0 1600 	strd	r1, r6, [r0]
 80064ac:	300c      	adds	r0, #12
 80064ae:	60a0      	str	r0, [r4, #8]
 80064b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064b4:	f7ff f860 	bl	8005578 <memset>
 80064b8:	4620      	mov	r0, r4
 80064ba:	bd70      	pop	{r4, r5, r6, pc}

080064bc <__sfp_lock_acquire>:
 80064bc:	4801      	ldr	r0, [pc, #4]	; (80064c4 <__sfp_lock_acquire+0x8>)
 80064be:	f000 b8b3 	b.w	8006628 <__retarget_lock_acquire_recursive>
 80064c2:	bf00      	nop
 80064c4:	20012ee9 	.word	0x20012ee9

080064c8 <__sfp_lock_release>:
 80064c8:	4801      	ldr	r0, [pc, #4]	; (80064d0 <__sfp_lock_release+0x8>)
 80064ca:	f000 b8ae 	b.w	800662a <__retarget_lock_release_recursive>
 80064ce:	bf00      	nop
 80064d0:	20012ee9 	.word	0x20012ee9

080064d4 <__sinit_lock_acquire>:
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <__sinit_lock_acquire+0x8>)
 80064d6:	f000 b8a7 	b.w	8006628 <__retarget_lock_acquire_recursive>
 80064da:	bf00      	nop
 80064dc:	20012eea 	.word	0x20012eea

080064e0 <__sinit_lock_release>:
 80064e0:	4801      	ldr	r0, [pc, #4]	; (80064e8 <__sinit_lock_release+0x8>)
 80064e2:	f000 b8a2 	b.w	800662a <__retarget_lock_release_recursive>
 80064e6:	bf00      	nop
 80064e8:	20012eea 	.word	0x20012eea

080064ec <__sinit>:
 80064ec:	b510      	push	{r4, lr}
 80064ee:	4604      	mov	r4, r0
 80064f0:	f7ff fff0 	bl	80064d4 <__sinit_lock_acquire>
 80064f4:	69a3      	ldr	r3, [r4, #24]
 80064f6:	b11b      	cbz	r3, 8006500 <__sinit+0x14>
 80064f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064fc:	f7ff bff0 	b.w	80064e0 <__sinit_lock_release>
 8006500:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006504:	6523      	str	r3, [r4, #80]	; 0x50
 8006506:	4b13      	ldr	r3, [pc, #76]	; (8006554 <__sinit+0x68>)
 8006508:	4a13      	ldr	r2, [pc, #76]	; (8006558 <__sinit+0x6c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	62a2      	str	r2, [r4, #40]	; 0x28
 800650e:	42a3      	cmp	r3, r4
 8006510:	bf04      	itt	eq
 8006512:	2301      	moveq	r3, #1
 8006514:	61a3      	streq	r3, [r4, #24]
 8006516:	4620      	mov	r0, r4
 8006518:	f000 f820 	bl	800655c <__sfp>
 800651c:	6060      	str	r0, [r4, #4]
 800651e:	4620      	mov	r0, r4
 8006520:	f000 f81c 	bl	800655c <__sfp>
 8006524:	60a0      	str	r0, [r4, #8]
 8006526:	4620      	mov	r0, r4
 8006528:	f000 f818 	bl	800655c <__sfp>
 800652c:	2200      	movs	r2, #0
 800652e:	60e0      	str	r0, [r4, #12]
 8006530:	2104      	movs	r1, #4
 8006532:	6860      	ldr	r0, [r4, #4]
 8006534:	f7ff ff82 	bl	800643c <std>
 8006538:	68a0      	ldr	r0, [r4, #8]
 800653a:	2201      	movs	r2, #1
 800653c:	2109      	movs	r1, #9
 800653e:	f7ff ff7d 	bl	800643c <std>
 8006542:	68e0      	ldr	r0, [r4, #12]
 8006544:	2202      	movs	r2, #2
 8006546:	2112      	movs	r1, #18
 8006548:	f7ff ff78 	bl	800643c <std>
 800654c:	2301      	movs	r3, #1
 800654e:	61a3      	str	r3, [r4, #24]
 8006550:	e7d2      	b.n	80064f8 <__sinit+0xc>
 8006552:	bf00      	nop
 8006554:	08006a2c 	.word	0x08006a2c
 8006558:	08006485 	.word	0x08006485

0800655c <__sfp>:
 800655c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655e:	4607      	mov	r7, r0
 8006560:	f7ff ffac 	bl	80064bc <__sfp_lock_acquire>
 8006564:	4b1e      	ldr	r3, [pc, #120]	; (80065e0 <__sfp+0x84>)
 8006566:	681e      	ldr	r6, [r3, #0]
 8006568:	69b3      	ldr	r3, [r6, #24]
 800656a:	b913      	cbnz	r3, 8006572 <__sfp+0x16>
 800656c:	4630      	mov	r0, r6
 800656e:	f7ff ffbd 	bl	80064ec <__sinit>
 8006572:	3648      	adds	r6, #72	; 0x48
 8006574:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006578:	3b01      	subs	r3, #1
 800657a:	d503      	bpl.n	8006584 <__sfp+0x28>
 800657c:	6833      	ldr	r3, [r6, #0]
 800657e:	b30b      	cbz	r3, 80065c4 <__sfp+0x68>
 8006580:	6836      	ldr	r6, [r6, #0]
 8006582:	e7f7      	b.n	8006574 <__sfp+0x18>
 8006584:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006588:	b9d5      	cbnz	r5, 80065c0 <__sfp+0x64>
 800658a:	4b16      	ldr	r3, [pc, #88]	; (80065e4 <__sfp+0x88>)
 800658c:	60e3      	str	r3, [r4, #12]
 800658e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006592:	6665      	str	r5, [r4, #100]	; 0x64
 8006594:	f000 f847 	bl	8006626 <__retarget_lock_init_recursive>
 8006598:	f7ff ff96 	bl	80064c8 <__sfp_lock_release>
 800659c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065a4:	6025      	str	r5, [r4, #0]
 80065a6:	61a5      	str	r5, [r4, #24]
 80065a8:	2208      	movs	r2, #8
 80065aa:	4629      	mov	r1, r5
 80065ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065b0:	f7fe ffe2 	bl	8005578 <memset>
 80065b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065bc:	4620      	mov	r0, r4
 80065be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c0:	3468      	adds	r4, #104	; 0x68
 80065c2:	e7d9      	b.n	8006578 <__sfp+0x1c>
 80065c4:	2104      	movs	r1, #4
 80065c6:	4638      	mov	r0, r7
 80065c8:	f7ff ff62 	bl	8006490 <__sfmoreglue>
 80065cc:	4604      	mov	r4, r0
 80065ce:	6030      	str	r0, [r6, #0]
 80065d0:	2800      	cmp	r0, #0
 80065d2:	d1d5      	bne.n	8006580 <__sfp+0x24>
 80065d4:	f7ff ff78 	bl	80064c8 <__sfp_lock_release>
 80065d8:	230c      	movs	r3, #12
 80065da:	603b      	str	r3, [r7, #0]
 80065dc:	e7ee      	b.n	80065bc <__sfp+0x60>
 80065de:	bf00      	nop
 80065e0:	08006a2c 	.word	0x08006a2c
 80065e4:	ffff0001 	.word	0xffff0001

080065e8 <_fwalk_reent>:
 80065e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065ec:	4606      	mov	r6, r0
 80065ee:	4688      	mov	r8, r1
 80065f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80065f4:	2700      	movs	r7, #0
 80065f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80065fa:	f1b9 0901 	subs.w	r9, r9, #1
 80065fe:	d505      	bpl.n	800660c <_fwalk_reent+0x24>
 8006600:	6824      	ldr	r4, [r4, #0]
 8006602:	2c00      	cmp	r4, #0
 8006604:	d1f7      	bne.n	80065f6 <_fwalk_reent+0xe>
 8006606:	4638      	mov	r0, r7
 8006608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800660c:	89ab      	ldrh	r3, [r5, #12]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d907      	bls.n	8006622 <_fwalk_reent+0x3a>
 8006612:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006616:	3301      	adds	r3, #1
 8006618:	d003      	beq.n	8006622 <_fwalk_reent+0x3a>
 800661a:	4629      	mov	r1, r5
 800661c:	4630      	mov	r0, r6
 800661e:	47c0      	blx	r8
 8006620:	4307      	orrs	r7, r0
 8006622:	3568      	adds	r5, #104	; 0x68
 8006624:	e7e9      	b.n	80065fa <_fwalk_reent+0x12>

08006626 <__retarget_lock_init_recursive>:
 8006626:	4770      	bx	lr

08006628 <__retarget_lock_acquire_recursive>:
 8006628:	4770      	bx	lr

0800662a <__retarget_lock_release_recursive>:
 800662a:	4770      	bx	lr

0800662c <__swhatbuf_r>:
 800662c:	b570      	push	{r4, r5, r6, lr}
 800662e:	460e      	mov	r6, r1
 8006630:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006634:	2900      	cmp	r1, #0
 8006636:	b096      	sub	sp, #88	; 0x58
 8006638:	4614      	mov	r4, r2
 800663a:	461d      	mov	r5, r3
 800663c:	da08      	bge.n	8006650 <__swhatbuf_r+0x24>
 800663e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	602a      	str	r2, [r5, #0]
 8006646:	061a      	lsls	r2, r3, #24
 8006648:	d410      	bmi.n	800666c <__swhatbuf_r+0x40>
 800664a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800664e:	e00e      	b.n	800666e <__swhatbuf_r+0x42>
 8006650:	466a      	mov	r2, sp
 8006652:	f000 f951 	bl	80068f8 <_fstat_r>
 8006656:	2800      	cmp	r0, #0
 8006658:	dbf1      	blt.n	800663e <__swhatbuf_r+0x12>
 800665a:	9a01      	ldr	r2, [sp, #4]
 800665c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006660:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006664:	425a      	negs	r2, r3
 8006666:	415a      	adcs	r2, r3
 8006668:	602a      	str	r2, [r5, #0]
 800666a:	e7ee      	b.n	800664a <__swhatbuf_r+0x1e>
 800666c:	2340      	movs	r3, #64	; 0x40
 800666e:	2000      	movs	r0, #0
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	b016      	add	sp, #88	; 0x58
 8006674:	bd70      	pop	{r4, r5, r6, pc}
	...

08006678 <__smakebuf_r>:
 8006678:	898b      	ldrh	r3, [r1, #12]
 800667a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800667c:	079d      	lsls	r5, r3, #30
 800667e:	4606      	mov	r6, r0
 8006680:	460c      	mov	r4, r1
 8006682:	d507      	bpl.n	8006694 <__smakebuf_r+0x1c>
 8006684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006688:	6023      	str	r3, [r4, #0]
 800668a:	6123      	str	r3, [r4, #16]
 800668c:	2301      	movs	r3, #1
 800668e:	6163      	str	r3, [r4, #20]
 8006690:	b002      	add	sp, #8
 8006692:	bd70      	pop	{r4, r5, r6, pc}
 8006694:	ab01      	add	r3, sp, #4
 8006696:	466a      	mov	r2, sp
 8006698:	f7ff ffc8 	bl	800662c <__swhatbuf_r>
 800669c:	9900      	ldr	r1, [sp, #0]
 800669e:	4605      	mov	r5, r0
 80066a0:	4630      	mov	r0, r6
 80066a2:	f7ff f873 	bl	800578c <_malloc_r>
 80066a6:	b948      	cbnz	r0, 80066bc <__smakebuf_r+0x44>
 80066a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066ac:	059a      	lsls	r2, r3, #22
 80066ae:	d4ef      	bmi.n	8006690 <__smakebuf_r+0x18>
 80066b0:	f023 0303 	bic.w	r3, r3, #3
 80066b4:	f043 0302 	orr.w	r3, r3, #2
 80066b8:	81a3      	strh	r3, [r4, #12]
 80066ba:	e7e3      	b.n	8006684 <__smakebuf_r+0xc>
 80066bc:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <__smakebuf_r+0x7c>)
 80066be:	62b3      	str	r3, [r6, #40]	; 0x28
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	6020      	str	r0, [r4, #0]
 80066c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066c8:	81a3      	strh	r3, [r4, #12]
 80066ca:	9b00      	ldr	r3, [sp, #0]
 80066cc:	6163      	str	r3, [r4, #20]
 80066ce:	9b01      	ldr	r3, [sp, #4]
 80066d0:	6120      	str	r0, [r4, #16]
 80066d2:	b15b      	cbz	r3, 80066ec <__smakebuf_r+0x74>
 80066d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066d8:	4630      	mov	r0, r6
 80066da:	f000 f91f 	bl	800691c <_isatty_r>
 80066de:	b128      	cbz	r0, 80066ec <__smakebuf_r+0x74>
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	f023 0303 	bic.w	r3, r3, #3
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	89a0      	ldrh	r0, [r4, #12]
 80066ee:	4305      	orrs	r5, r0
 80066f0:	81a5      	strh	r5, [r4, #12]
 80066f2:	e7cd      	b.n	8006690 <__smakebuf_r+0x18>
 80066f4:	08006485 	.word	0x08006485

080066f8 <memmove>:
 80066f8:	4288      	cmp	r0, r1
 80066fa:	b510      	push	{r4, lr}
 80066fc:	eb01 0402 	add.w	r4, r1, r2
 8006700:	d902      	bls.n	8006708 <memmove+0x10>
 8006702:	4284      	cmp	r4, r0
 8006704:	4623      	mov	r3, r4
 8006706:	d807      	bhi.n	8006718 <memmove+0x20>
 8006708:	1e43      	subs	r3, r0, #1
 800670a:	42a1      	cmp	r1, r4
 800670c:	d008      	beq.n	8006720 <memmove+0x28>
 800670e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006712:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006716:	e7f8      	b.n	800670a <memmove+0x12>
 8006718:	4402      	add	r2, r0
 800671a:	4601      	mov	r1, r0
 800671c:	428a      	cmp	r2, r1
 800671e:	d100      	bne.n	8006722 <memmove+0x2a>
 8006720:	bd10      	pop	{r4, pc}
 8006722:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006726:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800672a:	e7f7      	b.n	800671c <memmove+0x24>

0800672c <__malloc_lock>:
 800672c:	4801      	ldr	r0, [pc, #4]	; (8006734 <__malloc_lock+0x8>)
 800672e:	f7ff bf7b 	b.w	8006628 <__retarget_lock_acquire_recursive>
 8006732:	bf00      	nop
 8006734:	20012ee8 	.word	0x20012ee8

08006738 <__malloc_unlock>:
 8006738:	4801      	ldr	r0, [pc, #4]	; (8006740 <__malloc_unlock+0x8>)
 800673a:	f7ff bf76 	b.w	800662a <__retarget_lock_release_recursive>
 800673e:	bf00      	nop
 8006740:	20012ee8 	.word	0x20012ee8

08006744 <_realloc_r>:
 8006744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006748:	4680      	mov	r8, r0
 800674a:	4614      	mov	r4, r2
 800674c:	460e      	mov	r6, r1
 800674e:	b921      	cbnz	r1, 800675a <_realloc_r+0x16>
 8006750:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006754:	4611      	mov	r1, r2
 8006756:	f7ff b819 	b.w	800578c <_malloc_r>
 800675a:	b92a      	cbnz	r2, 8006768 <_realloc_r+0x24>
 800675c:	f7fe ffaa 	bl	80056b4 <_free_r>
 8006760:	4625      	mov	r5, r4
 8006762:	4628      	mov	r0, r5
 8006764:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006768:	f000 f8fa 	bl	8006960 <_malloc_usable_size_r>
 800676c:	4284      	cmp	r4, r0
 800676e:	4607      	mov	r7, r0
 8006770:	d802      	bhi.n	8006778 <_realloc_r+0x34>
 8006772:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006776:	d812      	bhi.n	800679e <_realloc_r+0x5a>
 8006778:	4621      	mov	r1, r4
 800677a:	4640      	mov	r0, r8
 800677c:	f7ff f806 	bl	800578c <_malloc_r>
 8006780:	4605      	mov	r5, r0
 8006782:	2800      	cmp	r0, #0
 8006784:	d0ed      	beq.n	8006762 <_realloc_r+0x1e>
 8006786:	42bc      	cmp	r4, r7
 8006788:	4622      	mov	r2, r4
 800678a:	4631      	mov	r1, r6
 800678c:	bf28      	it	cs
 800678e:	463a      	movcs	r2, r7
 8006790:	f7fe fee4 	bl	800555c <memcpy>
 8006794:	4631      	mov	r1, r6
 8006796:	4640      	mov	r0, r8
 8006798:	f7fe ff8c 	bl	80056b4 <_free_r>
 800679c:	e7e1      	b.n	8006762 <_realloc_r+0x1e>
 800679e:	4635      	mov	r5, r6
 80067a0:	e7df      	b.n	8006762 <_realloc_r+0x1e>

080067a2 <_raise_r>:
 80067a2:	291f      	cmp	r1, #31
 80067a4:	b538      	push	{r3, r4, r5, lr}
 80067a6:	4604      	mov	r4, r0
 80067a8:	460d      	mov	r5, r1
 80067aa:	d904      	bls.n	80067b6 <_raise_r+0x14>
 80067ac:	2316      	movs	r3, #22
 80067ae:	6003      	str	r3, [r0, #0]
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295
 80067b4:	bd38      	pop	{r3, r4, r5, pc}
 80067b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80067b8:	b112      	cbz	r2, 80067c0 <_raise_r+0x1e>
 80067ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80067be:	b94b      	cbnz	r3, 80067d4 <_raise_r+0x32>
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 f831 	bl	8006828 <_getpid_r>
 80067c6:	462a      	mov	r2, r5
 80067c8:	4601      	mov	r1, r0
 80067ca:	4620      	mov	r0, r4
 80067cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067d0:	f000 b818 	b.w	8006804 <_kill_r>
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d00a      	beq.n	80067ee <_raise_r+0x4c>
 80067d8:	1c59      	adds	r1, r3, #1
 80067da:	d103      	bne.n	80067e4 <_raise_r+0x42>
 80067dc:	2316      	movs	r3, #22
 80067de:	6003      	str	r3, [r0, #0]
 80067e0:	2001      	movs	r0, #1
 80067e2:	e7e7      	b.n	80067b4 <_raise_r+0x12>
 80067e4:	2400      	movs	r4, #0
 80067e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80067ea:	4628      	mov	r0, r5
 80067ec:	4798      	blx	r3
 80067ee:	2000      	movs	r0, #0
 80067f0:	e7e0      	b.n	80067b4 <_raise_r+0x12>
	...

080067f4 <raise>:
 80067f4:	4b02      	ldr	r3, [pc, #8]	; (8006800 <raise+0xc>)
 80067f6:	4601      	mov	r1, r0
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	f7ff bfd2 	b.w	80067a2 <_raise_r>
 80067fe:	bf00      	nop
 8006800:	20000014 	.word	0x20000014

08006804 <_kill_r>:
 8006804:	b538      	push	{r3, r4, r5, lr}
 8006806:	4d07      	ldr	r5, [pc, #28]	; (8006824 <_kill_r+0x20>)
 8006808:	2300      	movs	r3, #0
 800680a:	4604      	mov	r4, r0
 800680c:	4608      	mov	r0, r1
 800680e:	4611      	mov	r1, r2
 8006810:	602b      	str	r3, [r5, #0]
 8006812:	f7fa f957 	bl	8000ac4 <_kill>
 8006816:	1c43      	adds	r3, r0, #1
 8006818:	d102      	bne.n	8006820 <_kill_r+0x1c>
 800681a:	682b      	ldr	r3, [r5, #0]
 800681c:	b103      	cbz	r3, 8006820 <_kill_r+0x1c>
 800681e:	6023      	str	r3, [r4, #0]
 8006820:	bd38      	pop	{r3, r4, r5, pc}
 8006822:	bf00      	nop
 8006824:	20012eec 	.word	0x20012eec

08006828 <_getpid_r>:
 8006828:	f7fa b944 	b.w	8000ab4 <_getpid>

0800682c <__sread>:
 800682c:	b510      	push	{r4, lr}
 800682e:	460c      	mov	r4, r1
 8006830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006834:	f000 f89c 	bl	8006970 <_read_r>
 8006838:	2800      	cmp	r0, #0
 800683a:	bfab      	itete	ge
 800683c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800683e:	89a3      	ldrhlt	r3, [r4, #12]
 8006840:	181b      	addge	r3, r3, r0
 8006842:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006846:	bfac      	ite	ge
 8006848:	6563      	strge	r3, [r4, #84]	; 0x54
 800684a:	81a3      	strhlt	r3, [r4, #12]
 800684c:	bd10      	pop	{r4, pc}

0800684e <__swrite>:
 800684e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006852:	461f      	mov	r7, r3
 8006854:	898b      	ldrh	r3, [r1, #12]
 8006856:	05db      	lsls	r3, r3, #23
 8006858:	4605      	mov	r5, r0
 800685a:	460c      	mov	r4, r1
 800685c:	4616      	mov	r6, r2
 800685e:	d505      	bpl.n	800686c <__swrite+0x1e>
 8006860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006864:	2302      	movs	r3, #2
 8006866:	2200      	movs	r2, #0
 8006868:	f000 f868 	bl	800693c <_lseek_r>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	4632      	mov	r2, r6
 800687a:	463b      	mov	r3, r7
 800687c:	4628      	mov	r0, r5
 800687e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006882:	f000 b817 	b.w	80068b4 <_write_r>

08006886 <__sseek>:
 8006886:	b510      	push	{r4, lr}
 8006888:	460c      	mov	r4, r1
 800688a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688e:	f000 f855 	bl	800693c <_lseek_r>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	bf15      	itete	ne
 8006898:	6560      	strne	r0, [r4, #84]	; 0x54
 800689a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800689e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068a2:	81a3      	strheq	r3, [r4, #12]
 80068a4:	bf18      	it	ne
 80068a6:	81a3      	strhne	r3, [r4, #12]
 80068a8:	bd10      	pop	{r4, pc}

080068aa <__sclose>:
 80068aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ae:	f000 b813 	b.w	80068d8 <_close_r>
	...

080068b4 <_write_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d07      	ldr	r5, [pc, #28]	; (80068d4 <_write_r+0x20>)
 80068b8:	4604      	mov	r4, r0
 80068ba:	4608      	mov	r0, r1
 80068bc:	4611      	mov	r1, r2
 80068be:	2200      	movs	r2, #0
 80068c0:	602a      	str	r2, [r5, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f7fa f935 	bl	8000b32 <_write>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_write_r+0x1e>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_write_r+0x1e>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	20012eec 	.word	0x20012eec

080068d8 <_close_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4d06      	ldr	r5, [pc, #24]	; (80068f4 <_close_r+0x1c>)
 80068dc:	2300      	movs	r3, #0
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	602b      	str	r3, [r5, #0]
 80068e4:	f7fa f941 	bl	8000b6a <_close>
 80068e8:	1c43      	adds	r3, r0, #1
 80068ea:	d102      	bne.n	80068f2 <_close_r+0x1a>
 80068ec:	682b      	ldr	r3, [r5, #0]
 80068ee:	b103      	cbz	r3, 80068f2 <_close_r+0x1a>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	bd38      	pop	{r3, r4, r5, pc}
 80068f4:	20012eec 	.word	0x20012eec

080068f8 <_fstat_r>:
 80068f8:	b538      	push	{r3, r4, r5, lr}
 80068fa:	4d07      	ldr	r5, [pc, #28]	; (8006918 <_fstat_r+0x20>)
 80068fc:	2300      	movs	r3, #0
 80068fe:	4604      	mov	r4, r0
 8006900:	4608      	mov	r0, r1
 8006902:	4611      	mov	r1, r2
 8006904:	602b      	str	r3, [r5, #0]
 8006906:	f7fa f93c 	bl	8000b82 <_fstat>
 800690a:	1c43      	adds	r3, r0, #1
 800690c:	d102      	bne.n	8006914 <_fstat_r+0x1c>
 800690e:	682b      	ldr	r3, [r5, #0]
 8006910:	b103      	cbz	r3, 8006914 <_fstat_r+0x1c>
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	bd38      	pop	{r3, r4, r5, pc}
 8006916:	bf00      	nop
 8006918:	20012eec 	.word	0x20012eec

0800691c <_isatty_r>:
 800691c:	b538      	push	{r3, r4, r5, lr}
 800691e:	4d06      	ldr	r5, [pc, #24]	; (8006938 <_isatty_r+0x1c>)
 8006920:	2300      	movs	r3, #0
 8006922:	4604      	mov	r4, r0
 8006924:	4608      	mov	r0, r1
 8006926:	602b      	str	r3, [r5, #0]
 8006928:	f7fa f93b 	bl	8000ba2 <_isatty>
 800692c:	1c43      	adds	r3, r0, #1
 800692e:	d102      	bne.n	8006936 <_isatty_r+0x1a>
 8006930:	682b      	ldr	r3, [r5, #0]
 8006932:	b103      	cbz	r3, 8006936 <_isatty_r+0x1a>
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	bd38      	pop	{r3, r4, r5, pc}
 8006938:	20012eec 	.word	0x20012eec

0800693c <_lseek_r>:
 800693c:	b538      	push	{r3, r4, r5, lr}
 800693e:	4d07      	ldr	r5, [pc, #28]	; (800695c <_lseek_r+0x20>)
 8006940:	4604      	mov	r4, r0
 8006942:	4608      	mov	r0, r1
 8006944:	4611      	mov	r1, r2
 8006946:	2200      	movs	r2, #0
 8006948:	602a      	str	r2, [r5, #0]
 800694a:	461a      	mov	r2, r3
 800694c:	f7fa f934 	bl	8000bb8 <_lseek>
 8006950:	1c43      	adds	r3, r0, #1
 8006952:	d102      	bne.n	800695a <_lseek_r+0x1e>
 8006954:	682b      	ldr	r3, [r5, #0]
 8006956:	b103      	cbz	r3, 800695a <_lseek_r+0x1e>
 8006958:	6023      	str	r3, [r4, #0]
 800695a:	bd38      	pop	{r3, r4, r5, pc}
 800695c:	20012eec 	.word	0x20012eec

08006960 <_malloc_usable_size_r>:
 8006960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006964:	1f18      	subs	r0, r3, #4
 8006966:	2b00      	cmp	r3, #0
 8006968:	bfbc      	itt	lt
 800696a:	580b      	ldrlt	r3, [r1, r0]
 800696c:	18c0      	addlt	r0, r0, r3
 800696e:	4770      	bx	lr

08006970 <_read_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d07      	ldr	r5, [pc, #28]	; (8006990 <_read_r+0x20>)
 8006974:	4604      	mov	r4, r0
 8006976:	4608      	mov	r0, r1
 8006978:	4611      	mov	r1, r2
 800697a:	2200      	movs	r2, #0
 800697c:	602a      	str	r2, [r5, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f7fa f8ba 	bl	8000af8 <_read>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_read_r+0x1e>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_read_r+0x1e>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	20012eec 	.word	0x20012eec

08006994 <_init>:
 8006994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006996:	bf00      	nop
 8006998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800699a:	bc08      	pop	{r3}
 800699c:	469e      	mov	lr, r3
 800699e:	4770      	bx	lr

080069a0 <_fini>:
 80069a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a2:	bf00      	nop
 80069a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069a6:	bc08      	pop	{r3}
 80069a8:	469e      	mov	lr, r3
 80069aa:	4770      	bx	lr
