
freeRTOS_HAL_Semaphore_Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  0800693c  0800693c  0001693c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b04  08006b04  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006b04  08006b04  00016b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b0c  08006b0c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08006b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00012e78  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012ef0  20012ef0  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000130f0  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b39  00000000  00000000  00033198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001160  00000000  00000000  00035cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001048  00000000  00000000  00036e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000232a1  00000000  00000000  00037e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b08  00000000  00000000  0005b121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d55b5  00000000  00000000  0006ec29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001441de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053bc  00000000  00000000  00144230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006924 	.word	0x08006924

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006924 	.word	0x08006924

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <sendMessage>:
void Slave_Task_Handler(void *parameters);

void sendMessage(char *message);

void sendMessage(char *message)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) != SET);
 800058c:	bf00      	nop
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <sendMessage+0x38>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000598:	2b80      	cmp	r3, #128	; 0x80
 800059a:	d1f8      	bne.n	800058e <sendMessage+0xa>
	HAL_UART_Transmit (&huart2, &message[0], strlen(message), portMAX_DELAY);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f7ff fe17 	bl	80001d0 <strlen>
 80005a2:	4603      	mov	r3, r0
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	6879      	ldr	r1, [r7, #4]
 80005ac:	4803      	ldr	r0, [pc, #12]	; (80005bc <sendMessage+0x38>)
 80005ae:	f001 fdc6 	bl	800213e <HAL_UART_Transmit>
}
 80005b2:	bf00      	nop
 80005b4:	3708      	adds	r7, #8
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	20000094 	.word	0x20000094

080005c0 <Master_Task_Handler>:

void Master_Task_Handler(void *parameters)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	int masterId=0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
	portBASE_TYPE status;

	xSemaphoreGive(xSemaphore);
 80005cc:	4b16      	ldr	r3, [pc, #88]	; (8000628 <Master_Task_Handler+0x68>)
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	2300      	movs	r3, #0
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	f002 fab9 	bl	8002b4c <xQueueGenericSend>
	while(1)
	{
		masterId = (rand() & 0x1ff );
 80005da:	f004 ff9d 	bl	8005518 <rand>
 80005de:	4603      	mov	r3, r0
 80005e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005e4:	60bb      	str	r3, [r7, #8]

		status = xQueueSend(xQueue, &masterId, portMAX_DELAY);
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <Master_Task_Handler+0x6c>)
 80005e8:	6818      	ldr	r0, [r3, #0]
 80005ea:	f107 0108 	add.w	r1, r7, #8
 80005ee:	2300      	movs	r3, #0
 80005f0:	f04f 32ff 	mov.w	r2, #4294967295
 80005f4:	f002 faaa 	bl	8002b4c <xQueueGenericSend>
 80005f8:	60f8      	str	r0, [r7, #12]

		if(status != pdPASS)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d003      	beq.n	8000608 <Master_Task_Handler+0x48>
		{
			sendMessage("could not send to queue");
 8000600:	480b      	ldr	r0, [pc, #44]	; (8000630 <Master_Task_Handler+0x70>)
 8000602:	f7ff ffbf 	bl	8000584 <sendMessage>
 8000606:	e006      	b.n	8000616 <Master_Task_Handler+0x56>
		}
		else
			xSemaphoreGive(xSemaphore);
 8000608:	4b07      	ldr	r3, [pc, #28]	; (8000628 <Master_Task_Handler+0x68>)
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	2300      	movs	r3, #0
 800060e:	2200      	movs	r2, #0
 8000610:	2100      	movs	r1, #0
 8000612:	f002 fa9b 	bl	8002b4c <xQueueGenericSend>

		taskYIELD();
 8000616:	4b07      	ldr	r3, [pc, #28]	; (8000634 <Master_Task_Handler+0x74>)
 8000618:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	f3bf 8f6f 	isb	sy
		masterId = (rand() & 0x1ff );
 8000626:	e7d8      	b.n	80005da <Master_Task_Handler+0x1a>
 8000628:	200000e4 	.word	0x200000e4
 800062c:	200000e0 	.word	0x200000e0
 8000630:	0800693c 	.word	0x0800693c
 8000634:	e000ed04 	.word	0xe000ed04

08000638 <slaveWorkFunc>:

	}
}

void slaveWorkFunc(unsigned int passid)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b090      	sub	sp, #64	; 0x40
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
	char message[50]={0};
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	f107 0310 	add.w	r3, r7, #16
 8000648:	222e      	movs	r2, #46	; 0x2e
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f004 ff5b 	bl	8005508 <memset>
	sprintf(message, "pasId: %d\n\r", passid);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	687a      	ldr	r2, [r7, #4]
 8000658:	4906      	ldr	r1, [pc, #24]	; (8000674 <slaveWorkFunc+0x3c>)
 800065a:	4618      	mov	r0, r3
 800065c:	f004 ff9a 	bl	8005594 <siprintf>
	sendMessage(message);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4618      	mov	r0, r3
 8000666:	f7ff ff8d 	bl	8000584 <sendMessage>
}
 800066a:	bf00      	nop
 800066c:	3740      	adds	r7, #64	; 0x40
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	08006954 	.word	0x08006954

08000678 <Slave_Task_Handler>:

void Slave_Task_Handler(void *parameters)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	int slaveMasterId=0;
 8000680:	2300      	movs	r3, #0
 8000682:	60bb      	str	r3, [r7, #8]
	portBASE_TYPE status;

	while(1)
	{
		xSemaphoreTake(xSemaphore, 0);
 8000684:	4b0d      	ldr	r3, [pc, #52]	; (80006bc <Slave_Task_Handler+0x44>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fc3c 	bl	8002f08 <xQueueSemaphoreTake>

		status = xQueueReceive(xQueue, &slaveMasterId, portMAX_DELAY);
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <Slave_Task_Handler+0x48>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f107 0108 	add.w	r1, r7, #8
 8000698:	f04f 32ff 	mov.w	r2, #4294967295
 800069c:	4618      	mov	r0, r3
 800069e:	f002 fb53 	bl	8002d48 <xQueueReceive>
 80006a2:	60f8      	str	r0, [r7, #12]

		if(status != pdPASS)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	d003      	beq.n	80006b2 <Slave_Task_Handler+0x3a>
		{
			sendMessage("This queue is empty");
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <Slave_Task_Handler+0x4c>)
 80006ac:	f7ff ff6a 	bl	8000584 <sendMessage>
 80006b0:	e7e8      	b.n	8000684 <Slave_Task_Handler+0xc>
		}
		else
			slaveWorkFunc(slaveMasterId);
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff ffbf 	bl	8000638 <slaveWorkFunc>
		xSemaphoreTake(xSemaphore, 0);
 80006ba:	e7e3      	b.n	8000684 <Slave_Task_Handler+0xc>
 80006bc:	200000e4 	.word	0x200000e4
 80006c0:	200000e0 	.word	0x200000e0
 80006c4:	08006960 	.word	0x08006960

080006c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ce:	f000 faf1 	bl	8000cb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d2:	f000 f851 	bl	8000778 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d6:	f000 f8d7 	bl	8000888 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006da:	f000 f8ab 	bl	8000834 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  xQueue = xQueueCreate(1, sizeof(int));
 80006de:	2200      	movs	r2, #0
 80006e0:	2104      	movs	r1, #4
 80006e2:	2001      	movs	r0, #1
 80006e4:	f002 f9c0 	bl	8002a68 <xQueueGenericCreate>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a1b      	ldr	r2, [pc, #108]	; (8000758 <main+0x90>)
 80006ec:	6013      	str	r3, [r2, #0]

  vSemaphoreCreateBinary(xSemaphore);
 80006ee:	2203      	movs	r2, #3
 80006f0:	2100      	movs	r1, #0
 80006f2:	2001      	movs	r0, #1
 80006f4:	f002 f9b8 	bl	8002a68 <xQueueGenericCreate>
 80006f8:	4603      	mov	r3, r0
 80006fa:	4a18      	ldr	r2, [pc, #96]	; (800075c <main+0x94>)
 80006fc:	6013      	str	r3, [r2, #0]
 80006fe:	4b17      	ldr	r3, [pc, #92]	; (800075c <main+0x94>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d006      	beq.n	8000714 <main+0x4c>
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <main+0x94>)
 8000708:	6818      	ldr	r0, [r3, #0]
 800070a:	2300      	movs	r3, #0
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	f002 fa1c 	bl	8002b4c <xQueueGenericSend>

  if((xQueue != NULL) && (xSemaphore != NULL))
 8000714:	4b10      	ldr	r3, [pc, #64]	; (8000758 <main+0x90>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d01b      	beq.n	8000754 <main+0x8c>
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <main+0x94>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d017      	beq.n	8000754 <main+0x8c>
  {
	  xTaskCreate(Master_Task_Handler,
 8000724:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <main+0x98>)
 8000726:	9301      	str	r3, [sp, #4]
 8000728:	2303      	movs	r3, #3
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	2300      	movs	r3, #0
 800072e:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8000732:	490c      	ldr	r1, [pc, #48]	; (8000764 <main+0x9c>)
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <main+0xa0>)
 8000736:	f002 fe9d 	bl	8003474 <xTaskCreate>
				  configMINIMAL_STACK_SIZE*3,
				  NULL,
				  3,
				  &task1Master);

	  xTaskCreate(Slave_Task_Handler,
 800073a:	4b0c      	ldr	r3, [pc, #48]	; (800076c <main+0xa4>)
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	2301      	movs	r3, #1
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8000748:	4909      	ldr	r1, [pc, #36]	; (8000770 <main+0xa8>)
 800074a:	480a      	ldr	r0, [pc, #40]	; (8000774 <main+0xac>)
 800074c:	f002 fe92 	bl	8003474 <xTaskCreate>
				  configMINIMAL_STACK_SIZE*3,
				  NULL,
				  1,
				  &task2Slave);

	  vTaskStartScheduler();
 8000750:	f003 f80c 	bl	800376c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x8c>
 8000756:	bf00      	nop
 8000758:	200000e0 	.word	0x200000e0
 800075c:	200000e4 	.word	0x200000e4
 8000760:	200000d8 	.word	0x200000d8
 8000764:	08006974 	.word	0x08006974
 8000768:	080005c1 	.word	0x080005c1
 800076c:	200000dc 	.word	0x200000dc
 8000770:	08006980 	.word	0x08006980
 8000774:	08000679 	.word	0x08000679

08000778 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b094      	sub	sp, #80	; 0x50
 800077c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077e:	f107 0320 	add.w	r3, r7, #32
 8000782:	2230      	movs	r2, #48	; 0x30
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f004 febe 	bl	8005508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	4b22      	ldr	r3, [pc, #136]	; (800082c <SystemClock_Config+0xb4>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <SystemClock_Config+0xb4>)
 80007a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007aa:	6413      	str	r3, [r2, #64]	; 0x40
 80007ac:	4b1f      	ldr	r3, [pc, #124]	; (800082c <SystemClock_Config+0xb4>)
 80007ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <SystemClock_Config+0xb8>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a1b      	ldr	r2, [pc, #108]	; (8000830 <SystemClock_Config+0xb8>)
 80007c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c6:	6013      	str	r3, [r2, #0]
 80007c8:	4b19      	ldr	r3, [pc, #100]	; (8000830 <SystemClock_Config+0xb8>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	2301      	movs	r3, #1
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007dc:	2310      	movs	r3, #16
 80007de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007e0:	2300      	movs	r3, #0
 80007e2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fd23 	bl	8001234 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007f4:	f000 f874 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080c:	f107 030c 	add.w	r3, r7, #12
 8000810:	2100      	movs	r1, #0
 8000812:	4618      	mov	r0, r3
 8000814:	f000 ff86 	bl	8001724 <HAL_RCC_ClockConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800081e:	f000 f85f 	bl	80008e0 <Error_Handler>
  }
}
 8000822:	bf00      	nop
 8000824:	3750      	adds	r7, #80	; 0x50
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800083a:	4a12      	ldr	r2, [pc, #72]	; (8000884 <MX_USART2_UART_Init+0x50>)
 800083c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000840:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000844:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART2_UART_Init+0x4c>)
 800086c:	f001 fc1a 	bl	80020a4 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000876:	f000 f833 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000094 	.word	0x20000094
 8000884:	40004400 	.word	0x40004400

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_GPIO_Init+0x30>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <MX_GPIO_Init+0x30>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_GPIO_Init+0x30>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d101      	bne.n	80008d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ce:	f000 fa13 	bl	8000cf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40001000 	.word	0x40001000

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <Error_Handler+0x8>
	...

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008fa:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <HAL_MspInit+0x4c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000900:	6453      	str	r3, [r2, #68]	; 0x44
 8000902:	4b0d      	ldr	r3, [pc, #52]	; (8000938 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a08      	ldr	r2, [pc, #32]	; (8000938 <HAL_MspInit+0x4c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0314 	add.w	r3, r7, #20
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
 8000952:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a19      	ldr	r2, [pc, #100]	; (80009c0 <HAL_UART_MspInit+0x84>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d12b      	bne.n	80009b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	613b      	str	r3, [r7, #16]
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000966:	4a17      	ldr	r2, [pc, #92]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096c:	6413      	str	r3, [r2, #64]	; 0x40
 800096e:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a10      	ldr	r2, [pc, #64]	; (80009c4 <HAL_UART_MspInit+0x88>)
 8000984:	f043 0301 	orr.w	r3, r3, #1
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_UART_MspInit+0x88>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000996:	230c      	movs	r3, #12
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009a6:	2307      	movs	r3, #7
 80009a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	4619      	mov	r1, r3
 80009b0:	4805      	ldr	r0, [pc, #20]	; (80009c8 <HAL_UART_MspInit+0x8c>)
 80009b2:	f000 faa3 	bl	8000efc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009b6:	bf00      	nop
 80009b8:	3728      	adds	r7, #40	; 0x28
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40004400 	.word	0x40004400
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000

080009cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b08c      	sub	sp, #48	; 0x30
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009dc:	2200      	movs	r2, #0
 80009de:	6879      	ldr	r1, [r7, #4]
 80009e0:	2036      	movs	r0, #54	; 0x36
 80009e2:	f000 fa61 	bl	8000ea8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009e6:	2036      	movs	r0, #54	; 0x36
 80009e8:	f000 fa7a 	bl	8000ee0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009ec:	2300      	movs	r3, #0
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	4b1e      	ldr	r3, [pc, #120]	; (8000a6c <HAL_InitTick+0xa0>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <HAL_InitTick+0xa0>)
 80009f6:	f043 0310 	orr.w	r3, r3, #16
 80009fa:	6413      	str	r3, [r2, #64]	; 0x40
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <HAL_InitTick+0xa0>)
 80009fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a00:	f003 0310 	and.w	r3, r3, #16
 8000a04:	60fb      	str	r3, [r7, #12]
 8000a06:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a08:	f107 0210 	add.w	r2, r7, #16
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4611      	mov	r1, r2
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 f866 	bl	8001ae4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a18:	f001 f83c 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8000a1c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <HAL_InitTick+0xa4>)
 8000a22:	fba2 2303 	umull	r2, r3, r2, r3
 8000a26:	0c9b      	lsrs	r3, r3, #18
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	; (8000a78 <HAL_InitTick+0xac>)
 8000a30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a32:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a34:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a38:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a3a:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a3e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a4c:	4809      	ldr	r0, [pc, #36]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a4e:	f001 f87b 	bl	8001b48 <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d104      	bne.n	8000a62 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a58:	4806      	ldr	r0, [pc, #24]	; (8000a74 <HAL_InitTick+0xa8>)
 8000a5a:	f001 f8cf 	bl	8001bfc <HAL_TIM_Base_Start_IT>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3730      	adds	r7, #48	; 0x30
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	200000e8 	.word	0x200000e8
 8000a78:	40001000 	.word	0x40001000

08000a7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <MemManage_Handler+0x4>

08000a82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <BusFault_Handler+0x4>

08000a88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <UsageFault_Handler+0x4>

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <TIM6_DAC_IRQHandler+0x10>)
 8000aa2:	f001 f91b 	bl	8001cdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200000e8 	.word	0x200000e8

08000ab0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
	return 1;
 8000ab4:	2301      	movs	r3, #1
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <_kill>:

int _kill(int pid, int sig)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
 8000ac8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000aca:	f004 fce5 	bl	8005498 <__errno>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2216      	movs	r2, #22
 8000ad2:	601a      	str	r2, [r3, #0]
	return -1;
 8000ad4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <_exit>:

void _exit (int status)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ffe7 	bl	8000ac0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000af2:	e7fe      	b.n	8000af2 <_exit+0x12>

08000af4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	e00a      	b.n	8000b1c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b06:	f3af 8000 	nop.w
 8000b0a:	4601      	mov	r1, r0
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	1c5a      	adds	r2, r3, #1
 8000b10:	60ba      	str	r2, [r7, #8]
 8000b12:	b2ca      	uxtb	r2, r1
 8000b14:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	697a      	ldr	r2, [r7, #20]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	dbf0      	blt.n	8000b06 <_read+0x12>
	}

return len;
 8000b24:	687b      	ldr	r3, [r7, #4]
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}

08000b2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	b086      	sub	sp, #24
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	60f8      	str	r0, [r7, #12]
 8000b36:	60b9      	str	r1, [r7, #8]
 8000b38:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]
 8000b3e:	e009      	b.n	8000b54 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b40:	68bb      	ldr	r3, [r7, #8]
 8000b42:	1c5a      	adds	r2, r3, #1
 8000b44:	60ba      	str	r2, [r7, #8]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	dbf1      	blt.n	8000b40 <_write+0x12>
	}
	return len;
 8000b5c:	687b      	ldr	r3, [r7, #4]
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <_close>:

int _close(int file)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
 8000b86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b8e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b90:	2300      	movs	r3, #0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <_isatty>:

int _isatty(int file)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b083      	sub	sp, #12
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	370c      	adds	r7, #12
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
	return 0;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	; (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f004 fc4a 	bl	8005498 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20020000 	.word	0x20020000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	20000130 	.word	0x20000130
 8000c38:	20012ef0 	.word	0x20012ef0

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c66:	490e      	ldr	r1, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c7c:	4c0b      	ldr	r4, [pc, #44]	; (8000cac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8a:	f7ff ffd7 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f004 fc09 	bl	80054a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fd19 	bl	80006c8 <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ca4:	08006b14 	.word	0x08006b14
  ldr r2, =_sbss
 8000ca8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cac:	20012ef0 	.word	0x20012ef0

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f8d8 	bl	8000e92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f7ff fe72 	bl	80009cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fe00 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_IncTick+0x20>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	461a      	mov	r2, r3
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_IncTick+0x24>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4413      	add	r3, r2
 8000d08:	4a04      	ldr	r2, [pc, #16]	; (8000d1c <HAL_IncTick+0x24>)
 8000d0a:	6013      	str	r3, [r2, #0]
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008
 8000d1c:	20000134 	.word	0x20000134

08000d20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return uwTick;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <HAL_GetTick+0x14>)
 8000d26:	681b      	ldr	r3, [r3, #0]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000134 	.word	0x20000134

08000d38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	68db      	ldr	r3, [r3, #12]
 8000d4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d54:	4013      	ands	r3, r2
 8000d56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	60d3      	str	r3, [r2, #12]
}
 8000d70:	bf00      	nop
 8000d72:	3714      	adds	r7, #20
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	; (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	; (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	; (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	; 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
         );
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	; 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff ff4c 	bl	8000d38 <__NVIC_SetPriorityGrouping>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
 8000eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eba:	f7ff ff61 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000ebe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec0:	687a      	ldr	r2, [r7, #4]
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	6978      	ldr	r0, [r7, #20]
 8000ec6:	f7ff ffb1 	bl	8000e2c <NVIC_EncodePriority>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff ff80 	bl	8000dd8 <__NVIC_SetPriority>
}
 8000ed8:	bf00      	nop
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff54 	bl	8000d9c <__NVIC_EnableIRQ>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	; 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
 8000f16:	e16b      	b.n	80011f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f18:	2201      	movs	r2, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	697a      	ldr	r2, [r7, #20]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f040 815a 	bne.w	80011ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d005      	beq.n	8000f4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d130      	bne.n	8000fb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	689b      	ldr	r3, [r3, #8]
 8000f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	2203      	movs	r2, #3
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f84:	2201      	movs	r2, #1
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	091b      	lsrs	r3, r3, #4
 8000f9a:	f003 0201 	and.w	r2, r3, #1
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d017      	beq.n	8000fec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	69fb      	ldr	r3, [r7, #28]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d123      	bne.n	8001040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	08da      	lsrs	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3208      	adds	r2, #8
 8001000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	f003 0307 	and.w	r3, r3, #7
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	08da      	lsrs	r2, r3, #3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	3208      	adds	r2, #8
 800103a:	69b9      	ldr	r1, [r7, #24]
 800103c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	2203      	movs	r2, #3
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f003 0203 	and.w	r2, r3, #3
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80b4 	beq.w	80011ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b60      	ldr	r3, [pc, #384]	; (8001208 <HAL_GPIO_Init+0x30c>)
 8001088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800108a:	4a5f      	ldr	r2, [pc, #380]	; (8001208 <HAL_GPIO_Init+0x30c>)
 800108c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001090:	6453      	str	r3, [r2, #68]	; 0x44
 8001092:	4b5d      	ldr	r3, [pc, #372]	; (8001208 <HAL_GPIO_Init+0x30c>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800109e:	4a5b      	ldr	r2, [pc, #364]	; (800120c <HAL_GPIO_Init+0x310>)
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0303 	and.w	r3, r3, #3
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	220f      	movs	r2, #15
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a52      	ldr	r2, [pc, #328]	; (8001210 <HAL_GPIO_Init+0x314>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d02b      	beq.n	8001122 <HAL_GPIO_Init+0x226>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a51      	ldr	r2, [pc, #324]	; (8001214 <HAL_GPIO_Init+0x318>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d025      	beq.n	800111e <HAL_GPIO_Init+0x222>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a50      	ldr	r2, [pc, #320]	; (8001218 <HAL_GPIO_Init+0x31c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d01f      	beq.n	800111a <HAL_GPIO_Init+0x21e>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4f      	ldr	r2, [pc, #316]	; (800121c <HAL_GPIO_Init+0x320>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d019      	beq.n	8001116 <HAL_GPIO_Init+0x21a>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4e      	ldr	r2, [pc, #312]	; (8001220 <HAL_GPIO_Init+0x324>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d013      	beq.n	8001112 <HAL_GPIO_Init+0x216>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4d      	ldr	r2, [pc, #308]	; (8001224 <HAL_GPIO_Init+0x328>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d00d      	beq.n	800110e <HAL_GPIO_Init+0x212>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4c      	ldr	r2, [pc, #304]	; (8001228 <HAL_GPIO_Init+0x32c>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d007      	beq.n	800110a <HAL_GPIO_Init+0x20e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a4b      	ldr	r2, [pc, #300]	; (800122c <HAL_GPIO_Init+0x330>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_GPIO_Init+0x20a>
 8001102:	2307      	movs	r3, #7
 8001104:	e00e      	b.n	8001124 <HAL_GPIO_Init+0x228>
 8001106:	2308      	movs	r3, #8
 8001108:	e00c      	b.n	8001124 <HAL_GPIO_Init+0x228>
 800110a:	2306      	movs	r3, #6
 800110c:	e00a      	b.n	8001124 <HAL_GPIO_Init+0x228>
 800110e:	2305      	movs	r3, #5
 8001110:	e008      	b.n	8001124 <HAL_GPIO_Init+0x228>
 8001112:	2304      	movs	r3, #4
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x228>
 8001116:	2303      	movs	r3, #3
 8001118:	e004      	b.n	8001124 <HAL_GPIO_Init+0x228>
 800111a:	2302      	movs	r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x228>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x228>
 8001122:	2300      	movs	r3, #0
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	f002 0203 	and.w	r2, r2, #3
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	4093      	lsls	r3, r2
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001134:	4935      	ldr	r1, [pc, #212]	; (800120c <HAL_GPIO_Init+0x310>)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <HAL_GPIO_Init+0x334>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001166:	4a32      	ldr	r2, [pc, #200]	; (8001230 <HAL_GPIO_Init+0x334>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800116c:	4b30      	ldr	r3, [pc, #192]	; (8001230 <HAL_GPIO_Init+0x334>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001190:	4a27      	ldr	r2, [pc, #156]	; (8001230 <HAL_GPIO_Init+0x334>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001196:	4b26      	ldr	r3, [pc, #152]	; (8001230 <HAL_GPIO_Init+0x334>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ba:	4a1d      	ldr	r2, [pc, #116]	; (8001230 <HAL_GPIO_Init+0x334>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <HAL_GPIO_Init+0x334>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e4:	4a12      	ldr	r2, [pc, #72]	; (8001230 <HAL_GPIO_Init+0x334>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	f67f ae90 	bls.w	8000f18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020800 	.word	0x40020800
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40021400 	.word	0x40021400
 8001228:	40021800 	.word	0x40021800
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40013c00 	.word	0x40013c00

08001234 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e267      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b00      	cmp	r3, #0
 8001250:	d075      	beq.n	800133e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001252:	4b88      	ldr	r3, [pc, #544]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b04      	cmp	r3, #4
 800125c:	d00c      	beq.n	8001278 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800125e:	4b85      	ldr	r3, [pc, #532]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001266:	2b08      	cmp	r3, #8
 8001268:	d112      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b82      	ldr	r3, [pc, #520]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001272:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001276:	d10b      	bne.n	8001290 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001278:	4b7e      	ldr	r3, [pc, #504]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d05b      	beq.n	800133c <HAL_RCC_OscConfig+0x108>
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d157      	bne.n	800133c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e242      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001298:	d106      	bne.n	80012a8 <HAL_RCC_OscConfig+0x74>
 800129a:	4b76      	ldr	r3, [pc, #472]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a75      	ldr	r2, [pc, #468]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e01d      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012b0:	d10c      	bne.n	80012cc <HAL_RCC_OscConfig+0x98>
 80012b2:	4b70      	ldr	r3, [pc, #448]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a6f      	ldr	r2, [pc, #444]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	4b6d      	ldr	r3, [pc, #436]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6c      	ldr	r2, [pc, #432]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	e00b      	b.n	80012e4 <HAL_RCC_OscConfig+0xb0>
 80012cc:	4b69      	ldr	r3, [pc, #420]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a68      	ldr	r2, [pc, #416]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012d6:	6013      	str	r3, [r2, #0]
 80012d8:	4b66      	ldr	r3, [pc, #408]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a65      	ldr	r2, [pc, #404]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d013      	beq.n	8001314 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012ec:	f7ff fd18 	bl	8000d20 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fd14 	bl	8000d20 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e207      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001306:	4b5b      	ldr	r3, [pc, #364]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0xc0>
 8001312:	e014      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001314:	f7ff fd04 	bl	8000d20 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131c:	f7ff fd00 	bl	8000d20 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b64      	cmp	r3, #100	; 0x64
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1f3      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132e:	4b51      	ldr	r3, [pc, #324]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d1f0      	bne.n	800131c <HAL_RCC_OscConfig+0xe8>
 800133a:	e000      	b.n	800133e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	2b00      	cmp	r3, #0
 8001348:	d063      	beq.n	8001412 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800134a:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b00      	cmp	r3, #0
 8001354:	d00b      	beq.n	800136e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001356:	4b47      	ldr	r3, [pc, #284]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135e:	2b08      	cmp	r3, #8
 8001360:	d11c      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b44      	ldr	r3, [pc, #272]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d116      	bne.n	800139c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800136e:	4b41      	ldr	r3, [pc, #260]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d005      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	68db      	ldr	r3, [r3, #12]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d001      	beq.n	8001386 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	e1c7      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001386:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	691b      	ldr	r3, [r3, #16]
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4937      	ldr	r1, [pc, #220]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001396:	4313      	orrs	r3, r2
 8001398:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800139a:	e03a      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d020      	beq.n	80013e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013a4:	4b34      	ldr	r3, [pc, #208]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013aa:	f7ff fcb9 	bl	8000d20 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b0:	e008      	b.n	80013c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013b2:	f7ff fcb5 	bl	8000d20 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b02      	cmp	r3, #2
 80013be:	d901      	bls.n	80013c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013c0:	2303      	movs	r3, #3
 80013c2:	e1a8      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c4:	4b2b      	ldr	r3, [pc, #172]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d0f0      	beq.n	80013b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	691b      	ldr	r3, [r3, #16]
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4925      	ldr	r1, [pc, #148]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 80013e0:	4313      	orrs	r3, r2
 80013e2:	600b      	str	r3, [r1, #0]
 80013e4:	e015      	b.n	8001412 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013e6:	4b24      	ldr	r3, [pc, #144]	; (8001478 <HAL_RCC_OscConfig+0x244>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ec:	f7ff fc98 	bl	8000d20 <HAL_GetTick>
 80013f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013f2:	e008      	b.n	8001406 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013f4:	f7ff fc94 	bl	8000d20 <HAL_GetTick>
 80013f8:	4602      	mov	r2, r0
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d901      	bls.n	8001406 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e187      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0302 	and.w	r3, r3, #2
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1f0      	bne.n	80013f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d036      	beq.n	800148c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d016      	beq.n	8001454 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_RCC_OscConfig+0x248>)
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800142c:	f7ff fc78 	bl	8000d20 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001434:	f7ff fc74 	bl	8000d20 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e167      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_RCC_OscConfig+0x240>)
 8001448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x200>
 8001452:	e01b      	b.n	800148c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_RCC_OscConfig+0x248>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145a:	f7ff fc61 	bl	8000d20 <HAL_GetTick>
 800145e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001460:	e00e      	b.n	8001480 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001462:	f7ff fc5d 	bl	8000d20 <HAL_GetTick>
 8001466:	4602      	mov	r2, r0
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	2b02      	cmp	r3, #2
 800146e:	d907      	bls.n	8001480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001470:	2303      	movs	r3, #3
 8001472:	e150      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 8001474:	40023800 	.word	0x40023800
 8001478:	42470000 	.word	0x42470000
 800147c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001480:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1ea      	bne.n	8001462 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0304 	and.w	r3, r3, #4
 8001494:	2b00      	cmp	r3, #0
 8001496:	f000 8097 	beq.w	80015c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800149e:	4b81      	ldr	r3, [pc, #516]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d10f      	bne.n	80014ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60bb      	str	r3, [r7, #8]
 80014ae:	4b7d      	ldr	r3, [pc, #500]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a7c      	ldr	r2, [pc, #496]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b7a      	ldr	r3, [pc, #488]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c2:	60bb      	str	r3, [r7, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014c6:	2301      	movs	r3, #1
 80014c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ca:	4b77      	ldr	r3, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d118      	bne.n	8001508 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014d6:	4b74      	ldr	r3, [pc, #464]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fc1d 	bl	8000d20 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ea:	f7ff fc19 	bl	8000d20 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e10c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fc:	4b6a      	ldr	r3, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x474>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x2ea>
 8001510:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a63      	ldr	r2, [pc, #396]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	e01c      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	2b05      	cmp	r3, #5
 8001524:	d10c      	bne.n	8001540 <HAL_RCC_OscConfig+0x30c>
 8001526:	4b5f      	ldr	r3, [pc, #380]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a5e      	ldr	r2, [pc, #376]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800152c:	f043 0304 	orr.w	r3, r3, #4
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	4b5c      	ldr	r3, [pc, #368]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a5b      	ldr	r2, [pc, #364]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
 800153e:	e00b      	b.n	8001558 <HAL_RCC_OscConfig+0x324>
 8001540:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001544:	4a57      	ldr	r2, [pc, #348]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001546:	f023 0301 	bic.w	r3, r3, #1
 800154a:	6713      	str	r3, [r2, #112]	; 0x70
 800154c:	4b55      	ldr	r3, [pc, #340]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001550:	4a54      	ldr	r2, [pc, #336]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0304 	bic.w	r3, r3, #4
 8001556:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d015      	beq.n	800158c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001560:	f7ff fbde 	bl	8000d20 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001566:	e00a      	b.n	800157e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fbda 	bl	8000d20 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	f241 3288 	movw	r2, #5000	; 0x1388
 8001576:	4293      	cmp	r3, r2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0cb      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	4b49      	ldr	r3, [pc, #292]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d0ee      	beq.n	8001568 <HAL_RCC_OscConfig+0x334>
 800158a:	e014      	b.n	80015b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fbc8 	bl	8000d20 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001592:	e00a      	b.n	80015aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001594:	f7ff fbc4 	bl	8000d20 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0b5      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	4b3e      	ldr	r3, [pc, #248]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ee      	bne.n	8001594 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d105      	bne.n	80015c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c0:	4a38      	ldr	r2, [pc, #224]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	f000 80a1 	beq.w	8001714 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015d2:	4b34      	ldr	r3, [pc, #208]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 030c 	and.w	r3, r3, #12
 80015da:	2b08      	cmp	r3, #8
 80015dc:	d05c      	beq.n	8001698 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	699b      	ldr	r3, [r3, #24]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d141      	bne.n	800166a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fb98 	bl	8000d20 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff fb94 	bl	8000d20 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e087      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001606:	4b27      	ldr	r3, [pc, #156]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a1b      	ldr	r3, [r3, #32]
 800161a:	431a      	orrs	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	019b      	lsls	r3, r3, #6
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	3b01      	subs	r3, #1
 800162c:	041b      	lsls	r3, r3, #16
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	061b      	lsls	r3, r3, #24
 8001636:	491b      	ldr	r1, [pc, #108]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163c:	4b1b      	ldr	r3, [pc, #108]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 800163e:	2201      	movs	r2, #1
 8001640:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001642:	f7ff fb6d 	bl	8000d20 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164a:	f7ff fb69 	bl	8000d20 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e05c      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x416>
 8001668:	e054      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_RCC_OscConfig+0x478>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001670:	f7ff fb56 	bl	8000d20 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001678:	f7ff fb52 	bl	8000d20 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e045      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168a:	4b06      	ldr	r3, [pc, #24]	; (80016a4 <HAL_RCC_OscConfig+0x470>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1f0      	bne.n	8001678 <HAL_RCC_OscConfig+0x444>
 8001696:	e03d      	b.n	8001714 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	699b      	ldr	r3, [r3, #24]
 800169c:	2b01      	cmp	r3, #1
 800169e:	d107      	bne.n	80016b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e038      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000
 80016ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <HAL_RCC_OscConfig+0x4ec>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d028      	beq.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d121      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d11a      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e0:	4013      	ands	r3, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d111      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	3b01      	subs	r3, #1
 80016fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d107      	bne.n	8001710 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d001      	beq.n	8001714 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3718      	adds	r7, #24
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40023800 	.word	0x40023800

08001724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e0cc      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001738:	4b68      	ldr	r3, [pc, #416]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d90c      	bls.n	8001760 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b65      	ldr	r3, [pc, #404]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d044      	beq.n	8001844 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d119      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d003      	beq.n	80017e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e2:	4b3f      	ldr	r3, [pc, #252]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d109      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e06f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f2:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e067      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001802:	4b37      	ldr	r3, [pc, #220]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f023 0203 	bic.w	r2, r3, #3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	4934      	ldr	r1, [pc, #208]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	4313      	orrs	r3, r2
 8001812:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001814:	f7ff fa84 	bl	8000d20 <HAL_GetTick>
 8001818:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	e00a      	b.n	8001832 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800181c:	f7ff fa80 	bl	8000d20 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f241 3288 	movw	r2, #5000	; 0x1388
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e04f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f003 020c 	and.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	429a      	cmp	r2, r3
 8001842:	d1eb      	bne.n	800181c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001844:	4b25      	ldr	r3, [pc, #148]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d20c      	bcs.n	800186c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001852:	4b22      	ldr	r3, [pc, #136]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	b2d2      	uxtb	r2, r2
 8001858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	; (80018dc <HAL_RCC_ClockConfig+0x1b8>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001896:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	; (80018e4 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	; (80018e8 <HAL_RCC_ClockConfig+0x1c4>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f87e 	bl	80009cc <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	080069a4 	.word	0x080069a4
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f4:	b090      	sub	sp, #64	; 0x40
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
 80018fc:	2300      	movs	r3, #0
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001900:	2300      	movs	r3, #0
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d00d      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x40>
 8001914:	2b08      	cmp	r3, #8
 8001916:	f200 80a1 	bhi.w	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x34>
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3a>
 8001922:	e09b      	b.n	8001a5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001926:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001928:	e09b      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192a:	4b53      	ldr	r3, [pc, #332]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800192e:	e098      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b4f      	ldr	r3, [pc, #316]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193a:	4b4d      	ldr	r3, [pc, #308]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d028      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b4a      	ldr	r3, [pc, #296]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	623b      	str	r3, [r7, #32]
 8001950:	627a      	str	r2, [r7, #36]	; 0x24
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001958:	2100      	movs	r1, #0
 800195a:	4b47      	ldr	r3, [pc, #284]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800195c:	fb03 f201 	mul.w	r2, r3, r1
 8001960:	2300      	movs	r3, #0
 8001962:	fb00 f303 	mul.w	r3, r0, r3
 8001966:	4413      	add	r3, r2
 8001968:	4a43      	ldr	r2, [pc, #268]	; (8001a78 <HAL_RCC_GetSysClockFreq+0x188>)
 800196a:	fba0 1202 	umull	r1, r2, r0, r2
 800196e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001970:	460a      	mov	r2, r1
 8001972:	62ba      	str	r2, [r7, #40]	; 0x28
 8001974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001976:	4413      	add	r3, r2
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800197a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800197c:	2200      	movs	r2, #0
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	61fa      	str	r2, [r7, #28]
 8001982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001986:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800198a:	f7fe fc79 	bl	8000280 <__aeabi_uldivmod>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4613      	mov	r3, r2
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001996:	e053      	b.n	8001a40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	4b35      	ldr	r3, [pc, #212]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	2200      	movs	r2, #0
 80019a0:	613b      	str	r3, [r7, #16]
 80019a2:	617a      	str	r2, [r7, #20]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019aa:	f04f 0b00 	mov.w	fp, #0
 80019ae:	4652      	mov	r2, sl
 80019b0:	465b      	mov	r3, fp
 80019b2:	f04f 0000 	mov.w	r0, #0
 80019b6:	f04f 0100 	mov.w	r1, #0
 80019ba:	0159      	lsls	r1, r3, #5
 80019bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c0:	0150      	lsls	r0, r2, #5
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ebb2 080a 	subs.w	r8, r2, sl
 80019ca:	eb63 090b 	sbc.w	r9, r3, fp
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019e2:	ebb2 0408 	subs.w	r4, r2, r8
 80019e6:	eb63 0509 	sbc.w	r5, r3, r9
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	00eb      	lsls	r3, r5, #3
 80019f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019f8:	00e2      	lsls	r2, r4, #3
 80019fa:	4614      	mov	r4, r2
 80019fc:	461d      	mov	r5, r3
 80019fe:	eb14 030a 	adds.w	r3, r4, sl
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	eb45 030b 	adc.w	r3, r5, fp
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	f04f 0300 	mov.w	r3, #0
 8001a12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a16:	4629      	mov	r1, r5
 8001a18:	028b      	lsls	r3, r1, #10
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a20:	4621      	mov	r1, r4
 8001a22:	028a      	lsls	r2, r1, #10
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	60fa      	str	r2, [r7, #12]
 8001a30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a34:	f7fe fc24 	bl	8000280 <__aeabi_uldivmod>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	0c1b      	lsrs	r3, r3, #16
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a5a:	e002      	b.n	8001a62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_RCC_GetSysClockFreq+0x184>)
 8001a5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3740      	adds	r7, #64	; 0x40
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	00f42400 	.word	0x00f42400
 8001a78:	017d7840 	.word	0x017d7840

08001a7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a80:	4b03      	ldr	r3, [pc, #12]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a82:	681b      	ldr	r3, [r3, #0]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a98:	f7ff fff0 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	4b05      	ldr	r3, [pc, #20]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	0a9b      	lsrs	r3, r3, #10
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aaa:	5ccb      	ldrb	r3, [r1, r3]
 8001aac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	080069b4 	.word	0x080069b4

08001abc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001ac0:	f7ff ffdc 	bl	8001a7c <HAL_RCC_GetHCLKFreq>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	0b5b      	lsrs	r3, r3, #13
 8001acc:	f003 0307 	and.w	r3, r3, #7
 8001ad0:	4903      	ldr	r1, [pc, #12]	; (8001ae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ad2:	5ccb      	ldrb	r3, [r1, r3]
 8001ad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40023800 	.word	0x40023800
 8001ae0:	080069b4 	.word	0x080069b4

08001ae4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	220f      	movs	r2, #15
 8001af2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 0203 	and.w	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	08db      	lsrs	r3, r3, #3
 8001b1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <HAL_RCC_GetClockConfig+0x60>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0207 	and.w	r2, r3, #7
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	601a      	str	r2, [r3, #0]
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40023c00 	.word	0x40023c00

08001b48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e041      	b.n	8001bde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d106      	bne.n	8001b74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f839 	bl	8001be6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2202      	movs	r2, #2
 8001b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3304      	adds	r3, #4
 8001b84:	4619      	mov	r1, r3
 8001b86:	4610      	mov	r0, r2
 8001b88:	f000 f9d8 	bl	8001f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
	...

08001bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d001      	beq.n	8001c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e04e      	b.n	8001cb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0201 	orr.w	r2, r2, #1
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a23      	ldr	r2, [pc, #140]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d022      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c3e:	d01d      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d018      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1e      	ldr	r2, [pc, #120]	; (8001cc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d013      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <HAL_TIM_Base_Start_IT+0xd0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00e      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a19      	ldr	r2, [pc, #100]	; (8001cd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x80>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a18      	ldr	r2, [pc, #96]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d111      	bne.n	8001ca0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b06      	cmp	r3, #6
 8001c8c:	d010      	beq.n	8001cb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f042 0201 	orr.w	r2, r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9e:	e007      	b.n	8001cb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0201 	orr.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40010000 	.word	0x40010000
 8001cc4:	40000400 	.word	0x40000400
 8001cc8:	40000800 	.word	0x40000800
 8001ccc:	40000c00 	.word	0x40000c00
 8001cd0:	40010400 	.word	0x40010400
 8001cd4:	40014000 	.word	0x40014000
 8001cd8:	40001800 	.word	0x40001800

08001cdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d122      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0302 	and.w	r3, r3, #2
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d11b      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f06f 0202 	mvn.w	r2, #2
 8001d08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f000 f8ee 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001d24:	e005      	b.n	8001d32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f8e0 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f8f1 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d122      	bne.n	8001d8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d11b      	bne.n	8001d8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0204 	mvn.w	r2, #4
 8001d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2202      	movs	r2, #2
 8001d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8c4 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001d78:	e005      	b.n	8001d86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f8b6 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 f8c7 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d122      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	2b08      	cmp	r3, #8
 8001da6:	d11b      	bne.n	8001de0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f06f 0208 	mvn.w	r2, #8
 8001db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2204      	movs	r2, #4
 8001db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f89a 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001dcc:	e005      	b.n	8001dda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f88c 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 f89d 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b10      	cmp	r3, #16
 8001dec:	d122      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b10      	cmp	r3, #16
 8001dfa:	d11b      	bne.n	8001e34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0210 	mvn.w	r2, #16
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2208      	movs	r2, #8
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f870 	bl	8001f00 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f862 	bl	8001eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f873 	bl	8001f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d10e      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f003 0301 	and.w	r3, r3, #1
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d107      	bne.n	8001e60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f06f 0201 	mvn.w	r2, #1
 8001e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7fe fd2e 	bl	80008bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6a:	2b80      	cmp	r3, #128	; 0x80
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e78:	2b80      	cmp	r3, #128	; 0x80
 8001e7a:	d107      	bne.n	8001e8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f902 	bl	8002090 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e96:	2b40      	cmp	r3, #64	; 0x40
 8001e98:	d10e      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ea4:	2b40      	cmp	r3, #64	; 0x40
 8001ea6:	d107      	bne.n	8001eb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f838 	bl	8001f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	2b20      	cmp	r3, #32
 8001ec4:	d10e      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0320 	and.w	r3, r3, #32
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d107      	bne.n	8001ee4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f06f 0220 	mvn.w	r2, #32
 8001edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f8cc 	bl	800207c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ee4:	bf00      	nop
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a40      	ldr	r2, [pc, #256]	; (8002050 <TIM_Base_SetConfig+0x114>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5a:	d00f      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a3d      	ldr	r2, [pc, #244]	; (8002054 <TIM_Base_SetConfig+0x118>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00b      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3c      	ldr	r2, [pc, #240]	; (8002058 <TIM_Base_SetConfig+0x11c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a3b      	ldr	r2, [pc, #236]	; (800205c <TIM_Base_SetConfig+0x120>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <TIM_Base_SetConfig+0x40>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a3a      	ldr	r2, [pc, #232]	; (8002060 <TIM_Base_SetConfig+0x124>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d108      	bne.n	8001f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2f      	ldr	r2, [pc, #188]	; (8002050 <TIM_Base_SetConfig+0x114>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02b      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9c:	d027      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2c      	ldr	r2, [pc, #176]	; (8002054 <TIM_Base_SetConfig+0x118>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d023      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2b      	ldr	r2, [pc, #172]	; (8002058 <TIM_Base_SetConfig+0x11c>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d01f      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2a      	ldr	r2, [pc, #168]	; (800205c <TIM_Base_SetConfig+0x120>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01b      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a29      	ldr	r2, [pc, #164]	; (8002060 <TIM_Base_SetConfig+0x124>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d017      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a28      	ldr	r2, [pc, #160]	; (8002064 <TIM_Base_SetConfig+0x128>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a27      	ldr	r2, [pc, #156]	; (8002068 <TIM_Base_SetConfig+0x12c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <TIM_Base_SetConfig+0x130>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a25      	ldr	r2, [pc, #148]	; (8002070 <TIM_Base_SetConfig+0x134>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a24      	ldr	r2, [pc, #144]	; (8002074 <TIM_Base_SetConfig+0x138>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a23      	ldr	r2, [pc, #140]	; (8002078 <TIM_Base_SetConfig+0x13c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <TIM_Base_SetConfig+0x114>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d003      	beq.n	8002034 <TIM_Base_SetConfig+0xf8>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a0c      	ldr	r2, [pc, #48]	; (8002060 <TIM_Base_SetConfig+0x124>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d103      	bne.n	800203c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	615a      	str	r2, [r3, #20]
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40010000 	.word	0x40010000
 8002054:	40000400 	.word	0x40000400
 8002058:	40000800 	.word	0x40000800
 800205c:	40000c00 	.word	0x40000c00
 8002060:	40010400 	.word	0x40010400
 8002064:	40014000 	.word	0x40014000
 8002068:	40014400 	.word	0x40014400
 800206c:	40014800 	.word	0x40014800
 8002070:	40001800 	.word	0x40001800
 8002074:	40001c00 	.word	0x40001c00
 8002078:	40002000 	.word	0x40002000

0800207c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr

080020a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e03f      	b.n	8002136 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7fe fc36 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	; 0x24
 80020d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f929 	bl	8002340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80020fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695a      	ldr	r2, [r3, #20]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800210c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800211c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2220      	movs	r2, #32
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b08a      	sub	sp, #40	; 0x28
 8002142:	af02      	add	r7, sp, #8
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800214e:	2300      	movs	r3, #0
 8002150:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b20      	cmp	r3, #32
 800215c:	d17c      	bne.n	8002258 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_UART_Transmit+0x2c>
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e075      	b.n	800225a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002174:	2b01      	cmp	r3, #1
 8002176:	d101      	bne.n	800217c <HAL_UART_Transmit+0x3e>
 8002178:	2302      	movs	r3, #2
 800217a:	e06e      	b.n	800225a <HAL_UART_Transmit+0x11c>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2221      	movs	r2, #33	; 0x21
 800218e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002192:	f7fe fdc5 	bl	8000d20 <HAL_GetTick>
 8002196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	88fa      	ldrh	r2, [r7, #6]
 800219c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	88fa      	ldrh	r2, [r7, #6]
 80021a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ac:	d108      	bne.n	80021c0 <HAL_UART_Transmit+0x82>
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d104      	bne.n	80021c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	61bb      	str	r3, [r7, #24]
 80021be:	e003      	b.n	80021c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80021d0:	e02a      	b.n	8002228 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f840 	bl	8002262 <UART_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e036      	b.n	800225a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10b      	bne.n	800220a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002200:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002202:	69bb      	ldr	r3, [r7, #24]
 8002204:	3302      	adds	r3, #2
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	e007      	b.n	800221a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	3301      	adds	r3, #1
 8002218:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800222c:	b29b      	uxth	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1cf      	bne.n	80021d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	2140      	movs	r1, #64	; 0x40
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f810 	bl	8002262 <UART_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e006      	b.n	800225a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2220      	movs	r2, #32
 8002250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002254:	2300      	movs	r3, #0
 8002256:	e000      	b.n	800225a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
  }
}
 800225a:	4618      	mov	r0, r3
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b090      	sub	sp, #64	; 0x40
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	603b      	str	r3, [r7, #0]
 800226e:	4613      	mov	r3, r2
 8002270:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002272:	e050      	b.n	8002316 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227a:	d04c      	beq.n	8002316 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800227c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <UART_WaitOnFlagUntilTimeout+0x30>
 8002282:	f7fe fd4d 	bl	8000d20 <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800228e:	429a      	cmp	r2, r3
 8002290:	d241      	bcs.n	8002316 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	330c      	adds	r3, #12
 8002298:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	e853 3f00 	ldrex	r3, [r3]
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80022a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80022a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	330c      	adds	r3, #12
 80022b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022b2:	637a      	str	r2, [r7, #52]	; 0x34
 80022b4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80022b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022ba:	e841 2300 	strex	r3, r2, [r1]
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80022c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1e5      	bne.n	8002292 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3314      	adds	r3, #20
 80022cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	e853 3f00 	ldrex	r3, [r3]
 80022d4:	613b      	str	r3, [r7, #16]
   return(result);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	3314      	adds	r3, #20
 80022e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022e6:	623a      	str	r2, [r7, #32]
 80022e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ea:	69f9      	ldr	r1, [r7, #28]
 80022ec:	6a3a      	ldr	r2, [r7, #32]
 80022ee:	e841 2300 	strex	r3, r2, [r1]
 80022f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e5      	bne.n	80022c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e00f      	b.n	8002336 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	4013      	ands	r3, r2
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	429a      	cmp	r2, r3
 8002324:	bf0c      	ite	eq
 8002326:	2301      	moveq	r3, #1
 8002328:	2300      	movne	r3, #0
 800232a:	b2db      	uxtb	r3, r3
 800232c:	461a      	mov	r2, r3
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	429a      	cmp	r2, r3
 8002332:	d09f      	beq.n	8002274 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3740      	adds	r7, #64	; 0x40
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002344:	b0c0      	sub	sp, #256	; 0x100
 8002346:	af00      	add	r7, sp, #0
 8002348:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800234c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800235c:	68d9      	ldr	r1, [r3, #12]
 800235e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	ea40 0301 	orr.w	r3, r0, r1
 8002368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800236a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	431a      	orrs	r2, r3
 8002378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	431a      	orrs	r2, r3
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4313      	orrs	r3, r2
 8002388:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800238c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002398:	f021 010c 	bic.w	r1, r1, #12
 800239c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80023a6:	430b      	orrs	r3, r1
 80023a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80023b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023ba:	6999      	ldr	r1, [r3, #24]
 80023bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	ea40 0301 	orr.w	r3, r0, r1
 80023c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80023c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	4b8f      	ldr	r3, [pc, #572]	; (800260c <UART_SetConfig+0x2cc>)
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d005      	beq.n	80023e0 <UART_SetConfig+0xa0>
 80023d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b8d      	ldr	r3, [pc, #564]	; (8002610 <UART_SetConfig+0x2d0>)
 80023dc:	429a      	cmp	r2, r3
 80023de:	d104      	bne.n	80023ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80023e0:	f7ff fb6c 	bl	8001abc <HAL_RCC_GetPCLK2Freq>
 80023e4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80023e8:	e003      	b.n	80023f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80023ea:	f7ff fb53 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 80023ee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023fc:	f040 810c 	bne.w	8002618 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002404:	2200      	movs	r2, #0
 8002406:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800240a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800240e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002412:	4622      	mov	r2, r4
 8002414:	462b      	mov	r3, r5
 8002416:	1891      	adds	r1, r2, r2
 8002418:	65b9      	str	r1, [r7, #88]	; 0x58
 800241a:	415b      	adcs	r3, r3
 800241c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800241e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002422:	4621      	mov	r1, r4
 8002424:	eb12 0801 	adds.w	r8, r2, r1
 8002428:	4629      	mov	r1, r5
 800242a:	eb43 0901 	adc.w	r9, r3, r1
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	f04f 0300 	mov.w	r3, #0
 8002436:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800243a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800243e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002442:	4690      	mov	r8, r2
 8002444:	4699      	mov	r9, r3
 8002446:	4623      	mov	r3, r4
 8002448:	eb18 0303 	adds.w	r3, r8, r3
 800244c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002450:	462b      	mov	r3, r5
 8002452:	eb49 0303 	adc.w	r3, r9, r3
 8002456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800245a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002466:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800246a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800246e:	460b      	mov	r3, r1
 8002470:	18db      	adds	r3, r3, r3
 8002472:	653b      	str	r3, [r7, #80]	; 0x50
 8002474:	4613      	mov	r3, r2
 8002476:	eb42 0303 	adc.w	r3, r2, r3
 800247a:	657b      	str	r3, [r7, #84]	; 0x54
 800247c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002480:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002484:	f7fd fefc 	bl	8000280 <__aeabi_uldivmod>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4b61      	ldr	r3, [pc, #388]	; (8002614 <UART_SetConfig+0x2d4>)
 800248e:	fba3 2302 	umull	r2, r3, r3, r2
 8002492:	095b      	lsrs	r3, r3, #5
 8002494:	011c      	lsls	r4, r3, #4
 8002496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800249a:	2200      	movs	r2, #0
 800249c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80024a0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80024a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80024a8:	4642      	mov	r2, r8
 80024aa:	464b      	mov	r3, r9
 80024ac:	1891      	adds	r1, r2, r2
 80024ae:	64b9      	str	r1, [r7, #72]	; 0x48
 80024b0:	415b      	adcs	r3, r3
 80024b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80024b8:	4641      	mov	r1, r8
 80024ba:	eb12 0a01 	adds.w	sl, r2, r1
 80024be:	4649      	mov	r1, r9
 80024c0:	eb43 0b01 	adc.w	fp, r3, r1
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024d8:	4692      	mov	sl, r2
 80024da:	469b      	mov	fp, r3
 80024dc:	4643      	mov	r3, r8
 80024de:	eb1a 0303 	adds.w	r3, sl, r3
 80024e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80024e6:	464b      	mov	r3, r9
 80024e8:	eb4b 0303 	adc.w	r3, fp, r3
 80024ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80024f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80024fc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002500:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002504:	460b      	mov	r3, r1
 8002506:	18db      	adds	r3, r3, r3
 8002508:	643b      	str	r3, [r7, #64]	; 0x40
 800250a:	4613      	mov	r3, r2
 800250c:	eb42 0303 	adc.w	r3, r2, r3
 8002510:	647b      	str	r3, [r7, #68]	; 0x44
 8002512:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002516:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800251a:	f7fd feb1 	bl	8000280 <__aeabi_uldivmod>
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	4611      	mov	r1, r2
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <UART_SetConfig+0x2d4>)
 8002526:	fba3 2301 	umull	r2, r3, r3, r1
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	2264      	movs	r2, #100	; 0x64
 800252e:	fb02 f303 	mul.w	r3, r2, r3
 8002532:	1acb      	subs	r3, r1, r3
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800253a:	4b36      	ldr	r3, [pc, #216]	; (8002614 <UART_SetConfig+0x2d4>)
 800253c:	fba3 2302 	umull	r2, r3, r3, r2
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002548:	441c      	add	r4, r3
 800254a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800254e:	2200      	movs	r2, #0
 8002550:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002554:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002558:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800255c:	4642      	mov	r2, r8
 800255e:	464b      	mov	r3, r9
 8002560:	1891      	adds	r1, r2, r2
 8002562:	63b9      	str	r1, [r7, #56]	; 0x38
 8002564:	415b      	adcs	r3, r3
 8002566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002568:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800256c:	4641      	mov	r1, r8
 800256e:	1851      	adds	r1, r2, r1
 8002570:	6339      	str	r1, [r7, #48]	; 0x30
 8002572:	4649      	mov	r1, r9
 8002574:	414b      	adcs	r3, r1
 8002576:	637b      	str	r3, [r7, #52]	; 0x34
 8002578:	f04f 0200 	mov.w	r2, #0
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002584:	4659      	mov	r1, fp
 8002586:	00cb      	lsls	r3, r1, #3
 8002588:	4651      	mov	r1, sl
 800258a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800258e:	4651      	mov	r1, sl
 8002590:	00ca      	lsls	r2, r1, #3
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	4603      	mov	r3, r0
 8002598:	4642      	mov	r2, r8
 800259a:	189b      	adds	r3, r3, r2
 800259c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80025a0:	464b      	mov	r3, r9
 80025a2:	460a      	mov	r2, r1
 80025a4:	eb42 0303 	adc.w	r3, r2, r3
 80025a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80025b8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80025bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80025c0:	460b      	mov	r3, r1
 80025c2:	18db      	adds	r3, r3, r3
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c6:	4613      	mov	r3, r2
 80025c8:	eb42 0303 	adc.w	r3, r2, r3
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80025d6:	f7fd fe53 	bl	8000280 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <UART_SetConfig+0x2d4>)
 80025e0:	fba3 1302 	umull	r1, r3, r3, r2
 80025e4:	095b      	lsrs	r3, r3, #5
 80025e6:	2164      	movs	r1, #100	; 0x64
 80025e8:	fb01 f303 	mul.w	r3, r1, r3
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	3332      	adds	r3, #50	; 0x32
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <UART_SetConfig+0x2d4>)
 80025f4:	fba2 2303 	umull	r2, r3, r2, r3
 80025f8:	095b      	lsrs	r3, r3, #5
 80025fa:	f003 0207 	and.w	r2, r3, #7
 80025fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4422      	add	r2, r4
 8002606:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002608:	e105      	b.n	8002816 <UART_SetConfig+0x4d6>
 800260a:	bf00      	nop
 800260c:	40011000 	.word	0x40011000
 8002610:	40011400 	.word	0x40011400
 8002614:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800261c:	2200      	movs	r2, #0
 800261e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002622:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002626:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800262a:	4642      	mov	r2, r8
 800262c:	464b      	mov	r3, r9
 800262e:	1891      	adds	r1, r2, r2
 8002630:	6239      	str	r1, [r7, #32]
 8002632:	415b      	adcs	r3, r3
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800263a:	4641      	mov	r1, r8
 800263c:	1854      	adds	r4, r2, r1
 800263e:	4649      	mov	r1, r9
 8002640:	eb43 0501 	adc.w	r5, r3, r1
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	00eb      	lsls	r3, r5, #3
 800264e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002652:	00e2      	lsls	r2, r4, #3
 8002654:	4614      	mov	r4, r2
 8002656:	461d      	mov	r5, r3
 8002658:	4643      	mov	r3, r8
 800265a:	18e3      	adds	r3, r4, r3
 800265c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002660:	464b      	mov	r3, r9
 8002662:	eb45 0303 	adc.w	r3, r5, r3
 8002666:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800266a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002676:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	f04f 0300 	mov.w	r3, #0
 8002682:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002686:	4629      	mov	r1, r5
 8002688:	008b      	lsls	r3, r1, #2
 800268a:	4621      	mov	r1, r4
 800268c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002690:	4621      	mov	r1, r4
 8002692:	008a      	lsls	r2, r1, #2
 8002694:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002698:	f7fd fdf2 	bl	8000280 <__aeabi_uldivmod>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4b60      	ldr	r3, [pc, #384]	; (8002824 <UART_SetConfig+0x4e4>)
 80026a2:	fba3 2302 	umull	r2, r3, r3, r2
 80026a6:	095b      	lsrs	r3, r3, #5
 80026a8:	011c      	lsls	r4, r3, #4
 80026aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80026ae:	2200      	movs	r2, #0
 80026b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80026b4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80026b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80026bc:	4642      	mov	r2, r8
 80026be:	464b      	mov	r3, r9
 80026c0:	1891      	adds	r1, r2, r2
 80026c2:	61b9      	str	r1, [r7, #24]
 80026c4:	415b      	adcs	r3, r3
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026cc:	4641      	mov	r1, r8
 80026ce:	1851      	adds	r1, r2, r1
 80026d0:	6139      	str	r1, [r7, #16]
 80026d2:	4649      	mov	r1, r9
 80026d4:	414b      	adcs	r3, r1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	f04f 0200 	mov.w	r2, #0
 80026dc:	f04f 0300 	mov.w	r3, #0
 80026e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026e4:	4659      	mov	r1, fp
 80026e6:	00cb      	lsls	r3, r1, #3
 80026e8:	4651      	mov	r1, sl
 80026ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ee:	4651      	mov	r1, sl
 80026f0:	00ca      	lsls	r2, r1, #3
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	4603      	mov	r3, r0
 80026f8:	4642      	mov	r2, r8
 80026fa:	189b      	adds	r3, r3, r2
 80026fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002700:	464b      	mov	r3, r9
 8002702:	460a      	mov	r2, r1
 8002704:	eb42 0303 	adc.w	r3, r2, r3
 8002708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	67bb      	str	r3, [r7, #120]	; 0x78
 8002716:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002724:	4649      	mov	r1, r9
 8002726:	008b      	lsls	r3, r1, #2
 8002728:	4641      	mov	r1, r8
 800272a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800272e:	4641      	mov	r1, r8
 8002730:	008a      	lsls	r2, r1, #2
 8002732:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002736:	f7fd fda3 	bl	8000280 <__aeabi_uldivmod>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4b39      	ldr	r3, [pc, #228]	; (8002824 <UART_SetConfig+0x4e4>)
 8002740:	fba3 1302 	umull	r1, r3, r3, r2
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	2164      	movs	r1, #100	; 0x64
 8002748:	fb01 f303 	mul.w	r3, r1, r3
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	3332      	adds	r3, #50	; 0x32
 8002752:	4a34      	ldr	r2, [pc, #208]	; (8002824 <UART_SetConfig+0x4e4>)
 8002754:	fba2 2303 	umull	r2, r3, r2, r3
 8002758:	095b      	lsrs	r3, r3, #5
 800275a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275e:	441c      	add	r4, r3
 8002760:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002764:	2200      	movs	r2, #0
 8002766:	673b      	str	r3, [r7, #112]	; 0x70
 8002768:	677a      	str	r2, [r7, #116]	; 0x74
 800276a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800276e:	4642      	mov	r2, r8
 8002770:	464b      	mov	r3, r9
 8002772:	1891      	adds	r1, r2, r2
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	415b      	adcs	r3, r3
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800277e:	4641      	mov	r1, r8
 8002780:	1851      	adds	r1, r2, r1
 8002782:	6039      	str	r1, [r7, #0]
 8002784:	4649      	mov	r1, r9
 8002786:	414b      	adcs	r3, r1
 8002788:	607b      	str	r3, [r7, #4]
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	f04f 0300 	mov.w	r3, #0
 8002792:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002796:	4659      	mov	r1, fp
 8002798:	00cb      	lsls	r3, r1, #3
 800279a:	4651      	mov	r1, sl
 800279c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a0:	4651      	mov	r1, sl
 80027a2:	00ca      	lsls	r2, r1, #3
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	4603      	mov	r3, r0
 80027aa:	4642      	mov	r2, r8
 80027ac:	189b      	adds	r3, r3, r2
 80027ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80027b0:	464b      	mov	r3, r9
 80027b2:	460a      	mov	r2, r1
 80027b4:	eb42 0303 	adc.w	r3, r2, r3
 80027b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	663b      	str	r3, [r7, #96]	; 0x60
 80027c4:	667a      	str	r2, [r7, #100]	; 0x64
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80027d2:	4649      	mov	r1, r9
 80027d4:	008b      	lsls	r3, r1, #2
 80027d6:	4641      	mov	r1, r8
 80027d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80027dc:	4641      	mov	r1, r8
 80027de:	008a      	lsls	r2, r1, #2
 80027e0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80027e4:	f7fd fd4c 	bl	8000280 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4b0d      	ldr	r3, [pc, #52]	; (8002824 <UART_SetConfig+0x4e4>)
 80027ee:	fba3 1302 	umull	r1, r3, r3, r2
 80027f2:	095b      	lsrs	r3, r3, #5
 80027f4:	2164      	movs	r1, #100	; 0x64
 80027f6:	fb01 f303 	mul.w	r3, r1, r3
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	3332      	adds	r3, #50	; 0x32
 8002800:	4a08      	ldr	r2, [pc, #32]	; (8002824 <UART_SetConfig+0x4e4>)
 8002802:	fba2 2303 	umull	r2, r3, r2, r3
 8002806:	095b      	lsrs	r3, r3, #5
 8002808:	f003 020f 	and.w	r2, r3, #15
 800280c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4422      	add	r2, r4
 8002814:	609a      	str	r2, [r3, #8]
}
 8002816:	bf00      	nop
 8002818:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	51eb851f 	.word	0x51eb851f

08002828 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f103 0208 	add.w	r2, r3, #8
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f103 0208 	add.w	r2, r3, #8
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f103 0208 	add.w	r2, r3, #8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr

08002882 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002882:	b480      	push	{r7}
 8002884:	b085      	sub	sp, #20
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d103      	bne.n	80028a2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	e00c      	b.n	80028bc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3308      	adds	r3, #8
 80028a6:	60fb      	str	r3, [r7, #12]
 80028a8:	e002      	b.n	80028b0 <vListInsert+0x2e>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	60fb      	str	r3, [r7, #12]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68ba      	ldr	r2, [r7, #8]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d2f6      	bcs.n	80028aa <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	601a      	str	r2, [r3, #0]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6892      	ldr	r2, [r2, #8]
 800290a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	6852      	ldr	r2, [r2, #4]
 8002914:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	429a      	cmp	r2, r3
 800291e:	d103      	bne.n	8002928 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	1e5a      	subs	r2, r3, #1
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002952:	2301      	movs	r3, #1
 8002954:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10a      	bne.n	8002976 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002972:	bf00      	nop
 8002974:	e7fe      	b.n	8002974 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d05d      	beq.n	8002a38 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002980:	2b00      	cmp	r3, #0
 8002982:	d059      	beq.n	8002a38 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800298c:	2100      	movs	r1, #0
 800298e:	fba3 2302 	umull	r2, r3, r3, r2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d000      	beq.n	8002998 <xQueueGenericReset+0x50>
 8002996:	2101      	movs	r1, #1
 8002998:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800299a:	2b00      	cmp	r3, #0
 800299c:	d14c      	bne.n	8002a38 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800299e:	f002 fa9b 	bl	8004ed8 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029aa:	6939      	ldr	r1, [r7, #16]
 80029ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029ae:	fb01 f303 	mul.w	r3, r1, r3
 80029b2:	441a      	add	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2200      	movs	r2, #0
 80029bc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6939      	ldr	r1, [r7, #16]
 80029d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	441a      	add	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	22ff      	movs	r2, #255	; 0xff
 80029ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d114      	bne.n	8002a1e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01a      	beq.n	8002a32 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	3310      	adds	r3, #16
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 f9fb 	bl	8003dfc <xTaskRemoveFromEventList>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d012      	beq.n	8002a32 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002a0c:	4b15      	ldr	r3, [pc, #84]	; (8002a64 <xQueueGenericReset+0x11c>)
 8002a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	f3bf 8f4f 	dsb	sy
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	e009      	b.n	8002a32 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	3310      	adds	r3, #16
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff ff00 	bl	8002828 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	3324      	adds	r3, #36	; 0x24
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fefb 	bl	8002828 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002a32:	f002 fa81 	bl	8004f38 <vPortExitCritical>
 8002a36:	e001      	b.n	8002a3c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10a      	bne.n	8002a58 <xQueueGenericReset+0x110>
        __asm volatile
 8002a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a46:	f383 8811 	msr	BASEPRI, r3
 8002a4a:	f3bf 8f6f 	isb	sy
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	60bb      	str	r3, [r7, #8]
    }
 8002a54:	bf00      	nop
 8002a56:	e7fe      	b.n	8002a56 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002a58:	697b      	ldr	r3, [r7, #20]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3718      	adds	r7, #24
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	e000ed04 	.word	0xe000ed04

08002a68 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b08a      	sub	sp, #40	; 0x28
 8002a6c:	af02      	add	r7, sp, #8
 8002a6e:	60f8      	str	r0, [r7, #12]
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	4613      	mov	r3, r2
 8002a74:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d02e      	beq.n	8002ade <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a80:	2100      	movs	r1, #0
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	fba3 2302 	umull	r2, r3, r3, r2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d000      	beq.n	8002a90 <xQueueGenericCreate+0x28>
 8002a8e:	2101      	movs	r1, #1
 8002a90:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d123      	bne.n	8002ade <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	68ba      	ldr	r2, [r7, #8]
 8002a9a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002a9e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002aa2:	d81c      	bhi.n	8002ade <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	3350      	adds	r3, #80	; 0x50
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f002 faf2 	bl	800509c <pvPortMalloc>
 8002ab8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d01c      	beq.n	8002afa <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3350      	adds	r3, #80	; 0x50
 8002ac8:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002aca:	79fa      	ldrb	r2, [r7, #7]
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	68b9      	ldr	r1, [r7, #8]
 8002ad6:	68f8      	ldr	r0, [r7, #12]
 8002ad8:	f000 f814 	bl	8002b04 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002adc:	e00d      	b.n	8002afa <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d10a      	bne.n	8002afa <xQueueGenericCreate+0x92>
        __asm volatile
 8002ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae8:	f383 8811 	msr	BASEPRI, r3
 8002aec:	f3bf 8f6f 	isb	sy
 8002af0:	f3bf 8f4f 	dsb	sy
 8002af4:	613b      	str	r3, [r7, #16]
    }
 8002af6:	bf00      	nop
 8002af8:	e7fe      	b.n	8002af8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002afa:	69fb      	ldr	r3, [r7, #28]
    }
 8002afc:	4618      	mov	r0, r3
 8002afe:	3720      	adds	r7, #32
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
 8002b10:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d103      	bne.n	8002b20 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	e002      	b.n	8002b26 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002b32:	2101      	movs	r1, #1
 8002b34:	69b8      	ldr	r0, [r7, #24]
 8002b36:	f7ff ff07 	bl	8002948 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
	...

08002b4c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08e      	sub	sp, #56	; 0x38
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
 8002b58:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10a      	bne.n	8002b7e <xQueueGenericSend+0x32>
        __asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d103      	bne.n	8002b8c <xQueueGenericSend+0x40>
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <xQueueGenericSend+0x44>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e000      	b.n	8002b92 <xQueueGenericSend+0x46>
 8002b90:	2300      	movs	r3, #0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10a      	bne.n	8002bac <xQueueGenericSend+0x60>
        __asm volatile
 8002b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 8002b9e:	f3bf 8f6f 	isb	sy
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002ba8:	bf00      	nop
 8002baa:	e7fe      	b.n	8002baa <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d103      	bne.n	8002bba <xQueueGenericSend+0x6e>
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d101      	bne.n	8002bbe <xQueueGenericSend+0x72>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <xQueueGenericSend+0x74>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <xQueueGenericSend+0x8e>
        __asm volatile
 8002bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc8:	f383 8811 	msr	BASEPRI, r3
 8002bcc:	f3bf 8f6f 	isb	sy
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	623b      	str	r3, [r7, #32]
    }
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002bda:	f001 fb1f 	bl	800421c <xTaskGetSchedulerState>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d102      	bne.n	8002bea <xQueueGenericSend+0x9e>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <xQueueGenericSend+0xa2>
 8002bea:	2301      	movs	r3, #1
 8002bec:	e000      	b.n	8002bf0 <xQueueGenericSend+0xa4>
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10a      	bne.n	8002c0a <xQueueGenericSend+0xbe>
        __asm volatile
 8002bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf8:	f383 8811 	msr	BASEPRI, r3
 8002bfc:	f3bf 8f6f 	isb	sy
 8002c00:	f3bf 8f4f 	dsb	sy
 8002c04:	61fb      	str	r3, [r7, #28]
    }
 8002c06:	bf00      	nop
 8002c08:	e7fe      	b.n	8002c08 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c0a:	f002 f965 	bl	8004ed8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d302      	bcc.n	8002c20 <xQueueGenericSend+0xd4>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d129      	bne.n	8002c74 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c26:	f000 fa93 	bl	8003150 <prvCopyDataToQueue>
 8002c2a:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d010      	beq.n	8002c56 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	3324      	adds	r3, #36	; 0x24
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f001 f8df 	bl	8003dfc <xTaskRemoveFromEventList>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d013      	beq.n	8002c6c <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002c44:	4b3f      	ldr	r3, [pc, #252]	; (8002d44 <xQueueGenericSend+0x1f8>)
 8002c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	e00a      	b.n	8002c6c <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8002c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d007      	beq.n	8002c6c <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002c5c:	4b39      	ldr	r3, [pc, #228]	; (8002d44 <xQueueGenericSend+0x1f8>)
 8002c5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002c6c:	f002 f964 	bl	8004f38 <vPortExitCritical>
                return pdPASS;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e063      	b.n	8002d3c <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d103      	bne.n	8002c82 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c7a:	f002 f95d 	bl	8004f38 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	e05c      	b.n	8002d3c <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d106      	bne.n	8002c96 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002c88:	f107 0314 	add.w	r3, r7, #20
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 f98b 	bl	8003fa8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002c92:	2301      	movs	r3, #1
 8002c94:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002c96:	f002 f94f 	bl	8004f38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002c9a:	f000 fdb9 	bl	8003810 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002c9e:	f002 f91b 	bl	8004ed8 <vPortEnterCritical>
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ca8:	b25b      	sxtb	r3, r3
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d103      	bne.n	8002cb8 <xQueueGenericSend+0x16c>
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cbe:	b25b      	sxtb	r3, r3
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d103      	bne.n	8002cce <xQueueGenericSend+0x182>
 8002cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cce:	f002 f933 	bl	8004f38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cd2:	1d3a      	adds	r2, r7, #4
 8002cd4:	f107 0314 	add.w	r3, r7, #20
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f97a 	bl	8003fd4 <xTaskCheckForTimeOut>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d124      	bne.n	8002d30 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ce6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ce8:	f000 fb2a 	bl	8003340 <prvIsQueueFull>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d018      	beq.n	8002d24 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf4:	3310      	adds	r3, #16
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 f814 	bl	8003d28 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002d00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d02:	f000 fab5 	bl	8003270 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002d06:	f000 fd91 	bl	800382c <xTaskResumeAll>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f47f af7c 	bne.w	8002c0a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <xQueueGenericSend+0x1f8>)
 8002d14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d18:	601a      	str	r2, [r3, #0]
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	e772      	b.n	8002c0a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d26:	f000 faa3 	bl	8003270 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d2a:	f000 fd7f 	bl	800382c <xTaskResumeAll>
 8002d2e:	e76c      	b.n	8002c0a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d32:	f000 fa9d 	bl	8003270 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d36:	f000 fd79 	bl	800382c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8002d3a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3738      	adds	r7, #56	; 0x38
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	e000ed04 	.word	0xe000ed04

08002d48 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b08c      	sub	sp, #48	; 0x30
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d54:	2300      	movs	r3, #0
 8002d56:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10a      	bne.n	8002d78 <xQueueReceive+0x30>
        __asm volatile
 8002d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d66:	f383 8811 	msr	BASEPRI, r3
 8002d6a:	f3bf 8f6f 	isb	sy
 8002d6e:	f3bf 8f4f 	dsb	sy
 8002d72:	623b      	str	r3, [r7, #32]
    }
 8002d74:	bf00      	nop
 8002d76:	e7fe      	b.n	8002d76 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <xQueueReceive+0x3e>
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <xQueueReceive+0x42>
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <xQueueReceive+0x44>
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <xQueueReceive+0x5e>
        __asm volatile
 8002d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d94:	f383 8811 	msr	BASEPRI, r3
 8002d98:	f3bf 8f6f 	isb	sy
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	61fb      	str	r3, [r7, #28]
    }
 8002da2:	bf00      	nop
 8002da4:	e7fe      	b.n	8002da4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002da6:	f001 fa39 	bl	800421c <xTaskGetSchedulerState>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <xQueueReceive+0x6e>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <xQueueReceive+0x72>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <xQueueReceive+0x74>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10a      	bne.n	8002dd6 <xQueueReceive+0x8e>
        __asm volatile
 8002dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc4:	f383 8811 	msr	BASEPRI, r3
 8002dc8:	f3bf 8f6f 	isb	sy
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	61bb      	str	r3, [r7, #24]
    }
 8002dd2:	bf00      	nop
 8002dd4:	e7fe      	b.n	8002dd4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002dd6:	f002 f87f 	bl	8004ed8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d01f      	beq.n	8002e26 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002de6:	68b9      	ldr	r1, [r7, #8]
 8002de8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dea:	f000 fa1b 	bl	8003224 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	1e5a      	subs	r2, r3, #1
 8002df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00f      	beq.n	8002e1e <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e00:	3310      	adds	r3, #16
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fffa 	bl	8003dfc <xTaskRemoveFromEventList>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d007      	beq.n	8002e1e <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e0e:	4b3d      	ldr	r3, [pc, #244]	; (8002f04 <xQueueReceive+0x1bc>)
 8002e10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002e1e:	f002 f88b 	bl	8004f38 <vPortExitCritical>
                return pdPASS;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e069      	b.n	8002efa <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d103      	bne.n	8002e34 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002e2c:	f002 f884 	bl	8004f38 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002e30:	2300      	movs	r3, #0
 8002e32:	e062      	b.n	8002efa <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e3a:	f107 0310 	add.w	r3, r7, #16
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 f8b2 	bl	8003fa8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e44:	2301      	movs	r3, #1
 8002e46:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e48:	f002 f876 	bl	8004f38 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e4c:	f000 fce0 	bl	8003810 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e50:	f002 f842 	bl	8004ed8 <vPortEnterCritical>
 8002e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e5a:	b25b      	sxtb	r3, r3
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e60:	d103      	bne.n	8002e6a <xQueueReceive+0x122>
 8002e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e64:	2200      	movs	r2, #0
 8002e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e70:	b25b      	sxtb	r3, r3
 8002e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e76:	d103      	bne.n	8002e80 <xQueueReceive+0x138>
 8002e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e80:	f002 f85a 	bl	8004f38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e84:	1d3a      	adds	r2, r7, #4
 8002e86:	f107 0310 	add.w	r3, r7, #16
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f001 f8a1 	bl	8003fd4 <xTaskCheckForTimeOut>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d123      	bne.n	8002ee0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e9a:	f000 fa3b 	bl	8003314 <prvIsQueueEmpty>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d017      	beq.n	8002ed4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	3324      	adds	r3, #36	; 0x24
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	4611      	mov	r1, r2
 8002eac:	4618      	mov	r0, r3
 8002eae:	f000 ff3b 	bl	8003d28 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002eb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eb4:	f000 f9dc 	bl	8003270 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002eb8:	f000 fcb8 	bl	800382c <xTaskResumeAll>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d189      	bne.n	8002dd6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <xQueueReceive+0x1bc>)
 8002ec4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	f3bf 8f4f 	dsb	sy
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	e780      	b.n	8002dd6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002ed4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ed6:	f000 f9cb 	bl	8003270 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002eda:	f000 fca7 	bl	800382c <xTaskResumeAll>
 8002ede:	e77a      	b.n	8002dd6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ee2:	f000 f9c5 	bl	8003270 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ee6:	f000 fca1 	bl	800382c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eec:	f000 fa12 	bl	8003314 <prvIsQueueEmpty>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f43f af6f 	beq.w	8002dd6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002ef8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3730      	adds	r7, #48	; 0x30
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08e      	sub	sp, #56	; 0x38
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002f12:	2300      	movs	r3, #0
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f28:	f383 8811 	msr	BASEPRI, r3
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	623b      	str	r3, [r7, #32]
    }
 8002f36:	bf00      	nop
 8002f38:	e7fe      	b.n	8002f38 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	61fb      	str	r3, [r7, #28]
    }
 8002f54:	bf00      	nop
 8002f56:	e7fe      	b.n	8002f56 <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f58:	f001 f960 	bl	800421c <xTaskGetSchedulerState>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d102      	bne.n	8002f68 <xQueueSemaphoreTake+0x60>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <xQueueSemaphoreTake+0x64>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <xQueueSemaphoreTake+0x66>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d10a      	bne.n	8002f88 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	61bb      	str	r3, [r7, #24]
    }
 8002f84:	bf00      	nop
 8002f86:	e7fe      	b.n	8002f86 <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002f88:	f001 ffa6 	bl	8004ed8 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d024      	beq.n	8002fe2 <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	1e5a      	subs	r2, r3, #1
 8002f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d104      	bne.n	8002fb2 <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002fa8:	f001 fb50 	bl	800464c <pvTaskIncrementMutexHeldCount>
 8002fac:	4602      	mov	r2, r0
 8002fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb0:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00f      	beq.n	8002fda <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbc:	3310      	adds	r3, #16
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 ff1c 	bl	8003dfc <xTaskRemoveFromEventList>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d007      	beq.n	8002fda <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002fca:	4b54      	ldr	r3, [pc, #336]	; (800311c <xQueueSemaphoreTake+0x214>)
 8002fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002fda:	f001 ffad 	bl	8004f38 <vPortExitCritical>
                return pdPASS;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e097      	b.n	8003112 <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d111      	bne.n	800300c <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	617b      	str	r3, [r7, #20]
    }
 8003000:	bf00      	nop
 8003002:	e7fe      	b.n	8003002 <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003004:	f001 ff98 	bl	8004f38 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003008:	2300      	movs	r3, #0
 800300a:	e082      	b.n	8003112 <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003012:	f107 030c 	add.w	r3, r7, #12
 8003016:	4618      	mov	r0, r3
 8003018:	f000 ffc6 	bl	8003fa8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800301c:	2301      	movs	r3, #1
 800301e:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003020:	f001 ff8a 	bl	8004f38 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003024:	f000 fbf4 	bl	8003810 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003028:	f001 ff56 	bl	8004ed8 <vPortEnterCritical>
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003032:	b25b      	sxtb	r3, r3
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d103      	bne.n	8003042 <xQueueSemaphoreTake+0x13a>
 800303a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003044:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003048:	b25b      	sxtb	r3, r3
 800304a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304e:	d103      	bne.n	8003058 <xQueueSemaphoreTake+0x150>
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003058:	f001 ff6e 	bl	8004f38 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800305c:	463a      	mov	r2, r7
 800305e:	f107 030c 	add.w	r3, r7, #12
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f000 ffb5 	bl	8003fd4 <xTaskCheckForTimeOut>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d132      	bne.n	80030d6 <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003070:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003072:	f000 f94f 	bl	8003314 <prvIsQueueEmpty>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d026      	beq.n	80030ca <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d109      	bne.n	8003098 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8003084:	f001 ff28 	bl	8004ed8 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f001 f8e3 	bl	8004258 <xTaskPriorityInherit>
 8003092:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8003094:	f001 ff50 	bl	8004f38 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800309a:	3324      	adds	r3, #36	; 0x24
 800309c:	683a      	ldr	r2, [r7, #0]
 800309e:	4611      	mov	r1, r2
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 fe41 	bl	8003d28 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80030a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030a8:	f000 f8e2 	bl	8003270 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80030ac:	f000 fbbe 	bl	800382c <xTaskResumeAll>
 80030b0:	4603      	mov	r3, r0
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f47f af68 	bne.w	8002f88 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 80030b8:	4b18      	ldr	r3, [pc, #96]	; (800311c <xQueueSemaphoreTake+0x214>)
 80030ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	e75e      	b.n	8002f88 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80030ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030cc:	f000 f8d0 	bl	8003270 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80030d0:	f000 fbac 	bl	800382c <xTaskResumeAll>
 80030d4:	e758      	b.n	8002f88 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80030d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030d8:	f000 f8ca 	bl	8003270 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80030dc:	f000 fba6 	bl	800382c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030e2:	f000 f917 	bl	8003314 <prvIsQueueEmpty>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f43f af4d 	beq.w	8002f88 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d00d      	beq.n	8003110 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 80030f4:	f001 fef0 	bl	8004ed8 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80030f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80030fa:	f000 f811 	bl	8003120 <prvGetDisinheritPriorityAfterTimeout>
 80030fe:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003106:	4618      	mov	r0, r3
 8003108:	f001 f9e8 	bl	80044dc <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 800310c:	f001 ff14 	bl	8004f38 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003110:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003112:	4618      	mov	r0, r3
 8003114:	3738      	adds	r7, #56	; 0x38
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	e000ed04 	.word	0xe000ed04

08003120 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312c:	2b00      	cmp	r3, #0
 800312e:	d006      	beq.n	800313e <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f1c3 0305 	rsb	r3, r3, #5
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	e001      	b.n	8003142 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800313e:	2300      	movs	r3, #0
 8003140:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003142:	68fb      	ldr	r3, [r7, #12]
    }
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10d      	bne.n	800318a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d14d      	bne.n	8003212 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	4618      	mov	r0, r3
 800317c:	f001 f90a 	bl	8004394 <xTaskPriorityDisinherit>
 8003180:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	609a      	str	r2, [r3, #8]
 8003188:	e043      	b.n	8003212 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d119      	bne.n	80031c4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6858      	ldr	r0, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	461a      	mov	r2, r3
 800319a:	68b9      	ldr	r1, [r7, #8]
 800319c:	f002 f9a6 	bl	80054ec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	441a      	add	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d32b      	bcc.n	8003212 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	e026      	b.n	8003212 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	68d8      	ldr	r0, [r3, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	461a      	mov	r2, r3
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	f002 f98c 	bl	80054ec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	68da      	ldr	r2, [r3, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	425b      	negs	r3, r3
 80031de:	441a      	add	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d207      	bcs.n	8003200 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	425b      	negs	r3, r3
 80031fa:	441a      	add	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b02      	cmp	r3, #2
 8003204:	d105      	bne.n	8003212 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d002      	beq.n	8003212 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	3b01      	subs	r3, #1
 8003210:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1c5a      	adds	r2, r3, #1
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800321a:	697b      	ldr	r3, [r7, #20]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d018      	beq.n	8003268 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	441a      	add	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	429a      	cmp	r2, r3
 800324e:	d303      	bcc.n	8003258 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68d9      	ldr	r1, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	461a      	mov	r2, r3
 8003262:	6838      	ldr	r0, [r7, #0]
 8003264:	f002 f942 	bl	80054ec <memcpy>
    }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003278:	f001 fe2e 	bl	8004ed8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003282:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003284:	e011      	b.n	80032aa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	2b00      	cmp	r3, #0
 800328c:	d012      	beq.n	80032b4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	3324      	adds	r3, #36	; 0x24
 8003292:	4618      	mov	r0, r3
 8003294:	f000 fdb2 	bl	8003dfc <xTaskRemoveFromEventList>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800329e:	f000 feff 	bl	80040a0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80032a2:	7bfb      	ldrb	r3, [r7, #15]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80032aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	dce9      	bgt.n	8003286 <prvUnlockQueue+0x16>
 80032b2:	e000      	b.n	80032b6 <prvUnlockQueue+0x46>
                        break;
 80032b4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	22ff      	movs	r2, #255	; 0xff
 80032ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80032be:	f001 fe3b 	bl	8004f38 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80032c2:	f001 fe09 	bl	8004ed8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032cc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032ce:	e011      	b.n	80032f4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d012      	beq.n	80032fe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3310      	adds	r3, #16
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 fd8d 	bl	8003dfc <xTaskRemoveFromEventList>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80032e8:	f000 feda 	bl	80040a0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80032ec:	7bbb      	ldrb	r3, [r7, #14]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	dce9      	bgt.n	80032d0 <prvUnlockQueue+0x60>
 80032fc:	e000      	b.n	8003300 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80032fe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	22ff      	movs	r2, #255	; 0xff
 8003304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8003308:	f001 fe16 	bl	8004f38 <vPortExitCritical>
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800331c:	f001 fddc 	bl	8004ed8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003324:	2b00      	cmp	r3, #0
 8003326:	d102      	bne.n	800332e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003328:	2301      	movs	r3, #1
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	e001      	b.n	8003332 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003332:	f001 fe01 	bl	8004f38 <vPortExitCritical>

    return xReturn;
 8003336:	68fb      	ldr	r3, [r7, #12]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003348:	f001 fdc6 	bl	8004ed8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	429a      	cmp	r2, r3
 8003356:	d102      	bne.n	800335e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	e001      	b.n	8003362 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003362:	f001 fde9 	bl	8004f38 <vPortExitCritical>

    return xReturn;
 8003366:	68fb      	ldr	r3, [r7, #12]
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d10a      	bne.n	8003396 <vQueueAddToRegistry+0x26>
        __asm volatile
 8003380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003384:	f383 8811 	msr	BASEPRI, r3
 8003388:	f3bf 8f6f 	isb	sy
 800338c:	f3bf 8f4f 	dsb	sy
 8003390:	60fb      	str	r3, [r7, #12]
    }
 8003392:	bf00      	nop
 8003394:	e7fe      	b.n	8003394 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003396:	2300      	movs	r3, #0
 8003398:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d024      	beq.n	80033ea <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
 80033a4:	e01e      	b.n	80033e4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80033a6:	4a18      	ldr	r2, [pc, #96]	; (8003408 <vQueueAddToRegistry+0x98>)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d105      	bne.n	80033c2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	4a13      	ldr	r2, [pc, #76]	; (8003408 <vQueueAddToRegistry+0x98>)
 80033bc:	4413      	add	r3, r2
 80033be:	613b      	str	r3, [r7, #16]
                    break;
 80033c0:	e013      	b.n	80033ea <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <vQueueAddToRegistry+0x6e>
 80033c8:	4a0f      	ldr	r2, [pc, #60]	; (8003408 <vQueueAddToRegistry+0x98>)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d104      	bne.n	80033de <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4a0b      	ldr	r2, [pc, #44]	; (8003408 <vQueueAddToRegistry+0x98>)
 80033da:	4413      	add	r3, r2
 80033dc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	3301      	adds	r3, #1
 80033e2:	617b      	str	r3, [r7, #20]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	2b07      	cmp	r3, #7
 80033e8:	d9dd      	bls.n	80033a6 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 80033fc:	bf00      	nop
 80033fe:	371c      	adds	r7, #28
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	20000138 	.word	0x20000138

0800340c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800341c:	f001 fd5c 	bl	8004ed8 <vPortEnterCritical>
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003426:	b25b      	sxtb	r3, r3
 8003428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800342c:	d103      	bne.n	8003436 <vQueueWaitForMessageRestricted+0x2a>
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800343c:	b25b      	sxtb	r3, r3
 800343e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003442:	d103      	bne.n	800344c <vQueueWaitForMessageRestricted+0x40>
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800344c:	f001 fd74 	bl	8004f38 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003454:	2b00      	cmp	r3, #0
 8003456:	d106      	bne.n	8003466 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	3324      	adds	r3, #36	; 0x24
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fc85 	bl	8003d70 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8003466:	6978      	ldr	r0, [r7, #20]
 8003468:	f7ff ff02 	bl	8003270 <prvUnlockQueue>
    }
 800346c:	bf00      	nop
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003474:	b580      	push	{r7, lr}
 8003476:	b08c      	sub	sp, #48	; 0x30
 8003478:	af04      	add	r7, sp, #16
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	603b      	str	r3, [r7, #0]
 8003480:	4613      	mov	r3, r2
 8003482:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4618      	mov	r0, r3
 800348a:	f001 fe07 	bl	800509c <pvPortMalloc>
 800348e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00e      	beq.n	80034b4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003496:	2058      	movs	r0, #88	; 0x58
 8003498:	f001 fe00 	bl	800509c <pvPortMalloc>
 800349c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d003      	beq.n	80034ac <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	631a      	str	r2, [r3, #48]	; 0x30
 80034aa:	e005      	b.n	80034b8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80034ac:	6978      	ldr	r0, [r7, #20]
 80034ae:	f001 fed5 	bl	800525c <vPortFree>
 80034b2:	e001      	b.n	80034b8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d013      	beq.n	80034e6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80034be:	88fa      	ldrh	r2, [r7, #6]
 80034c0:	2300      	movs	r3, #0
 80034c2:	9303      	str	r3, [sp, #12]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ca:	9301      	str	r3, [sp, #4]
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	9300      	str	r3, [sp, #0]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	68b9      	ldr	r1, [r7, #8]
 80034d4:	68f8      	ldr	r0, [r7, #12]
 80034d6:	f000 f80e 	bl	80034f6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80034da:	69f8      	ldr	r0, [r7, #28]
 80034dc:	f000 f8b0 	bl	8003640 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80034e0:	2301      	movs	r3, #1
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e002      	b.n	80034ec <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034e6:	f04f 33ff 	mov.w	r3, #4294967295
 80034ea:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80034ec:	69bb      	ldr	r3, [r7, #24]
    }
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b088      	sub	sp, #32
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003506:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	461a      	mov	r2, r3
 800350e:	21a5      	movs	r1, #165	; 0xa5
 8003510:	f001 fffa 	bl	8005508 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800351e:	3b01      	subs	r3, #1
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	f023 0307 	bic.w	r3, r3, #7
 800352c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	f003 0307 	and.w	r3, r3, #7
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <prvInitialiseNewTask+0x58>
        __asm volatile
 8003538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800353c:	f383 8811 	msr	BASEPRI, r3
 8003540:	f3bf 8f6f 	isb	sy
 8003544:	f3bf 8f4f 	dsb	sy
 8003548:	617b      	str	r3, [r7, #20]
    }
 800354a:	bf00      	nop
 800354c:	e7fe      	b.n	800354c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d01f      	beq.n	8003594 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003554:	2300      	movs	r3, #0
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	e012      	b.n	8003580 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800355a:	68ba      	ldr	r2, [r7, #8]
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	7819      	ldrb	r1, [r3, #0]
 8003562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	4413      	add	r3, r2
 8003568:	3334      	adds	r3, #52	; 0x34
 800356a:	460a      	mov	r2, r1
 800356c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	4413      	add	r3, r2
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3301      	adds	r3, #1
 800357e:	61fb      	str	r3, [r7, #28]
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	2b09      	cmp	r3, #9
 8003584:	d9e9      	bls.n	800355a <prvInitialiseNewTask+0x64>
 8003586:	e000      	b.n	800358a <prvInitialiseNewTask+0x94>
            {
                break;
 8003588:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800358a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358c:	2200      	movs	r2, #0
 800358e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003592:	e003      	b.n	800359c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d90a      	bls.n	80035b8 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	613b      	str	r3, [r7, #16]
    }
 80035b4:	bf00      	nop
 80035b6:	e7fe      	b.n	80035b6 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80035b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d901      	bls.n	80035c2 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80035be:	2304      	movs	r3, #4
 80035c0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80035c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80035c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035cc:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80035ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d0:	2200      	movs	r2, #0
 80035d2:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035d6:	3304      	adds	r3, #4
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff f945 	bl	8002868 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e0:	3318      	adds	r3, #24
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f940 	bl	8002868 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035ec:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	f1c3 0205 	rsb	r2, r3, #5
 80035f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035f6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035fc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	3350      	adds	r3, #80	; 0x50
 8003602:	2204      	movs	r2, #4
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f001 ff7e 	bl	8005508 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800360c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800360e:	3354      	adds	r3, #84	; 0x54
 8003610:	2201      	movs	r2, #1
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f001 ff77 	bl	8005508 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800361a:	683a      	ldr	r2, [r7, #0]
 800361c:	68f9      	ldr	r1, [r7, #12]
 800361e:	69b8      	ldr	r0, [r7, #24]
 8003620:	f001 fb2c 	bl	8004c7c <pxPortInitialiseStack>
 8003624:	4602      	mov	r2, r0
 8003626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003628:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003634:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003636:	bf00      	nop
 8003638:	3720      	adds	r7, #32
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003648:	f001 fc46 	bl	8004ed8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800364c:	4b40      	ldr	r3, [pc, #256]	; (8003750 <prvAddNewTaskToReadyList+0x110>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3301      	adds	r3, #1
 8003652:	4a3f      	ldr	r2, [pc, #252]	; (8003750 <prvAddNewTaskToReadyList+0x110>)
 8003654:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8003656:	4b3f      	ldr	r3, [pc, #252]	; (8003754 <prvAddNewTaskToReadyList+0x114>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800365e:	4a3d      	ldr	r2, [pc, #244]	; (8003754 <prvAddNewTaskToReadyList+0x114>)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003664:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <prvAddNewTaskToReadyList+0x110>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d110      	bne.n	800368e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800366c:	f000 fd3c 	bl	80040e8 <prvInitialiseTaskLists>
 8003670:	e00d      	b.n	800368e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8003672:	4b39      	ldr	r3, [pc, #228]	; (8003758 <prvAddNewTaskToReadyList+0x118>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d109      	bne.n	800368e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800367a:	4b36      	ldr	r3, [pc, #216]	; (8003754 <prvAddNewTaskToReadyList+0x114>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	429a      	cmp	r2, r3
 8003686:	d802      	bhi.n	800368e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8003688:	4a32      	ldr	r2, [pc, #200]	; (8003754 <prvAddNewTaskToReadyList+0x114>)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800368e:	4b33      	ldr	r3, [pc, #204]	; (800375c <prvAddNewTaskToReadyList+0x11c>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3301      	adds	r3, #1
 8003694:	4a31      	ldr	r2, [pc, #196]	; (800375c <prvAddNewTaskToReadyList+0x11c>)
 8003696:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003698:	4b30      	ldr	r3, [pc, #192]	; (800375c <prvAddNewTaskToReadyList+0x11c>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	2201      	movs	r2, #1
 80036a6:	409a      	lsls	r2, r3
 80036a8:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <prvAddNewTaskToReadyList+0x120>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	4a2c      	ldr	r2, [pc, #176]	; (8003760 <prvAddNewTaskToReadyList+0x120>)
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b6:	492b      	ldr	r1, [pc, #172]	; (8003764 <prvAddNewTaskToReadyList+0x124>)
 80036b8:	4613      	mov	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3304      	adds	r3, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	609a      	str	r2, [r3, #8]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	3204      	adds	r2, #4
 80036de:	605a      	str	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	1d1a      	adds	r2, r3, #4
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <prvAddNewTaskToReadyList+0x124>)
 80036f6:	441a      	add	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	615a      	str	r2, [r3, #20]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	4918      	ldr	r1, [pc, #96]	; (8003764 <prvAddNewTaskToReadyList+0x124>)
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	1c59      	adds	r1, r3, #1
 8003710:	4814      	ldr	r0, [pc, #80]	; (8003764 <prvAddNewTaskToReadyList+0x124>)
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4403      	add	r3, r0
 800371c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800371e:	f001 fc0b 	bl	8004f38 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003722:	4b0d      	ldr	r3, [pc, #52]	; (8003758 <prvAddNewTaskToReadyList+0x118>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00e      	beq.n	8003748 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800372a:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <prvAddNewTaskToReadyList+0x114>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003734:	429a      	cmp	r2, r3
 8003736:	d207      	bcs.n	8003748 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003738:	4b0b      	ldr	r3, [pc, #44]	; (8003768 <prvAddNewTaskToReadyList+0x128>)
 800373a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000250 	.word	0x20000250
 8003754:	20000178 	.word	0x20000178
 8003758:	2000025c 	.word	0x2000025c
 800375c:	2000026c 	.word	0x2000026c
 8003760:	20000258 	.word	0x20000258
 8003764:	2000017c 	.word	0x2000017c
 8003768:	e000ed04 	.word	0xe000ed04

0800376c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <vTaskStartScheduler+0x88>)
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	2300      	movs	r3, #0
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	2300      	movs	r3, #0
 800377c:	2282      	movs	r2, #130	; 0x82
 800377e:	491e      	ldr	r1, [pc, #120]	; (80037f8 <vTaskStartScheduler+0x8c>)
 8003780:	481e      	ldr	r0, [pc, #120]	; (80037fc <vTaskStartScheduler+0x90>)
 8003782:	f7ff fe77 	bl	8003474 <xTaskCreate>
 8003786:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d102      	bne.n	8003794 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800378e:	f000 fff1 	bl	8004774 <xTimerCreateTimerTask>
 8003792:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d116      	bne.n	80037c8 <vTaskStartScheduler+0x5c>
        __asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	60bb      	str	r3, [r7, #8]
    }
 80037ac:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <vTaskStartScheduler+0x94>)
 80037b0:	f04f 32ff 	mov.w	r2, #4294967295
 80037b4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80037b6:	4b13      	ldr	r3, [pc, #76]	; (8003804 <vTaskStartScheduler+0x98>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80037bc:	4b12      	ldr	r3, [pc, #72]	; (8003808 <vTaskStartScheduler+0x9c>)
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80037c2:	f001 fae7 	bl	8004d94 <xPortStartScheduler>
 80037c6:	e00e      	b.n	80037e6 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ce:	d10a      	bne.n	80037e6 <vTaskStartScheduler+0x7a>
        __asm volatile
 80037d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d4:	f383 8811 	msr	BASEPRI, r3
 80037d8:	f3bf 8f6f 	isb	sy
 80037dc:	f3bf 8f4f 	dsb	sy
 80037e0:	607b      	str	r3, [r7, #4]
    }
 80037e2:	bf00      	nop
 80037e4:	e7fe      	b.n	80037e4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80037e6:	4b09      	ldr	r3, [pc, #36]	; (800380c <vTaskStartScheduler+0xa0>)
 80037e8:	681b      	ldr	r3, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	3710      	adds	r7, #16
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	20000274 	.word	0x20000274
 80037f8:	0800698c 	.word	0x0800698c
 80037fc:	080040b9 	.word	0x080040b9
 8003800:	20000270 	.word	0x20000270
 8003804:	2000025c 	.word	0x2000025c
 8003808:	20000254 	.word	0x20000254
 800380c:	2000000c 	.word	0x2000000c

08003810 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003814:	4b04      	ldr	r3, [pc, #16]	; (8003828 <vTaskSuspendAll+0x18>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3301      	adds	r3, #1
 800381a:	4a03      	ldr	r2, [pc, #12]	; (8003828 <vTaskSuspendAll+0x18>)
 800381c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800381e:	bf00      	nop
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	20000278 	.word	0x20000278

0800382c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003832:	2300      	movs	r3, #0
 8003834:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800383a:	4b71      	ldr	r3, [pc, #452]	; (8003a00 <xTaskResumeAll+0x1d4>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <xTaskResumeAll+0x2c>
        __asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	607b      	str	r3, [r7, #4]
    }
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003858:	f001 fb3e 	bl	8004ed8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800385c:	4b68      	ldr	r3, [pc, #416]	; (8003a00 <xTaskResumeAll+0x1d4>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	4a67      	ldr	r2, [pc, #412]	; (8003a00 <xTaskResumeAll+0x1d4>)
 8003864:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003866:	4b66      	ldr	r3, [pc, #408]	; (8003a00 <xTaskResumeAll+0x1d4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 80c0 	bne.w	80039f0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003870:	4b64      	ldr	r3, [pc, #400]	; (8003a04 <xTaskResumeAll+0x1d8>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80bb 	beq.w	80039f0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800387a:	e08a      	b.n	8003992 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800387c:	4b62      	ldr	r3, [pc, #392]	; (8003a08 <xTaskResumeAll+0x1dc>)
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	6a12      	ldr	r2, [r2, #32]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	69d2      	ldr	r2, [r2, #28]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	3318      	adds	r3, #24
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d103      	bne.n	80038b2 <xTaskResumeAll+0x86>
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	6a1a      	ldr	r2, [r3, #32]
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	2200      	movs	r2, #0
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	1e5a      	subs	r2, r3, #1
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	68d2      	ldr	r2, [r2, #12]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	6892      	ldr	r2, [r2, #8]
 80038da:	605a      	str	r2, [r3, #4]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	3304      	adds	r3, #4
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d103      	bne.n	80038f0 <xTaskResumeAll+0xc4>
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	605a      	str	r2, [r3, #4]
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	2200      	movs	r2, #0
 80038f4:	615a      	str	r2, [r3, #20]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	1e5a      	subs	r2, r3, #1
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003904:	2201      	movs	r2, #1
 8003906:	409a      	lsls	r2, r3
 8003908:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <xTaskResumeAll+0x1e0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4313      	orrs	r3, r2
 800390e:	4a3f      	ldr	r2, [pc, #252]	; (8003a0c <xTaskResumeAll+0x1e0>)
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003916:	493e      	ldr	r1, [pc, #248]	; (8003a10 <xTaskResumeAll+0x1e4>)
 8003918:	4613      	mov	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	3304      	adds	r3, #4
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	68ba      	ldr	r2, [r7, #8]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	689a      	ldr	r2, [r3, #8]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	60da      	str	r2, [r3, #12]
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	3204      	adds	r2, #4
 800393e:	605a      	str	r2, [r3, #4]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	1d1a      	adds	r2, r3, #4
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4a2e      	ldr	r2, [pc, #184]	; (8003a10 <xTaskResumeAll+0x1e4>)
 8003956:	441a      	add	r2, r3
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	615a      	str	r2, [r3, #20]
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	492b      	ldr	r1, [pc, #172]	; (8003a10 <xTaskResumeAll+0x1e4>)
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	1c59      	adds	r1, r3, #1
 8003970:	4827      	ldr	r0, [pc, #156]	; (8003a10 <xTaskResumeAll+0x1e4>)
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4403      	add	r3, r0
 800397c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <xTaskResumeAll+0x1e8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003988:	429a      	cmp	r2, r3
 800398a:	d302      	bcc.n	8003992 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800398c:	4b22      	ldr	r3, [pc, #136]	; (8003a18 <xTaskResumeAll+0x1ec>)
 800398e:	2201      	movs	r2, #1
 8003990:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <xTaskResumeAll+0x1dc>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	f47f af70 	bne.w	800387c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d001      	beq.n	80039a6 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80039a2:	f000 fc1f 	bl	80041e4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039a6:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <xTaskResumeAll+0x1f0>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d010      	beq.n	80039d4 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80039b2:	f000 f847 	bl	8003a44 <xTaskIncrementTick>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80039bc:	4b16      	ldr	r3, [pc, #88]	; (8003a18 <xTaskResumeAll+0x1ec>)
 80039be:	2201      	movs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1f1      	bne.n	80039b2 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <xTaskResumeAll+0x1f0>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80039d4:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <xTaskResumeAll+0x1ec>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d009      	beq.n	80039f0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80039dc:	2301      	movs	r3, #1
 80039de:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80039e0:	4b0f      	ldr	r3, [pc, #60]	; (8003a20 <xTaskResumeAll+0x1f4>)
 80039e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80039f0:	f001 faa2 	bl	8004f38 <vPortExitCritical>

    return xAlreadyYielded;
 80039f4:	69bb      	ldr	r3, [r7, #24]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3720      	adds	r7, #32
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000278 	.word	0x20000278
 8003a04:	20000250 	.word	0x20000250
 8003a08:	20000210 	.word	0x20000210
 8003a0c:	20000258 	.word	0x20000258
 8003a10:	2000017c 	.word	0x2000017c
 8003a14:	20000178 	.word	0x20000178
 8003a18:	20000264 	.word	0x20000264
 8003a1c:	20000260 	.word	0x20000260
 8003a20:	e000ed04 	.word	0xe000ed04

08003a24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <xTaskGetTickCount+0x1c>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003a30:	687b      	ldr	r3, [r7, #4]
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000254 	.word	0x20000254

08003a44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08a      	sub	sp, #40	; 0x28
 8003a48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a4e:	4b7d      	ldr	r3, [pc, #500]	; (8003c44 <xTaskIncrementTick+0x200>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f040 80ec 	bne.w	8003c30 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a58:	4b7b      	ldr	r3, [pc, #492]	; (8003c48 <xTaskIncrementTick+0x204>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003a60:	4a79      	ldr	r2, [pc, #484]	; (8003c48 <xTaskIncrementTick+0x204>)
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d120      	bne.n	8003aae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003a6c:	4b77      	ldr	r3, [pc, #476]	; (8003c4c <xTaskIncrementTick+0x208>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <xTaskIncrementTick+0x48>
        __asm volatile
 8003a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7a:	f383 8811 	msr	BASEPRI, r3
 8003a7e:	f3bf 8f6f 	isb	sy
 8003a82:	f3bf 8f4f 	dsb	sy
 8003a86:	607b      	str	r3, [r7, #4]
    }
 8003a88:	bf00      	nop
 8003a8a:	e7fe      	b.n	8003a8a <xTaskIncrementTick+0x46>
 8003a8c:	4b6f      	ldr	r3, [pc, #444]	; (8003c4c <xTaskIncrementTick+0x208>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	4b6f      	ldr	r3, [pc, #444]	; (8003c50 <xTaskIncrementTick+0x20c>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a6d      	ldr	r2, [pc, #436]	; (8003c4c <xTaskIncrementTick+0x208>)
 8003a98:	6013      	str	r3, [r2, #0]
 8003a9a:	4a6d      	ldr	r2, [pc, #436]	; (8003c50 <xTaskIncrementTick+0x20c>)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	6013      	str	r3, [r2, #0]
 8003aa0:	4b6c      	ldr	r3, [pc, #432]	; (8003c54 <xTaskIncrementTick+0x210>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	4a6b      	ldr	r2, [pc, #428]	; (8003c54 <xTaskIncrementTick+0x210>)
 8003aa8:	6013      	str	r3, [r2, #0]
 8003aaa:	f000 fb9b 	bl	80041e4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003aae:	4b6a      	ldr	r3, [pc, #424]	; (8003c58 <xTaskIncrementTick+0x214>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6a3a      	ldr	r2, [r7, #32]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	f0c0 80a6 	bcc.w	8003c06 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003aba:	4b64      	ldr	r3, [pc, #400]	; (8003c4c <xTaskIncrementTick+0x208>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ac4:	4b64      	ldr	r3, [pc, #400]	; (8003c58 <xTaskIncrementTick+0x214>)
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	601a      	str	r2, [r3, #0]
                    break;
 8003acc:	e09b      	b.n	8003c06 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ace:	4b5f      	ldr	r3, [pc, #380]	; (8003c4c <xTaskIncrementTick+0x208>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003ade:	6a3a      	ldr	r2, [r7, #32]
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d203      	bcs.n	8003aee <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003ae6:	4a5c      	ldr	r2, [pc, #368]	; (8003c58 <xTaskIncrementTick+0x214>)
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003aec:	e08b      	b.n	8003c06 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	68d2      	ldr	r2, [r2, #12]
 8003afc:	609a      	str	r2, [r3, #8]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	69ba      	ldr	r2, [r7, #24]
 8003b04:	6892      	ldr	r2, [r2, #8]
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	3304      	adds	r3, #4
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d103      	bne.n	8003b1c <xTaskIncrementTick+0xd8>
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	68da      	ldr	r2, [r3, #12]
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	605a      	str	r2, [r3, #4]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	615a      	str	r2, [r3, #20]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	1e5a      	subs	r2, r3, #1
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d01e      	beq.n	8003b72 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	6a12      	ldr	r2, [r2, #32]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	69d2      	ldr	r2, [r2, #28]
 8003b4c:	605a      	str	r2, [r3, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	3318      	adds	r3, #24
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d103      	bne.n	8003b62 <xTaskIncrementTick+0x11e>
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	6a1a      	ldr	r2, [r3, #32]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	2200      	movs	r2, #0
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	1e5a      	subs	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	2201      	movs	r2, #1
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	4b38      	ldr	r3, [pc, #224]	; (8003c5c <xTaskIncrementTick+0x218>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	4a36      	ldr	r2, [pc, #216]	; (8003c5c <xTaskIncrementTick+0x218>)
 8003b82:	6013      	str	r3, [r2, #0]
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b88:	4935      	ldr	r1, [pc, #212]	; (8003c60 <xTaskIncrementTick+0x21c>)
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	440b      	add	r3, r1
 8003b94:	3304      	adds	r3, #4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	689a      	ldr	r2, [r3, #8]
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	60da      	str	r2, [r3, #12]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	3204      	adds	r2, #4
 8003bb0:	605a      	str	r2, [r3, #4]
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	1d1a      	adds	r2, r3, #4
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	609a      	str	r2, [r3, #8]
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4a26      	ldr	r2, [pc, #152]	; (8003c60 <xTaskIncrementTick+0x21c>)
 8003bc8:	441a      	add	r2, r3
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	615a      	str	r2, [r3, #20]
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd2:	4923      	ldr	r1, [pc, #140]	; (8003c60 <xTaskIncrementTick+0x21c>)
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4413      	add	r3, r2
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1c59      	adds	r1, r3, #1
 8003be2:	481f      	ldr	r0, [pc, #124]	; (8003c60 <xTaskIncrementTick+0x21c>)
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	4403      	add	r3, r0
 8003bee:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <xTaskIncrementTick+0x220>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	f4ff af5d 	bcc.w	8003aba <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8003c00:	2301      	movs	r3, #1
 8003c02:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c04:	e759      	b.n	8003aba <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c06:	4b17      	ldr	r3, [pc, #92]	; (8003c64 <xTaskIncrementTick+0x220>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4914      	ldr	r1, [pc, #80]	; (8003c60 <xTaskIncrementTick+0x21c>)
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d901      	bls.n	8003c22 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003c22:	4b11      	ldr	r3, [pc, #68]	; (8003c68 <xTaskIncrementTick+0x224>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c2e:	e004      	b.n	8003c3a <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003c30:	4b0e      	ldr	r3, [pc, #56]	; (8003c6c <xTaskIncrementTick+0x228>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	4a0d      	ldr	r2, [pc, #52]	; (8003c6c <xTaskIncrementTick+0x228>)
 8003c38:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3728      	adds	r7, #40	; 0x28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000278 	.word	0x20000278
 8003c48:	20000254 	.word	0x20000254
 8003c4c:	20000208 	.word	0x20000208
 8003c50:	2000020c 	.word	0x2000020c
 8003c54:	20000268 	.word	0x20000268
 8003c58:	20000270 	.word	0x20000270
 8003c5c:	20000258 	.word	0x20000258
 8003c60:	2000017c 	.word	0x2000017c
 8003c64:	20000178 	.word	0x20000178
 8003c68:	20000264 	.word	0x20000264
 8003c6c:	20000260 	.word	0x20000260

08003c70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c76:	4b27      	ldr	r3, [pc, #156]	; (8003d14 <vTaskSwitchContext+0xa4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003c7e:	4b26      	ldr	r3, [pc, #152]	; (8003d18 <vTaskSwitchContext+0xa8>)
 8003c80:	2201      	movs	r2, #1
 8003c82:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003c84:	e03f      	b.n	8003d06 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003c86:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <vTaskSwitchContext+0xa8>)
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c8c:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <vTaskSwitchContext+0xac>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003c9a:	7afb      	ldrb	r3, [r7, #11]
 8003c9c:	f1c3 031f 	rsb	r3, r3, #31
 8003ca0:	617b      	str	r3, [r7, #20]
 8003ca2:	491f      	ldr	r1, [pc, #124]	; (8003d20 <vTaskSwitchContext+0xb0>)
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10a      	bne.n	8003ccc <vTaskSwitchContext+0x5c>
        __asm volatile
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	607b      	str	r3, [r7, #4]
    }
 8003cc8:	bf00      	nop
 8003cca:	e7fe      	b.n	8003cca <vTaskSwitchContext+0x5a>
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4a12      	ldr	r2, [pc, #72]	; (8003d20 <vTaskSwitchContext+0xb0>)
 8003cd8:	4413      	add	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	685a      	ldr	r2, [r3, #4]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	3308      	adds	r3, #8
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d104      	bne.n	8003cfc <vTaskSwitchContext+0x8c>
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	4a08      	ldr	r2, [pc, #32]	; (8003d24 <vTaskSwitchContext+0xb4>)
 8003d04:	6013      	str	r3, [r2, #0]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000278 	.word	0x20000278
 8003d18:	20000264 	.word	0x20000264
 8003d1c:	20000258 	.word	0x20000258
 8003d20:	2000017c 	.word	0x2000017c
 8003d24:	20000178 	.word	0x20000178

08003d28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d10a      	bne.n	8003d4e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3c:	f383 8811 	msr	BASEPRI, r3
 8003d40:	f3bf 8f6f 	isb	sy
 8003d44:	f3bf 8f4f 	dsb	sy
 8003d48:	60fb      	str	r3, [r7, #12]
    }
 8003d4a:	bf00      	nop
 8003d4c:	e7fe      	b.n	8003d4c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <vTaskPlaceOnEventList+0x44>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3318      	adds	r3, #24
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fe fd93 	bl	8002882 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	6838      	ldr	r0, [r7, #0]
 8003d60:	f000 fc88 	bl	8004674 <prvAddCurrentTaskToDelayedList>
}
 8003d64:	bf00      	nop
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	20000178 	.word	0x20000178

08003d70 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10a      	bne.n	8003d98 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	613b      	str	r3, [r7, #16]
    }
 8003d94:	bf00      	nop
 8003d96:	e7fe      	b.n	8003d96 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	61da      	str	r2, [r3, #28]
 8003da6:	4b14      	ldr	r3, [pc, #80]	; (8003df8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	6892      	ldr	r2, [r2, #8]
 8003dae:	621a      	str	r2, [r3, #32]
 8003db0:	4b11      	ldr	r3, [pc, #68]	; (8003df8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	3218      	adds	r2, #24
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	4b0e      	ldr	r3, [pc, #56]	; (8003df8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f103 0218 	add.w	r2, r3, #24
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	4b0b      	ldr	r3, [pc, #44]	; (8003df8 <vTaskPlaceOnEventListRestricted+0x88>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	629a      	str	r2, [r3, #40]	; 0x28
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003de0:	f04f 33ff 	mov.w	r3, #4294967295
 8003de4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	68b8      	ldr	r0, [r7, #8]
 8003dea:	f000 fc43 	bl	8004674 <prvAddCurrentTaskToDelayedList>
    }
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	20000178 	.word	0x20000178

08003dfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b08b      	sub	sp, #44	; 0x2c
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	60fb      	str	r3, [r7, #12]
    }
 8003e24:	bf00      	nop
 8003e26:	e7fe      	b.n	8003e26 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e2c:	61fb      	str	r3, [r7, #28]
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	69db      	ldr	r3, [r3, #28]
 8003e32:	6a3a      	ldr	r2, [r7, #32]
 8003e34:	6a12      	ldr	r2, [r2, #32]
 8003e36:	609a      	str	r2, [r3, #8]
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	6a3a      	ldr	r2, [r7, #32]
 8003e3e:	69d2      	ldr	r2, [r2, #28]
 8003e40:	605a      	str	r2, [r3, #4]
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	3318      	adds	r3, #24
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d103      	bne.n	8003e56 <xTaskRemoveFromEventList+0x5a>
 8003e4e:	6a3b      	ldr	r3, [r7, #32]
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	69fb      	ldr	r3, [r7, #28]
 8003e54:	605a      	str	r2, [r3, #4]
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	1e5a      	subs	r2, r3, #1
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e66:	4b4a      	ldr	r3, [pc, #296]	; (8003f90 <xTaskRemoveFromEventList+0x194>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d15e      	bne.n	8003f2c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	6a3a      	ldr	r2, [r7, #32]
 8003e7a:	68d2      	ldr	r2, [r2, #12]
 8003e7c:	609a      	str	r2, [r3, #8]
 8003e7e:	6a3b      	ldr	r3, [r7, #32]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	6a3a      	ldr	r2, [r7, #32]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	605a      	str	r2, [r3, #4]
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	6a3b      	ldr	r3, [r7, #32]
 8003e8e:	3304      	adds	r3, #4
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d103      	bne.n	8003e9c <xTaskRemoveFromEventList+0xa0>
 8003e94:	6a3b      	ldr	r3, [r7, #32]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	605a      	str	r2, [r3, #4]
 8003e9c:	6a3b      	ldr	r3, [r7, #32]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	615a      	str	r2, [r3, #20]
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	1e5a      	subs	r2, r3, #1
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	409a      	lsls	r2, r3
 8003eb4:	4b37      	ldr	r3, [pc, #220]	; (8003f94 <xTaskRemoveFromEventList+0x198>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	4a36      	ldr	r2, [pc, #216]	; (8003f94 <xTaskRemoveFromEventList+0x198>)
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ec2:	4935      	ldr	r1, [pc, #212]	; (8003f98 <xTaskRemoveFromEventList+0x19c>)
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	4413      	add	r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	3304      	adds	r3, #4
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	693a      	ldr	r2, [r7, #16]
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	689a      	ldr	r2, [r3, #8]
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	60da      	str	r2, [r3, #12]
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	6a3a      	ldr	r2, [r7, #32]
 8003ee8:	3204      	adds	r2, #4
 8003eea:	605a      	str	r2, [r3, #4]
 8003eec:	6a3b      	ldr	r3, [r7, #32]
 8003eee:	1d1a      	adds	r2, r3, #4
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4a25      	ldr	r2, [pc, #148]	; (8003f98 <xTaskRemoveFromEventList+0x19c>)
 8003f02:	441a      	add	r2, r3
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	615a      	str	r2, [r3, #20]
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0c:	4922      	ldr	r1, [pc, #136]	; (8003f98 <xTaskRemoveFromEventList+0x19c>)
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	1c59      	adds	r1, r3, #1
 8003f1c:	481e      	ldr	r0, [pc, #120]	; (8003f98 <xTaskRemoveFromEventList+0x19c>)
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4403      	add	r3, r0
 8003f28:	6019      	str	r1, [r3, #0]
 8003f2a:	e01b      	b.n	8003f64 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f2c:	4b1b      	ldr	r3, [pc, #108]	; (8003f9c <xTaskRemoveFromEventList+0x1a0>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	61bb      	str	r3, [r7, #24]
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	61da      	str	r2, [r3, #28]
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	621a      	str	r2, [r3, #32]
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	6a3a      	ldr	r2, [r7, #32]
 8003f46:	3218      	adds	r2, #24
 8003f48:	605a      	str	r2, [r3, #4]
 8003f4a:	6a3b      	ldr	r3, [r7, #32]
 8003f4c:	f103 0218 	add.w	r2, r3, #24
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	4a11      	ldr	r2, [pc, #68]	; (8003f9c <xTaskRemoveFromEventList+0x1a0>)
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
 8003f5a:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <xTaskRemoveFromEventList+0x1a0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	4a0e      	ldr	r2, [pc, #56]	; (8003f9c <xTaskRemoveFromEventList+0x1a0>)
 8003f62:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f64:	6a3b      	ldr	r3, [r7, #32]
 8003f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f68:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <xTaskRemoveFromEventList+0x1a4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d905      	bls.n	8003f7e <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003f72:	2301      	movs	r3, #1
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <xTaskRemoveFromEventList+0x1a8>)
 8003f78:	2201      	movs	r2, #1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	e001      	b.n	8003f82 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	372c      	adds	r7, #44	; 0x2c
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	20000278 	.word	0x20000278
 8003f94:	20000258 	.word	0x20000258
 8003f98:	2000017c 	.word	0x2000017c
 8003f9c:	20000210 	.word	0x20000210
 8003fa0:	20000178 	.word	0x20000178
 8003fa4:	20000264 	.word	0x20000264

08003fa8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <vTaskInternalSetTimeOutState+0x24>)
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003fb8:	4b05      	ldr	r3, [pc, #20]	; (8003fd0 <vTaskInternalSetTimeOutState+0x28>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	605a      	str	r2, [r3, #4]
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	20000268 	.word	0x20000268
 8003fd0:	20000254 	.word	0x20000254

08003fd4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10a      	bne.n	8003ffa <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe8:	f383 8811 	msr	BASEPRI, r3
 8003fec:	f3bf 8f6f 	isb	sy
 8003ff0:	f3bf 8f4f 	dsb	sy
 8003ff4:	613b      	str	r3, [r7, #16]
    }
 8003ff6:	bf00      	nop
 8003ff8:	e7fe      	b.n	8003ff8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10a      	bne.n	8004016 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	60fb      	str	r3, [r7, #12]
    }
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004016:	f000 ff5f 	bl	8004ed8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800401a:	4b1f      	ldr	r3, [pc, #124]	; (8004098 <xTaskCheckForTimeOut+0xc4>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004032:	d102      	bne.n	800403a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004034:	2300      	movs	r3, #0
 8004036:	61fb      	str	r3, [r7, #28]
 8004038:	e026      	b.n	8004088 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <xTaskCheckForTimeOut+0xc8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	429a      	cmp	r2, r3
 8004044:	d00a      	beq.n	800405c <xTaskCheckForTimeOut+0x88>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	429a      	cmp	r2, r3
 800404e:	d305      	bcc.n	800405c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004050:	2301      	movs	r3, #1
 8004052:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	2200      	movs	r2, #0
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	e015      	b.n	8004088 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	429a      	cmp	r2, r3
 8004064:	d20b      	bcs.n	800407e <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	1ad2      	subs	r2, r2, r3
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f7ff ff98 	bl	8003fa8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	e004      	b.n	8004088 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	2200      	movs	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004088:	f000 ff56 	bl	8004f38 <vPortExitCritical>

    return xReturn;
 800408c:	69fb      	ldr	r3, [r7, #28]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000254 	.word	0x20000254
 800409c:	20000268 	.word	0x20000268

080040a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <vTaskMissedYield+0x14>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	20000264 	.word	0x20000264

080040b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b082      	sub	sp, #8
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80040c0:	f000 f852 	bl	8004168 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040c4:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <prvIdleTask+0x28>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d9f9      	bls.n	80040c0 <prvIdleTask+0x8>
                {
                    taskYIELD();
 80040cc:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <prvIdleTask+0x2c>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80040dc:	e7f0      	b.n	80040c0 <prvIdleTask+0x8>
 80040de:	bf00      	nop
 80040e0:	2000017c 	.word	0x2000017c
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	e00c      	b.n	800410e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <prvInitialiseTaskLists+0x60>)
 8004100:	4413      	add	r3, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fb90 	bl	8002828 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	3301      	adds	r3, #1
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b04      	cmp	r3, #4
 8004112:	d9ef      	bls.n	80040f4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004114:	480d      	ldr	r0, [pc, #52]	; (800414c <prvInitialiseTaskLists+0x64>)
 8004116:	f7fe fb87 	bl	8002828 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800411a:	480d      	ldr	r0, [pc, #52]	; (8004150 <prvInitialiseTaskLists+0x68>)
 800411c:	f7fe fb84 	bl	8002828 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004120:	480c      	ldr	r0, [pc, #48]	; (8004154 <prvInitialiseTaskLists+0x6c>)
 8004122:	f7fe fb81 	bl	8002828 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004126:	480c      	ldr	r0, [pc, #48]	; (8004158 <prvInitialiseTaskLists+0x70>)
 8004128:	f7fe fb7e 	bl	8002828 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800412c:	480b      	ldr	r0, [pc, #44]	; (800415c <prvInitialiseTaskLists+0x74>)
 800412e:	f7fe fb7b 	bl	8002828 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004132:	4b0b      	ldr	r3, [pc, #44]	; (8004160 <prvInitialiseTaskLists+0x78>)
 8004134:	4a05      	ldr	r2, [pc, #20]	; (800414c <prvInitialiseTaskLists+0x64>)
 8004136:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <prvInitialiseTaskLists+0x7c>)
 800413a:	4a05      	ldr	r2, [pc, #20]	; (8004150 <prvInitialiseTaskLists+0x68>)
 800413c:	601a      	str	r2, [r3, #0]
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	2000017c 	.word	0x2000017c
 800414c:	200001e0 	.word	0x200001e0
 8004150:	200001f4 	.word	0x200001f4
 8004154:	20000210 	.word	0x20000210
 8004158:	20000224 	.word	0x20000224
 800415c:	2000023c 	.word	0x2000023c
 8004160:	20000208 	.word	0x20000208
 8004164:	2000020c 	.word	0x2000020c

08004168 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800416e:	e019      	b.n	80041a4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004170:	f000 feb2 	bl	8004ed8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <prvCheckTasksWaitingTermination+0x50>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe fbb7 	bl	80028f4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004186:	4b0d      	ldr	r3, [pc, #52]	; (80041bc <prvCheckTasksWaitingTermination+0x54>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3b01      	subs	r3, #1
 800418c:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <prvCheckTasksWaitingTermination+0x54>)
 800418e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3b01      	subs	r3, #1
 8004196:	4a0a      	ldr	r2, [pc, #40]	; (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 8004198:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800419a:	f000 fecd 	bl	8004f38 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f000 f810 	bl	80041c4 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <prvCheckTasksWaitingTermination+0x58>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1e1      	bne.n	8004170 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80041ac:	bf00      	nop
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000224 	.word	0x20000224
 80041bc:	20000250 	.word	0x20000250
 80041c0:	20000238 	.word	0x20000238

080041c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d0:	4618      	mov	r0, r3
 80041d2:	f001 f843 	bl	800525c <vPortFree>
                vPortFree( pxTCB );
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f001 f840 	bl	800525c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80041dc:	bf00      	nop
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041e8:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <prvResetNextTaskUnblockTime+0x30>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80041f2:	4b09      	ldr	r3, [pc, #36]	; (8004218 <prvResetNextTaskUnblockTime+0x34>)
 80041f4:	f04f 32ff 	mov.w	r2, #4294967295
 80041f8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80041fa:	e005      	b.n	8004208 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <prvResetNextTaskUnblockTime+0x30>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <prvResetNextTaskUnblockTime+0x34>)
 8004206:	6013      	str	r3, [r2, #0]
}
 8004208:	bf00      	nop
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000208 	.word	0x20000208
 8004218:	20000270 	.word	0x20000270

0800421c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <xTaskGetSchedulerState+0x34>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d102      	bne.n	8004230 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800422a:	2301      	movs	r3, #1
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	e008      	b.n	8004242 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004230:	4b08      	ldr	r3, [pc, #32]	; (8004254 <xTaskGetSchedulerState+0x38>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d102      	bne.n	800423e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004238:	2302      	movs	r3, #2
 800423a:	607b      	str	r3, [r7, #4]
 800423c:	e001      	b.n	8004242 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800423e:	2300      	movs	r3, #0
 8004240:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004242:	687b      	ldr	r3, [r7, #4]
    }
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr
 8004250:	2000025c 	.word	0x2000025c
 8004254:	20000278 	.word	0x20000278

08004258 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8087 	beq.w	800437e <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004274:	4b44      	ldr	r3, [pc, #272]	; (8004388 <xTaskPriorityInherit+0x130>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427a:	429a      	cmp	r2, r3
 800427c:	d276      	bcs.n	800436c <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	2b00      	cmp	r3, #0
 8004284:	db06      	blt.n	8004294 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004286:	4b40      	ldr	r3, [pc, #256]	; (8004388 <xTaskPriorityInherit+0x130>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428c:	f1c3 0205 	rsb	r2, r3, #5
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	6959      	ldr	r1, [r3, #20]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4a39      	ldr	r2, [pc, #228]	; (800438c <xTaskPriorityInherit+0x134>)
 80042a6:	4413      	add	r3, r2
 80042a8:	4299      	cmp	r1, r3
 80042aa:	d157      	bne.n	800435c <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	3304      	adds	r3, #4
 80042b0:	4618      	mov	r0, r3
 80042b2:	f7fe fb1f 	bl	80028f4 <uxListRemove>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d10a      	bne.n	80042d2 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	2201      	movs	r2, #1
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43da      	mvns	r2, r3
 80042c8:	4b31      	ldr	r3, [pc, #196]	; (8004390 <xTaskPriorityInherit+0x138>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4013      	ands	r3, r2
 80042ce:	4a30      	ldr	r2, [pc, #192]	; (8004390 <xTaskPriorityInherit+0x138>)
 80042d0:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80042d2:	4b2d      	ldr	r3, [pc, #180]	; (8004388 <xTaskPriorityInherit+0x130>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e0:	2201      	movs	r2, #1
 80042e2:	409a      	lsls	r2, r3
 80042e4:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <xTaskPriorityInherit+0x138>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	4a29      	ldr	r2, [pc, #164]	; (8004390 <xTaskPriorityInherit+0x138>)
 80042ec:	6013      	str	r3, [r2, #0]
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042f2:	4926      	ldr	r1, [pc, #152]	; (800438c <xTaskPriorityInherit+0x134>)
 80042f4:	4613      	mov	r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	440b      	add	r3, r1
 80042fe:	3304      	adds	r3, #4
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	60fb      	str	r3, [r7, #12]
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	609a      	str	r2, [r3, #8]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	60da      	str	r2, [r3, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	3204      	adds	r2, #4
 800431a:	605a      	str	r2, [r3, #4]
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1d1a      	adds	r2, r3, #4
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4a16      	ldr	r2, [pc, #88]	; (800438c <xTaskPriorityInherit+0x134>)
 8004332:	441a      	add	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	615a      	str	r2, [r3, #20]
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800433c:	4913      	ldr	r1, [pc, #76]	; (800438c <xTaskPriorityInherit+0x134>)
 800433e:	4613      	mov	r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	1c59      	adds	r1, r3, #1
 800434c:	480f      	ldr	r0, [pc, #60]	; (800438c <xTaskPriorityInherit+0x134>)
 800434e:	4613      	mov	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	4403      	add	r3, r0
 8004358:	6019      	str	r1, [r3, #0]
 800435a:	e004      	b.n	8004366 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <xTaskPriorityInherit+0x130>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004366:	2301      	movs	r3, #1
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e008      	b.n	800437e <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <xTaskPriorityInherit+0x130>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	429a      	cmp	r2, r3
 8004378:	d201      	bcs.n	800437e <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800437a:	2301      	movs	r3, #1
 800437c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800437e:	697b      	ldr	r3, [r7, #20]
    }
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	20000178 	.word	0x20000178
 800438c:	2000017c 	.word	0x2000017c
 8004390:	20000258 	.word	0x20000258

08004394 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 808c 	beq.w	80044c4 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80043ac:	4b48      	ldr	r3, [pc, #288]	; (80044d0 <xTaskPriorityDisinherit+0x13c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d00a      	beq.n	80043cc <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	613b      	str	r3, [r7, #16]
    }
 80043c8:	bf00      	nop
 80043ca:	e7fe      	b.n	80043ca <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10a      	bne.n	80043ea <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	60fb      	str	r3, [r7, #12]
    }
 80043e6:	bf00      	nop
 80043e8:	e7fe      	b.n	80043e8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ee:	1e5a      	subs	r2, r3, #1
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d061      	beq.n	80044c4 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004404:	2b00      	cmp	r3, #0
 8004406:	d15d      	bne.n	80044c4 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	3304      	adds	r3, #4
 800440c:	4618      	mov	r0, r3
 800440e:	f7fe fa71 	bl	80028f4 <uxListRemove>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d10a      	bne.n	800442e <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	2201      	movs	r2, #1
 800441e:	fa02 f303 	lsl.w	r3, r2, r3
 8004422:	43da      	mvns	r2, r3
 8004424:	4b2b      	ldr	r3, [pc, #172]	; (80044d4 <xTaskPriorityDisinherit+0x140>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4013      	ands	r3, r2
 800442a:	4a2a      	ldr	r2, [pc, #168]	; (80044d4 <xTaskPriorityDisinherit+0x140>)
 800442c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	f1c3 0205 	rsb	r2, r3, #5
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004446:	2201      	movs	r2, #1
 8004448:	409a      	lsls	r2, r3
 800444a:	4b22      	ldr	r3, [pc, #136]	; (80044d4 <xTaskPriorityDisinherit+0x140>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4313      	orrs	r3, r2
 8004450:	4a20      	ldr	r2, [pc, #128]	; (80044d4 <xTaskPriorityDisinherit+0x140>)
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004458:	491f      	ldr	r1, [pc, #124]	; (80044d8 <xTaskPriorityDisinherit+0x144>)
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	440b      	add	r3, r1
 8004464:	3304      	adds	r3, #4
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	609a      	str	r2, [r3, #8]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	60da      	str	r2, [r3, #12]
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	69ba      	ldr	r2, [r7, #24]
 800447e:	3204      	adds	r2, #4
 8004480:	605a      	str	r2, [r3, #4]
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	1d1a      	adds	r2, r3, #4
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	609a      	str	r2, [r3, #8]
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800448e:	4613      	mov	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4413      	add	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4a10      	ldr	r2, [pc, #64]	; (80044d8 <xTaskPriorityDisinherit+0x144>)
 8004498:	441a      	add	r2, r3
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	615a      	str	r2, [r3, #20]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044a2:	490d      	ldr	r1, [pc, #52]	; (80044d8 <xTaskPriorityDisinherit+0x144>)
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	1c59      	adds	r1, r3, #1
 80044b2:	4809      	ldr	r0, [pc, #36]	; (80044d8 <xTaskPriorityDisinherit+0x144>)
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	4403      	add	r3, r0
 80044be:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80044c0:	2301      	movs	r3, #1
 80044c2:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80044c4:	69fb      	ldr	r3, [r7, #28]
    }
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000178 	.word	0x20000178
 80044d4:	20000258 	.word	0x20000258
 80044d8:	2000017c 	.word	0x2000017c

080044dc <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80044ea:	2301      	movs	r3, #1
 80044ec:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80a1 	beq.w	8004638 <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 80044fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004502:	f383 8811 	msr	BASEPRI, r3
 8004506:	f3bf 8f6f 	isb	sy
 800450a:	f3bf 8f4f 	dsb	sy
 800450e:	613b      	str	r3, [r7, #16]
    }
 8004510:	bf00      	nop
 8004512:	e7fe      	b.n	8004512 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004514:	6a3b      	ldr	r3, [r7, #32]
 8004516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	429a      	cmp	r2, r3
 800451c:	d902      	bls.n	8004524 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
 8004522:	e002      	b.n	800452a <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004528:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800452a:	6a3b      	ldr	r3, [r7, #32]
 800452c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800452e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004530:	429a      	cmp	r2, r3
 8004532:	f000 8081 	beq.w	8004638 <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	429a      	cmp	r2, r3
 800453e:	d17b      	bne.n	8004638 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004540:	4b3f      	ldr	r3, [pc, #252]	; (8004640 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a3a      	ldr	r2, [r7, #32]
 8004546:	429a      	cmp	r2, r3
 8004548:	d10a      	bne.n	8004560 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	60fb      	str	r3, [r7, #12]
    }
 800455c:	bf00      	nop
 800455e:	e7fe      	b.n	800455e <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004560:	6a3b      	ldr	r3, [r7, #32]
 8004562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004564:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800456a:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	db04      	blt.n	800457e <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	f1c3 0205 	rsb	r2, r3, #5
 800457a:	6a3b      	ldr	r3, [r7, #32]
 800457c:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800457e:	6a3b      	ldr	r3, [r7, #32]
 8004580:	6959      	ldr	r1, [r3, #20]
 8004582:	69ba      	ldr	r2, [r7, #24]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4a2d      	ldr	r2, [pc, #180]	; (8004644 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800458e:	4413      	add	r3, r2
 8004590:	4299      	cmp	r1, r3
 8004592:	d151      	bne.n	8004638 <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004594:	6a3b      	ldr	r3, [r7, #32]
 8004596:	3304      	adds	r3, #4
 8004598:	4618      	mov	r0, r3
 800459a:	f7fe f9ab 	bl	80028f4 <uxListRemove>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10a      	bne.n	80045ba <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80045a4:	6a3b      	ldr	r3, [r7, #32]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	2201      	movs	r2, #1
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43da      	mvns	r2, r3
 80045b0:	4b25      	ldr	r3, [pc, #148]	; (8004648 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4013      	ands	r3, r2
 80045b6:	4a24      	ldr	r2, [pc, #144]	; (8004648 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80045b8:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80045ba:	6a3b      	ldr	r3, [r7, #32]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	2201      	movs	r2, #1
 80045c0:	409a      	lsls	r2, r3
 80045c2:	4b21      	ldr	r3, [pc, #132]	; (8004648 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	4a1f      	ldr	r2, [pc, #124]	; (8004648 <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045d0:	491c      	ldr	r1, [pc, #112]	; (8004644 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80045d2:	4613      	mov	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	3304      	adds	r3, #4
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	6a3b      	ldr	r3, [r7, #32]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	609a      	str	r2, [r3, #8]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	689a      	ldr	r2, [r3, #8]
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	60da      	str	r2, [r3, #12]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	6a3a      	ldr	r2, [r7, #32]
 80045f6:	3204      	adds	r2, #4
 80045f8:	605a      	str	r2, [r3, #4]
 80045fa:	6a3b      	ldr	r3, [r7, #32]
 80045fc:	1d1a      	adds	r2, r3, #4
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	609a      	str	r2, [r3, #8]
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4a0d      	ldr	r2, [pc, #52]	; (8004644 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004610:	441a      	add	r2, r3
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	615a      	str	r2, [r3, #20]
 8004616:	6a3b      	ldr	r3, [r7, #32]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	490a      	ldr	r1, [pc, #40]	; (8004644 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800461c:	4613      	mov	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	440b      	add	r3, r1
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	1c59      	adds	r1, r3, #1
 800462a:	4806      	ldr	r0, [pc, #24]	; (8004644 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4403      	add	r3, r0
 8004636:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004638:	bf00      	nop
 800463a:	3728      	adds	r7, #40	; 0x28
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	20000178 	.word	0x20000178
 8004644:	2000017c 	.word	0x2000017c
 8004648:	20000258 	.word	0x20000258

0800464c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <pvTaskIncrementMutexHeldCount+0x24>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d004      	beq.n	8004662 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <pvTaskIncrementMutexHeldCount+0x24>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800465e:	3201      	adds	r2, #1
 8004660:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 8004662:	4b03      	ldr	r3, [pc, #12]	; (8004670 <pvTaskIncrementMutexHeldCount+0x24>)
 8004664:	681b      	ldr	r3, [r3, #0]
    }
 8004666:	4618      	mov	r0, r3
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr
 8004670:	20000178 	.word	0x20000178

08004674 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800467e:	4b36      	ldr	r3, [pc, #216]	; (8004758 <prvAddCurrentTaskToDelayedList+0xe4>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004684:	4b35      	ldr	r3, [pc, #212]	; (800475c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	3304      	adds	r3, #4
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe f932 	bl	80028f4 <uxListRemove>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10b      	bne.n	80046ae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004696:	4b31      	ldr	r3, [pc, #196]	; (800475c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	2201      	movs	r2, #1
 800469e:	fa02 f303 	lsl.w	r3, r2, r3
 80046a2:	43da      	mvns	r2, r3
 80046a4:	4b2e      	ldr	r3, [pc, #184]	; (8004760 <prvAddCurrentTaskToDelayedList+0xec>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4013      	ands	r3, r2
 80046aa:	4a2d      	ldr	r2, [pc, #180]	; (8004760 <prvAddCurrentTaskToDelayedList+0xec>)
 80046ac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d124      	bne.n	8004700 <prvAddCurrentTaskToDelayedList+0x8c>
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d021      	beq.n	8004700 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80046bc:	4b29      	ldr	r3, [pc, #164]	; (8004764 <prvAddCurrentTaskToDelayedList+0xf0>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	4b26      	ldr	r3, [pc, #152]	; (800475c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	609a      	str	r2, [r3, #8]
 80046ca:	4b24      	ldr	r3, [pc, #144]	; (800475c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	6892      	ldr	r2, [r2, #8]
 80046d2:	60da      	str	r2, [r3, #12]
 80046d4:	4b21      	ldr	r3, [pc, #132]	; (800475c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	3204      	adds	r2, #4
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	4b1e      	ldr	r3, [pc, #120]	; (800475c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	1d1a      	adds	r2, r3, #4
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	609a      	str	r2, [r3, #8]
 80046ea:	4b1c      	ldr	r3, [pc, #112]	; (800475c <prvAddCurrentTaskToDelayedList+0xe8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1d      	ldr	r2, [pc, #116]	; (8004764 <prvAddCurrentTaskToDelayedList+0xf0>)
 80046f0:	615a      	str	r2, [r3, #20]
 80046f2:	4b1c      	ldr	r3, [pc, #112]	; (8004764 <prvAddCurrentTaskToDelayedList+0xf0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	4a1a      	ldr	r2, [pc, #104]	; (8004764 <prvAddCurrentTaskToDelayedList+0xf0>)
 80046fa:	6013      	str	r3, [r2, #0]
 80046fc:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80046fe:	e026      	b.n	800474e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4413      	add	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004708:	4b14      	ldr	r3, [pc, #80]	; (800475c <prvAddCurrentTaskToDelayedList+0xe8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	429a      	cmp	r2, r3
 8004716:	d209      	bcs.n	800472c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004718:	4b13      	ldr	r3, [pc, #76]	; (8004768 <prvAddCurrentTaskToDelayedList+0xf4>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	4b0f      	ldr	r3, [pc, #60]	; (800475c <prvAddCurrentTaskToDelayedList+0xe8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7fe f8ac 	bl	8002882 <vListInsert>
}
 800472a:	e010      	b.n	800474e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800472c:	4b0f      	ldr	r3, [pc, #60]	; (800476c <prvAddCurrentTaskToDelayedList+0xf8>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b0a      	ldr	r3, [pc, #40]	; (800475c <prvAddCurrentTaskToDelayedList+0xe8>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3304      	adds	r3, #4
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7fe f8a2 	bl	8002882 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800473e:	4b0c      	ldr	r3, [pc, #48]	; (8004770 <prvAddCurrentTaskToDelayedList+0xfc>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	429a      	cmp	r2, r3
 8004746:	d202      	bcs.n	800474e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8004748:	4a09      	ldr	r2, [pc, #36]	; (8004770 <prvAddCurrentTaskToDelayedList+0xfc>)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6013      	str	r3, [r2, #0]
}
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000254 	.word	0x20000254
 800475c:	20000178 	.word	0x20000178
 8004760:	20000258 	.word	0x20000258
 8004764:	2000023c 	.word	0x2000023c
 8004768:	2000020c 	.word	0x2000020c
 800476c:	20000208 	.word	0x20000208
 8004770:	20000270 	.word	0x20000270

08004774 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800477a:	2300      	movs	r3, #0
 800477c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800477e:	f000 fa47 	bl	8004c10 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004782:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <xTimerCreateTimerTask+0x54>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00b      	beq.n	80047a2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800478a:	4b10      	ldr	r3, [pc, #64]	; (80047cc <xTimerCreateTimerTask+0x58>)
 800478c:	9301      	str	r3, [sp, #4]
 800478e:	2302      	movs	r3, #2
 8004790:	9300      	str	r3, [sp, #0]
 8004792:	2300      	movs	r3, #0
 8004794:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004798:	490d      	ldr	r1, [pc, #52]	; (80047d0 <xTimerCreateTimerTask+0x5c>)
 800479a:	480e      	ldr	r0, [pc, #56]	; (80047d4 <xTimerCreateTimerTask+0x60>)
 800479c:	f7fe fe6a 	bl	8003474 <xTaskCreate>
 80047a0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d10a      	bne.n	80047be <xTimerCreateTimerTask+0x4a>
        __asm volatile
 80047a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ac:	f383 8811 	msr	BASEPRI, r3
 80047b0:	f3bf 8f6f 	isb	sy
 80047b4:	f3bf 8f4f 	dsb	sy
 80047b8:	603b      	str	r3, [r7, #0]
    }
 80047ba:	bf00      	nop
 80047bc:	e7fe      	b.n	80047bc <xTimerCreateTimerTask+0x48>
        return xReturn;
 80047be:	687b      	ldr	r3, [r7, #4]
    }
 80047c0:	4618      	mov	r0, r3
 80047c2:	3708      	adds	r7, #8
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	200002ac 	.word	0x200002ac
 80047cc:	200002b0 	.word	0x200002b0
 80047d0:	08006994 	.word	0x08006994
 80047d4:	0800487d 	.word	0x0800487d

080047d8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80047e4:	e008      	b.n	80047f8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	4413      	add	r3, r2
 80047ee:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	699a      	ldr	r2, [r3, #24]
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	18d1      	adds	r1, r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	68f8      	ldr	r0, [r7, #12]
 8004806:	f000 f8dd 	bl	80049c4 <prvInsertTimerInActiveList>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d1ea      	bne.n	80047e6 <prvReloadTimer+0xe>
        }
    }
 8004810:	bf00      	nop
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <prvProcessExpiredTimer+0x5c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	3304      	adds	r3, #4
 8004834:	4618      	mov	r0, r3
 8004836:	f7fe f85d 	bl	80028f4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f7ff ffc3 	bl	80047d8 <prvReloadTimer>
 8004852:	e008      	b.n	8004866 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800485a:	f023 0301 	bic.w	r3, r3, #1
 800485e:	b2da      	uxtb	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	4798      	blx	r3
    }
 800486e:	bf00      	nop
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	200002a4 	.word	0x200002a4

0800487c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004884:	f107 0308 	add.w	r3, r7, #8
 8004888:	4618      	mov	r0, r3
 800488a:	f000 f857 	bl	800493c <prvGetNextExpireTime>
 800488e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	4619      	mov	r1, r3
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f803 	bl	80048a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800489a:	f000 f8d5 	bl	8004a48 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800489e:	e7f1      	b.n	8004884 <prvTimerTask+0x8>

080048a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80048aa:	f7fe ffb1 	bl	8003810 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80048ae:	f107 0308 	add.w	r3, r7, #8
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 f866 	bl	8004984 <prvSampleTimeNow>
 80048b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d130      	bne.n	8004922 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10a      	bne.n	80048dc <prvProcessTimerOrBlockTask+0x3c>
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d806      	bhi.n	80048dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80048ce:	f7fe ffad 	bl	800382c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80048d2:	68f9      	ldr	r1, [r7, #12]
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ffa1 	bl	800481c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80048da:	e024      	b.n	8004926 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d008      	beq.n	80048f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048e2:	4b13      	ldr	r3, [pc, #76]	; (8004930 <prvProcessTimerOrBlockTask+0x90>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <prvProcessTimerOrBlockTask+0x50>
 80048ec:	2301      	movs	r3, #1
 80048ee:	e000      	b.n	80048f2 <prvProcessTimerOrBlockTask+0x52>
 80048f0:	2300      	movs	r3, #0
 80048f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048f4:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <prvProcessTimerOrBlockTask+0x94>)
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	683a      	ldr	r2, [r7, #0]
 8004900:	4619      	mov	r1, r3
 8004902:	f7fe fd83 	bl	800340c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004906:	f7fe ff91 	bl	800382c <xTaskResumeAll>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d10a      	bne.n	8004926 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004910:	4b09      	ldr	r3, [pc, #36]	; (8004938 <prvProcessTimerOrBlockTask+0x98>)
 8004912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	f3bf 8f6f 	isb	sy
    }
 8004920:	e001      	b.n	8004926 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004922:	f7fe ff83 	bl	800382c <xTaskResumeAll>
    }
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	200002a8 	.word	0x200002a8
 8004934:	200002ac 	.word	0x200002ac
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004944:	4b0e      	ldr	r3, [pc, #56]	; (8004980 <prvGetNextExpireTime+0x44>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <prvGetNextExpireTime+0x16>
 800494e:	2201      	movs	r2, #1
 8004950:	e000      	b.n	8004954 <prvGetNextExpireTime+0x18>
 8004952:	2200      	movs	r2, #0
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d105      	bne.n	800496c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004960:	4b07      	ldr	r3, [pc, #28]	; (8004980 <prvGetNextExpireTime+0x44>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e001      	b.n	8004970 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004970:	68fb      	ldr	r3, [r7, #12]
    }
 8004972:	4618      	mov	r0, r3
 8004974:	3714      	adds	r7, #20
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	200002a4 	.word	0x200002a4

08004984 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800498c:	f7ff f84a 	bl	8003a24 <xTaskGetTickCount>
 8004990:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <prvSampleTimeNow+0x3c>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	429a      	cmp	r2, r3
 800499a:	d205      	bcs.n	80049a8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800499c:	f000 f912 	bl	8004bc4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e002      	b.n	80049ae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80049ae:	4a04      	ldr	r2, [pc, #16]	; (80049c0 <prvSampleTimeNow+0x3c>)
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80049b4:	68fb      	ldr	r3, [r7, #12]
    }
 80049b6:	4618      	mov	r0, r3
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	200002b4 	.word	0x200002b4

080049c4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
 80049d0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	68ba      	ldr	r2, [r7, #8]
 80049da:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d812      	bhi.n	8004a10 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	1ad2      	subs	r2, r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80049f8:	2301      	movs	r3, #1
 80049fa:	617b      	str	r3, [r7, #20]
 80049fc:	e01b      	b.n	8004a36 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049fe:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <prvInsertTimerInActiveList+0x7c>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3304      	adds	r3, #4
 8004a06:	4619      	mov	r1, r3
 8004a08:	4610      	mov	r0, r2
 8004a0a:	f7fd ff3a 	bl	8002882 <vListInsert>
 8004a0e:	e012      	b.n	8004a36 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d206      	bcs.n	8004a26 <prvInsertTimerInActiveList+0x62>
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d302      	bcc.n	8004a26 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004a20:	2301      	movs	r3, #1
 8004a22:	617b      	str	r3, [r7, #20]
 8004a24:	e007      	b.n	8004a36 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a26:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <prvInsertTimerInActiveList+0x80>)
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f7fd ff26 	bl	8002882 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004a36:	697b      	ldr	r3, [r7, #20]
    }
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3718      	adds	r7, #24
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}
 8004a40:	200002a8 	.word	0x200002a8
 8004a44:	200002a4 	.word	0x200002a4

08004a48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b088      	sub	sp, #32
 8004a4c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a4e:	e0a6      	b.n	8004b9e <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f2c0 80a2 	blt.w	8004b9c <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	695b      	ldr	r3, [r3, #20]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d004      	beq.n	8004a6e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fd ff43 	bl	80028f4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a6e:	1d3b      	adds	r3, r7, #4
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff ff87 	bl	8004984 <prvSampleTimeNow>
 8004a76:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	f200 808e 	bhi.w	8004b9e <prvProcessReceivedCommands+0x156>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <prvProcessReceivedCommands+0x40>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004aad 	.word	0x08004aad
 8004a8c:	08004aad 	.word	0x08004aad
 8004a90:	08004b15 	.word	0x08004b15
 8004a94:	08004b29 	.word	0x08004b29
 8004a98:	08004b73 	.word	0x08004b73
 8004a9c:	08004aad 	.word	0x08004aad
 8004aa0:	08004aad 	.word	0x08004aad
 8004aa4:	08004b15 	.word	0x08004b15
 8004aa8:	08004b29 	.word	0x08004b29
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	69fb      	ldr	r3, [r7, #28]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	18d1      	adds	r1, r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	69f8      	ldr	r0, [r7, #28]
 8004acc:	f7ff ff7a 	bl	80049c4 <prvInsertTimerInActiveList>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d063      	beq.n	8004b9e <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d009      	beq.n	8004af8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	4413      	add	r3, r2
 8004aec:	69ba      	ldr	r2, [r7, #24]
 8004aee:	4619      	mov	r1, r3
 8004af0:	69f8      	ldr	r0, [r7, #28]
 8004af2:	f7ff fe71 	bl	80047d8 <prvReloadTimer>
 8004af6:	e008      	b.n	8004b0a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004afe:	f023 0301 	bic.w	r3, r3, #1
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	69f8      	ldr	r0, [r7, #28]
 8004b10:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004b12:	e044      	b.n	8004b9e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004b26:	e03a      	b.n	8004b9e <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	b2da      	uxtb	r2, r3
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	69fb      	ldr	r3, [r7, #28]
 8004b3e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10a      	bne.n	8004b5e <prvProcessReceivedCommands+0x116>
        __asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	617b      	str	r3, [r7, #20]
    }
 8004b5a:	bf00      	nop
 8004b5c:	e7fe      	b.n	8004b5c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	699a      	ldr	r2, [r3, #24]
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	18d1      	adds	r1, r2, r3
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	69f8      	ldr	r0, [r7, #28]
 8004b6c:	f7ff ff2a 	bl	80049c4 <prvInsertTimerInActiveList>
                        break;
 8004b70:	e015      	b.n	8004b9e <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d103      	bne.n	8004b88 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004b80:	69f8      	ldr	r0, [r7, #28]
 8004b82:	f000 fb6b 	bl	800525c <vPortFree>
 8004b86:	e00a      	b.n	8004b9e <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004b9a:	e000      	b.n	8004b9e <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004b9c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004b9e:	4b08      	ldr	r3, [pc, #32]	; (8004bc0 <prvProcessReceivedCommands+0x178>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f107 0108 	add.w	r1, r7, #8
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f7fe f8cd 	bl	8002d48 <xQueueReceive>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	f47f af4d 	bne.w	8004a50 <prvProcessReceivedCommands+0x8>
        }
    }
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	200002ac 	.word	0x200002ac

08004bc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004bca:	e009      	b.n	8004be0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004bcc:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <prvSwitchTimerLists+0x44>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004bd6:	f04f 31ff 	mov.w	r1, #4294967295
 8004bda:	6838      	ldr	r0, [r7, #0]
 8004bdc:	f7ff fe1e 	bl	800481c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004be0:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <prvSwitchTimerLists+0x44>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004bea:	4b07      	ldr	r3, [pc, #28]	; (8004c08 <prvSwitchTimerLists+0x44>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <prvSwitchTimerLists+0x48>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a04      	ldr	r2, [pc, #16]	; (8004c08 <prvSwitchTimerLists+0x44>)
 8004bf6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004bf8:	4a04      	ldr	r2, [pc, #16]	; (8004c0c <prvSwitchTimerLists+0x48>)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6013      	str	r3, [r2, #0]
    }
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200002a4 	.word	0x200002a4
 8004c0c:	200002a8 	.word	0x200002a8

08004c10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004c14:	f000 f960 	bl	8004ed8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004c18:	4b12      	ldr	r3, [pc, #72]	; (8004c64 <prvCheckForValidListAndQueue+0x54>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d11d      	bne.n	8004c5c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004c20:	4811      	ldr	r0, [pc, #68]	; (8004c68 <prvCheckForValidListAndQueue+0x58>)
 8004c22:	f7fd fe01 	bl	8002828 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004c26:	4811      	ldr	r0, [pc, #68]	; (8004c6c <prvCheckForValidListAndQueue+0x5c>)
 8004c28:	f7fd fdfe 	bl	8002828 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004c2c:	4b10      	ldr	r3, [pc, #64]	; (8004c70 <prvCheckForValidListAndQueue+0x60>)
 8004c2e:	4a0e      	ldr	r2, [pc, #56]	; (8004c68 <prvCheckForValidListAndQueue+0x58>)
 8004c30:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004c32:	4b10      	ldr	r3, [pc, #64]	; (8004c74 <prvCheckForValidListAndQueue+0x64>)
 8004c34:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <prvCheckForValidListAndQueue+0x5c>)
 8004c36:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004c38:	2200      	movs	r2, #0
 8004c3a:	210c      	movs	r1, #12
 8004c3c:	200a      	movs	r0, #10
 8004c3e:	f7fd ff13 	bl	8002a68 <xQueueGenericCreate>
 8004c42:	4603      	mov	r3, r0
 8004c44:	4a07      	ldr	r2, [pc, #28]	; (8004c64 <prvCheckForValidListAndQueue+0x54>)
 8004c46:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004c48:	4b06      	ldr	r3, [pc, #24]	; (8004c64 <prvCheckForValidListAndQueue+0x54>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d005      	beq.n	8004c5c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c50:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <prvCheckForValidListAndQueue+0x54>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4908      	ldr	r1, [pc, #32]	; (8004c78 <prvCheckForValidListAndQueue+0x68>)
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fe fb8a 	bl	8003370 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c5c:	f000 f96c 	bl	8004f38 <vPortExitCritical>
    }
 8004c60:	bf00      	nop
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	200002ac 	.word	0x200002ac
 8004c68:	2000027c 	.word	0x2000027c
 8004c6c:	20000290 	.word	0x20000290
 8004c70:	200002a4 	.word	0x200002a4
 8004c74:	200002a8 	.word	0x200002a8
 8004c78:	0800699c 	.word	0x0800699c

08004c7c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b085      	sub	sp, #20
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	3b04      	subs	r3, #4
 8004c8c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b04      	subs	r3, #4
 8004c9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f023 0201 	bic.w	r2, r3, #1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b04      	subs	r3, #4
 8004caa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004cac:	4a0c      	ldr	r2, [pc, #48]	; (8004ce0 <pxPortInitialiseStack+0x64>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3b14      	subs	r3, #20
 8004cb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3b04      	subs	r3, #4
 8004cc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f06f 0202 	mvn.w	r2, #2
 8004cca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3b20      	subs	r3, #32
 8004cd0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	08004ce5 	.word	0x08004ce5

08004ce4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004cea:	2300      	movs	r3, #0
 8004cec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004cee:	4b12      	ldr	r3, [pc, #72]	; (8004d38 <prvTaskExitError+0x54>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf6:	d00a      	beq.n	8004d0e <prvTaskExitError+0x2a>
        __asm volatile
 8004cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cfc:	f383 8811 	msr	BASEPRI, r3
 8004d00:	f3bf 8f6f 	isb	sy
 8004d04:	f3bf 8f4f 	dsb	sy
 8004d08:	60fb      	str	r3, [r7, #12]
    }
 8004d0a:	bf00      	nop
 8004d0c:	e7fe      	b.n	8004d0c <prvTaskExitError+0x28>
        __asm volatile
 8004d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d12:	f383 8811 	msr	BASEPRI, r3
 8004d16:	f3bf 8f6f 	isb	sy
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	60bb      	str	r3, [r7, #8]
    }
 8004d20:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004d22:	bf00      	nop
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0fc      	beq.n	8004d24 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004d2a:	bf00      	nop
 8004d2c:	bf00      	nop
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr
 8004d38:	20000010 	.word	0x20000010
 8004d3c:	00000000 	.word	0x00000000

08004d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004d40:	4b07      	ldr	r3, [pc, #28]	; (8004d60 <pxCurrentTCBConst2>)
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	6808      	ldr	r0, [r1, #0]
 8004d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4a:	f380 8809 	msr	PSP, r0
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8811 	msr	BASEPRI, r0
 8004d5a:	4770      	bx	lr
 8004d5c:	f3af 8000 	nop.w

08004d60 <pxCurrentTCBConst2>:
 8004d60:	20000178 	.word	0x20000178
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop

08004d68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004d68:	4808      	ldr	r0, [pc, #32]	; (8004d8c <prvPortStartFirstTask+0x24>)
 8004d6a:	6800      	ldr	r0, [r0, #0]
 8004d6c:	6800      	ldr	r0, [r0, #0]
 8004d6e:	f380 8808 	msr	MSP, r0
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8814 	msr	CONTROL, r0
 8004d7a:	b662      	cpsie	i
 8004d7c:	b661      	cpsie	f
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	f3bf 8f6f 	isb	sy
 8004d86:	df00      	svc	0
 8004d88:	bf00      	nop
 8004d8a:	0000      	.short	0x0000
 8004d8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop

08004d94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b086      	sub	sp, #24
 8004d98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d9a:	4b46      	ldr	r3, [pc, #280]	; (8004eb4 <xPortStartScheduler+0x120>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a46      	ldr	r2, [pc, #280]	; (8004eb8 <xPortStartScheduler+0x124>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d10a      	bne.n	8004dba <xPortStartScheduler+0x26>
        __asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	613b      	str	r3, [r7, #16]
    }
 8004db6:	bf00      	nop
 8004db8:	e7fe      	b.n	8004db8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004dba:	4b3e      	ldr	r3, [pc, #248]	; (8004eb4 <xPortStartScheduler+0x120>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a3f      	ldr	r2, [pc, #252]	; (8004ebc <xPortStartScheduler+0x128>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d10a      	bne.n	8004dda <xPortStartScheduler+0x46>
        __asm volatile
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	60fb      	str	r3, [r7, #12]
    }
 8004dd6:	bf00      	nop
 8004dd8:	e7fe      	b.n	8004dd8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <xPortStartScheduler+0x12c>)
 8004ddc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	22ff      	movs	r2, #255	; 0xff
 8004dea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	4b31      	ldr	r3, [pc, #196]	; (8004ec4 <xPortStartScheduler+0x130>)
 8004e00:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004e02:	4b31      	ldr	r3, [pc, #196]	; (8004ec8 <xPortStartScheduler+0x134>)
 8004e04:	2207      	movs	r2, #7
 8004e06:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e08:	e009      	b.n	8004e1e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004e0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ec8 <xPortStartScheduler+0x134>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	4a2d      	ldr	r2, [pc, #180]	; (8004ec8 <xPortStartScheduler+0x134>)
 8004e12:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004e14:	78fb      	ldrb	r3, [r7, #3]
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004e1e:	78fb      	ldrb	r3, [r7, #3]
 8004e20:	b2db      	uxtb	r3, r3
 8004e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e26:	2b80      	cmp	r3, #128	; 0x80
 8004e28:	d0ef      	beq.n	8004e0a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e2a:	4b27      	ldr	r3, [pc, #156]	; (8004ec8 <xPortStartScheduler+0x134>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f1c3 0307 	rsb	r3, r3, #7
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d00a      	beq.n	8004e4c <xPortStartScheduler+0xb8>
        __asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	60bb      	str	r3, [r7, #8]
    }
 8004e48:	bf00      	nop
 8004e4a:	e7fe      	b.n	8004e4a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ec8 <xPortStartScheduler+0x134>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	4a1d      	ldr	r2, [pc, #116]	; (8004ec8 <xPortStartScheduler+0x134>)
 8004e54:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e56:	4b1c      	ldr	r3, [pc, #112]	; (8004ec8 <xPortStartScheduler+0x134>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ec8 <xPortStartScheduler+0x134>)
 8004e60:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004e6a:	4b18      	ldr	r3, [pc, #96]	; (8004ecc <xPortStartScheduler+0x138>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a17      	ldr	r2, [pc, #92]	; (8004ecc <xPortStartScheduler+0x138>)
 8004e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e74:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004e76:	4b15      	ldr	r3, [pc, #84]	; (8004ecc <xPortStartScheduler+0x138>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a14      	ldr	r2, [pc, #80]	; (8004ecc <xPortStartScheduler+0x138>)
 8004e7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004e80:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004e82:	f000 f8db 	bl	800503c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004e86:	4b12      	ldr	r3, [pc, #72]	; (8004ed0 <xPortStartScheduler+0x13c>)
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004e8c:	f000 f8fa 	bl	8005084 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e90:	4b10      	ldr	r3, [pc, #64]	; (8004ed4 <xPortStartScheduler+0x140>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a0f      	ldr	r2, [pc, #60]	; (8004ed4 <xPortStartScheduler+0x140>)
 8004e96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004e9a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004e9c:	f7ff ff64 	bl	8004d68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004ea0:	f7fe fee6 	bl	8003c70 <vTaskSwitchContext>
    prvTaskExitError();
 8004ea4:	f7ff ff1e 	bl	8004ce4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3718      	adds	r7, #24
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	e000ed00 	.word	0xe000ed00
 8004eb8:	410fc271 	.word	0x410fc271
 8004ebc:	410fc270 	.word	0x410fc270
 8004ec0:	e000e400 	.word	0xe000e400
 8004ec4:	200002b8 	.word	0x200002b8
 8004ec8:	200002bc 	.word	0x200002bc
 8004ecc:	e000ed20 	.word	0xe000ed20
 8004ed0:	20000010 	.word	0x20000010
 8004ed4:	e000ef34 	.word	0xe000ef34

08004ed8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
        __asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
    }
 8004ef0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <vPortEnterCritical+0x58>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4a0d      	ldr	r2, [pc, #52]	; (8004f30 <vPortEnterCritical+0x58>)
 8004efa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <vPortEnterCritical+0x58>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d10f      	bne.n	8004f24 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <vPortEnterCritical+0x5c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00a      	beq.n	8004f24 <vPortEnterCritical+0x4c>
        __asm volatile
 8004f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f12:	f383 8811 	msr	BASEPRI, r3
 8004f16:	f3bf 8f6f 	isb	sy
 8004f1a:	f3bf 8f4f 	dsb	sy
 8004f1e:	603b      	str	r3, [r7, #0]
    }
 8004f20:	bf00      	nop
 8004f22:	e7fe      	b.n	8004f22 <vPortEnterCritical+0x4a>
    }
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	20000010 	.word	0x20000010
 8004f34:	e000ed04 	.word	0xe000ed04

08004f38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004f3e:	4b12      	ldr	r3, [pc, #72]	; (8004f88 <vPortExitCritical+0x50>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <vPortExitCritical+0x24>
        __asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	607b      	str	r3, [r7, #4]
    }
 8004f58:	bf00      	nop
 8004f5a:	e7fe      	b.n	8004f5a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004f5c:	4b0a      	ldr	r3, [pc, #40]	; (8004f88 <vPortExitCritical+0x50>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	4a09      	ldr	r2, [pc, #36]	; (8004f88 <vPortExitCritical+0x50>)
 8004f64:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004f66:	4b08      	ldr	r3, [pc, #32]	; (8004f88 <vPortExitCritical+0x50>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d105      	bne.n	8004f7a <vPortExitCritical+0x42>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004f78:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	20000010 	.word	0x20000010
 8004f8c:	00000000 	.word	0x00000000

08004f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004f90:	f3ef 8009 	mrs	r0, PSP
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	4b15      	ldr	r3, [pc, #84]	; (8004ff0 <pxCurrentTCBConst>)
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	f01e 0f10 	tst.w	lr, #16
 8004fa0:	bf08      	it	eq
 8004fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	6010      	str	r0, [r2, #0]
 8004fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004fb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004fb4:	f380 8811 	msr	BASEPRI, r0
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f7fe fe56 	bl	8003c70 <vTaskSwitchContext>
 8004fc4:	f04f 0000 	mov.w	r0, #0
 8004fc8:	f380 8811 	msr	BASEPRI, r0
 8004fcc:	bc09      	pop	{r0, r3}
 8004fce:	6819      	ldr	r1, [r3, #0]
 8004fd0:	6808      	ldr	r0, [r1, #0]
 8004fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fd6:	f01e 0f10 	tst.w	lr, #16
 8004fda:	bf08      	it	eq
 8004fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fe0:	f380 8809 	msr	PSP, r0
 8004fe4:	f3bf 8f6f 	isb	sy
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	f3af 8000 	nop.w

08004ff0 <pxCurrentTCBConst>:
 8004ff0:	20000178 	.word	0x20000178
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop

08004ff8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
        __asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	607b      	str	r3, [r7, #4]
    }
 8005010:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005012:	f7fe fd17 	bl	8003a44 <xTaskIncrementTick>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d003      	beq.n	8005024 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <SysTick_Handler+0x40>)
 800501e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	2300      	movs	r3, #0
 8005026:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f383 8811 	msr	BASEPRI, r3
    }
 800502e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	e000ed04 	.word	0xe000ed04

0800503c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005040:	4b0b      	ldr	r3, [pc, #44]	; (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005042:	2200      	movs	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005046:	4b0b      	ldr	r3, [pc, #44]	; (8005074 <vPortSetupTimerInterrupt+0x38>)
 8005048:	2200      	movs	r2, #0
 800504a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <vPortSetupTimerInterrupt+0x3c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0a      	ldr	r2, [pc, #40]	; (800507c <vPortSetupTimerInterrupt+0x40>)
 8005052:	fba2 2303 	umull	r2, r3, r2, r3
 8005056:	099b      	lsrs	r3, r3, #6
 8005058:	4a09      	ldr	r2, [pc, #36]	; (8005080 <vPortSetupTimerInterrupt+0x44>)
 800505a:	3b01      	subs	r3, #1
 800505c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800505e:	4b04      	ldr	r3, [pc, #16]	; (8005070 <vPortSetupTimerInterrupt+0x34>)
 8005060:	2207      	movs	r2, #7
 8005062:	601a      	str	r2, [r3, #0]
}
 8005064:	bf00      	nop
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	e000e010 	.word	0xe000e010
 8005074:	e000e018 	.word	0xe000e018
 8005078:	20000000 	.word	0x20000000
 800507c:	10624dd3 	.word	0x10624dd3
 8005080:	e000e014 	.word	0xe000e014

08005084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005084:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005094 <vPortEnableVFP+0x10>
 8005088:	6801      	ldr	r1, [r0, #0]
 800508a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800508e:	6001      	str	r1, [r0, #0]
 8005090:	4770      	bx	lr
 8005092:	0000      	.short	0x0000
 8005094:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005098:	bf00      	nop
 800509a:	bf00      	nop

0800509c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	; 0x28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80050a4:	2300      	movs	r3, #0
 80050a6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80050a8:	f7fe fbb2 	bl	8003810 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80050ac:	4b65      	ldr	r3, [pc, #404]	; (8005244 <pvPortMalloc+0x1a8>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d101      	bne.n	80050b8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80050b4:	f000 f934 	bl	8005320 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050b8:	4b63      	ldr	r3, [pc, #396]	; (8005248 <pvPortMalloc+0x1ac>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4013      	ands	r3, r2
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f040 80a7 	bne.w	8005214 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d02d      	beq.n	8005128 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80050cc:	2208      	movs	r2, #8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d227      	bcs.n	8005128 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80050d8:	2208      	movs	r2, #8
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f003 0307 	and.w	r3, r3, #7
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d021      	beq.n	800512e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f023 0307 	bic.w	r3, r3, #7
 80050f0:	3308      	adds	r3, #8
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d214      	bcs.n	8005122 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f023 0307 	bic.w	r3, r3, #7
 80050fe:	3308      	adds	r3, #8
 8005100:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f003 0307 	and.w	r3, r3, #7
 8005108:	2b00      	cmp	r3, #0
 800510a:	d010      	beq.n	800512e <pvPortMalloc+0x92>
        __asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	617b      	str	r3, [r7, #20]
    }
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005126:	e002      	b.n	800512e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	607b      	str	r3, [r7, #4]
 800512c:	e000      	b.n	8005130 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800512e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d06e      	beq.n	8005214 <pvPortMalloc+0x178>
 8005136:	4b45      	ldr	r3, [pc, #276]	; (800524c <pvPortMalloc+0x1b0>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d869      	bhi.n	8005214 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005140:	4b43      	ldr	r3, [pc, #268]	; (8005250 <pvPortMalloc+0x1b4>)
 8005142:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005144:	4b42      	ldr	r3, [pc, #264]	; (8005250 <pvPortMalloc+0x1b4>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800514a:	e004      	b.n	8005156 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800514c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800514e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	429a      	cmp	r2, r3
 800515e:	d903      	bls.n	8005168 <pvPortMalloc+0xcc>
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d1f1      	bne.n	800514c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005168:	4b36      	ldr	r3, [pc, #216]	; (8005244 <pvPortMalloc+0x1a8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800516e:	429a      	cmp	r2, r3
 8005170:	d050      	beq.n	8005214 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2208      	movs	r2, #8
 8005178:	4413      	add	r3, r2
 800517a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	6a3b      	ldr	r3, [r7, #32]
 8005182:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	1ad2      	subs	r2, r2, r3
 800518c:	2308      	movs	r3, #8
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	429a      	cmp	r2, r3
 8005192:	d91f      	bls.n	80051d4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4413      	add	r3, r2
 800519a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	f003 0307 	and.w	r3, r3, #7
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <pvPortMalloc+0x120>
        __asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	613b      	str	r3, [r7, #16]
    }
 80051b8:	bf00      	nop
 80051ba:	e7fe      	b.n	80051ba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	1ad2      	subs	r2, r2, r3
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80051ce:	69b8      	ldr	r0, [r7, #24]
 80051d0:	f000 f908 	bl	80053e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80051d4:	4b1d      	ldr	r3, [pc, #116]	; (800524c <pvPortMalloc+0x1b0>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	4a1b      	ldr	r2, [pc, #108]	; (800524c <pvPortMalloc+0x1b0>)
 80051e0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051e2:	4b1a      	ldr	r3, [pc, #104]	; (800524c <pvPortMalloc+0x1b0>)
 80051e4:	681a      	ldr	r2, [r3, #0]
 80051e6:	4b1b      	ldr	r3, [pc, #108]	; (8005254 <pvPortMalloc+0x1b8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d203      	bcs.n	80051f6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051ee:	4b17      	ldr	r3, [pc, #92]	; (800524c <pvPortMalloc+0x1b0>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a18      	ldr	r2, [pc, #96]	; (8005254 <pvPortMalloc+0x1b8>)
 80051f4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f8:	685a      	ldr	r2, [r3, #4]
 80051fa:	4b13      	ldr	r3, [pc, #76]	; (8005248 <pvPortMalloc+0x1ac>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	431a      	orrs	r2, r3
 8005200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005202:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <pvPortMalloc+0x1bc>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3301      	adds	r3, #1
 8005210:	4a11      	ldr	r2, [pc, #68]	; (8005258 <pvPortMalloc+0x1bc>)
 8005212:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005214:	f7fe fb0a 	bl	800382c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00a      	beq.n	8005238 <pvPortMalloc+0x19c>
        __asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	60fb      	str	r3, [r7, #12]
    }
 8005234:	bf00      	nop
 8005236:	e7fe      	b.n	8005236 <pvPortMalloc+0x19a>
    return pvReturn;
 8005238:	69fb      	ldr	r3, [r7, #28]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3728      	adds	r7, #40	; 0x28
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20012ec8 	.word	0x20012ec8
 8005248:	20012edc 	.word	0x20012edc
 800524c:	20012ecc 	.word	0x20012ecc
 8005250:	20012ec0 	.word	0x20012ec0
 8005254:	20012ed0 	.word	0x20012ed0
 8005258:	20012ed4 	.word	0x20012ed4

0800525c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d04d      	beq.n	800530a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800526e:	2308      	movs	r3, #8
 8005270:	425b      	negs	r3, r3
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	4413      	add	r3, r2
 8005276:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	4b24      	ldr	r3, [pc, #144]	; (8005314 <vPortFree+0xb8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4013      	ands	r3, r2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <vPortFree+0x44>
        __asm volatile
 800528a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800528e:	f383 8811 	msr	BASEPRI, r3
 8005292:	f3bf 8f6f 	isb	sy
 8005296:	f3bf 8f4f 	dsb	sy
 800529a:	60fb      	str	r3, [r7, #12]
    }
 800529c:	bf00      	nop
 800529e:	e7fe      	b.n	800529e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00a      	beq.n	80052be <vPortFree+0x62>
        __asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	60bb      	str	r3, [r7, #8]
    }
 80052ba:	bf00      	nop
 80052bc:	e7fe      	b.n	80052bc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	4b14      	ldr	r3, [pc, #80]	; (8005314 <vPortFree+0xb8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4013      	ands	r3, r2
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d01e      	beq.n	800530a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d11a      	bne.n	800530a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	685a      	ldr	r2, [r3, #4]
 80052d8:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <vPortFree+0xb8>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	43db      	mvns	r3, r3
 80052de:	401a      	ands	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80052e4:	f7fe fa94 	bl	8003810 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	685a      	ldr	r2, [r3, #4]
 80052ec:	4b0a      	ldr	r3, [pc, #40]	; (8005318 <vPortFree+0xbc>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4413      	add	r3, r2
 80052f2:	4a09      	ldr	r2, [pc, #36]	; (8005318 <vPortFree+0xbc>)
 80052f4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80052f6:	6938      	ldr	r0, [r7, #16]
 80052f8:	f000 f874 	bl	80053e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80052fc:	4b07      	ldr	r3, [pc, #28]	; (800531c <vPortFree+0xc0>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	4a06      	ldr	r2, [pc, #24]	; (800531c <vPortFree+0xc0>)
 8005304:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005306:	f7fe fa91 	bl	800382c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800530a:	bf00      	nop
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20012edc 	.word	0x20012edc
 8005318:	20012ecc 	.word	0x20012ecc
 800531c:	20012ed8 	.word	0x20012ed8

08005320 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005326:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800532a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800532c:	4b27      	ldr	r3, [pc, #156]	; (80053cc <prvHeapInit+0xac>)
 800532e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00c      	beq.n	8005354 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	3307      	adds	r3, #7
 800533e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f023 0307 	bic.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	4a1f      	ldr	r2, [pc, #124]	; (80053cc <prvHeapInit+0xac>)
 8005350:	4413      	add	r3, r2
 8005352:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005358:	4a1d      	ldr	r2, [pc, #116]	; (80053d0 <prvHeapInit+0xb0>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800535e:	4b1c      	ldr	r3, [pc, #112]	; (80053d0 <prvHeapInit+0xb0>)
 8005360:	2200      	movs	r2, #0
 8005362:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	4413      	add	r3, r2
 800536a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800536c:	2208      	movs	r2, #8
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0307 	bic.w	r3, r3, #7
 800537a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	4a15      	ldr	r2, [pc, #84]	; (80053d4 <prvHeapInit+0xb4>)
 8005380:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005382:	4b14      	ldr	r3, [pc, #80]	; (80053d4 <prvHeapInit+0xb4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2200      	movs	r2, #0
 8005388:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800538a:	4b12      	ldr	r3, [pc, #72]	; (80053d4 <prvHeapInit+0xb4>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	1ad2      	subs	r2, r2, r3
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053a0:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <prvHeapInit+0xb4>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a0a      	ldr	r2, [pc, #40]	; (80053d8 <prvHeapInit+0xb8>)
 80053ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	4a09      	ldr	r2, [pc, #36]	; (80053dc <prvHeapInit+0xbc>)
 80053b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053b8:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <prvHeapInit+0xc0>)
 80053ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80053be:	601a      	str	r2, [r3, #0]
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	200002c0 	.word	0x200002c0
 80053d0:	20012ec0 	.word	0x20012ec0
 80053d4:	20012ec8 	.word	0x20012ec8
 80053d8:	20012ed0 	.word	0x20012ed0
 80053dc:	20012ecc 	.word	0x20012ecc
 80053e0:	20012edc 	.word	0x20012edc

080053e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80053ec:	4b28      	ldr	r3, [pc, #160]	; (8005490 <prvInsertBlockIntoFreeList+0xac>)
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	e002      	b.n	80053f8 <prvInsertBlockIntoFreeList+0x14>
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d8f7      	bhi.n	80053f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	4413      	add	r3, r2
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	429a      	cmp	r2, r3
 8005412:	d108      	bne.n	8005426 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	441a      	add	r2, r3
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	441a      	add	r2, r3
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d118      	bne.n	800546c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	4b15      	ldr	r3, [pc, #84]	; (8005494 <prvInsertBlockIntoFreeList+0xb0>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	429a      	cmp	r2, r3
 8005444:	d00d      	beq.n	8005462 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	441a      	add	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	e008      	b.n	8005474 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005462:	4b0c      	ldr	r3, [pc, #48]	; (8005494 <prvInsertBlockIntoFreeList+0xb0>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	e003      	b.n	8005474 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	429a      	cmp	r2, r3
 800547a:	d002      	beq.n	8005482 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005482:	bf00      	nop
 8005484:	3714      	adds	r7, #20
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	20012ec0 	.word	0x20012ec0
 8005494:	20012ec8 	.word	0x20012ec8

08005498 <__errno>:
 8005498:	4b01      	ldr	r3, [pc, #4]	; (80054a0 <__errno+0x8>)
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	20000014 	.word	0x20000014

080054a4 <__libc_init_array>:
 80054a4:	b570      	push	{r4, r5, r6, lr}
 80054a6:	4d0d      	ldr	r5, [pc, #52]	; (80054dc <__libc_init_array+0x38>)
 80054a8:	4c0d      	ldr	r4, [pc, #52]	; (80054e0 <__libc_init_array+0x3c>)
 80054aa:	1b64      	subs	r4, r4, r5
 80054ac:	10a4      	asrs	r4, r4, #2
 80054ae:	2600      	movs	r6, #0
 80054b0:	42a6      	cmp	r6, r4
 80054b2:	d109      	bne.n	80054c8 <__libc_init_array+0x24>
 80054b4:	4d0b      	ldr	r5, [pc, #44]	; (80054e4 <__libc_init_array+0x40>)
 80054b6:	4c0c      	ldr	r4, [pc, #48]	; (80054e8 <__libc_init_array+0x44>)
 80054b8:	f001 fa34 	bl	8006924 <_init>
 80054bc:	1b64      	subs	r4, r4, r5
 80054be:	10a4      	asrs	r4, r4, #2
 80054c0:	2600      	movs	r6, #0
 80054c2:	42a6      	cmp	r6, r4
 80054c4:	d105      	bne.n	80054d2 <__libc_init_array+0x2e>
 80054c6:	bd70      	pop	{r4, r5, r6, pc}
 80054c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054cc:	4798      	blx	r3
 80054ce:	3601      	adds	r6, #1
 80054d0:	e7ee      	b.n	80054b0 <__libc_init_array+0xc>
 80054d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054d6:	4798      	blx	r3
 80054d8:	3601      	adds	r6, #1
 80054da:	e7f2      	b.n	80054c2 <__libc_init_array+0x1e>
 80054dc:	08006b0c 	.word	0x08006b0c
 80054e0:	08006b0c 	.word	0x08006b0c
 80054e4:	08006b0c 	.word	0x08006b0c
 80054e8:	08006b10 	.word	0x08006b10

080054ec <memcpy>:
 80054ec:	440a      	add	r2, r1
 80054ee:	4291      	cmp	r1, r2
 80054f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80054f4:	d100      	bne.n	80054f8 <memcpy+0xc>
 80054f6:	4770      	bx	lr
 80054f8:	b510      	push	{r4, lr}
 80054fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005502:	4291      	cmp	r1, r2
 8005504:	d1f9      	bne.n	80054fa <memcpy+0xe>
 8005506:	bd10      	pop	{r4, pc}

08005508 <memset>:
 8005508:	4402      	add	r2, r0
 800550a:	4603      	mov	r3, r0
 800550c:	4293      	cmp	r3, r2
 800550e:	d100      	bne.n	8005512 <memset+0xa>
 8005510:	4770      	bx	lr
 8005512:	f803 1b01 	strb.w	r1, [r3], #1
 8005516:	e7f9      	b.n	800550c <memset+0x4>

08005518 <rand>:
 8005518:	4b16      	ldr	r3, [pc, #88]	; (8005574 <rand+0x5c>)
 800551a:	b510      	push	{r4, lr}
 800551c:	681c      	ldr	r4, [r3, #0]
 800551e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005520:	b9b3      	cbnz	r3, 8005550 <rand+0x38>
 8005522:	2018      	movs	r0, #24
 8005524:	f000 f886 	bl	8005634 <malloc>
 8005528:	63a0      	str	r0, [r4, #56]	; 0x38
 800552a:	b928      	cbnz	r0, 8005538 <rand+0x20>
 800552c:	4602      	mov	r2, r0
 800552e:	4b12      	ldr	r3, [pc, #72]	; (8005578 <rand+0x60>)
 8005530:	4812      	ldr	r0, [pc, #72]	; (800557c <rand+0x64>)
 8005532:	214e      	movs	r1, #78	; 0x4e
 8005534:	f000 f84e 	bl	80055d4 <__assert_func>
 8005538:	4a11      	ldr	r2, [pc, #68]	; (8005580 <rand+0x68>)
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <rand+0x6c>)
 800553c:	e9c0 2300 	strd	r2, r3, [r0]
 8005540:	4b11      	ldr	r3, [pc, #68]	; (8005588 <rand+0x70>)
 8005542:	6083      	str	r3, [r0, #8]
 8005544:	230b      	movs	r3, #11
 8005546:	8183      	strh	r3, [r0, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	2300      	movs	r3, #0
 800554c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005550:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005552:	4a0e      	ldr	r2, [pc, #56]	; (800558c <rand+0x74>)
 8005554:	6920      	ldr	r0, [r4, #16]
 8005556:	6963      	ldr	r3, [r4, #20]
 8005558:	490d      	ldr	r1, [pc, #52]	; (8005590 <rand+0x78>)
 800555a:	4342      	muls	r2, r0
 800555c:	fb01 2203 	mla	r2, r1, r3, r2
 8005560:	fba0 0101 	umull	r0, r1, r0, r1
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	eb42 0001 	adc.w	r0, r2, r1
 800556a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800556e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005572:	bd10      	pop	{r4, pc}
 8005574:	20000014 	.word	0x20000014
 8005578:	080069c0 	.word	0x080069c0
 800557c:	080069d7 	.word	0x080069d7
 8005580:	abcd330e 	.word	0xabcd330e
 8005584:	e66d1234 	.word	0xe66d1234
 8005588:	0005deec 	.word	0x0005deec
 800558c:	5851f42d 	.word	0x5851f42d
 8005590:	4c957f2d 	.word	0x4c957f2d

08005594 <siprintf>:
 8005594:	b40e      	push	{r1, r2, r3}
 8005596:	b500      	push	{lr}
 8005598:	b09c      	sub	sp, #112	; 0x70
 800559a:	ab1d      	add	r3, sp, #116	; 0x74
 800559c:	9002      	str	r0, [sp, #8]
 800559e:	9006      	str	r0, [sp, #24]
 80055a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055a4:	4809      	ldr	r0, [pc, #36]	; (80055cc <siprintf+0x38>)
 80055a6:	9107      	str	r1, [sp, #28]
 80055a8:	9104      	str	r1, [sp, #16]
 80055aa:	4909      	ldr	r1, [pc, #36]	; (80055d0 <siprintf+0x3c>)
 80055ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80055b0:	9105      	str	r1, [sp, #20]
 80055b2:	6800      	ldr	r0, [r0, #0]
 80055b4:	9301      	str	r3, [sp, #4]
 80055b6:	a902      	add	r1, sp, #8
 80055b8:	f000 f980 	bl	80058bc <_svfiprintf_r>
 80055bc:	9b02      	ldr	r3, [sp, #8]
 80055be:	2200      	movs	r2, #0
 80055c0:	701a      	strb	r2, [r3, #0]
 80055c2:	b01c      	add	sp, #112	; 0x70
 80055c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80055c8:	b003      	add	sp, #12
 80055ca:	4770      	bx	lr
 80055cc:	20000014 	.word	0x20000014
 80055d0:	ffff0208 	.word	0xffff0208

080055d4 <__assert_func>:
 80055d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80055d6:	4614      	mov	r4, r2
 80055d8:	461a      	mov	r2, r3
 80055da:	4b09      	ldr	r3, [pc, #36]	; (8005600 <__assert_func+0x2c>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4605      	mov	r5, r0
 80055e0:	68d8      	ldr	r0, [r3, #12]
 80055e2:	b14c      	cbz	r4, 80055f8 <__assert_func+0x24>
 80055e4:	4b07      	ldr	r3, [pc, #28]	; (8005604 <__assert_func+0x30>)
 80055e6:	9100      	str	r1, [sp, #0]
 80055e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80055ec:	4906      	ldr	r1, [pc, #24]	; (8005608 <__assert_func+0x34>)
 80055ee:	462b      	mov	r3, r5
 80055f0:	f000 f80e 	bl	8005610 <fiprintf>
 80055f4:	f000 fe20 	bl	8006238 <abort>
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <__assert_func+0x38>)
 80055fa:	461c      	mov	r4, r3
 80055fc:	e7f3      	b.n	80055e6 <__assert_func+0x12>
 80055fe:	bf00      	nop
 8005600:	20000014 	.word	0x20000014
 8005604:	08006a32 	.word	0x08006a32
 8005608:	08006a3f 	.word	0x08006a3f
 800560c:	08006a6d 	.word	0x08006a6d

08005610 <fiprintf>:
 8005610:	b40e      	push	{r1, r2, r3}
 8005612:	b503      	push	{r0, r1, lr}
 8005614:	4601      	mov	r1, r0
 8005616:	ab03      	add	r3, sp, #12
 8005618:	4805      	ldr	r0, [pc, #20]	; (8005630 <fiprintf+0x20>)
 800561a:	f853 2b04 	ldr.w	r2, [r3], #4
 800561e:	6800      	ldr	r0, [r0, #0]
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	f000 fa75 	bl	8005b10 <_vfiprintf_r>
 8005626:	b002      	add	sp, #8
 8005628:	f85d eb04 	ldr.w	lr, [sp], #4
 800562c:	b003      	add	sp, #12
 800562e:	4770      	bx	lr
 8005630:	20000014 	.word	0x20000014

08005634 <malloc>:
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <malloc+0xc>)
 8005636:	4601      	mov	r1, r0
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f000 b86f 	b.w	800571c <_malloc_r>
 800563e:	bf00      	nop
 8005640:	20000014 	.word	0x20000014

08005644 <_free_r>:
 8005644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005646:	2900      	cmp	r1, #0
 8005648:	d044      	beq.n	80056d4 <_free_r+0x90>
 800564a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800564e:	9001      	str	r0, [sp, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f1a1 0404 	sub.w	r4, r1, #4
 8005656:	bfb8      	it	lt
 8005658:	18e4      	addlt	r4, r4, r3
 800565a:	f001 f82f 	bl	80066bc <__malloc_lock>
 800565e:	4a1e      	ldr	r2, [pc, #120]	; (80056d8 <_free_r+0x94>)
 8005660:	9801      	ldr	r0, [sp, #4]
 8005662:	6813      	ldr	r3, [r2, #0]
 8005664:	b933      	cbnz	r3, 8005674 <_free_r+0x30>
 8005666:	6063      	str	r3, [r4, #4]
 8005668:	6014      	str	r4, [r2, #0]
 800566a:	b003      	add	sp, #12
 800566c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005670:	f001 b82a 	b.w	80066c8 <__malloc_unlock>
 8005674:	42a3      	cmp	r3, r4
 8005676:	d908      	bls.n	800568a <_free_r+0x46>
 8005678:	6825      	ldr	r5, [r4, #0]
 800567a:	1961      	adds	r1, r4, r5
 800567c:	428b      	cmp	r3, r1
 800567e:	bf01      	itttt	eq
 8005680:	6819      	ldreq	r1, [r3, #0]
 8005682:	685b      	ldreq	r3, [r3, #4]
 8005684:	1949      	addeq	r1, r1, r5
 8005686:	6021      	streq	r1, [r4, #0]
 8005688:	e7ed      	b.n	8005666 <_free_r+0x22>
 800568a:	461a      	mov	r2, r3
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b10b      	cbz	r3, 8005694 <_free_r+0x50>
 8005690:	42a3      	cmp	r3, r4
 8005692:	d9fa      	bls.n	800568a <_free_r+0x46>
 8005694:	6811      	ldr	r1, [r2, #0]
 8005696:	1855      	adds	r5, r2, r1
 8005698:	42a5      	cmp	r5, r4
 800569a:	d10b      	bne.n	80056b4 <_free_r+0x70>
 800569c:	6824      	ldr	r4, [r4, #0]
 800569e:	4421      	add	r1, r4
 80056a0:	1854      	adds	r4, r2, r1
 80056a2:	42a3      	cmp	r3, r4
 80056a4:	6011      	str	r1, [r2, #0]
 80056a6:	d1e0      	bne.n	800566a <_free_r+0x26>
 80056a8:	681c      	ldr	r4, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	6053      	str	r3, [r2, #4]
 80056ae:	4421      	add	r1, r4
 80056b0:	6011      	str	r1, [r2, #0]
 80056b2:	e7da      	b.n	800566a <_free_r+0x26>
 80056b4:	d902      	bls.n	80056bc <_free_r+0x78>
 80056b6:	230c      	movs	r3, #12
 80056b8:	6003      	str	r3, [r0, #0]
 80056ba:	e7d6      	b.n	800566a <_free_r+0x26>
 80056bc:	6825      	ldr	r5, [r4, #0]
 80056be:	1961      	adds	r1, r4, r5
 80056c0:	428b      	cmp	r3, r1
 80056c2:	bf04      	itt	eq
 80056c4:	6819      	ldreq	r1, [r3, #0]
 80056c6:	685b      	ldreq	r3, [r3, #4]
 80056c8:	6063      	str	r3, [r4, #4]
 80056ca:	bf04      	itt	eq
 80056cc:	1949      	addeq	r1, r1, r5
 80056ce:	6021      	streq	r1, [r4, #0]
 80056d0:	6054      	str	r4, [r2, #4]
 80056d2:	e7ca      	b.n	800566a <_free_r+0x26>
 80056d4:	b003      	add	sp, #12
 80056d6:	bd30      	pop	{r4, r5, pc}
 80056d8:	20012ee0 	.word	0x20012ee0

080056dc <sbrk_aligned>:
 80056dc:	b570      	push	{r4, r5, r6, lr}
 80056de:	4e0e      	ldr	r6, [pc, #56]	; (8005718 <sbrk_aligned+0x3c>)
 80056e0:	460c      	mov	r4, r1
 80056e2:	6831      	ldr	r1, [r6, #0]
 80056e4:	4605      	mov	r5, r0
 80056e6:	b911      	cbnz	r1, 80056ee <sbrk_aligned+0x12>
 80056e8:	f000 fcd6 	bl	8006098 <_sbrk_r>
 80056ec:	6030      	str	r0, [r6, #0]
 80056ee:	4621      	mov	r1, r4
 80056f0:	4628      	mov	r0, r5
 80056f2:	f000 fcd1 	bl	8006098 <_sbrk_r>
 80056f6:	1c43      	adds	r3, r0, #1
 80056f8:	d00a      	beq.n	8005710 <sbrk_aligned+0x34>
 80056fa:	1cc4      	adds	r4, r0, #3
 80056fc:	f024 0403 	bic.w	r4, r4, #3
 8005700:	42a0      	cmp	r0, r4
 8005702:	d007      	beq.n	8005714 <sbrk_aligned+0x38>
 8005704:	1a21      	subs	r1, r4, r0
 8005706:	4628      	mov	r0, r5
 8005708:	f000 fcc6 	bl	8006098 <_sbrk_r>
 800570c:	3001      	adds	r0, #1
 800570e:	d101      	bne.n	8005714 <sbrk_aligned+0x38>
 8005710:	f04f 34ff 	mov.w	r4, #4294967295
 8005714:	4620      	mov	r0, r4
 8005716:	bd70      	pop	{r4, r5, r6, pc}
 8005718:	20012ee4 	.word	0x20012ee4

0800571c <_malloc_r>:
 800571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005720:	1ccd      	adds	r5, r1, #3
 8005722:	f025 0503 	bic.w	r5, r5, #3
 8005726:	3508      	adds	r5, #8
 8005728:	2d0c      	cmp	r5, #12
 800572a:	bf38      	it	cc
 800572c:	250c      	movcc	r5, #12
 800572e:	2d00      	cmp	r5, #0
 8005730:	4607      	mov	r7, r0
 8005732:	db01      	blt.n	8005738 <_malloc_r+0x1c>
 8005734:	42a9      	cmp	r1, r5
 8005736:	d905      	bls.n	8005744 <_malloc_r+0x28>
 8005738:	230c      	movs	r3, #12
 800573a:	603b      	str	r3, [r7, #0]
 800573c:	2600      	movs	r6, #0
 800573e:	4630      	mov	r0, r6
 8005740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005744:	4e2e      	ldr	r6, [pc, #184]	; (8005800 <_malloc_r+0xe4>)
 8005746:	f000 ffb9 	bl	80066bc <__malloc_lock>
 800574a:	6833      	ldr	r3, [r6, #0]
 800574c:	461c      	mov	r4, r3
 800574e:	bb34      	cbnz	r4, 800579e <_malloc_r+0x82>
 8005750:	4629      	mov	r1, r5
 8005752:	4638      	mov	r0, r7
 8005754:	f7ff ffc2 	bl	80056dc <sbrk_aligned>
 8005758:	1c43      	adds	r3, r0, #1
 800575a:	4604      	mov	r4, r0
 800575c:	d14d      	bne.n	80057fa <_malloc_r+0xde>
 800575e:	6834      	ldr	r4, [r6, #0]
 8005760:	4626      	mov	r6, r4
 8005762:	2e00      	cmp	r6, #0
 8005764:	d140      	bne.n	80057e8 <_malloc_r+0xcc>
 8005766:	6823      	ldr	r3, [r4, #0]
 8005768:	4631      	mov	r1, r6
 800576a:	4638      	mov	r0, r7
 800576c:	eb04 0803 	add.w	r8, r4, r3
 8005770:	f000 fc92 	bl	8006098 <_sbrk_r>
 8005774:	4580      	cmp	r8, r0
 8005776:	d13a      	bne.n	80057ee <_malloc_r+0xd2>
 8005778:	6821      	ldr	r1, [r4, #0]
 800577a:	3503      	adds	r5, #3
 800577c:	1a6d      	subs	r5, r5, r1
 800577e:	f025 0503 	bic.w	r5, r5, #3
 8005782:	3508      	adds	r5, #8
 8005784:	2d0c      	cmp	r5, #12
 8005786:	bf38      	it	cc
 8005788:	250c      	movcc	r5, #12
 800578a:	4629      	mov	r1, r5
 800578c:	4638      	mov	r0, r7
 800578e:	f7ff ffa5 	bl	80056dc <sbrk_aligned>
 8005792:	3001      	adds	r0, #1
 8005794:	d02b      	beq.n	80057ee <_malloc_r+0xd2>
 8005796:	6823      	ldr	r3, [r4, #0]
 8005798:	442b      	add	r3, r5
 800579a:	6023      	str	r3, [r4, #0]
 800579c:	e00e      	b.n	80057bc <_malloc_r+0xa0>
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	1b52      	subs	r2, r2, r5
 80057a2:	d41e      	bmi.n	80057e2 <_malloc_r+0xc6>
 80057a4:	2a0b      	cmp	r2, #11
 80057a6:	d916      	bls.n	80057d6 <_malloc_r+0xba>
 80057a8:	1961      	adds	r1, r4, r5
 80057aa:	42a3      	cmp	r3, r4
 80057ac:	6025      	str	r5, [r4, #0]
 80057ae:	bf18      	it	ne
 80057b0:	6059      	strne	r1, [r3, #4]
 80057b2:	6863      	ldr	r3, [r4, #4]
 80057b4:	bf08      	it	eq
 80057b6:	6031      	streq	r1, [r6, #0]
 80057b8:	5162      	str	r2, [r4, r5]
 80057ba:	604b      	str	r3, [r1, #4]
 80057bc:	4638      	mov	r0, r7
 80057be:	f104 060b 	add.w	r6, r4, #11
 80057c2:	f000 ff81 	bl	80066c8 <__malloc_unlock>
 80057c6:	f026 0607 	bic.w	r6, r6, #7
 80057ca:	1d23      	adds	r3, r4, #4
 80057cc:	1af2      	subs	r2, r6, r3
 80057ce:	d0b6      	beq.n	800573e <_malloc_r+0x22>
 80057d0:	1b9b      	subs	r3, r3, r6
 80057d2:	50a3      	str	r3, [r4, r2]
 80057d4:	e7b3      	b.n	800573e <_malloc_r+0x22>
 80057d6:	6862      	ldr	r2, [r4, #4]
 80057d8:	42a3      	cmp	r3, r4
 80057da:	bf0c      	ite	eq
 80057dc:	6032      	streq	r2, [r6, #0]
 80057de:	605a      	strne	r2, [r3, #4]
 80057e0:	e7ec      	b.n	80057bc <_malloc_r+0xa0>
 80057e2:	4623      	mov	r3, r4
 80057e4:	6864      	ldr	r4, [r4, #4]
 80057e6:	e7b2      	b.n	800574e <_malloc_r+0x32>
 80057e8:	4634      	mov	r4, r6
 80057ea:	6876      	ldr	r6, [r6, #4]
 80057ec:	e7b9      	b.n	8005762 <_malloc_r+0x46>
 80057ee:	230c      	movs	r3, #12
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	4638      	mov	r0, r7
 80057f4:	f000 ff68 	bl	80066c8 <__malloc_unlock>
 80057f8:	e7a1      	b.n	800573e <_malloc_r+0x22>
 80057fa:	6025      	str	r5, [r4, #0]
 80057fc:	e7de      	b.n	80057bc <_malloc_r+0xa0>
 80057fe:	bf00      	nop
 8005800:	20012ee0 	.word	0x20012ee0

08005804 <__ssputs_r>:
 8005804:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005808:	688e      	ldr	r6, [r1, #8]
 800580a:	429e      	cmp	r6, r3
 800580c:	4682      	mov	sl, r0
 800580e:	460c      	mov	r4, r1
 8005810:	4690      	mov	r8, r2
 8005812:	461f      	mov	r7, r3
 8005814:	d838      	bhi.n	8005888 <__ssputs_r+0x84>
 8005816:	898a      	ldrh	r2, [r1, #12]
 8005818:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800581c:	d032      	beq.n	8005884 <__ssputs_r+0x80>
 800581e:	6825      	ldr	r5, [r4, #0]
 8005820:	6909      	ldr	r1, [r1, #16]
 8005822:	eba5 0901 	sub.w	r9, r5, r1
 8005826:	6965      	ldr	r5, [r4, #20]
 8005828:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800582c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005830:	3301      	adds	r3, #1
 8005832:	444b      	add	r3, r9
 8005834:	106d      	asrs	r5, r5, #1
 8005836:	429d      	cmp	r5, r3
 8005838:	bf38      	it	cc
 800583a:	461d      	movcc	r5, r3
 800583c:	0553      	lsls	r3, r2, #21
 800583e:	d531      	bpl.n	80058a4 <__ssputs_r+0xa0>
 8005840:	4629      	mov	r1, r5
 8005842:	f7ff ff6b 	bl	800571c <_malloc_r>
 8005846:	4606      	mov	r6, r0
 8005848:	b950      	cbnz	r0, 8005860 <__ssputs_r+0x5c>
 800584a:	230c      	movs	r3, #12
 800584c:	f8ca 3000 	str.w	r3, [sl]
 8005850:	89a3      	ldrh	r3, [r4, #12]
 8005852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005856:	81a3      	strh	r3, [r4, #12]
 8005858:	f04f 30ff 	mov.w	r0, #4294967295
 800585c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005860:	6921      	ldr	r1, [r4, #16]
 8005862:	464a      	mov	r2, r9
 8005864:	f7ff fe42 	bl	80054ec <memcpy>
 8005868:	89a3      	ldrh	r3, [r4, #12]
 800586a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800586e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	6126      	str	r6, [r4, #16]
 8005876:	6165      	str	r5, [r4, #20]
 8005878:	444e      	add	r6, r9
 800587a:	eba5 0509 	sub.w	r5, r5, r9
 800587e:	6026      	str	r6, [r4, #0]
 8005880:	60a5      	str	r5, [r4, #8]
 8005882:	463e      	mov	r6, r7
 8005884:	42be      	cmp	r6, r7
 8005886:	d900      	bls.n	800588a <__ssputs_r+0x86>
 8005888:	463e      	mov	r6, r7
 800588a:	6820      	ldr	r0, [r4, #0]
 800588c:	4632      	mov	r2, r6
 800588e:	4641      	mov	r1, r8
 8005890:	f000 fefa 	bl	8006688 <memmove>
 8005894:	68a3      	ldr	r3, [r4, #8]
 8005896:	1b9b      	subs	r3, r3, r6
 8005898:	60a3      	str	r3, [r4, #8]
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	4433      	add	r3, r6
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	2000      	movs	r0, #0
 80058a2:	e7db      	b.n	800585c <__ssputs_r+0x58>
 80058a4:	462a      	mov	r2, r5
 80058a6:	f000 ff15 	bl	80066d4 <_realloc_r>
 80058aa:	4606      	mov	r6, r0
 80058ac:	2800      	cmp	r0, #0
 80058ae:	d1e1      	bne.n	8005874 <__ssputs_r+0x70>
 80058b0:	6921      	ldr	r1, [r4, #16]
 80058b2:	4650      	mov	r0, sl
 80058b4:	f7ff fec6 	bl	8005644 <_free_r>
 80058b8:	e7c7      	b.n	800584a <__ssputs_r+0x46>
	...

080058bc <_svfiprintf_r>:
 80058bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c0:	4698      	mov	r8, r3
 80058c2:	898b      	ldrh	r3, [r1, #12]
 80058c4:	061b      	lsls	r3, r3, #24
 80058c6:	b09d      	sub	sp, #116	; 0x74
 80058c8:	4607      	mov	r7, r0
 80058ca:	460d      	mov	r5, r1
 80058cc:	4614      	mov	r4, r2
 80058ce:	d50e      	bpl.n	80058ee <_svfiprintf_r+0x32>
 80058d0:	690b      	ldr	r3, [r1, #16]
 80058d2:	b963      	cbnz	r3, 80058ee <_svfiprintf_r+0x32>
 80058d4:	2140      	movs	r1, #64	; 0x40
 80058d6:	f7ff ff21 	bl	800571c <_malloc_r>
 80058da:	6028      	str	r0, [r5, #0]
 80058dc:	6128      	str	r0, [r5, #16]
 80058de:	b920      	cbnz	r0, 80058ea <_svfiprintf_r+0x2e>
 80058e0:	230c      	movs	r3, #12
 80058e2:	603b      	str	r3, [r7, #0]
 80058e4:	f04f 30ff 	mov.w	r0, #4294967295
 80058e8:	e0d1      	b.n	8005a8e <_svfiprintf_r+0x1d2>
 80058ea:	2340      	movs	r3, #64	; 0x40
 80058ec:	616b      	str	r3, [r5, #20]
 80058ee:	2300      	movs	r3, #0
 80058f0:	9309      	str	r3, [sp, #36]	; 0x24
 80058f2:	2320      	movs	r3, #32
 80058f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80058fc:	2330      	movs	r3, #48	; 0x30
 80058fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005aa8 <_svfiprintf_r+0x1ec>
 8005902:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005906:	f04f 0901 	mov.w	r9, #1
 800590a:	4623      	mov	r3, r4
 800590c:	469a      	mov	sl, r3
 800590e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005912:	b10a      	cbz	r2, 8005918 <_svfiprintf_r+0x5c>
 8005914:	2a25      	cmp	r2, #37	; 0x25
 8005916:	d1f9      	bne.n	800590c <_svfiprintf_r+0x50>
 8005918:	ebba 0b04 	subs.w	fp, sl, r4
 800591c:	d00b      	beq.n	8005936 <_svfiprintf_r+0x7a>
 800591e:	465b      	mov	r3, fp
 8005920:	4622      	mov	r2, r4
 8005922:	4629      	mov	r1, r5
 8005924:	4638      	mov	r0, r7
 8005926:	f7ff ff6d 	bl	8005804 <__ssputs_r>
 800592a:	3001      	adds	r0, #1
 800592c:	f000 80aa 	beq.w	8005a84 <_svfiprintf_r+0x1c8>
 8005930:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005932:	445a      	add	r2, fp
 8005934:	9209      	str	r2, [sp, #36]	; 0x24
 8005936:	f89a 3000 	ldrb.w	r3, [sl]
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80a2 	beq.w	8005a84 <_svfiprintf_r+0x1c8>
 8005940:	2300      	movs	r3, #0
 8005942:	f04f 32ff 	mov.w	r2, #4294967295
 8005946:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800594a:	f10a 0a01 	add.w	sl, sl, #1
 800594e:	9304      	str	r3, [sp, #16]
 8005950:	9307      	str	r3, [sp, #28]
 8005952:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005956:	931a      	str	r3, [sp, #104]	; 0x68
 8005958:	4654      	mov	r4, sl
 800595a:	2205      	movs	r2, #5
 800595c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005960:	4851      	ldr	r0, [pc, #324]	; (8005aa8 <_svfiprintf_r+0x1ec>)
 8005962:	f7fa fc3d 	bl	80001e0 <memchr>
 8005966:	9a04      	ldr	r2, [sp, #16]
 8005968:	b9d8      	cbnz	r0, 80059a2 <_svfiprintf_r+0xe6>
 800596a:	06d0      	lsls	r0, r2, #27
 800596c:	bf44      	itt	mi
 800596e:	2320      	movmi	r3, #32
 8005970:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005974:	0711      	lsls	r1, r2, #28
 8005976:	bf44      	itt	mi
 8005978:	232b      	movmi	r3, #43	; 0x2b
 800597a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800597e:	f89a 3000 	ldrb.w	r3, [sl]
 8005982:	2b2a      	cmp	r3, #42	; 0x2a
 8005984:	d015      	beq.n	80059b2 <_svfiprintf_r+0xf6>
 8005986:	9a07      	ldr	r2, [sp, #28]
 8005988:	4654      	mov	r4, sl
 800598a:	2000      	movs	r0, #0
 800598c:	f04f 0c0a 	mov.w	ip, #10
 8005990:	4621      	mov	r1, r4
 8005992:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005996:	3b30      	subs	r3, #48	; 0x30
 8005998:	2b09      	cmp	r3, #9
 800599a:	d94e      	bls.n	8005a3a <_svfiprintf_r+0x17e>
 800599c:	b1b0      	cbz	r0, 80059cc <_svfiprintf_r+0x110>
 800599e:	9207      	str	r2, [sp, #28]
 80059a0:	e014      	b.n	80059cc <_svfiprintf_r+0x110>
 80059a2:	eba0 0308 	sub.w	r3, r0, r8
 80059a6:	fa09 f303 	lsl.w	r3, r9, r3
 80059aa:	4313      	orrs	r3, r2
 80059ac:	9304      	str	r3, [sp, #16]
 80059ae:	46a2      	mov	sl, r4
 80059b0:	e7d2      	b.n	8005958 <_svfiprintf_r+0x9c>
 80059b2:	9b03      	ldr	r3, [sp, #12]
 80059b4:	1d19      	adds	r1, r3, #4
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	9103      	str	r1, [sp, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	bfbb      	ittet	lt
 80059be:	425b      	neglt	r3, r3
 80059c0:	f042 0202 	orrlt.w	r2, r2, #2
 80059c4:	9307      	strge	r3, [sp, #28]
 80059c6:	9307      	strlt	r3, [sp, #28]
 80059c8:	bfb8      	it	lt
 80059ca:	9204      	strlt	r2, [sp, #16]
 80059cc:	7823      	ldrb	r3, [r4, #0]
 80059ce:	2b2e      	cmp	r3, #46	; 0x2e
 80059d0:	d10c      	bne.n	80059ec <_svfiprintf_r+0x130>
 80059d2:	7863      	ldrb	r3, [r4, #1]
 80059d4:	2b2a      	cmp	r3, #42	; 0x2a
 80059d6:	d135      	bne.n	8005a44 <_svfiprintf_r+0x188>
 80059d8:	9b03      	ldr	r3, [sp, #12]
 80059da:	1d1a      	adds	r2, r3, #4
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	9203      	str	r2, [sp, #12]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	bfb8      	it	lt
 80059e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80059e8:	3402      	adds	r4, #2
 80059ea:	9305      	str	r3, [sp, #20]
 80059ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ab8 <_svfiprintf_r+0x1fc>
 80059f0:	7821      	ldrb	r1, [r4, #0]
 80059f2:	2203      	movs	r2, #3
 80059f4:	4650      	mov	r0, sl
 80059f6:	f7fa fbf3 	bl	80001e0 <memchr>
 80059fa:	b140      	cbz	r0, 8005a0e <_svfiprintf_r+0x152>
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	eba0 000a 	sub.w	r0, r0, sl
 8005a02:	fa03 f000 	lsl.w	r0, r3, r0
 8005a06:	9b04      	ldr	r3, [sp, #16]
 8005a08:	4303      	orrs	r3, r0
 8005a0a:	3401      	adds	r4, #1
 8005a0c:	9304      	str	r3, [sp, #16]
 8005a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a12:	4826      	ldr	r0, [pc, #152]	; (8005aac <_svfiprintf_r+0x1f0>)
 8005a14:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a18:	2206      	movs	r2, #6
 8005a1a:	f7fa fbe1 	bl	80001e0 <memchr>
 8005a1e:	2800      	cmp	r0, #0
 8005a20:	d038      	beq.n	8005a94 <_svfiprintf_r+0x1d8>
 8005a22:	4b23      	ldr	r3, [pc, #140]	; (8005ab0 <_svfiprintf_r+0x1f4>)
 8005a24:	bb1b      	cbnz	r3, 8005a6e <_svfiprintf_r+0x1b2>
 8005a26:	9b03      	ldr	r3, [sp, #12]
 8005a28:	3307      	adds	r3, #7
 8005a2a:	f023 0307 	bic.w	r3, r3, #7
 8005a2e:	3308      	adds	r3, #8
 8005a30:	9303      	str	r3, [sp, #12]
 8005a32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a34:	4433      	add	r3, r6
 8005a36:	9309      	str	r3, [sp, #36]	; 0x24
 8005a38:	e767      	b.n	800590a <_svfiprintf_r+0x4e>
 8005a3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a3e:	460c      	mov	r4, r1
 8005a40:	2001      	movs	r0, #1
 8005a42:	e7a5      	b.n	8005990 <_svfiprintf_r+0xd4>
 8005a44:	2300      	movs	r3, #0
 8005a46:	3401      	adds	r4, #1
 8005a48:	9305      	str	r3, [sp, #20]
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	f04f 0c0a 	mov.w	ip, #10
 8005a50:	4620      	mov	r0, r4
 8005a52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a56:	3a30      	subs	r2, #48	; 0x30
 8005a58:	2a09      	cmp	r2, #9
 8005a5a:	d903      	bls.n	8005a64 <_svfiprintf_r+0x1a8>
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0c5      	beq.n	80059ec <_svfiprintf_r+0x130>
 8005a60:	9105      	str	r1, [sp, #20]
 8005a62:	e7c3      	b.n	80059ec <_svfiprintf_r+0x130>
 8005a64:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a68:	4604      	mov	r4, r0
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e7f0      	b.n	8005a50 <_svfiprintf_r+0x194>
 8005a6e:	ab03      	add	r3, sp, #12
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	462a      	mov	r2, r5
 8005a74:	4b0f      	ldr	r3, [pc, #60]	; (8005ab4 <_svfiprintf_r+0x1f8>)
 8005a76:	a904      	add	r1, sp, #16
 8005a78:	4638      	mov	r0, r7
 8005a7a:	f3af 8000 	nop.w
 8005a7e:	1c42      	adds	r2, r0, #1
 8005a80:	4606      	mov	r6, r0
 8005a82:	d1d6      	bne.n	8005a32 <_svfiprintf_r+0x176>
 8005a84:	89ab      	ldrh	r3, [r5, #12]
 8005a86:	065b      	lsls	r3, r3, #25
 8005a88:	f53f af2c 	bmi.w	80058e4 <_svfiprintf_r+0x28>
 8005a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a8e:	b01d      	add	sp, #116	; 0x74
 8005a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a94:	ab03      	add	r3, sp, #12
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	462a      	mov	r2, r5
 8005a9a:	4b06      	ldr	r3, [pc, #24]	; (8005ab4 <_svfiprintf_r+0x1f8>)
 8005a9c:	a904      	add	r1, sp, #16
 8005a9e:	4638      	mov	r0, r7
 8005aa0:	f000 f9d4 	bl	8005e4c <_printf_i>
 8005aa4:	e7eb      	b.n	8005a7e <_svfiprintf_r+0x1c2>
 8005aa6:	bf00      	nop
 8005aa8:	08006a6e 	.word	0x08006a6e
 8005aac:	08006a78 	.word	0x08006a78
 8005ab0:	00000000 	.word	0x00000000
 8005ab4:	08005805 	.word	0x08005805
 8005ab8:	08006a74 	.word	0x08006a74

08005abc <__sfputc_r>:
 8005abc:	6893      	ldr	r3, [r2, #8]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	b410      	push	{r4}
 8005ac4:	6093      	str	r3, [r2, #8]
 8005ac6:	da08      	bge.n	8005ada <__sfputc_r+0x1e>
 8005ac8:	6994      	ldr	r4, [r2, #24]
 8005aca:	42a3      	cmp	r3, r4
 8005acc:	db01      	blt.n	8005ad2 <__sfputc_r+0x16>
 8005ace:	290a      	cmp	r1, #10
 8005ad0:	d103      	bne.n	8005ada <__sfputc_r+0x1e>
 8005ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ad6:	f000 baef 	b.w	80060b8 <__swbuf_r>
 8005ada:	6813      	ldr	r3, [r2, #0]
 8005adc:	1c58      	adds	r0, r3, #1
 8005ade:	6010      	str	r0, [r2, #0]
 8005ae0:	7019      	strb	r1, [r3, #0]
 8005ae2:	4608      	mov	r0, r1
 8005ae4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <__sfputs_r>:
 8005aea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aec:	4606      	mov	r6, r0
 8005aee:	460f      	mov	r7, r1
 8005af0:	4614      	mov	r4, r2
 8005af2:	18d5      	adds	r5, r2, r3
 8005af4:	42ac      	cmp	r4, r5
 8005af6:	d101      	bne.n	8005afc <__sfputs_r+0x12>
 8005af8:	2000      	movs	r0, #0
 8005afa:	e007      	b.n	8005b0c <__sfputs_r+0x22>
 8005afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b00:	463a      	mov	r2, r7
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7ff ffda 	bl	8005abc <__sfputc_r>
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	d1f3      	bne.n	8005af4 <__sfputs_r+0xa>
 8005b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b10 <_vfiprintf_r>:
 8005b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b14:	460d      	mov	r5, r1
 8005b16:	b09d      	sub	sp, #116	; 0x74
 8005b18:	4614      	mov	r4, r2
 8005b1a:	4698      	mov	r8, r3
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	b118      	cbz	r0, 8005b28 <_vfiprintf_r+0x18>
 8005b20:	6983      	ldr	r3, [r0, #24]
 8005b22:	b90b      	cbnz	r3, 8005b28 <_vfiprintf_r+0x18>
 8005b24:	f000 fcaa 	bl	800647c <__sinit>
 8005b28:	4b89      	ldr	r3, [pc, #548]	; (8005d50 <_vfiprintf_r+0x240>)
 8005b2a:	429d      	cmp	r5, r3
 8005b2c:	d11b      	bne.n	8005b66 <_vfiprintf_r+0x56>
 8005b2e:	6875      	ldr	r5, [r6, #4]
 8005b30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b32:	07d9      	lsls	r1, r3, #31
 8005b34:	d405      	bmi.n	8005b42 <_vfiprintf_r+0x32>
 8005b36:	89ab      	ldrh	r3, [r5, #12]
 8005b38:	059a      	lsls	r2, r3, #22
 8005b3a:	d402      	bmi.n	8005b42 <_vfiprintf_r+0x32>
 8005b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b3e:	f000 fd3b 	bl	80065b8 <__retarget_lock_acquire_recursive>
 8005b42:	89ab      	ldrh	r3, [r5, #12]
 8005b44:	071b      	lsls	r3, r3, #28
 8005b46:	d501      	bpl.n	8005b4c <_vfiprintf_r+0x3c>
 8005b48:	692b      	ldr	r3, [r5, #16]
 8005b4a:	b9eb      	cbnz	r3, 8005b88 <_vfiprintf_r+0x78>
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f000 fb04 	bl	800615c <__swsetup_r>
 8005b54:	b1c0      	cbz	r0, 8005b88 <_vfiprintf_r+0x78>
 8005b56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b58:	07dc      	lsls	r4, r3, #31
 8005b5a:	d50e      	bpl.n	8005b7a <_vfiprintf_r+0x6a>
 8005b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b60:	b01d      	add	sp, #116	; 0x74
 8005b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b66:	4b7b      	ldr	r3, [pc, #492]	; (8005d54 <_vfiprintf_r+0x244>)
 8005b68:	429d      	cmp	r5, r3
 8005b6a:	d101      	bne.n	8005b70 <_vfiprintf_r+0x60>
 8005b6c:	68b5      	ldr	r5, [r6, #8]
 8005b6e:	e7df      	b.n	8005b30 <_vfiprintf_r+0x20>
 8005b70:	4b79      	ldr	r3, [pc, #484]	; (8005d58 <_vfiprintf_r+0x248>)
 8005b72:	429d      	cmp	r5, r3
 8005b74:	bf08      	it	eq
 8005b76:	68f5      	ldreq	r5, [r6, #12]
 8005b78:	e7da      	b.n	8005b30 <_vfiprintf_r+0x20>
 8005b7a:	89ab      	ldrh	r3, [r5, #12]
 8005b7c:	0598      	lsls	r0, r3, #22
 8005b7e:	d4ed      	bmi.n	8005b5c <_vfiprintf_r+0x4c>
 8005b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b82:	f000 fd1a 	bl	80065ba <__retarget_lock_release_recursive>
 8005b86:	e7e9      	b.n	8005b5c <_vfiprintf_r+0x4c>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b96:	2330      	movs	r3, #48	; 0x30
 8005b98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d5c <_vfiprintf_r+0x24c>
 8005b9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005ba0:	f04f 0901 	mov.w	r9, #1
 8005ba4:	4623      	mov	r3, r4
 8005ba6:	469a      	mov	sl, r3
 8005ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bac:	b10a      	cbz	r2, 8005bb2 <_vfiprintf_r+0xa2>
 8005bae:	2a25      	cmp	r2, #37	; 0x25
 8005bb0:	d1f9      	bne.n	8005ba6 <_vfiprintf_r+0x96>
 8005bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8005bb6:	d00b      	beq.n	8005bd0 <_vfiprintf_r+0xc0>
 8005bb8:	465b      	mov	r3, fp
 8005bba:	4622      	mov	r2, r4
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f7ff ff93 	bl	8005aea <__sfputs_r>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	f000 80aa 	beq.w	8005d1e <_vfiprintf_r+0x20e>
 8005bca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bcc:	445a      	add	r2, fp
 8005bce:	9209      	str	r2, [sp, #36]	; 0x24
 8005bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 80a2 	beq.w	8005d1e <_vfiprintf_r+0x20e>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005be4:	f10a 0a01 	add.w	sl, sl, #1
 8005be8:	9304      	str	r3, [sp, #16]
 8005bea:	9307      	str	r3, [sp, #28]
 8005bec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005bf0:	931a      	str	r3, [sp, #104]	; 0x68
 8005bf2:	4654      	mov	r4, sl
 8005bf4:	2205      	movs	r2, #5
 8005bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bfa:	4858      	ldr	r0, [pc, #352]	; (8005d5c <_vfiprintf_r+0x24c>)
 8005bfc:	f7fa faf0 	bl	80001e0 <memchr>
 8005c00:	9a04      	ldr	r2, [sp, #16]
 8005c02:	b9d8      	cbnz	r0, 8005c3c <_vfiprintf_r+0x12c>
 8005c04:	06d1      	lsls	r1, r2, #27
 8005c06:	bf44      	itt	mi
 8005c08:	2320      	movmi	r3, #32
 8005c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c0e:	0713      	lsls	r3, r2, #28
 8005c10:	bf44      	itt	mi
 8005c12:	232b      	movmi	r3, #43	; 0x2b
 8005c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c18:	f89a 3000 	ldrb.w	r3, [sl]
 8005c1c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c1e:	d015      	beq.n	8005c4c <_vfiprintf_r+0x13c>
 8005c20:	9a07      	ldr	r2, [sp, #28]
 8005c22:	4654      	mov	r4, sl
 8005c24:	2000      	movs	r0, #0
 8005c26:	f04f 0c0a 	mov.w	ip, #10
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c30:	3b30      	subs	r3, #48	; 0x30
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	d94e      	bls.n	8005cd4 <_vfiprintf_r+0x1c4>
 8005c36:	b1b0      	cbz	r0, 8005c66 <_vfiprintf_r+0x156>
 8005c38:	9207      	str	r2, [sp, #28]
 8005c3a:	e014      	b.n	8005c66 <_vfiprintf_r+0x156>
 8005c3c:	eba0 0308 	sub.w	r3, r0, r8
 8005c40:	fa09 f303 	lsl.w	r3, r9, r3
 8005c44:	4313      	orrs	r3, r2
 8005c46:	9304      	str	r3, [sp, #16]
 8005c48:	46a2      	mov	sl, r4
 8005c4a:	e7d2      	b.n	8005bf2 <_vfiprintf_r+0xe2>
 8005c4c:	9b03      	ldr	r3, [sp, #12]
 8005c4e:	1d19      	adds	r1, r3, #4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	9103      	str	r1, [sp, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bfbb      	ittet	lt
 8005c58:	425b      	neglt	r3, r3
 8005c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c5e:	9307      	strge	r3, [sp, #28]
 8005c60:	9307      	strlt	r3, [sp, #28]
 8005c62:	bfb8      	it	lt
 8005c64:	9204      	strlt	r2, [sp, #16]
 8005c66:	7823      	ldrb	r3, [r4, #0]
 8005c68:	2b2e      	cmp	r3, #46	; 0x2e
 8005c6a:	d10c      	bne.n	8005c86 <_vfiprintf_r+0x176>
 8005c6c:	7863      	ldrb	r3, [r4, #1]
 8005c6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c70:	d135      	bne.n	8005cde <_vfiprintf_r+0x1ce>
 8005c72:	9b03      	ldr	r3, [sp, #12]
 8005c74:	1d1a      	adds	r2, r3, #4
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	9203      	str	r2, [sp, #12]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	bfb8      	it	lt
 8005c7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c82:	3402      	adds	r4, #2
 8005c84:	9305      	str	r3, [sp, #20]
 8005c86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d6c <_vfiprintf_r+0x25c>
 8005c8a:	7821      	ldrb	r1, [r4, #0]
 8005c8c:	2203      	movs	r2, #3
 8005c8e:	4650      	mov	r0, sl
 8005c90:	f7fa faa6 	bl	80001e0 <memchr>
 8005c94:	b140      	cbz	r0, 8005ca8 <_vfiprintf_r+0x198>
 8005c96:	2340      	movs	r3, #64	; 0x40
 8005c98:	eba0 000a 	sub.w	r0, r0, sl
 8005c9c:	fa03 f000 	lsl.w	r0, r3, r0
 8005ca0:	9b04      	ldr	r3, [sp, #16]
 8005ca2:	4303      	orrs	r3, r0
 8005ca4:	3401      	adds	r4, #1
 8005ca6:	9304      	str	r3, [sp, #16]
 8005ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cac:	482c      	ldr	r0, [pc, #176]	; (8005d60 <_vfiprintf_r+0x250>)
 8005cae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cb2:	2206      	movs	r2, #6
 8005cb4:	f7fa fa94 	bl	80001e0 <memchr>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d03f      	beq.n	8005d3c <_vfiprintf_r+0x22c>
 8005cbc:	4b29      	ldr	r3, [pc, #164]	; (8005d64 <_vfiprintf_r+0x254>)
 8005cbe:	bb1b      	cbnz	r3, 8005d08 <_vfiprintf_r+0x1f8>
 8005cc0:	9b03      	ldr	r3, [sp, #12]
 8005cc2:	3307      	adds	r3, #7
 8005cc4:	f023 0307 	bic.w	r3, r3, #7
 8005cc8:	3308      	adds	r3, #8
 8005cca:	9303      	str	r3, [sp, #12]
 8005ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cce:	443b      	add	r3, r7
 8005cd0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cd2:	e767      	b.n	8005ba4 <_vfiprintf_r+0x94>
 8005cd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cd8:	460c      	mov	r4, r1
 8005cda:	2001      	movs	r0, #1
 8005cdc:	e7a5      	b.n	8005c2a <_vfiprintf_r+0x11a>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	3401      	adds	r4, #1
 8005ce2:	9305      	str	r3, [sp, #20]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	f04f 0c0a 	mov.w	ip, #10
 8005cea:	4620      	mov	r0, r4
 8005cec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cf0:	3a30      	subs	r2, #48	; 0x30
 8005cf2:	2a09      	cmp	r2, #9
 8005cf4:	d903      	bls.n	8005cfe <_vfiprintf_r+0x1ee>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0c5      	beq.n	8005c86 <_vfiprintf_r+0x176>
 8005cfa:	9105      	str	r1, [sp, #20]
 8005cfc:	e7c3      	b.n	8005c86 <_vfiprintf_r+0x176>
 8005cfe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d02:	4604      	mov	r4, r0
 8005d04:	2301      	movs	r3, #1
 8005d06:	e7f0      	b.n	8005cea <_vfiprintf_r+0x1da>
 8005d08:	ab03      	add	r3, sp, #12
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	462a      	mov	r2, r5
 8005d0e:	4b16      	ldr	r3, [pc, #88]	; (8005d68 <_vfiprintf_r+0x258>)
 8005d10:	a904      	add	r1, sp, #16
 8005d12:	4630      	mov	r0, r6
 8005d14:	f3af 8000 	nop.w
 8005d18:	4607      	mov	r7, r0
 8005d1a:	1c78      	adds	r0, r7, #1
 8005d1c:	d1d6      	bne.n	8005ccc <_vfiprintf_r+0x1bc>
 8005d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d20:	07d9      	lsls	r1, r3, #31
 8005d22:	d405      	bmi.n	8005d30 <_vfiprintf_r+0x220>
 8005d24:	89ab      	ldrh	r3, [r5, #12]
 8005d26:	059a      	lsls	r2, r3, #22
 8005d28:	d402      	bmi.n	8005d30 <_vfiprintf_r+0x220>
 8005d2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d2c:	f000 fc45 	bl	80065ba <__retarget_lock_release_recursive>
 8005d30:	89ab      	ldrh	r3, [r5, #12]
 8005d32:	065b      	lsls	r3, r3, #25
 8005d34:	f53f af12 	bmi.w	8005b5c <_vfiprintf_r+0x4c>
 8005d38:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d3a:	e711      	b.n	8005b60 <_vfiprintf_r+0x50>
 8005d3c:	ab03      	add	r3, sp, #12
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	462a      	mov	r2, r5
 8005d42:	4b09      	ldr	r3, [pc, #36]	; (8005d68 <_vfiprintf_r+0x258>)
 8005d44:	a904      	add	r1, sp, #16
 8005d46:	4630      	mov	r0, r6
 8005d48:	f000 f880 	bl	8005e4c <_printf_i>
 8005d4c:	e7e4      	b.n	8005d18 <_vfiprintf_r+0x208>
 8005d4e:	bf00      	nop
 8005d50:	08006ac4 	.word	0x08006ac4
 8005d54:	08006ae4 	.word	0x08006ae4
 8005d58:	08006aa4 	.word	0x08006aa4
 8005d5c:	08006a6e 	.word	0x08006a6e
 8005d60:	08006a78 	.word	0x08006a78
 8005d64:	00000000 	.word	0x00000000
 8005d68:	08005aeb 	.word	0x08005aeb
 8005d6c:	08006a74 	.word	0x08006a74

08005d70 <_printf_common>:
 8005d70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d74:	4616      	mov	r6, r2
 8005d76:	4699      	mov	r9, r3
 8005d78:	688a      	ldr	r2, [r1, #8]
 8005d7a:	690b      	ldr	r3, [r1, #16]
 8005d7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d80:	4293      	cmp	r3, r2
 8005d82:	bfb8      	it	lt
 8005d84:	4613      	movlt	r3, r2
 8005d86:	6033      	str	r3, [r6, #0]
 8005d88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	b10a      	cbz	r2, 8005d96 <_printf_common+0x26>
 8005d92:	3301      	adds	r3, #1
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	0699      	lsls	r1, r3, #26
 8005d9a:	bf42      	ittt	mi
 8005d9c:	6833      	ldrmi	r3, [r6, #0]
 8005d9e:	3302      	addmi	r3, #2
 8005da0:	6033      	strmi	r3, [r6, #0]
 8005da2:	6825      	ldr	r5, [r4, #0]
 8005da4:	f015 0506 	ands.w	r5, r5, #6
 8005da8:	d106      	bne.n	8005db8 <_printf_common+0x48>
 8005daa:	f104 0a19 	add.w	sl, r4, #25
 8005dae:	68e3      	ldr	r3, [r4, #12]
 8005db0:	6832      	ldr	r2, [r6, #0]
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	42ab      	cmp	r3, r5
 8005db6:	dc26      	bgt.n	8005e06 <_printf_common+0x96>
 8005db8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dbc:	1e13      	subs	r3, r2, #0
 8005dbe:	6822      	ldr	r2, [r4, #0]
 8005dc0:	bf18      	it	ne
 8005dc2:	2301      	movne	r3, #1
 8005dc4:	0692      	lsls	r2, r2, #26
 8005dc6:	d42b      	bmi.n	8005e20 <_printf_common+0xb0>
 8005dc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dcc:	4649      	mov	r1, r9
 8005dce:	4638      	mov	r0, r7
 8005dd0:	47c0      	blx	r8
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	d01e      	beq.n	8005e14 <_printf_common+0xa4>
 8005dd6:	6823      	ldr	r3, [r4, #0]
 8005dd8:	68e5      	ldr	r5, [r4, #12]
 8005dda:	6832      	ldr	r2, [r6, #0]
 8005ddc:	f003 0306 	and.w	r3, r3, #6
 8005de0:	2b04      	cmp	r3, #4
 8005de2:	bf08      	it	eq
 8005de4:	1aad      	subeq	r5, r5, r2
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	6922      	ldr	r2, [r4, #16]
 8005dea:	bf0c      	ite	eq
 8005dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df0:	2500      	movne	r5, #0
 8005df2:	4293      	cmp	r3, r2
 8005df4:	bfc4      	itt	gt
 8005df6:	1a9b      	subgt	r3, r3, r2
 8005df8:	18ed      	addgt	r5, r5, r3
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	341a      	adds	r4, #26
 8005dfe:	42b5      	cmp	r5, r6
 8005e00:	d11a      	bne.n	8005e38 <_printf_common+0xc8>
 8005e02:	2000      	movs	r0, #0
 8005e04:	e008      	b.n	8005e18 <_printf_common+0xa8>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4652      	mov	r2, sl
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	47c0      	blx	r8
 8005e10:	3001      	adds	r0, #1
 8005e12:	d103      	bne.n	8005e1c <_printf_common+0xac>
 8005e14:	f04f 30ff 	mov.w	r0, #4294967295
 8005e18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e1c:	3501      	adds	r5, #1
 8005e1e:	e7c6      	b.n	8005dae <_printf_common+0x3e>
 8005e20:	18e1      	adds	r1, r4, r3
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	2030      	movs	r0, #48	; 0x30
 8005e26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e2a:	4422      	add	r2, r4
 8005e2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e34:	3302      	adds	r3, #2
 8005e36:	e7c7      	b.n	8005dc8 <_printf_common+0x58>
 8005e38:	2301      	movs	r3, #1
 8005e3a:	4622      	mov	r2, r4
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	4638      	mov	r0, r7
 8005e40:	47c0      	blx	r8
 8005e42:	3001      	adds	r0, #1
 8005e44:	d0e6      	beq.n	8005e14 <_printf_common+0xa4>
 8005e46:	3601      	adds	r6, #1
 8005e48:	e7d9      	b.n	8005dfe <_printf_common+0x8e>
	...

08005e4c <_printf_i>:
 8005e4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e50:	7e0f      	ldrb	r7, [r1, #24]
 8005e52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e54:	2f78      	cmp	r7, #120	; 0x78
 8005e56:	4691      	mov	r9, r2
 8005e58:	4680      	mov	r8, r0
 8005e5a:	460c      	mov	r4, r1
 8005e5c:	469a      	mov	sl, r3
 8005e5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e62:	d807      	bhi.n	8005e74 <_printf_i+0x28>
 8005e64:	2f62      	cmp	r7, #98	; 0x62
 8005e66:	d80a      	bhi.n	8005e7e <_printf_i+0x32>
 8005e68:	2f00      	cmp	r7, #0
 8005e6a:	f000 80d8 	beq.w	800601e <_printf_i+0x1d2>
 8005e6e:	2f58      	cmp	r7, #88	; 0x58
 8005e70:	f000 80a3 	beq.w	8005fba <_printf_i+0x16e>
 8005e74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e7c:	e03a      	b.n	8005ef4 <_printf_i+0xa8>
 8005e7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e82:	2b15      	cmp	r3, #21
 8005e84:	d8f6      	bhi.n	8005e74 <_printf_i+0x28>
 8005e86:	a101      	add	r1, pc, #4	; (adr r1, 8005e8c <_printf_i+0x40>)
 8005e88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e8c:	08005ee5 	.word	0x08005ee5
 8005e90:	08005ef9 	.word	0x08005ef9
 8005e94:	08005e75 	.word	0x08005e75
 8005e98:	08005e75 	.word	0x08005e75
 8005e9c:	08005e75 	.word	0x08005e75
 8005ea0:	08005e75 	.word	0x08005e75
 8005ea4:	08005ef9 	.word	0x08005ef9
 8005ea8:	08005e75 	.word	0x08005e75
 8005eac:	08005e75 	.word	0x08005e75
 8005eb0:	08005e75 	.word	0x08005e75
 8005eb4:	08005e75 	.word	0x08005e75
 8005eb8:	08006005 	.word	0x08006005
 8005ebc:	08005f29 	.word	0x08005f29
 8005ec0:	08005fe7 	.word	0x08005fe7
 8005ec4:	08005e75 	.word	0x08005e75
 8005ec8:	08005e75 	.word	0x08005e75
 8005ecc:	08006027 	.word	0x08006027
 8005ed0:	08005e75 	.word	0x08005e75
 8005ed4:	08005f29 	.word	0x08005f29
 8005ed8:	08005e75 	.word	0x08005e75
 8005edc:	08005e75 	.word	0x08005e75
 8005ee0:	08005fef 	.word	0x08005fef
 8005ee4:	682b      	ldr	r3, [r5, #0]
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	602a      	str	r2, [r5, #0]
 8005eec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ef0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e0a3      	b.n	8006040 <_printf_i+0x1f4>
 8005ef8:	6820      	ldr	r0, [r4, #0]
 8005efa:	6829      	ldr	r1, [r5, #0]
 8005efc:	0606      	lsls	r6, r0, #24
 8005efe:	f101 0304 	add.w	r3, r1, #4
 8005f02:	d50a      	bpl.n	8005f1a <_printf_i+0xce>
 8005f04:	680e      	ldr	r6, [r1, #0]
 8005f06:	602b      	str	r3, [r5, #0]
 8005f08:	2e00      	cmp	r6, #0
 8005f0a:	da03      	bge.n	8005f14 <_printf_i+0xc8>
 8005f0c:	232d      	movs	r3, #45	; 0x2d
 8005f0e:	4276      	negs	r6, r6
 8005f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f14:	485e      	ldr	r0, [pc, #376]	; (8006090 <_printf_i+0x244>)
 8005f16:	230a      	movs	r3, #10
 8005f18:	e019      	b.n	8005f4e <_printf_i+0x102>
 8005f1a:	680e      	ldr	r6, [r1, #0]
 8005f1c:	602b      	str	r3, [r5, #0]
 8005f1e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f22:	bf18      	it	ne
 8005f24:	b236      	sxthne	r6, r6
 8005f26:	e7ef      	b.n	8005f08 <_printf_i+0xbc>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	6820      	ldr	r0, [r4, #0]
 8005f2c:	1d19      	adds	r1, r3, #4
 8005f2e:	6029      	str	r1, [r5, #0]
 8005f30:	0601      	lsls	r1, r0, #24
 8005f32:	d501      	bpl.n	8005f38 <_printf_i+0xec>
 8005f34:	681e      	ldr	r6, [r3, #0]
 8005f36:	e002      	b.n	8005f3e <_printf_i+0xf2>
 8005f38:	0646      	lsls	r6, r0, #25
 8005f3a:	d5fb      	bpl.n	8005f34 <_printf_i+0xe8>
 8005f3c:	881e      	ldrh	r6, [r3, #0]
 8005f3e:	4854      	ldr	r0, [pc, #336]	; (8006090 <_printf_i+0x244>)
 8005f40:	2f6f      	cmp	r7, #111	; 0x6f
 8005f42:	bf0c      	ite	eq
 8005f44:	2308      	moveq	r3, #8
 8005f46:	230a      	movne	r3, #10
 8005f48:	2100      	movs	r1, #0
 8005f4a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f4e:	6865      	ldr	r5, [r4, #4]
 8005f50:	60a5      	str	r5, [r4, #8]
 8005f52:	2d00      	cmp	r5, #0
 8005f54:	bfa2      	ittt	ge
 8005f56:	6821      	ldrge	r1, [r4, #0]
 8005f58:	f021 0104 	bicge.w	r1, r1, #4
 8005f5c:	6021      	strge	r1, [r4, #0]
 8005f5e:	b90e      	cbnz	r6, 8005f64 <_printf_i+0x118>
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	d04d      	beq.n	8006000 <_printf_i+0x1b4>
 8005f64:	4615      	mov	r5, r2
 8005f66:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f6a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f6e:	5dc7      	ldrb	r7, [r0, r7]
 8005f70:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f74:	4637      	mov	r7, r6
 8005f76:	42bb      	cmp	r3, r7
 8005f78:	460e      	mov	r6, r1
 8005f7a:	d9f4      	bls.n	8005f66 <_printf_i+0x11a>
 8005f7c:	2b08      	cmp	r3, #8
 8005f7e:	d10b      	bne.n	8005f98 <_printf_i+0x14c>
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	07de      	lsls	r6, r3, #31
 8005f84:	d508      	bpl.n	8005f98 <_printf_i+0x14c>
 8005f86:	6923      	ldr	r3, [r4, #16]
 8005f88:	6861      	ldr	r1, [r4, #4]
 8005f8a:	4299      	cmp	r1, r3
 8005f8c:	bfde      	ittt	le
 8005f8e:	2330      	movle	r3, #48	; 0x30
 8005f90:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f94:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f98:	1b52      	subs	r2, r2, r5
 8005f9a:	6122      	str	r2, [r4, #16]
 8005f9c:	f8cd a000 	str.w	sl, [sp]
 8005fa0:	464b      	mov	r3, r9
 8005fa2:	aa03      	add	r2, sp, #12
 8005fa4:	4621      	mov	r1, r4
 8005fa6:	4640      	mov	r0, r8
 8005fa8:	f7ff fee2 	bl	8005d70 <_printf_common>
 8005fac:	3001      	adds	r0, #1
 8005fae:	d14c      	bne.n	800604a <_printf_i+0x1fe>
 8005fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb4:	b004      	add	sp, #16
 8005fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fba:	4835      	ldr	r0, [pc, #212]	; (8006090 <_printf_i+0x244>)
 8005fbc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fc0:	6829      	ldr	r1, [r5, #0]
 8005fc2:	6823      	ldr	r3, [r4, #0]
 8005fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fc8:	6029      	str	r1, [r5, #0]
 8005fca:	061d      	lsls	r5, r3, #24
 8005fcc:	d514      	bpl.n	8005ff8 <_printf_i+0x1ac>
 8005fce:	07df      	lsls	r7, r3, #31
 8005fd0:	bf44      	itt	mi
 8005fd2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fd6:	6023      	strmi	r3, [r4, #0]
 8005fd8:	b91e      	cbnz	r6, 8005fe2 <_printf_i+0x196>
 8005fda:	6823      	ldr	r3, [r4, #0]
 8005fdc:	f023 0320 	bic.w	r3, r3, #32
 8005fe0:	6023      	str	r3, [r4, #0]
 8005fe2:	2310      	movs	r3, #16
 8005fe4:	e7b0      	b.n	8005f48 <_printf_i+0xfc>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	f043 0320 	orr.w	r3, r3, #32
 8005fec:	6023      	str	r3, [r4, #0]
 8005fee:	2378      	movs	r3, #120	; 0x78
 8005ff0:	4828      	ldr	r0, [pc, #160]	; (8006094 <_printf_i+0x248>)
 8005ff2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005ff6:	e7e3      	b.n	8005fc0 <_printf_i+0x174>
 8005ff8:	0659      	lsls	r1, r3, #25
 8005ffa:	bf48      	it	mi
 8005ffc:	b2b6      	uxthmi	r6, r6
 8005ffe:	e7e6      	b.n	8005fce <_printf_i+0x182>
 8006000:	4615      	mov	r5, r2
 8006002:	e7bb      	b.n	8005f7c <_printf_i+0x130>
 8006004:	682b      	ldr	r3, [r5, #0]
 8006006:	6826      	ldr	r6, [r4, #0]
 8006008:	6961      	ldr	r1, [r4, #20]
 800600a:	1d18      	adds	r0, r3, #4
 800600c:	6028      	str	r0, [r5, #0]
 800600e:	0635      	lsls	r5, r6, #24
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	d501      	bpl.n	8006018 <_printf_i+0x1cc>
 8006014:	6019      	str	r1, [r3, #0]
 8006016:	e002      	b.n	800601e <_printf_i+0x1d2>
 8006018:	0670      	lsls	r0, r6, #25
 800601a:	d5fb      	bpl.n	8006014 <_printf_i+0x1c8>
 800601c:	8019      	strh	r1, [r3, #0]
 800601e:	2300      	movs	r3, #0
 8006020:	6123      	str	r3, [r4, #16]
 8006022:	4615      	mov	r5, r2
 8006024:	e7ba      	b.n	8005f9c <_printf_i+0x150>
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	1d1a      	adds	r2, r3, #4
 800602a:	602a      	str	r2, [r5, #0]
 800602c:	681d      	ldr	r5, [r3, #0]
 800602e:	6862      	ldr	r2, [r4, #4]
 8006030:	2100      	movs	r1, #0
 8006032:	4628      	mov	r0, r5
 8006034:	f7fa f8d4 	bl	80001e0 <memchr>
 8006038:	b108      	cbz	r0, 800603e <_printf_i+0x1f2>
 800603a:	1b40      	subs	r0, r0, r5
 800603c:	6060      	str	r0, [r4, #4]
 800603e:	6863      	ldr	r3, [r4, #4]
 8006040:	6123      	str	r3, [r4, #16]
 8006042:	2300      	movs	r3, #0
 8006044:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006048:	e7a8      	b.n	8005f9c <_printf_i+0x150>
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	462a      	mov	r2, r5
 800604e:	4649      	mov	r1, r9
 8006050:	4640      	mov	r0, r8
 8006052:	47d0      	blx	sl
 8006054:	3001      	adds	r0, #1
 8006056:	d0ab      	beq.n	8005fb0 <_printf_i+0x164>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	079b      	lsls	r3, r3, #30
 800605c:	d413      	bmi.n	8006086 <_printf_i+0x23a>
 800605e:	68e0      	ldr	r0, [r4, #12]
 8006060:	9b03      	ldr	r3, [sp, #12]
 8006062:	4298      	cmp	r0, r3
 8006064:	bfb8      	it	lt
 8006066:	4618      	movlt	r0, r3
 8006068:	e7a4      	b.n	8005fb4 <_printf_i+0x168>
 800606a:	2301      	movs	r3, #1
 800606c:	4632      	mov	r2, r6
 800606e:	4649      	mov	r1, r9
 8006070:	4640      	mov	r0, r8
 8006072:	47d0      	blx	sl
 8006074:	3001      	adds	r0, #1
 8006076:	d09b      	beq.n	8005fb0 <_printf_i+0x164>
 8006078:	3501      	adds	r5, #1
 800607a:	68e3      	ldr	r3, [r4, #12]
 800607c:	9903      	ldr	r1, [sp, #12]
 800607e:	1a5b      	subs	r3, r3, r1
 8006080:	42ab      	cmp	r3, r5
 8006082:	dcf2      	bgt.n	800606a <_printf_i+0x21e>
 8006084:	e7eb      	b.n	800605e <_printf_i+0x212>
 8006086:	2500      	movs	r5, #0
 8006088:	f104 0619 	add.w	r6, r4, #25
 800608c:	e7f5      	b.n	800607a <_printf_i+0x22e>
 800608e:	bf00      	nop
 8006090:	08006a7f 	.word	0x08006a7f
 8006094:	08006a90 	.word	0x08006a90

08006098 <_sbrk_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d06      	ldr	r5, [pc, #24]	; (80060b4 <_sbrk_r+0x1c>)
 800609c:	2300      	movs	r3, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	f7fa fd94 	bl	8000bd0 <_sbrk>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_sbrk_r+0x1a>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_sbrk_r+0x1a>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20012eec 	.word	0x20012eec

080060b8 <__swbuf_r>:
 80060b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ba:	460e      	mov	r6, r1
 80060bc:	4614      	mov	r4, r2
 80060be:	4605      	mov	r5, r0
 80060c0:	b118      	cbz	r0, 80060ca <__swbuf_r+0x12>
 80060c2:	6983      	ldr	r3, [r0, #24]
 80060c4:	b90b      	cbnz	r3, 80060ca <__swbuf_r+0x12>
 80060c6:	f000 f9d9 	bl	800647c <__sinit>
 80060ca:	4b21      	ldr	r3, [pc, #132]	; (8006150 <__swbuf_r+0x98>)
 80060cc:	429c      	cmp	r4, r3
 80060ce:	d12b      	bne.n	8006128 <__swbuf_r+0x70>
 80060d0:	686c      	ldr	r4, [r5, #4]
 80060d2:	69a3      	ldr	r3, [r4, #24]
 80060d4:	60a3      	str	r3, [r4, #8]
 80060d6:	89a3      	ldrh	r3, [r4, #12]
 80060d8:	071a      	lsls	r2, r3, #28
 80060da:	d52f      	bpl.n	800613c <__swbuf_r+0x84>
 80060dc:	6923      	ldr	r3, [r4, #16]
 80060de:	b36b      	cbz	r3, 800613c <__swbuf_r+0x84>
 80060e0:	6923      	ldr	r3, [r4, #16]
 80060e2:	6820      	ldr	r0, [r4, #0]
 80060e4:	1ac0      	subs	r0, r0, r3
 80060e6:	6963      	ldr	r3, [r4, #20]
 80060e8:	b2f6      	uxtb	r6, r6
 80060ea:	4283      	cmp	r3, r0
 80060ec:	4637      	mov	r7, r6
 80060ee:	dc04      	bgt.n	80060fa <__swbuf_r+0x42>
 80060f0:	4621      	mov	r1, r4
 80060f2:	4628      	mov	r0, r5
 80060f4:	f000 f92e 	bl	8006354 <_fflush_r>
 80060f8:	bb30      	cbnz	r0, 8006148 <__swbuf_r+0x90>
 80060fa:	68a3      	ldr	r3, [r4, #8]
 80060fc:	3b01      	subs	r3, #1
 80060fe:	60a3      	str	r3, [r4, #8]
 8006100:	6823      	ldr	r3, [r4, #0]
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	6022      	str	r2, [r4, #0]
 8006106:	701e      	strb	r6, [r3, #0]
 8006108:	6963      	ldr	r3, [r4, #20]
 800610a:	3001      	adds	r0, #1
 800610c:	4283      	cmp	r3, r0
 800610e:	d004      	beq.n	800611a <__swbuf_r+0x62>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	07db      	lsls	r3, r3, #31
 8006114:	d506      	bpl.n	8006124 <__swbuf_r+0x6c>
 8006116:	2e0a      	cmp	r6, #10
 8006118:	d104      	bne.n	8006124 <__swbuf_r+0x6c>
 800611a:	4621      	mov	r1, r4
 800611c:	4628      	mov	r0, r5
 800611e:	f000 f919 	bl	8006354 <_fflush_r>
 8006122:	b988      	cbnz	r0, 8006148 <__swbuf_r+0x90>
 8006124:	4638      	mov	r0, r7
 8006126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006128:	4b0a      	ldr	r3, [pc, #40]	; (8006154 <__swbuf_r+0x9c>)
 800612a:	429c      	cmp	r4, r3
 800612c:	d101      	bne.n	8006132 <__swbuf_r+0x7a>
 800612e:	68ac      	ldr	r4, [r5, #8]
 8006130:	e7cf      	b.n	80060d2 <__swbuf_r+0x1a>
 8006132:	4b09      	ldr	r3, [pc, #36]	; (8006158 <__swbuf_r+0xa0>)
 8006134:	429c      	cmp	r4, r3
 8006136:	bf08      	it	eq
 8006138:	68ec      	ldreq	r4, [r5, #12]
 800613a:	e7ca      	b.n	80060d2 <__swbuf_r+0x1a>
 800613c:	4621      	mov	r1, r4
 800613e:	4628      	mov	r0, r5
 8006140:	f000 f80c 	bl	800615c <__swsetup_r>
 8006144:	2800      	cmp	r0, #0
 8006146:	d0cb      	beq.n	80060e0 <__swbuf_r+0x28>
 8006148:	f04f 37ff 	mov.w	r7, #4294967295
 800614c:	e7ea      	b.n	8006124 <__swbuf_r+0x6c>
 800614e:	bf00      	nop
 8006150:	08006ac4 	.word	0x08006ac4
 8006154:	08006ae4 	.word	0x08006ae4
 8006158:	08006aa4 	.word	0x08006aa4

0800615c <__swsetup_r>:
 800615c:	4b32      	ldr	r3, [pc, #200]	; (8006228 <__swsetup_r+0xcc>)
 800615e:	b570      	push	{r4, r5, r6, lr}
 8006160:	681d      	ldr	r5, [r3, #0]
 8006162:	4606      	mov	r6, r0
 8006164:	460c      	mov	r4, r1
 8006166:	b125      	cbz	r5, 8006172 <__swsetup_r+0x16>
 8006168:	69ab      	ldr	r3, [r5, #24]
 800616a:	b913      	cbnz	r3, 8006172 <__swsetup_r+0x16>
 800616c:	4628      	mov	r0, r5
 800616e:	f000 f985 	bl	800647c <__sinit>
 8006172:	4b2e      	ldr	r3, [pc, #184]	; (800622c <__swsetup_r+0xd0>)
 8006174:	429c      	cmp	r4, r3
 8006176:	d10f      	bne.n	8006198 <__swsetup_r+0x3c>
 8006178:	686c      	ldr	r4, [r5, #4]
 800617a:	89a3      	ldrh	r3, [r4, #12]
 800617c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006180:	0719      	lsls	r1, r3, #28
 8006182:	d42c      	bmi.n	80061de <__swsetup_r+0x82>
 8006184:	06dd      	lsls	r5, r3, #27
 8006186:	d411      	bmi.n	80061ac <__swsetup_r+0x50>
 8006188:	2309      	movs	r3, #9
 800618a:	6033      	str	r3, [r6, #0]
 800618c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006190:	81a3      	strh	r3, [r4, #12]
 8006192:	f04f 30ff 	mov.w	r0, #4294967295
 8006196:	e03e      	b.n	8006216 <__swsetup_r+0xba>
 8006198:	4b25      	ldr	r3, [pc, #148]	; (8006230 <__swsetup_r+0xd4>)
 800619a:	429c      	cmp	r4, r3
 800619c:	d101      	bne.n	80061a2 <__swsetup_r+0x46>
 800619e:	68ac      	ldr	r4, [r5, #8]
 80061a0:	e7eb      	b.n	800617a <__swsetup_r+0x1e>
 80061a2:	4b24      	ldr	r3, [pc, #144]	; (8006234 <__swsetup_r+0xd8>)
 80061a4:	429c      	cmp	r4, r3
 80061a6:	bf08      	it	eq
 80061a8:	68ec      	ldreq	r4, [r5, #12]
 80061aa:	e7e6      	b.n	800617a <__swsetup_r+0x1e>
 80061ac:	0758      	lsls	r0, r3, #29
 80061ae:	d512      	bpl.n	80061d6 <__swsetup_r+0x7a>
 80061b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061b2:	b141      	cbz	r1, 80061c6 <__swsetup_r+0x6a>
 80061b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061b8:	4299      	cmp	r1, r3
 80061ba:	d002      	beq.n	80061c2 <__swsetup_r+0x66>
 80061bc:	4630      	mov	r0, r6
 80061be:	f7ff fa41 	bl	8005644 <_free_r>
 80061c2:	2300      	movs	r3, #0
 80061c4:	6363      	str	r3, [r4, #52]	; 0x34
 80061c6:	89a3      	ldrh	r3, [r4, #12]
 80061c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061cc:	81a3      	strh	r3, [r4, #12]
 80061ce:	2300      	movs	r3, #0
 80061d0:	6063      	str	r3, [r4, #4]
 80061d2:	6923      	ldr	r3, [r4, #16]
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	89a3      	ldrh	r3, [r4, #12]
 80061d8:	f043 0308 	orr.w	r3, r3, #8
 80061dc:	81a3      	strh	r3, [r4, #12]
 80061de:	6923      	ldr	r3, [r4, #16]
 80061e0:	b94b      	cbnz	r3, 80061f6 <__swsetup_r+0x9a>
 80061e2:	89a3      	ldrh	r3, [r4, #12]
 80061e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061ec:	d003      	beq.n	80061f6 <__swsetup_r+0x9a>
 80061ee:	4621      	mov	r1, r4
 80061f0:	4630      	mov	r0, r6
 80061f2:	f000 fa09 	bl	8006608 <__smakebuf_r>
 80061f6:	89a0      	ldrh	r0, [r4, #12]
 80061f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061fc:	f010 0301 	ands.w	r3, r0, #1
 8006200:	d00a      	beq.n	8006218 <__swsetup_r+0xbc>
 8006202:	2300      	movs	r3, #0
 8006204:	60a3      	str	r3, [r4, #8]
 8006206:	6963      	ldr	r3, [r4, #20]
 8006208:	425b      	negs	r3, r3
 800620a:	61a3      	str	r3, [r4, #24]
 800620c:	6923      	ldr	r3, [r4, #16]
 800620e:	b943      	cbnz	r3, 8006222 <__swsetup_r+0xc6>
 8006210:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006214:	d1ba      	bne.n	800618c <__swsetup_r+0x30>
 8006216:	bd70      	pop	{r4, r5, r6, pc}
 8006218:	0781      	lsls	r1, r0, #30
 800621a:	bf58      	it	pl
 800621c:	6963      	ldrpl	r3, [r4, #20]
 800621e:	60a3      	str	r3, [r4, #8]
 8006220:	e7f4      	b.n	800620c <__swsetup_r+0xb0>
 8006222:	2000      	movs	r0, #0
 8006224:	e7f7      	b.n	8006216 <__swsetup_r+0xba>
 8006226:	bf00      	nop
 8006228:	20000014 	.word	0x20000014
 800622c:	08006ac4 	.word	0x08006ac4
 8006230:	08006ae4 	.word	0x08006ae4
 8006234:	08006aa4 	.word	0x08006aa4

08006238 <abort>:
 8006238:	b508      	push	{r3, lr}
 800623a:	2006      	movs	r0, #6
 800623c:	f000 faa2 	bl	8006784 <raise>
 8006240:	2001      	movs	r0, #1
 8006242:	f7fa fc4d 	bl	8000ae0 <_exit>
	...

08006248 <__sflush_r>:
 8006248:	898a      	ldrh	r2, [r1, #12]
 800624a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800624e:	4605      	mov	r5, r0
 8006250:	0710      	lsls	r0, r2, #28
 8006252:	460c      	mov	r4, r1
 8006254:	d458      	bmi.n	8006308 <__sflush_r+0xc0>
 8006256:	684b      	ldr	r3, [r1, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	dc05      	bgt.n	8006268 <__sflush_r+0x20>
 800625c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800625e:	2b00      	cmp	r3, #0
 8006260:	dc02      	bgt.n	8006268 <__sflush_r+0x20>
 8006262:	2000      	movs	r0, #0
 8006264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006268:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800626a:	2e00      	cmp	r6, #0
 800626c:	d0f9      	beq.n	8006262 <__sflush_r+0x1a>
 800626e:	2300      	movs	r3, #0
 8006270:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006274:	682f      	ldr	r7, [r5, #0]
 8006276:	602b      	str	r3, [r5, #0]
 8006278:	d032      	beq.n	80062e0 <__sflush_r+0x98>
 800627a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800627c:	89a3      	ldrh	r3, [r4, #12]
 800627e:	075a      	lsls	r2, r3, #29
 8006280:	d505      	bpl.n	800628e <__sflush_r+0x46>
 8006282:	6863      	ldr	r3, [r4, #4]
 8006284:	1ac0      	subs	r0, r0, r3
 8006286:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006288:	b10b      	cbz	r3, 800628e <__sflush_r+0x46>
 800628a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800628c:	1ac0      	subs	r0, r0, r3
 800628e:	2300      	movs	r3, #0
 8006290:	4602      	mov	r2, r0
 8006292:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006294:	6a21      	ldr	r1, [r4, #32]
 8006296:	4628      	mov	r0, r5
 8006298:	47b0      	blx	r6
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	d106      	bne.n	80062ae <__sflush_r+0x66>
 80062a0:	6829      	ldr	r1, [r5, #0]
 80062a2:	291d      	cmp	r1, #29
 80062a4:	d82c      	bhi.n	8006300 <__sflush_r+0xb8>
 80062a6:	4a2a      	ldr	r2, [pc, #168]	; (8006350 <__sflush_r+0x108>)
 80062a8:	40ca      	lsrs	r2, r1
 80062aa:	07d6      	lsls	r6, r2, #31
 80062ac:	d528      	bpl.n	8006300 <__sflush_r+0xb8>
 80062ae:	2200      	movs	r2, #0
 80062b0:	6062      	str	r2, [r4, #4]
 80062b2:	04d9      	lsls	r1, r3, #19
 80062b4:	6922      	ldr	r2, [r4, #16]
 80062b6:	6022      	str	r2, [r4, #0]
 80062b8:	d504      	bpl.n	80062c4 <__sflush_r+0x7c>
 80062ba:	1c42      	adds	r2, r0, #1
 80062bc:	d101      	bne.n	80062c2 <__sflush_r+0x7a>
 80062be:	682b      	ldr	r3, [r5, #0]
 80062c0:	b903      	cbnz	r3, 80062c4 <__sflush_r+0x7c>
 80062c2:	6560      	str	r0, [r4, #84]	; 0x54
 80062c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80062c6:	602f      	str	r7, [r5, #0]
 80062c8:	2900      	cmp	r1, #0
 80062ca:	d0ca      	beq.n	8006262 <__sflush_r+0x1a>
 80062cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80062d0:	4299      	cmp	r1, r3
 80062d2:	d002      	beq.n	80062da <__sflush_r+0x92>
 80062d4:	4628      	mov	r0, r5
 80062d6:	f7ff f9b5 	bl	8005644 <_free_r>
 80062da:	2000      	movs	r0, #0
 80062dc:	6360      	str	r0, [r4, #52]	; 0x34
 80062de:	e7c1      	b.n	8006264 <__sflush_r+0x1c>
 80062e0:	6a21      	ldr	r1, [r4, #32]
 80062e2:	2301      	movs	r3, #1
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b0      	blx	r6
 80062e8:	1c41      	adds	r1, r0, #1
 80062ea:	d1c7      	bne.n	800627c <__sflush_r+0x34>
 80062ec:	682b      	ldr	r3, [r5, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0c4      	beq.n	800627c <__sflush_r+0x34>
 80062f2:	2b1d      	cmp	r3, #29
 80062f4:	d001      	beq.n	80062fa <__sflush_r+0xb2>
 80062f6:	2b16      	cmp	r3, #22
 80062f8:	d101      	bne.n	80062fe <__sflush_r+0xb6>
 80062fa:	602f      	str	r7, [r5, #0]
 80062fc:	e7b1      	b.n	8006262 <__sflush_r+0x1a>
 80062fe:	89a3      	ldrh	r3, [r4, #12]
 8006300:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006304:	81a3      	strh	r3, [r4, #12]
 8006306:	e7ad      	b.n	8006264 <__sflush_r+0x1c>
 8006308:	690f      	ldr	r7, [r1, #16]
 800630a:	2f00      	cmp	r7, #0
 800630c:	d0a9      	beq.n	8006262 <__sflush_r+0x1a>
 800630e:	0793      	lsls	r3, r2, #30
 8006310:	680e      	ldr	r6, [r1, #0]
 8006312:	bf08      	it	eq
 8006314:	694b      	ldreq	r3, [r1, #20]
 8006316:	600f      	str	r7, [r1, #0]
 8006318:	bf18      	it	ne
 800631a:	2300      	movne	r3, #0
 800631c:	eba6 0807 	sub.w	r8, r6, r7
 8006320:	608b      	str	r3, [r1, #8]
 8006322:	f1b8 0f00 	cmp.w	r8, #0
 8006326:	dd9c      	ble.n	8006262 <__sflush_r+0x1a>
 8006328:	6a21      	ldr	r1, [r4, #32]
 800632a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800632c:	4643      	mov	r3, r8
 800632e:	463a      	mov	r2, r7
 8006330:	4628      	mov	r0, r5
 8006332:	47b0      	blx	r6
 8006334:	2800      	cmp	r0, #0
 8006336:	dc06      	bgt.n	8006346 <__sflush_r+0xfe>
 8006338:	89a3      	ldrh	r3, [r4, #12]
 800633a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633e:	81a3      	strh	r3, [r4, #12]
 8006340:	f04f 30ff 	mov.w	r0, #4294967295
 8006344:	e78e      	b.n	8006264 <__sflush_r+0x1c>
 8006346:	4407      	add	r7, r0
 8006348:	eba8 0800 	sub.w	r8, r8, r0
 800634c:	e7e9      	b.n	8006322 <__sflush_r+0xda>
 800634e:	bf00      	nop
 8006350:	20400001 	.word	0x20400001

08006354 <_fflush_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	4605      	mov	r5, r0
 800635a:	460c      	mov	r4, r1
 800635c:	b913      	cbnz	r3, 8006364 <_fflush_r+0x10>
 800635e:	2500      	movs	r5, #0
 8006360:	4628      	mov	r0, r5
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	b118      	cbz	r0, 800636e <_fflush_r+0x1a>
 8006366:	6983      	ldr	r3, [r0, #24]
 8006368:	b90b      	cbnz	r3, 800636e <_fflush_r+0x1a>
 800636a:	f000 f887 	bl	800647c <__sinit>
 800636e:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <_fflush_r+0x6c>)
 8006370:	429c      	cmp	r4, r3
 8006372:	d11b      	bne.n	80063ac <_fflush_r+0x58>
 8006374:	686c      	ldr	r4, [r5, #4]
 8006376:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d0ef      	beq.n	800635e <_fflush_r+0xa>
 800637e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006380:	07d0      	lsls	r0, r2, #31
 8006382:	d404      	bmi.n	800638e <_fflush_r+0x3a>
 8006384:	0599      	lsls	r1, r3, #22
 8006386:	d402      	bmi.n	800638e <_fflush_r+0x3a>
 8006388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800638a:	f000 f915 	bl	80065b8 <__retarget_lock_acquire_recursive>
 800638e:	4628      	mov	r0, r5
 8006390:	4621      	mov	r1, r4
 8006392:	f7ff ff59 	bl	8006248 <__sflush_r>
 8006396:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006398:	07da      	lsls	r2, r3, #31
 800639a:	4605      	mov	r5, r0
 800639c:	d4e0      	bmi.n	8006360 <_fflush_r+0xc>
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	059b      	lsls	r3, r3, #22
 80063a2:	d4dd      	bmi.n	8006360 <_fflush_r+0xc>
 80063a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063a6:	f000 f908 	bl	80065ba <__retarget_lock_release_recursive>
 80063aa:	e7d9      	b.n	8006360 <_fflush_r+0xc>
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <_fflush_r+0x70>)
 80063ae:	429c      	cmp	r4, r3
 80063b0:	d101      	bne.n	80063b6 <_fflush_r+0x62>
 80063b2:	68ac      	ldr	r4, [r5, #8]
 80063b4:	e7df      	b.n	8006376 <_fflush_r+0x22>
 80063b6:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <_fflush_r+0x74>)
 80063b8:	429c      	cmp	r4, r3
 80063ba:	bf08      	it	eq
 80063bc:	68ec      	ldreq	r4, [r5, #12]
 80063be:	e7da      	b.n	8006376 <_fflush_r+0x22>
 80063c0:	08006ac4 	.word	0x08006ac4
 80063c4:	08006ae4 	.word	0x08006ae4
 80063c8:	08006aa4 	.word	0x08006aa4

080063cc <std>:
 80063cc:	2300      	movs	r3, #0
 80063ce:	b510      	push	{r4, lr}
 80063d0:	4604      	mov	r4, r0
 80063d2:	e9c0 3300 	strd	r3, r3, [r0]
 80063d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063da:	6083      	str	r3, [r0, #8]
 80063dc:	8181      	strh	r1, [r0, #12]
 80063de:	6643      	str	r3, [r0, #100]	; 0x64
 80063e0:	81c2      	strh	r2, [r0, #14]
 80063e2:	6183      	str	r3, [r0, #24]
 80063e4:	4619      	mov	r1, r3
 80063e6:	2208      	movs	r2, #8
 80063e8:	305c      	adds	r0, #92	; 0x5c
 80063ea:	f7ff f88d 	bl	8005508 <memset>
 80063ee:	4b05      	ldr	r3, [pc, #20]	; (8006404 <std+0x38>)
 80063f0:	6263      	str	r3, [r4, #36]	; 0x24
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <std+0x3c>)
 80063f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80063f6:	4b05      	ldr	r3, [pc, #20]	; (800640c <std+0x40>)
 80063f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063fa:	4b05      	ldr	r3, [pc, #20]	; (8006410 <std+0x44>)
 80063fc:	6224      	str	r4, [r4, #32]
 80063fe:	6323      	str	r3, [r4, #48]	; 0x30
 8006400:	bd10      	pop	{r4, pc}
 8006402:	bf00      	nop
 8006404:	080067bd 	.word	0x080067bd
 8006408:	080067df 	.word	0x080067df
 800640c:	08006817 	.word	0x08006817
 8006410:	0800683b 	.word	0x0800683b

08006414 <_cleanup_r>:
 8006414:	4901      	ldr	r1, [pc, #4]	; (800641c <_cleanup_r+0x8>)
 8006416:	f000 b8af 	b.w	8006578 <_fwalk_reent>
 800641a:	bf00      	nop
 800641c:	08006355 	.word	0x08006355

08006420 <__sfmoreglue>:
 8006420:	b570      	push	{r4, r5, r6, lr}
 8006422:	2268      	movs	r2, #104	; 0x68
 8006424:	1e4d      	subs	r5, r1, #1
 8006426:	4355      	muls	r5, r2
 8006428:	460e      	mov	r6, r1
 800642a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800642e:	f7ff f975 	bl	800571c <_malloc_r>
 8006432:	4604      	mov	r4, r0
 8006434:	b140      	cbz	r0, 8006448 <__sfmoreglue+0x28>
 8006436:	2100      	movs	r1, #0
 8006438:	e9c0 1600 	strd	r1, r6, [r0]
 800643c:	300c      	adds	r0, #12
 800643e:	60a0      	str	r0, [r4, #8]
 8006440:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006444:	f7ff f860 	bl	8005508 <memset>
 8006448:	4620      	mov	r0, r4
 800644a:	bd70      	pop	{r4, r5, r6, pc}

0800644c <__sfp_lock_acquire>:
 800644c:	4801      	ldr	r0, [pc, #4]	; (8006454 <__sfp_lock_acquire+0x8>)
 800644e:	f000 b8b3 	b.w	80065b8 <__retarget_lock_acquire_recursive>
 8006452:	bf00      	nop
 8006454:	20012ee9 	.word	0x20012ee9

08006458 <__sfp_lock_release>:
 8006458:	4801      	ldr	r0, [pc, #4]	; (8006460 <__sfp_lock_release+0x8>)
 800645a:	f000 b8ae 	b.w	80065ba <__retarget_lock_release_recursive>
 800645e:	bf00      	nop
 8006460:	20012ee9 	.word	0x20012ee9

08006464 <__sinit_lock_acquire>:
 8006464:	4801      	ldr	r0, [pc, #4]	; (800646c <__sinit_lock_acquire+0x8>)
 8006466:	f000 b8a7 	b.w	80065b8 <__retarget_lock_acquire_recursive>
 800646a:	bf00      	nop
 800646c:	20012eea 	.word	0x20012eea

08006470 <__sinit_lock_release>:
 8006470:	4801      	ldr	r0, [pc, #4]	; (8006478 <__sinit_lock_release+0x8>)
 8006472:	f000 b8a2 	b.w	80065ba <__retarget_lock_release_recursive>
 8006476:	bf00      	nop
 8006478:	20012eea 	.word	0x20012eea

0800647c <__sinit>:
 800647c:	b510      	push	{r4, lr}
 800647e:	4604      	mov	r4, r0
 8006480:	f7ff fff0 	bl	8006464 <__sinit_lock_acquire>
 8006484:	69a3      	ldr	r3, [r4, #24]
 8006486:	b11b      	cbz	r3, 8006490 <__sinit+0x14>
 8006488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648c:	f7ff bff0 	b.w	8006470 <__sinit_lock_release>
 8006490:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006494:	6523      	str	r3, [r4, #80]	; 0x50
 8006496:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <__sinit+0x68>)
 8006498:	4a13      	ldr	r2, [pc, #76]	; (80064e8 <__sinit+0x6c>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	62a2      	str	r2, [r4, #40]	; 0x28
 800649e:	42a3      	cmp	r3, r4
 80064a0:	bf04      	itt	eq
 80064a2:	2301      	moveq	r3, #1
 80064a4:	61a3      	streq	r3, [r4, #24]
 80064a6:	4620      	mov	r0, r4
 80064a8:	f000 f820 	bl	80064ec <__sfp>
 80064ac:	6060      	str	r0, [r4, #4]
 80064ae:	4620      	mov	r0, r4
 80064b0:	f000 f81c 	bl	80064ec <__sfp>
 80064b4:	60a0      	str	r0, [r4, #8]
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 f818 	bl	80064ec <__sfp>
 80064bc:	2200      	movs	r2, #0
 80064be:	60e0      	str	r0, [r4, #12]
 80064c0:	2104      	movs	r1, #4
 80064c2:	6860      	ldr	r0, [r4, #4]
 80064c4:	f7ff ff82 	bl	80063cc <std>
 80064c8:	68a0      	ldr	r0, [r4, #8]
 80064ca:	2201      	movs	r2, #1
 80064cc:	2109      	movs	r1, #9
 80064ce:	f7ff ff7d 	bl	80063cc <std>
 80064d2:	68e0      	ldr	r0, [r4, #12]
 80064d4:	2202      	movs	r2, #2
 80064d6:	2112      	movs	r1, #18
 80064d8:	f7ff ff78 	bl	80063cc <std>
 80064dc:	2301      	movs	r3, #1
 80064de:	61a3      	str	r3, [r4, #24]
 80064e0:	e7d2      	b.n	8006488 <__sinit+0xc>
 80064e2:	bf00      	nop
 80064e4:	080069bc 	.word	0x080069bc
 80064e8:	08006415 	.word	0x08006415

080064ec <__sfp>:
 80064ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ee:	4607      	mov	r7, r0
 80064f0:	f7ff ffac 	bl	800644c <__sfp_lock_acquire>
 80064f4:	4b1e      	ldr	r3, [pc, #120]	; (8006570 <__sfp+0x84>)
 80064f6:	681e      	ldr	r6, [r3, #0]
 80064f8:	69b3      	ldr	r3, [r6, #24]
 80064fa:	b913      	cbnz	r3, 8006502 <__sfp+0x16>
 80064fc:	4630      	mov	r0, r6
 80064fe:	f7ff ffbd 	bl	800647c <__sinit>
 8006502:	3648      	adds	r6, #72	; 0x48
 8006504:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006508:	3b01      	subs	r3, #1
 800650a:	d503      	bpl.n	8006514 <__sfp+0x28>
 800650c:	6833      	ldr	r3, [r6, #0]
 800650e:	b30b      	cbz	r3, 8006554 <__sfp+0x68>
 8006510:	6836      	ldr	r6, [r6, #0]
 8006512:	e7f7      	b.n	8006504 <__sfp+0x18>
 8006514:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006518:	b9d5      	cbnz	r5, 8006550 <__sfp+0x64>
 800651a:	4b16      	ldr	r3, [pc, #88]	; (8006574 <__sfp+0x88>)
 800651c:	60e3      	str	r3, [r4, #12]
 800651e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006522:	6665      	str	r5, [r4, #100]	; 0x64
 8006524:	f000 f847 	bl	80065b6 <__retarget_lock_init_recursive>
 8006528:	f7ff ff96 	bl	8006458 <__sfp_lock_release>
 800652c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006530:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006534:	6025      	str	r5, [r4, #0]
 8006536:	61a5      	str	r5, [r4, #24]
 8006538:	2208      	movs	r2, #8
 800653a:	4629      	mov	r1, r5
 800653c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006540:	f7fe ffe2 	bl	8005508 <memset>
 8006544:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006548:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800654c:	4620      	mov	r0, r4
 800654e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006550:	3468      	adds	r4, #104	; 0x68
 8006552:	e7d9      	b.n	8006508 <__sfp+0x1c>
 8006554:	2104      	movs	r1, #4
 8006556:	4638      	mov	r0, r7
 8006558:	f7ff ff62 	bl	8006420 <__sfmoreglue>
 800655c:	4604      	mov	r4, r0
 800655e:	6030      	str	r0, [r6, #0]
 8006560:	2800      	cmp	r0, #0
 8006562:	d1d5      	bne.n	8006510 <__sfp+0x24>
 8006564:	f7ff ff78 	bl	8006458 <__sfp_lock_release>
 8006568:	230c      	movs	r3, #12
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	e7ee      	b.n	800654c <__sfp+0x60>
 800656e:	bf00      	nop
 8006570:	080069bc 	.word	0x080069bc
 8006574:	ffff0001 	.word	0xffff0001

08006578 <_fwalk_reent>:
 8006578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800657c:	4606      	mov	r6, r0
 800657e:	4688      	mov	r8, r1
 8006580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006584:	2700      	movs	r7, #0
 8006586:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800658a:	f1b9 0901 	subs.w	r9, r9, #1
 800658e:	d505      	bpl.n	800659c <_fwalk_reent+0x24>
 8006590:	6824      	ldr	r4, [r4, #0]
 8006592:	2c00      	cmp	r4, #0
 8006594:	d1f7      	bne.n	8006586 <_fwalk_reent+0xe>
 8006596:	4638      	mov	r0, r7
 8006598:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800659c:	89ab      	ldrh	r3, [r5, #12]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d907      	bls.n	80065b2 <_fwalk_reent+0x3a>
 80065a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80065a6:	3301      	adds	r3, #1
 80065a8:	d003      	beq.n	80065b2 <_fwalk_reent+0x3a>
 80065aa:	4629      	mov	r1, r5
 80065ac:	4630      	mov	r0, r6
 80065ae:	47c0      	blx	r8
 80065b0:	4307      	orrs	r7, r0
 80065b2:	3568      	adds	r5, #104	; 0x68
 80065b4:	e7e9      	b.n	800658a <_fwalk_reent+0x12>

080065b6 <__retarget_lock_init_recursive>:
 80065b6:	4770      	bx	lr

080065b8 <__retarget_lock_acquire_recursive>:
 80065b8:	4770      	bx	lr

080065ba <__retarget_lock_release_recursive>:
 80065ba:	4770      	bx	lr

080065bc <__swhatbuf_r>:
 80065bc:	b570      	push	{r4, r5, r6, lr}
 80065be:	460e      	mov	r6, r1
 80065c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065c4:	2900      	cmp	r1, #0
 80065c6:	b096      	sub	sp, #88	; 0x58
 80065c8:	4614      	mov	r4, r2
 80065ca:	461d      	mov	r5, r3
 80065cc:	da08      	bge.n	80065e0 <__swhatbuf_r+0x24>
 80065ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	602a      	str	r2, [r5, #0]
 80065d6:	061a      	lsls	r2, r3, #24
 80065d8:	d410      	bmi.n	80065fc <__swhatbuf_r+0x40>
 80065da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065de:	e00e      	b.n	80065fe <__swhatbuf_r+0x42>
 80065e0:	466a      	mov	r2, sp
 80065e2:	f000 f951 	bl	8006888 <_fstat_r>
 80065e6:	2800      	cmp	r0, #0
 80065e8:	dbf1      	blt.n	80065ce <__swhatbuf_r+0x12>
 80065ea:	9a01      	ldr	r2, [sp, #4]
 80065ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80065f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80065f4:	425a      	negs	r2, r3
 80065f6:	415a      	adcs	r2, r3
 80065f8:	602a      	str	r2, [r5, #0]
 80065fa:	e7ee      	b.n	80065da <__swhatbuf_r+0x1e>
 80065fc:	2340      	movs	r3, #64	; 0x40
 80065fe:	2000      	movs	r0, #0
 8006600:	6023      	str	r3, [r4, #0]
 8006602:	b016      	add	sp, #88	; 0x58
 8006604:	bd70      	pop	{r4, r5, r6, pc}
	...

08006608 <__smakebuf_r>:
 8006608:	898b      	ldrh	r3, [r1, #12]
 800660a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800660c:	079d      	lsls	r5, r3, #30
 800660e:	4606      	mov	r6, r0
 8006610:	460c      	mov	r4, r1
 8006612:	d507      	bpl.n	8006624 <__smakebuf_r+0x1c>
 8006614:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	6123      	str	r3, [r4, #16]
 800661c:	2301      	movs	r3, #1
 800661e:	6163      	str	r3, [r4, #20]
 8006620:	b002      	add	sp, #8
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	ab01      	add	r3, sp, #4
 8006626:	466a      	mov	r2, sp
 8006628:	f7ff ffc8 	bl	80065bc <__swhatbuf_r>
 800662c:	9900      	ldr	r1, [sp, #0]
 800662e:	4605      	mov	r5, r0
 8006630:	4630      	mov	r0, r6
 8006632:	f7ff f873 	bl	800571c <_malloc_r>
 8006636:	b948      	cbnz	r0, 800664c <__smakebuf_r+0x44>
 8006638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800663c:	059a      	lsls	r2, r3, #22
 800663e:	d4ef      	bmi.n	8006620 <__smakebuf_r+0x18>
 8006640:	f023 0303 	bic.w	r3, r3, #3
 8006644:	f043 0302 	orr.w	r3, r3, #2
 8006648:	81a3      	strh	r3, [r4, #12]
 800664a:	e7e3      	b.n	8006614 <__smakebuf_r+0xc>
 800664c:	4b0d      	ldr	r3, [pc, #52]	; (8006684 <__smakebuf_r+0x7c>)
 800664e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006650:	89a3      	ldrh	r3, [r4, #12]
 8006652:	6020      	str	r0, [r4, #0]
 8006654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006658:	81a3      	strh	r3, [r4, #12]
 800665a:	9b00      	ldr	r3, [sp, #0]
 800665c:	6163      	str	r3, [r4, #20]
 800665e:	9b01      	ldr	r3, [sp, #4]
 8006660:	6120      	str	r0, [r4, #16]
 8006662:	b15b      	cbz	r3, 800667c <__smakebuf_r+0x74>
 8006664:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006668:	4630      	mov	r0, r6
 800666a:	f000 f91f 	bl	80068ac <_isatty_r>
 800666e:	b128      	cbz	r0, 800667c <__smakebuf_r+0x74>
 8006670:	89a3      	ldrh	r3, [r4, #12]
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	81a3      	strh	r3, [r4, #12]
 800667c:	89a0      	ldrh	r0, [r4, #12]
 800667e:	4305      	orrs	r5, r0
 8006680:	81a5      	strh	r5, [r4, #12]
 8006682:	e7cd      	b.n	8006620 <__smakebuf_r+0x18>
 8006684:	08006415 	.word	0x08006415

08006688 <memmove>:
 8006688:	4288      	cmp	r0, r1
 800668a:	b510      	push	{r4, lr}
 800668c:	eb01 0402 	add.w	r4, r1, r2
 8006690:	d902      	bls.n	8006698 <memmove+0x10>
 8006692:	4284      	cmp	r4, r0
 8006694:	4623      	mov	r3, r4
 8006696:	d807      	bhi.n	80066a8 <memmove+0x20>
 8006698:	1e43      	subs	r3, r0, #1
 800669a:	42a1      	cmp	r1, r4
 800669c:	d008      	beq.n	80066b0 <memmove+0x28>
 800669e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066a6:	e7f8      	b.n	800669a <memmove+0x12>
 80066a8:	4402      	add	r2, r0
 80066aa:	4601      	mov	r1, r0
 80066ac:	428a      	cmp	r2, r1
 80066ae:	d100      	bne.n	80066b2 <memmove+0x2a>
 80066b0:	bd10      	pop	{r4, pc}
 80066b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066ba:	e7f7      	b.n	80066ac <memmove+0x24>

080066bc <__malloc_lock>:
 80066bc:	4801      	ldr	r0, [pc, #4]	; (80066c4 <__malloc_lock+0x8>)
 80066be:	f7ff bf7b 	b.w	80065b8 <__retarget_lock_acquire_recursive>
 80066c2:	bf00      	nop
 80066c4:	20012ee8 	.word	0x20012ee8

080066c8 <__malloc_unlock>:
 80066c8:	4801      	ldr	r0, [pc, #4]	; (80066d0 <__malloc_unlock+0x8>)
 80066ca:	f7ff bf76 	b.w	80065ba <__retarget_lock_release_recursive>
 80066ce:	bf00      	nop
 80066d0:	20012ee8 	.word	0x20012ee8

080066d4 <_realloc_r>:
 80066d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066d8:	4680      	mov	r8, r0
 80066da:	4614      	mov	r4, r2
 80066dc:	460e      	mov	r6, r1
 80066de:	b921      	cbnz	r1, 80066ea <_realloc_r+0x16>
 80066e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066e4:	4611      	mov	r1, r2
 80066e6:	f7ff b819 	b.w	800571c <_malloc_r>
 80066ea:	b92a      	cbnz	r2, 80066f8 <_realloc_r+0x24>
 80066ec:	f7fe ffaa 	bl	8005644 <_free_r>
 80066f0:	4625      	mov	r5, r4
 80066f2:	4628      	mov	r0, r5
 80066f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066f8:	f000 f8fa 	bl	80068f0 <_malloc_usable_size_r>
 80066fc:	4284      	cmp	r4, r0
 80066fe:	4607      	mov	r7, r0
 8006700:	d802      	bhi.n	8006708 <_realloc_r+0x34>
 8006702:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006706:	d812      	bhi.n	800672e <_realloc_r+0x5a>
 8006708:	4621      	mov	r1, r4
 800670a:	4640      	mov	r0, r8
 800670c:	f7ff f806 	bl	800571c <_malloc_r>
 8006710:	4605      	mov	r5, r0
 8006712:	2800      	cmp	r0, #0
 8006714:	d0ed      	beq.n	80066f2 <_realloc_r+0x1e>
 8006716:	42bc      	cmp	r4, r7
 8006718:	4622      	mov	r2, r4
 800671a:	4631      	mov	r1, r6
 800671c:	bf28      	it	cs
 800671e:	463a      	movcs	r2, r7
 8006720:	f7fe fee4 	bl	80054ec <memcpy>
 8006724:	4631      	mov	r1, r6
 8006726:	4640      	mov	r0, r8
 8006728:	f7fe ff8c 	bl	8005644 <_free_r>
 800672c:	e7e1      	b.n	80066f2 <_realloc_r+0x1e>
 800672e:	4635      	mov	r5, r6
 8006730:	e7df      	b.n	80066f2 <_realloc_r+0x1e>

08006732 <_raise_r>:
 8006732:	291f      	cmp	r1, #31
 8006734:	b538      	push	{r3, r4, r5, lr}
 8006736:	4604      	mov	r4, r0
 8006738:	460d      	mov	r5, r1
 800673a:	d904      	bls.n	8006746 <_raise_r+0x14>
 800673c:	2316      	movs	r3, #22
 800673e:	6003      	str	r3, [r0, #0]
 8006740:	f04f 30ff 	mov.w	r0, #4294967295
 8006744:	bd38      	pop	{r3, r4, r5, pc}
 8006746:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006748:	b112      	cbz	r2, 8006750 <_raise_r+0x1e>
 800674a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800674e:	b94b      	cbnz	r3, 8006764 <_raise_r+0x32>
 8006750:	4620      	mov	r0, r4
 8006752:	f000 f831 	bl	80067b8 <_getpid_r>
 8006756:	462a      	mov	r2, r5
 8006758:	4601      	mov	r1, r0
 800675a:	4620      	mov	r0, r4
 800675c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006760:	f000 b818 	b.w	8006794 <_kill_r>
 8006764:	2b01      	cmp	r3, #1
 8006766:	d00a      	beq.n	800677e <_raise_r+0x4c>
 8006768:	1c59      	adds	r1, r3, #1
 800676a:	d103      	bne.n	8006774 <_raise_r+0x42>
 800676c:	2316      	movs	r3, #22
 800676e:	6003      	str	r3, [r0, #0]
 8006770:	2001      	movs	r0, #1
 8006772:	e7e7      	b.n	8006744 <_raise_r+0x12>
 8006774:	2400      	movs	r4, #0
 8006776:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800677a:	4628      	mov	r0, r5
 800677c:	4798      	blx	r3
 800677e:	2000      	movs	r0, #0
 8006780:	e7e0      	b.n	8006744 <_raise_r+0x12>
	...

08006784 <raise>:
 8006784:	4b02      	ldr	r3, [pc, #8]	; (8006790 <raise+0xc>)
 8006786:	4601      	mov	r1, r0
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	f7ff bfd2 	b.w	8006732 <_raise_r>
 800678e:	bf00      	nop
 8006790:	20000014 	.word	0x20000014

08006794 <_kill_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d07      	ldr	r5, [pc, #28]	; (80067b4 <_kill_r+0x20>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	602b      	str	r3, [r5, #0]
 80067a2:	f7fa f98d 	bl	8000ac0 <_kill>
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d102      	bne.n	80067b0 <_kill_r+0x1c>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	b103      	cbz	r3, 80067b0 <_kill_r+0x1c>
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	bd38      	pop	{r3, r4, r5, pc}
 80067b2:	bf00      	nop
 80067b4:	20012eec 	.word	0x20012eec

080067b8 <_getpid_r>:
 80067b8:	f7fa b97a 	b.w	8000ab0 <_getpid>

080067bc <__sread>:
 80067bc:	b510      	push	{r4, lr}
 80067be:	460c      	mov	r4, r1
 80067c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c4:	f000 f89c 	bl	8006900 <_read_r>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	bfab      	itete	ge
 80067cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80067ce:	89a3      	ldrhlt	r3, [r4, #12]
 80067d0:	181b      	addge	r3, r3, r0
 80067d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80067d6:	bfac      	ite	ge
 80067d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80067da:	81a3      	strhlt	r3, [r4, #12]
 80067dc:	bd10      	pop	{r4, pc}

080067de <__swrite>:
 80067de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e2:	461f      	mov	r7, r3
 80067e4:	898b      	ldrh	r3, [r1, #12]
 80067e6:	05db      	lsls	r3, r3, #23
 80067e8:	4605      	mov	r5, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	4616      	mov	r6, r2
 80067ee:	d505      	bpl.n	80067fc <__swrite+0x1e>
 80067f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f4:	2302      	movs	r3, #2
 80067f6:	2200      	movs	r2, #0
 80067f8:	f000 f868 	bl	80068cc <_lseek_r>
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	4632      	mov	r2, r6
 800680a:	463b      	mov	r3, r7
 800680c:	4628      	mov	r0, r5
 800680e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006812:	f000 b817 	b.w	8006844 <_write_r>

08006816 <__sseek>:
 8006816:	b510      	push	{r4, lr}
 8006818:	460c      	mov	r4, r1
 800681a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681e:	f000 f855 	bl	80068cc <_lseek_r>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	bf15      	itete	ne
 8006828:	6560      	strne	r0, [r4, #84]	; 0x54
 800682a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800682e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006832:	81a3      	strheq	r3, [r4, #12]
 8006834:	bf18      	it	ne
 8006836:	81a3      	strhne	r3, [r4, #12]
 8006838:	bd10      	pop	{r4, pc}

0800683a <__sclose>:
 800683a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683e:	f000 b813 	b.w	8006868 <_close_r>
	...

08006844 <_write_r>:
 8006844:	b538      	push	{r3, r4, r5, lr}
 8006846:	4d07      	ldr	r5, [pc, #28]	; (8006864 <_write_r+0x20>)
 8006848:	4604      	mov	r4, r0
 800684a:	4608      	mov	r0, r1
 800684c:	4611      	mov	r1, r2
 800684e:	2200      	movs	r2, #0
 8006850:	602a      	str	r2, [r5, #0]
 8006852:	461a      	mov	r2, r3
 8006854:	f7fa f96b 	bl	8000b2e <_write>
 8006858:	1c43      	adds	r3, r0, #1
 800685a:	d102      	bne.n	8006862 <_write_r+0x1e>
 800685c:	682b      	ldr	r3, [r5, #0]
 800685e:	b103      	cbz	r3, 8006862 <_write_r+0x1e>
 8006860:	6023      	str	r3, [r4, #0]
 8006862:	bd38      	pop	{r3, r4, r5, pc}
 8006864:	20012eec 	.word	0x20012eec

08006868 <_close_r>:
 8006868:	b538      	push	{r3, r4, r5, lr}
 800686a:	4d06      	ldr	r5, [pc, #24]	; (8006884 <_close_r+0x1c>)
 800686c:	2300      	movs	r3, #0
 800686e:	4604      	mov	r4, r0
 8006870:	4608      	mov	r0, r1
 8006872:	602b      	str	r3, [r5, #0]
 8006874:	f7fa f977 	bl	8000b66 <_close>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_close_r+0x1a>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	b103      	cbz	r3, 8006882 <_close_r+0x1a>
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	20012eec 	.word	0x20012eec

08006888 <_fstat_r>:
 8006888:	b538      	push	{r3, r4, r5, lr}
 800688a:	4d07      	ldr	r5, [pc, #28]	; (80068a8 <_fstat_r+0x20>)
 800688c:	2300      	movs	r3, #0
 800688e:	4604      	mov	r4, r0
 8006890:	4608      	mov	r0, r1
 8006892:	4611      	mov	r1, r2
 8006894:	602b      	str	r3, [r5, #0]
 8006896:	f7fa f972 	bl	8000b7e <_fstat>
 800689a:	1c43      	adds	r3, r0, #1
 800689c:	d102      	bne.n	80068a4 <_fstat_r+0x1c>
 800689e:	682b      	ldr	r3, [r5, #0]
 80068a0:	b103      	cbz	r3, 80068a4 <_fstat_r+0x1c>
 80068a2:	6023      	str	r3, [r4, #0]
 80068a4:	bd38      	pop	{r3, r4, r5, pc}
 80068a6:	bf00      	nop
 80068a8:	20012eec 	.word	0x20012eec

080068ac <_isatty_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4d06      	ldr	r5, [pc, #24]	; (80068c8 <_isatty_r+0x1c>)
 80068b0:	2300      	movs	r3, #0
 80068b2:	4604      	mov	r4, r0
 80068b4:	4608      	mov	r0, r1
 80068b6:	602b      	str	r3, [r5, #0]
 80068b8:	f7fa f971 	bl	8000b9e <_isatty>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_isatty_r+0x1a>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_isatty_r+0x1a>
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	20012eec 	.word	0x20012eec

080068cc <_lseek_r>:
 80068cc:	b538      	push	{r3, r4, r5, lr}
 80068ce:	4d07      	ldr	r5, [pc, #28]	; (80068ec <_lseek_r+0x20>)
 80068d0:	4604      	mov	r4, r0
 80068d2:	4608      	mov	r0, r1
 80068d4:	4611      	mov	r1, r2
 80068d6:	2200      	movs	r2, #0
 80068d8:	602a      	str	r2, [r5, #0]
 80068da:	461a      	mov	r2, r3
 80068dc:	f7fa f96a 	bl	8000bb4 <_lseek>
 80068e0:	1c43      	adds	r3, r0, #1
 80068e2:	d102      	bne.n	80068ea <_lseek_r+0x1e>
 80068e4:	682b      	ldr	r3, [r5, #0]
 80068e6:	b103      	cbz	r3, 80068ea <_lseek_r+0x1e>
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	bd38      	pop	{r3, r4, r5, pc}
 80068ec:	20012eec 	.word	0x20012eec

080068f0 <_malloc_usable_size_r>:
 80068f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068f4:	1f18      	subs	r0, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	bfbc      	itt	lt
 80068fa:	580b      	ldrlt	r3, [r1, r0]
 80068fc:	18c0      	addlt	r0, r0, r3
 80068fe:	4770      	bx	lr

08006900 <_read_r>:
 8006900:	b538      	push	{r3, r4, r5, lr}
 8006902:	4d07      	ldr	r5, [pc, #28]	; (8006920 <_read_r+0x20>)
 8006904:	4604      	mov	r4, r0
 8006906:	4608      	mov	r0, r1
 8006908:	4611      	mov	r1, r2
 800690a:	2200      	movs	r2, #0
 800690c:	602a      	str	r2, [r5, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	f7fa f8f0 	bl	8000af4 <_read>
 8006914:	1c43      	adds	r3, r0, #1
 8006916:	d102      	bne.n	800691e <_read_r+0x1e>
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	b103      	cbz	r3, 800691e <_read_r+0x1e>
 800691c:	6023      	str	r3, [r4, #0]
 800691e:	bd38      	pop	{r3, r4, r5, pc}
 8006920:	20012eec 	.word	0x20012eec

08006924 <_init>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	bf00      	nop
 8006928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692a:	bc08      	pop	{r3}
 800692c:	469e      	mov	lr, r3
 800692e:	4770      	bx	lr

08006930 <_fini>:
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006932:	bf00      	nop
 8006934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006936:	bc08      	pop	{r3}
 8006938:	469e      	mov	lr, r3
 800693a:	4770      	bx	lr
