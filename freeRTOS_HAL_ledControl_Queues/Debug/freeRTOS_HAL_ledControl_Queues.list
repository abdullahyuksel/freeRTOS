
freeRTOS_HAL_ledControl_Queues.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007090  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08007220  08007220  00017220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800739c  0800739c  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  0800739c  0800739c  0001739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073a4  080073a4  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  080073ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020128  2**0
                  CONTENTS
 10 .bss          00012ea0  20000128  20000128  00020128  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20012fc8  20012fc8  00020128  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001410f  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cd9  00000000  00000000  00034267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  00036f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010a8  00000000  00000000  00038100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ed6  00000000  00000000  000391a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014d53  00000000  00000000  0005c07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4141  00000000  00000000  00070dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00144f12  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e14  00000000  00000000  00144f64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000128 	.word	0x20000128
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007208 	.word	0x08007208

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	08007208 	.word	0x08007208

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <getCommandCode>:
static void MX_USART2_UART_Init(void);
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */

uint8_t getCommandCode(uint8_t *buffer)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	return buffer[0]-48;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	3b30      	subs	r3, #48	; 0x30
 8000592:	b2db      	uxtb	r3, r3
}
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <getArguments>:
uint8_t getArguments(uint8_t *buffer)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	return buffer[0];
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	781b      	ldrb	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <ledOn>:
void ledOn(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80005c2:	4802      	ldr	r0, [pc, #8]	; (80005cc <ledOn+0x14>)
 80005c4:	f001 f998 	bl	80018f8 <HAL_GPIO_WritePin>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40020c00 	.word	0x40020c00

080005d0 <ledOff>:
void ledOff(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80005da:	4802      	ldr	r0, [pc, #8]	; (80005e4 <ledOff+0x14>)
 80005dc:	f001 f98c 	bl	80018f8 <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40020c00 	.word	0x40020c00

080005e8 <toggle>:
void toggle(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15);
 80005ec:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80005f0:	4802      	ldr	r0, [pc, #8]	; (80005fc <toggle+0x14>)
 80005f2:	f001 f99a 	bl	800192a <HAL_GPIO_TogglePin>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40020c00 	.word	0x40020c00

08000600 <ledToggleOn>:
void ledToggleOn(uint32_t duration)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b085      	sub	sp, #20
 8000604:	af02      	add	r7, sp, #8
 8000606:	6078      	str	r0, [r7, #4]
	if(LedTimerHandle == NULL)
 8000608:	4b0f      	ldr	r3, [pc, #60]	; (8000648 <ledToggleOn+0x48>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d10a      	bne.n	8000626 <ledToggleOn+0x26>
		LedTimerHandle = xTimerCreate("LedToggleTimer", duration, 1, 0, toggle);
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <ledToggleOn+0x4c>)
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	2201      	movs	r2, #1
 8000618:	6879      	ldr	r1, [r7, #4]
 800061a:	480d      	ldr	r0, [pc, #52]	; (8000650 <ledToggleOn+0x50>)
 800061c:	f005 fa08 	bl	8005a30 <xTimerCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	4a09      	ldr	r2, [pc, #36]	; (8000648 <ledToggleOn+0x48>)
 8000624:	6013      	str	r3, [r2, #0]

	xTimerStart(LedTimerHandle, portMAX_DELAY);
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <ledToggleOn+0x48>)
 8000628:	681c      	ldr	r4, [r3, #0]
 800062a:	f004 fab3 	bl	8004b94 <xTaskGetTickCount>
 800062e:	4602      	mov	r2, r0
 8000630:	f04f 33ff 	mov.w	r3, #4294967295
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	2101      	movs	r1, #1
 800063a:	4620      	mov	r0, r4
 800063c:	f005 fa52 	bl	8005ae4 <xTimerGenericCommand>
}
 8000640:	bf00      	nop
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	bd90      	pop	{r4, r7, pc}
 8000648:	200001a0 	.word	0x200001a0
 800064c:	080005e9 	.word	0x080005e9
 8000650:	08007220 	.word	0x08007220

08000654 <ledToggleOff>:
void ledToggleOff(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af02      	add	r7, sp, #8
	xTimerStop(LedTimerHandle, portMAX_DELAY);
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <ledToggleOff+0x24>)
 800065c:	6818      	ldr	r0, [r3, #0]
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	2200      	movs	r2, #0
 8000668:	2103      	movs	r1, #3
 800066a:	f005 fa3b 	bl	8005ae4 <xTimerGenericCommand>
	ledOff();
 800066e:	f7ff ffaf 	bl	80005d0 <ledOff>
}
 8000672:	bf00      	nop
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	200001a0 	.word	0x200001a0

0800067c <ledExit>:
void ledExit(char *ledExitMessage)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	sprintf(ledExitMessage, "System is closing and go to sleep \r\n");
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4915      	ldr	r1, [pc, #84]	; (80006dc <ledExit+0x60>)
 8000688:	4618      	mov	r0, r3
 800068a:	f006 f95d 	bl	8006948 <siprintf>
	xQueueSend(UartWriteQueue, &ledExitMessage, portMAX_DELAY);
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <ledExit+0x64>)
 8000690:	6818      	ldr	r0, [r3, #0]
 8000692:	1d39      	adds	r1, r7, #4
 8000694:	2300      	movs	r3, #0
 8000696:	f04f 32ff 	mov.w	r2, #4294967295
 800069a:	f003 faf5 	bl	8003c88 <xQueueGenericSend>

	vTaskDelete(task1MenuHandle);
 800069e:	4b11      	ldr	r3, [pc, #68]	; (80006e4 <ledExit+0x68>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f004 f886 	bl	80047b4 <vTaskDelete>
	vTaskDelete(task2CommandHandle);
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <ledExit+0x6c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f004 f881 	bl	80047b4 <vTaskDelete>
	vTaskDelete(task3CommandProcessHandle);
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <ledExit+0x70>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4618      	mov	r0, r3
 80006b8:	f004 f87c 	bl	80047b4 <vTaskDelete>
	vTaskDelete(task4UartWriteHandle);
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <ledExit+0x74>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 f877 	bl	80047b4 <vTaskDelete>

	HAL_UART_DeInit(&huart2);
 80006c6:	480b      	ldr	r0, [pc, #44]	; (80006f4 <ledExit+0x78>)
 80006c8:	f002 f8cf 	bl	800286a <HAL_UART_DeInit>

	HAL_NVIC_DisableIRQ(USART2_IRQn);
 80006cc:	2026      	movs	r0, #38	; 0x26
 80006ce:	f000 fdc3 	bl	8001258 <HAL_NVIC_DisableIRQ>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	08007230 	.word	0x08007230
 80006e0:	20000198 	.word	0x20000198
 80006e4:	20000188 	.word	0x20000188
 80006e8:	2000018c 	.word	0x2000018c
 80006ec:	20000190 	.word	0x20000190
 80006f0:	20000194 	.word	0x20000194
 80006f4:	20000144 	.word	0x20000144

080006f8 <ledError>:
void ledError(char *ledErrorMessage)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
	sprintf(ledErrorMessage, "Wrong Led Status \r\n");
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4908      	ldr	r1, [pc, #32]	; (8000724 <ledError+0x2c>)
 8000704:	4618      	mov	r0, r3
 8000706:	f006 f91f 	bl	8006948 <siprintf>
	xQueueSend(UartWriteQueue, &ledErrorMessage, portMAX_DELAY);
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <ledError+0x30>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	1d39      	adds	r1, r7, #4
 8000710:	2300      	movs	r3, #0
 8000712:	f04f 32ff 	mov.w	r2, #4294967295
 8000716:	f003 fab7 	bl	8003c88 <xQueueGenericSend>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	08007258 	.word	0x08007258
 8000728:	20000198 	.word	0x20000198

0800072c <ledStatus>:
void ledStatus(char *ledStateMessage)
{
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	sprintf(ledStateMessage, "Led Status is: %d \r\n", HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_12));
 8000734:	687c      	ldr	r4, [r7, #4]
 8000736:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800073a:	480a      	ldr	r0, [pc, #40]	; (8000764 <ledStatus+0x38>)
 800073c:	f001 f8c4 	bl	80018c8 <HAL_GPIO_ReadPin>
 8000740:	4603      	mov	r3, r0
 8000742:	461a      	mov	r2, r3
 8000744:	4908      	ldr	r1, [pc, #32]	; (8000768 <ledStatus+0x3c>)
 8000746:	4620      	mov	r0, r4
 8000748:	f006 f8fe 	bl	8006948 <siprintf>
	xQueueSend(UartWriteQueue, &ledStateMessage, portMAX_DELAY);
 800074c:	4b07      	ldr	r3, [pc, #28]	; (800076c <ledStatus+0x40>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	1d39      	adds	r1, r7, #4
 8000752:	2300      	movs	r3, #0
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	f003 fa96 	bl	8003c88 <xQueueGenericSend>
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bd90      	pop	{r4, r7, pc}
 8000764:	40020c00 	.word	0x40020c00
 8000768:	0800726c 	.word	0x0800726c
 800076c:	20000198 	.word	0x20000198

08000770 <vApplicationIdleHook>:
void vApplicationIdleHook(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
//	HAL_PWR_EnterSTANDBYMode
	 __WFI();
 8000774:	bf30      	wfi
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af02      	add	r7, sp, #8
 8000786:	6078      	str	r0, [r7, #4]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
	if(huart->Instance == USART2 )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a22      	ldr	r2, [pc, #136]	; (800081c <HAL_UART_RxCpltCallback+0x9c>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d132      	bne.n	80007fc <HAL_UART_RxCpltCallback+0x7c>
	{

		if(rxData == 10)
 8000796:	4b22      	ldr	r3, [pc, #136]	; (8000820 <HAL_UART_RxCpltCallback+0xa0>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b0a      	cmp	r3, #10
 800079c:	d119      	bne.n	80007d2 <HAL_UART_RxCpltCallback+0x52>
		{
			xTaskNotifyFromISR(task1MenuHandle, 0, eNoAction, xHigherPriorityTaskWoken);
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <HAL_UART_RxCpltCallback+0xa4>)
 80007a0:	6818      	ldr	r0, [r3, #0]
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2300      	movs	r3, #0
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	2300      	movs	r3, #0
 80007ac:	2200      	movs	r2, #0
 80007ae:	2100      	movs	r1, #0
 80007b0:	f004 ff30 	bl	8005614 <xTaskGenericNotifyFromISR>
			xTaskNotifyFromISR(task2CommandHandle, 0, eNoAction, xHigherPriorityTaskWoken);
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <HAL_UART_RxCpltCallback+0xa8>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	2300      	movs	r3, #0
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	2300      	movs	r3, #0
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	f004 ff25 	bl	8005614 <xTaskGenericNotifyFromISR>
			rxDataCount=0;
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_UART_RxCpltCallback+0xac>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
 80007d0:	e00a      	b.n	80007e8 <HAL_UART_RxCpltCallback+0x68>
		}
		else
			rxDataBuff[rxDataCount++]=rxData;
 80007d2:	4b16      	ldr	r3, [pc, #88]	; (800082c <HAL_UART_RxCpltCallback+0xac>)
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	1c5a      	adds	r2, r3, #1
 80007d8:	b2d1      	uxtb	r1, r2
 80007da:	4a14      	ldr	r2, [pc, #80]	; (800082c <HAL_UART_RxCpltCallback+0xac>)
 80007dc:	7011      	strb	r1, [r2, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <HAL_UART_RxCpltCallback+0xa0>)
 80007e2:	7819      	ldrb	r1, [r3, #0]
 80007e4:	4b12      	ldr	r3, [pc, #72]	; (8000830 <HAL_UART_RxCpltCallback+0xb0>)
 80007e6:	5499      	strb	r1, [r3, r2]


		__HAL_UART_CLEAR_FLAG(&huart2,UART_FLAG_RXNE);
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_UART_RxCpltCallback+0xb4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f06f 0220 	mvn.w	r2, #32
 80007f0:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 80007f2:	2201      	movs	r2, #1
 80007f4:	490a      	ldr	r1, [pc, #40]	; (8000820 <HAL_UART_RxCpltCallback+0xa0>)
 80007f6:	480f      	ldr	r0, [pc, #60]	; (8000834 <HAL_UART_RxCpltCallback+0xb4>)
 80007f8:	f002 f8f8 	bl	80029ec <HAL_UART_Receive_IT>
	}

	if(xHigherPriorityTaskWoken == pdTRUE)
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d107      	bne.n	8000812 <HAL_UART_RxCpltCallback+0x92>
	{
		taskYIELD();
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_UART_RxCpltCallback+0xb8>)
 8000804:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	f3bf 8f4f 	dsb	sy
 800080e:	f3bf 8f6f 	isb	sy
	}
}
 8000812:	bf00      	nop
 8000814:	3710      	adds	r7, #16
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40004400 	.word	0x40004400
 8000820:	200001a4 	.word	0x200001a4
 8000824:	20000188 	.word	0x20000188
 8000828:	2000018c 	.word	0x2000018c
 800082c:	200001bc 	.word	0x200001bc
 8000830:	200001a8 	.word	0x200001a8
 8000834:	20000144 	.word	0x20000144
 8000838:	e000ed04 	.word	0xe000ed04

0800083c <sendMessage>:

void sendMessage(char *message)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) != SET);
 8000844:	bf00      	nop
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <sendMessage+0x38>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000850:	2b80      	cmp	r3, #128	; 0x80
 8000852:	d1f8      	bne.n	8000846 <sendMessage+0xa>
	HAL_UART_Transmit (&huart2, &message[0], strlen(message), portMAX_DELAY);
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff fcbb 	bl	80001d0 <strlen>
 800085a:	4603      	mov	r3, r0
 800085c:	b29a      	uxth	r2, r3
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	4803      	ldr	r0, [pc, #12]	; (8000874 <sendMessage+0x38>)
 8000866:	f002 f82f 	bl	80028c8 <HAL_UART_Transmit>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000144 	.word	0x20000144

08000878 <Task1_Menu_Display>:

void Task1_Menu_Display(void *params)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af02      	add	r7, sp, #8
 800087e:	6078      	str	r0, [r7, #4]
	char *task1RxData = menu;
 8000880:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <Task1_Menu_Display+0x34>)
 8000882:	60fb      	str	r3, [r7, #12]

	while(1)
	{

		//send data -> uart_queue
		xQueueSend(UartWriteQueue, &task1RxData, portMAX_DELAY);
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <Task1_Menu_Display+0x38>)
 8000886:	6818      	ldr	r0, [r3, #0]
 8000888:	f107 010c 	add.w	r1, r7, #12
 800088c:	2300      	movs	r3, #0
 800088e:	f04f 32ff 	mov.w	r2, #4294967295
 8000892:	f003 f9f9 	bl	8003c88 <xQueueGenericSend>
		//wait notify
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000896:	f04f 33ff 	mov.w	r3, #4294967295
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2300      	movs	r3, #0
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2000      	movs	r0, #0
 80008a4:	f004 fe36 	bl	8005514 <xTaskGenericNotifyWait>
		xQueueSend(UartWriteQueue, &task1RxData, portMAX_DELAY);
 80008a8:	e7ec      	b.n	8000884 <Task1_Menu_Display+0xc>
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000
 80008b0:	20000198 	.word	0x20000198

080008b4 <Task2_Command_Handling_Handler>:
	}
}
void Task2_Command_Handling_Handler(void *params)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b086      	sub	sp, #24
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	6078      	str	r0, [r7, #4]
	uint8_t commandCode=0;
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]

	AppCommands_t *appTxCmd;
	while(1)
	{
		xTaskNotifyWait(0, 0, 0, portMAX_DELAY);
 80008c0:	f04f 33ff 	mov.w	r3, #4294967295
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	2200      	movs	r2, #0
 80008ca:	2100      	movs	r1, #0
 80008cc:	2000      	movs	r0, #0
 80008ce:	f004 fe21 	bl	8005514 <xTaskGenericNotifyWait>
		appTxCmd = (AppCommands_t*)pvPortMalloc(sizeof(AppCommands_t));
 80008d2:	200b      	movs	r0, #11
 80008d4:	f005 fdfa 	bl	80064cc <pvPortMalloc>
 80008d8:	4603      	mov	r3, r0
 80008da:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 80008dc:	f005 fcd4 	bl	8006288 <vPortEnterCritical>
		commandCode = getCommandCode(&rxDataBuff[0]);
 80008e0:	480c      	ldr	r0, [pc, #48]	; (8000914 <Task2_Command_Handling_Handler+0x60>)
 80008e2:	f7ff fe4f 	bl	8000584 <getCommandCode>
 80008e6:	4603      	mov	r3, r0
 80008e8:	73fb      	strb	r3, [r7, #15]
		appTxCmd->COMMAND_NUM=commandCode;
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	7bfa      	ldrb	r2, [r7, #15]
 80008ee:	701a      	strb	r2, [r3, #0]
		getArguments(appTxCmd->COMMAND_ARGS);
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3301      	adds	r3, #1
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe53 	bl	80005a0 <getArguments>
		taskEXIT_CRITICAL();
 80008fa:	f005 fcf5 	bl	80062e8 <vPortExitCritical>
		//command_buffer -> command_queue
		xQueueSend(CommandQueue, &appTxCmd, portMAX_DELAY);
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <Task2_Command_Handling_Handler+0x64>)
 8000900:	6818      	ldr	r0, [r3, #0]
 8000902:	f107 0108 	add.w	r1, r7, #8
 8000906:	2300      	movs	r3, #0
 8000908:	f04f 32ff 	mov.w	r2, #4294967295
 800090c:	f003 f9bc 	bl	8003c88 <xQueueGenericSend>
		xTaskNotifyWait(0, 0, 0, portMAX_DELAY);
 8000910:	e7d6      	b.n	80008c0 <Task2_Command_Handling_Handler+0xc>
 8000912:	bf00      	nop
 8000914:	200001a8 	.word	0x200001a8
 8000918:	2000019c 	.word	0x2000019c

0800091c <Task3_Command_Process_Handler>:
	}
}
void Task3_Command_Process_Handler(void *params)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b092      	sub	sp, #72	; 0x48
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
	AppCommands_t *appRxCmd;
	char taskStateMessage[50];
	uint16_t toggleTime = pdMS_TO_TICKS(500);
 8000924:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000928:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	while(1)
	{
		//READ FROM COMMAND_QUEUE
		xQueueReceive(CommandQueue, (void*)&appRxCmd, portMAX_DELAY);
 800092c:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <Task3_Command_Process_Handler+0x94>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000934:	f04f 32ff 	mov.w	r2, #4294967295
 8000938:	4618      	mov	r0, r3
 800093a:	f003 fb4d 	bl	8003fd8 <xQueueReceive>

		//PROCESS
		if(appRxCmd->COMMAND_NUM == LED_ON)
 800093e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	2b01      	cmp	r3, #1
 8000944:	d102      	bne.n	800094c <Task3_Command_Process_Handler+0x30>
		{
			ledOn();
 8000946:	f7ff fe37 	bl	80005b8 <ledOn>
 800094a:	e7ef      	b.n	800092c <Task3_Command_Process_Handler+0x10>
		}
		else if(appRxCmd->COMMAND_NUM == LED_OFF)
 800094c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	2b02      	cmp	r3, #2
 8000952:	d102      	bne.n	800095a <Task3_Command_Process_Handler+0x3e>
		{
			ledOff();
 8000954:	f7ff fe3c 	bl	80005d0 <ledOff>
 8000958:	e7e8      	b.n	800092c <Task3_Command_Process_Handler+0x10>
		}
		else if(appRxCmd->COMMAND_NUM == LED_TOGGLE_ON)
 800095a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b03      	cmp	r3, #3
 8000960:	d105      	bne.n	800096e <Task3_Command_Process_Handler+0x52>
		{
			ledToggleOn(toggleTime);
 8000962:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff fe4a 	bl	8000600 <ledToggleOn>
 800096c:	e7de      	b.n	800092c <Task3_Command_Process_Handler+0x10>
		}
		else if(appRxCmd->COMMAND_NUM == LED_TOGGLE_OFF)
 800096e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b04      	cmp	r3, #4
 8000974:	d102      	bne.n	800097c <Task3_Command_Process_Handler+0x60>
		{
			ledToggleOff();
 8000976:	f7ff fe6d 	bl	8000654 <ledToggleOff>
 800097a:	e7d7      	b.n	800092c <Task3_Command_Process_Handler+0x10>
		}
		else if(appRxCmd->COMMAND_NUM == LED_STATUS)
 800097c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b05      	cmp	r3, #5
 8000982:	d105      	bne.n	8000990 <Task3_Command_Process_Handler+0x74>
		{
			ledStatus(taskStateMessage);
 8000984:	f107 030c 	add.w	r3, r7, #12
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff fecf 	bl	800072c <ledStatus>
 800098e:	e7cd      	b.n	800092c <Task3_Command_Process_Handler+0x10>
		}
		else if(appRxCmd->COMMAND_NUM == LED_EXIT)
 8000990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b06      	cmp	r3, #6
 8000996:	d105      	bne.n	80009a4 <Task3_Command_Process_Handler+0x88>
		{
			ledExit(taskStateMessage);
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff fe6d 	bl	800067c <ledExit>
 80009a2:	e7c3      	b.n	800092c <Task3_Command_Process_Handler+0x10>
		}
		else
			ledError(taskStateMessage);
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fea5 	bl	80006f8 <ledError>
		xQueueReceive(CommandQueue, (void*)&appRxCmd, portMAX_DELAY);
 80009ae:	e7bd      	b.n	800092c <Task3_Command_Process_Handler+0x10>
 80009b0:	2000019c 	.word	0x2000019c

080009b4 <Task4_Uart_Write_Handler>:
	}
}
void Task4_Uart_Write_Handler(void *params)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	char *task4TxData=NULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		//READ FROM UART_WRITE_QUEUE
		xQueueReceive(UartWriteQueue, &task4TxData, portMAX_DELAY);
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <Task4_Uart_Write_Handler+0x28>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f107 010c 	add.w	r1, r7, #12
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	4618      	mov	r0, r3
 80009ce:	f003 fb03 	bl	8003fd8 <xQueueReceive>
		//SEND MESSAGE
		sendMessage(task4TxData);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff ff31 	bl	800083c <sendMessage>
		xQueueReceive(UartWriteQueue, &task4TxData, portMAX_DELAY);
 80009da:	e7f1      	b.n	80009c0 <Task4_Uart_Write_Handler+0xc>
 80009dc:	20000198 	.word	0x20000198

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e6:	f000 faef 	bl	8000fc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ea:	f000 f879 	bl	8000ae0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ee:	f000 f911 	bl	8000c14 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009f2:	f000 f8df 	bl	8000bb4 <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80009f6:	f000 f8d1 	bl	8000b9c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */



  sendMessage("This is Queue Command processing.\r\n");
 80009fa:	4828      	ldr	r0, [pc, #160]	; (8000a9c <main+0xbc>)
 80009fc:	f7ff ff1e 	bl	800083c <sendMessage>

  UartWriteQueue 	= xQueueCreate(50, sizeof(char *));
 8000a00:	2200      	movs	r2, #0
 8000a02:	2104      	movs	r1, #4
 8000a04:	2032      	movs	r0, #50	; 0x32
 8000a06:	f003 f8cd 	bl	8003ba4 <xQueueGenericCreate>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	4a24      	ldr	r2, [pc, #144]	; (8000aa0 <main+0xc0>)
 8000a0e:	6013      	str	r3, [r2, #0]
  CommandQueue		= xQueueCreate(10, sizeof(AppCommands_t));
 8000a10:	2200      	movs	r2, #0
 8000a12:	210b      	movs	r1, #11
 8000a14:	200a      	movs	r0, #10
 8000a16:	f003 f8c5 	bl	8003ba4 <xQueueGenericCreate>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	4a21      	ldr	r2, [pc, #132]	; (8000aa4 <main+0xc4>)
 8000a1e:	6013      	str	r3, [r2, #0]

  if((UartWriteQueue != NULL) && (CommandQueue != NULL))
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <main+0xc0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d035      	beq.n	8000a94 <main+0xb4>
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <main+0xc4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d031      	beq.n	8000a94 <main+0xb4>
  {


	  sendMessage("Queue creation succesful.\r\n");
 8000a30:	481d      	ldr	r0, [pc, #116]	; (8000aa8 <main+0xc8>)
 8000a32:	f7ff ff03 	bl	800083c <sendMessage>

	  xTaskCreate(Task1_Menu_Display,
 8000a36:	4b1d      	ldr	r3, [pc, #116]	; (8000aac <main+0xcc>)
 8000a38:	9301      	str	r3, [sp, #4]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	2300      	movs	r3, #0
 8000a40:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8000a44:	491a      	ldr	r1, [pc, #104]	; (8000ab0 <main+0xd0>)
 8000a46:	481b      	ldr	r0, [pc, #108]	; (8000ab4 <main+0xd4>)
 8000a48:	f003 fd38 	bl	80044bc <xTaskCreate>
				  configMINIMAL_STACK_SIZE*3,
				  NULL,
				  1,
				  &task1MenuHandle);

	  xTaskCreate(Task2_Command_Handling_Handler,
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <main+0xd8>)
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	2302      	movs	r3, #2
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	2300      	movs	r3, #0
 8000a56:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8000a5a:	4918      	ldr	r1, [pc, #96]	; (8000abc <main+0xdc>)
 8000a5c:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <main+0xe0>)
 8000a5e:	f003 fd2d 	bl	80044bc <xTaskCreate>
				  configMINIMAL_STACK_SIZE*3,
				  NULL,
				  2,
				  &task2CommandHandle);

	  xTaskCreate(Task3_Command_Process_Handler,
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <main+0xe4>)
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	2302      	movs	r3, #2
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8000a70:	4915      	ldr	r1, [pc, #84]	; (8000ac8 <main+0xe8>)
 8000a72:	4816      	ldr	r0, [pc, #88]	; (8000acc <main+0xec>)
 8000a74:	f003 fd22 	bl	80044bc <xTaskCreate>
				  configMINIMAL_STACK_SIZE*3,
				  NULL,
				  2,
				  &task3CommandProcessHandle);

	  xTaskCreate(Task4_Uart_Write_Handler,
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <main+0xf0>)
 8000a7a:	9301      	str	r3, [sp, #4]
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2300      	movs	r3, #0
 8000a82:	f44f 72c3 	mov.w	r2, #390	; 0x186
 8000a86:	4913      	ldr	r1, [pc, #76]	; (8000ad4 <main+0xf4>)
 8000a88:	4813      	ldr	r0, [pc, #76]	; (8000ad8 <main+0xf8>)
 8000a8a:	f003 fd17 	bl	80044bc <xTaskCreate>
				  configMINIMAL_STACK_SIZE*3,
				  NULL,
				  2,
				  &task4UartWriteHandle);

	  vTaskStartScheduler();
 8000a8e:	f003 ff25 	bl	80048dc <vTaskStartScheduler>
 8000a92:	e002      	b.n	8000a9a <main+0xba>
  }
  else
  {

	  sendMessage("Queue creation failed.\r\n");
 8000a94:	4811      	ldr	r0, [pc, #68]	; (8000adc <main+0xfc>)
 8000a96:	f7ff fed1 	bl	800083c <sendMessage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <main+0xba>
 8000a9c:	08007284 	.word	0x08007284
 8000aa0:	20000198 	.word	0x20000198
 8000aa4:	2000019c 	.word	0x2000019c
 8000aa8:	080072a8 	.word	0x080072a8
 8000aac:	20000188 	.word	0x20000188
 8000ab0:	080072c4 	.word	0x080072c4
 8000ab4:	08000879 	.word	0x08000879
 8000ab8:	2000018c 	.word	0x2000018c
 8000abc:	080072d8 	.word	0x080072d8
 8000ac0:	080008b5 	.word	0x080008b5
 8000ac4:	20000190 	.word	0x20000190
 8000ac8:	080072f0 	.word	0x080072f0
 8000acc:	0800091d 	.word	0x0800091d
 8000ad0:	20000194 	.word	0x20000194
 8000ad4:	08007308 	.word	0x08007308
 8000ad8:	080009b5 	.word	0x080009b5
 8000adc:	0800731c 	.word	0x0800731c

08000ae0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b094      	sub	sp, #80	; 0x50
 8000ae4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2230      	movs	r2, #48	; 0x30
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f005 ff22 	bl	8006938 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60bb      	str	r3, [r7, #8]
 8000b08:	4b22      	ldr	r3, [pc, #136]	; (8000b94 <SystemClock_Config+0xb4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <SystemClock_Config+0xb4>)
 8000b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b12:	6413      	str	r3, [r2, #64]	; 0x40
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <SystemClock_Config+0xb4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b20:	2300      	movs	r3, #0
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <SystemClock_Config+0xb8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a1b      	ldr	r2, [pc, #108]	; (8000b98 <SystemClock_Config+0xb8>)
 8000b2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b2e:	6013      	str	r3, [r2, #0]
 8000b30:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <SystemClock_Config+0xb8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b40:	2301      	movs	r3, #1
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b44:	2310      	movs	r3, #16
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 ff05 	bl	8001960 <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000b5c:	f000 f8b0 	bl	8000cc0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 f968 	bl	8001e50 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b86:	f000 f89b 	bl	8000cc0 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3750      	adds	r7, #80	; 0x50
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000

08000b9c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2105      	movs	r1, #5
 8000ba4:	2026      	movs	r0, #38	; 0x26
 8000ba6:	f000 fb2d 	bl	8001204 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000baa:	2026      	movs	r0, #38	; 0x26
 8000bac:	f000 fb46 	bl	800123c <HAL_NVIC_EnableIRQ>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bba:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <MX_USART2_UART_Init+0x58>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bc0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000bc4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bea:	4807      	ldr	r0, [pc, #28]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000bec:	f001 fdf0 	bl	80027d0 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bf6:	f000 f863 	bl	8000cc0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	4904      	ldr	r1, [pc, #16]	; (8000c10 <MX_USART2_UART_Init+0x5c>)
 8000bfe:	4802      	ldr	r0, [pc, #8]	; (8000c08 <MX_USART2_UART_Init+0x54>)
 8000c00:	f001 fef4 	bl	80029ec <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000144 	.word	0x20000144
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	200001a4 	.word	0x200001a4

08000c14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1a:	f107 030c 	add.w	r3, r7, #12
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]
 8000c24:	609a      	str	r2, [r3, #8]
 8000c26:	60da      	str	r2, [r3, #12]
 8000c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_GPIO_Init+0x80>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a18      	ldr	r2, [pc, #96]	; (8000c94 <MX_GPIO_Init+0x80>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_GPIO_Init+0x80>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_GPIO_Init+0x80>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a11      	ldr	r2, [pc, #68]	; (8000c94 <MX_GPIO_Init+0x80>)
 8000c50:	f043 0308 	orr.w	r3, r3, #8
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_GPIO_Init+0x80>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0308 	and.w	r3, r3, #8
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000c68:	480b      	ldr	r0, [pc, #44]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c6a:	f000 fe45 	bl	80018f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c6e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	4619      	mov	r1, r3
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <MX_GPIO_Init+0x84>)
 8000c88:	f000 fb86 	bl	8001398 <HAL_GPIO_Init>

}
 8000c8c:	bf00      	nop
 8000c8e:	3720      	adds	r7, #32
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020c00 	.word	0x40020c00

08000c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d101      	bne.n	8000cb2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cae:	f000 f9ad 	bl	800100c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40001000 	.word	0x40001000

08000cc0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc4:	b672      	cpsid	i
}
 8000cc6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <Error_Handler+0x8>
	...

08000ccc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
 8000cd6:	4b10      	ldr	r3, [pc, #64]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	4a0f      	ldr	r2, [pc, #60]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ce2:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <HAL_MspInit+0x4c>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	4a08      	ldr	r2, [pc, #32]	; (8000d18 <HAL_MspInit+0x4c>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfe:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <HAL_MspInit+0x4c>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40023800 	.word	0x40023800

08000d1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a19      	ldr	r2, [pc, #100]	; (8000da0 <HAL_UART_MspInit+0x84>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d12b      	bne.n	8000d96 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b18      	ldr	r3, [pc, #96]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	4a17      	ldr	r2, [pc, #92]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4e:	4b15      	ldr	r3, [pc, #84]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_UART_MspInit+0x88>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d76:	230c      	movs	r3, #12
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4805      	ldr	r0, [pc, #20]	; (8000da8 <HAL_UART_MspInit+0x8c>)
 8000d92:	f000 fb01 	bl	8001398 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40004400 	.word	0x40004400
 8000da4:	40023800 	.word	0x40023800
 8000da8:	40020000 	.word	0x40020000

08000dac <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a09      	ldr	r2, [pc, #36]	; (8000de0 <HAL_UART_MspDeInit+0x34>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d10c      	bne.n	8000dd8 <HAL_UART_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_UART_MspDeInit+0x38>)
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc2:	4a08      	ldr	r2, [pc, #32]	; (8000de4 <HAL_UART_MspDeInit+0x38>)
 8000dc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000dc8:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000dca:	210c      	movs	r1, #12
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <HAL_UART_MspDeInit+0x3c>)
 8000dce:	f000 fc7f 	bl	80016d0 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000dd2:	2026      	movs	r0, #38	; 0x26
 8000dd4:	f000 fa40 	bl	8001258 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40004400 	.word	0x40004400
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40020000 	.word	0x40020000

08000dec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08c      	sub	sp, #48	; 0x30
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	2036      	movs	r0, #54	; 0x36
 8000e02:	f000 f9ff 	bl	8001204 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e06:	2036      	movs	r0, #54	; 0x36
 8000e08:	f000 fa18 	bl	800123c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <HAL_InitTick+0xa0>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a1d      	ldr	r2, [pc, #116]	; (8000e8c <HAL_InitTick+0xa0>)
 8000e16:	f043 0310 	orr.w	r3, r3, #16
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <HAL_InitTick+0xa0>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f003 0310 	and.w	r3, r3, #16
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e28:	f107 0210 	add.w	r2, r7, #16
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4611      	mov	r1, r2
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 f9ec 	bl	8002210 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e38:	f001 f9c2 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 8000e3c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e40:	4a13      	ldr	r2, [pc, #76]	; (8000e90 <HAL_InitTick+0xa4>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	0c9b      	lsrs	r3, r3, #18
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e4c:	4b11      	ldr	r3, [pc, #68]	; (8000e94 <HAL_InitTick+0xa8>)
 8000e4e:	4a12      	ldr	r2, [pc, #72]	; (8000e98 <HAL_InitTick+0xac>)
 8000e50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e52:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <HAL_InitTick+0xa8>)
 8000e54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e58:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_InitTick+0xa8>)
 8000e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e5e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_InitTick+0xa8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_InitTick+0xa8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <HAL_InitTick+0xa8>)
 8000e6e:	f001 fa01 	bl	8002274 <HAL_TIM_Base_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d104      	bne.n	8000e82 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000e78:	4806      	ldr	r0, [pc, #24]	; (8000e94 <HAL_InitTick+0xa8>)
 8000e7a:	f001 fa55 	bl	8002328 <HAL_TIM_Base_Start_IT>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e000      	b.n	8000e84 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3730      	adds	r7, #48	; 0x30
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40023800 	.word	0x40023800
 8000e90:	431bde83 	.word	0x431bde83
 8000e94:	200001c0 	.word	0x200001c0
 8000e98:	40001000 	.word	0x40001000

08000e9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <MemManage_Handler+0x4>

08000ea2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ea6:	e7fe      	b.n	8000ea6 <BusFault_Handler+0x4>

08000ea8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eac:	e7fe      	b.n	8000eac <UsageFault_Handler+0x4>

08000eae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <USART2_IRQHandler+0x10>)
 8000ec2:	f001 fdc3 	bl	8002a4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000144 	.word	0x20000144

08000ed0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ed4:	4802      	ldr	r0, [pc, #8]	; (8000ee0 <TIM6_DAC_IRQHandler+0x10>)
 8000ed6:	f001 fa97 	bl	8002408 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	200001c0 	.word	0x200001c0

08000ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eec:	4a14      	ldr	r2, [pc, #80]	; (8000f40 <_sbrk+0x5c>)
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <_sbrk+0x60>)
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <_sbrk+0x64>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <_sbrk+0x64>)
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <_sbrk+0x68>)
 8000f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	429a      	cmp	r2, r3
 8000f12:	d207      	bcs.n	8000f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f14:	f005 fcd8 	bl	80068c8 <__errno>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	220c      	movs	r2, #12
 8000f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	e009      	b.n	8000f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <_sbrk+0x64>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <_sbrk+0x64>)
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4413      	add	r3, r2
 8000f32:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <_sbrk+0x64>)
 8000f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f36:	68fb      	ldr	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20020000 	.word	0x20020000
 8000f44:	00000400 	.word	0x00000400
 8000f48:	20000208 	.word	0x20000208
 8000f4c:	20012fc8 	.word	0x20012fc8

08000f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f90:	4c0b      	ldr	r4, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9e:	f7ff ffd7 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f005 fc97 	bl	80068d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fd1b 	bl	80009e0 <main>
  bx  lr    
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 8000fb8:	080073ac 	.word	0x080073ac
  ldr r2, =_sbss
 8000fbc:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 8000fc0:	20012fc8 	.word	0x20012fc8

08000fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_Init+0x40>)
 8000fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_Init+0x40>)
 8000fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x40>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f8fc 	bl	80011ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f7ff fef8 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff fe66 	bl	8000ccc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <HAL_IncTick+0x20>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_IncTick+0x24>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4413      	add	r3, r2
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <HAL_IncTick+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	200000b8 	.word	0x200000b8
 8001030:	2000020c 	.word	0x2000020c

08001034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return uwTick;
 8001038:	4b03      	ldr	r3, [pc, #12]	; (8001048 <HAL_GetTick+0x14>)
 800103a:	681b      	ldr	r3, [r3, #0]
}
 800103c:	4618      	mov	r0, r3
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	2000020c 	.word	0x2000020c

0800104c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f003 0307 	and.w	r3, r3, #7
 800105a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800105c:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001062:	68ba      	ldr	r2, [r7, #8]
 8001064:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001068:	4013      	ands	r3, r2
 800106a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001074:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800107e:	4a04      	ldr	r2, [pc, #16]	; (8001090 <__NVIC_SetPriorityGrouping+0x44>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	60d3      	str	r3, [r2, #12]
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_GetPriorityGrouping+0x18>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	0a1b      	lsrs	r3, r3, #8
 800109e:	f003 0307 	and.w	r3, r3, #7
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	db0b      	blt.n	80010da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	f003 021f 	and.w	r2, r3, #31
 80010c8:	4907      	ldr	r1, [pc, #28]	; (80010e8 <__NVIC_EnableIRQ+0x38>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	095b      	lsrs	r3, r3, #5
 80010d0:	2001      	movs	r0, #1
 80010d2:	fa00 f202 	lsl.w	r2, r0, r2
 80010d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010da:	bf00      	nop
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db12      	blt.n	8001124 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	490a      	ldr	r1, [pc, #40]	; (8001130 <__NVIC_DisableIRQ+0x44>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	3320      	adds	r3, #32
 8001114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001118:	f3bf 8f4f 	dsb	sy
}
 800111c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800111e:	f3bf 8f6f 	isb	sy
}
 8001122:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	e000e100 	.word	0xe000e100

08001134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	6039      	str	r1, [r7, #0]
 800113e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	2b00      	cmp	r3, #0
 8001146:	db0a      	blt.n	800115e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	b2da      	uxtb	r2, r3
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <__NVIC_SetPriority+0x4c>)
 800114e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001152:	0112      	lsls	r2, r2, #4
 8001154:	b2d2      	uxtb	r2, r2
 8001156:	440b      	add	r3, r1
 8001158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800115c:	e00a      	b.n	8001174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4908      	ldr	r1, [pc, #32]	; (8001184 <__NVIC_SetPriority+0x50>)
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	f003 030f 	and.w	r3, r3, #15
 800116a:	3b04      	subs	r3, #4
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	b2d2      	uxtb	r2, r2
 8001170:	440b      	add	r3, r1
 8001172:	761a      	strb	r2, [r3, #24]
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000e100 	.word	0xe000e100
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f003 0307 	and.w	r3, r3, #7
 800119a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f1c3 0307 	rsb	r3, r3, #7
 80011a2:	2b04      	cmp	r3, #4
 80011a4:	bf28      	it	cs
 80011a6:	2304      	movcs	r3, #4
 80011a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3304      	adds	r3, #4
 80011ae:	2b06      	cmp	r3, #6
 80011b0:	d902      	bls.n	80011b8 <NVIC_EncodePriority+0x30>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3b03      	subs	r3, #3
 80011b6:	e000      	b.n	80011ba <NVIC_EncodePriority+0x32>
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011bc:	f04f 32ff 	mov.w	r2, #4294967295
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d0:	f04f 31ff 	mov.w	r1, #4294967295
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	43d9      	mvns	r1, r3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e0:	4313      	orrs	r3, r2
         );
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ff28 	bl	800104c <__NVIC_SetPriorityGrouping>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001216:	f7ff ff3d 	bl	8001094 <__NVIC_GetPriorityGrouping>
 800121a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	68b9      	ldr	r1, [r7, #8]
 8001220:	6978      	ldr	r0, [r7, #20]
 8001222:	f7ff ffb1 	bl	8001188 <NVIC_EncodePriority>
 8001226:	4602      	mov	r2, r0
 8001228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800122c:	4611      	mov	r1, r2
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff ff80 	bl	8001134 <__NVIC_SetPriority>
}
 8001234:	bf00      	nop
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff ff30 	bl	80010b0 <__NVIC_EnableIRQ>
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff ff40 	bl	80010ec <__NVIC_DisableIRQ>
}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001280:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001282:	f7ff fed7 	bl	8001034 <HAL_GetTick>
 8001286:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800128e:	b2db      	uxtb	r3, r3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d008      	beq.n	80012a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e052      	b.n	800134c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0216 	bic.w	r2, r2, #22
 80012b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	695a      	ldr	r2, [r3, #20]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d103      	bne.n	80012d6 <HAL_DMA_Abort+0x62>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0208 	bic.w	r2, r2, #8
 80012e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 0201 	bic.w	r2, r2, #1
 80012f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f6:	e013      	b.n	8001320 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012f8:	f7ff fe9c 	bl	8001034 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b05      	cmp	r3, #5
 8001304:	d90c      	bls.n	8001320 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2220      	movs	r2, #32
 800130a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2203      	movs	r2, #3
 8001310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e015      	b.n	800134c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0301 	and.w	r3, r3, #1
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1e4      	bne.n	80012f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001332:	223f      	movs	r2, #63	; 0x3f
 8001334:	409a      	lsls	r2, r3
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}

08001354 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d004      	beq.n	8001372 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2280      	movs	r2, #128	; 0x80
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e00c      	b.n	800138c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2205      	movs	r2, #5
 8001376:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0201 	bic.w	r2, r2, #1
 8001388:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b089      	sub	sp, #36	; 0x24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013a6:	2300      	movs	r3, #0
 80013a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
 80013b2:	e16b      	b.n	800168c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013b4:	2201      	movs	r2, #1
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	429a      	cmp	r2, r3
 80013ce:	f040 815a 	bne.w	8001686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d005      	beq.n	80013ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f003 0303 	and.w	r3, r3, #3
 8001454:	2b03      	cmp	r3, #3
 8001456:	d017      	beq.n	8001488 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	2203      	movs	r2, #3
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	fa02 f303 	lsl.w	r3, r2, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4313      	orrs	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d123      	bne.n	80014dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	220f      	movs	r2, #15
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	691a      	ldr	r2, [r3, #16]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	f003 0307 	and.w	r3, r3, #7
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	69b9      	ldr	r1, [r7, #24]
 80014d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 0203 	and.w	r2, r3, #3
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	69ba      	ldr	r2, [r7, #24]
 800150e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001518:	2b00      	cmp	r3, #0
 800151a:	f000 80b4 	beq.w	8001686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b60      	ldr	r3, [pc, #384]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a5f      	ldr	r2, [pc, #380]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b5d      	ldr	r3, [pc, #372]	; (80016a4 <HAL_GPIO_Init+0x30c>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800153a:	4a5b      	ldr	r2, [pc, #364]	; (80016a8 <HAL_GPIO_Init+0x310>)
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	089b      	lsrs	r3, r3, #2
 8001540:	3302      	adds	r3, #2
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f003 0303 	and.w	r3, r3, #3
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	220f      	movs	r2, #15
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a52      	ldr	r2, [pc, #328]	; (80016ac <HAL_GPIO_Init+0x314>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <HAL_GPIO_Init+0x226>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a51      	ldr	r2, [pc, #324]	; (80016b0 <HAL_GPIO_Init+0x318>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d025      	beq.n	80015ba <HAL_GPIO_Init+0x222>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a50      	ldr	r2, [pc, #320]	; (80016b4 <HAL_GPIO_Init+0x31c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01f      	beq.n	80015b6 <HAL_GPIO_Init+0x21e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4f      	ldr	r2, [pc, #316]	; (80016b8 <HAL_GPIO_Init+0x320>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d019      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_GPIO_Init+0x324>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d013      	beq.n	80015ae <HAL_GPIO_Init+0x216>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a4d      	ldr	r2, [pc, #308]	; (80016c0 <HAL_GPIO_Init+0x328>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00d      	beq.n	80015aa <HAL_GPIO_Init+0x212>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a4c      	ldr	r2, [pc, #304]	; (80016c4 <HAL_GPIO_Init+0x32c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <HAL_GPIO_Init+0x20e>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a4b      	ldr	r2, [pc, #300]	; (80016c8 <HAL_GPIO_Init+0x330>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d101      	bne.n	80015a2 <HAL_GPIO_Init+0x20a>
 800159e:	2307      	movs	r3, #7
 80015a0:	e00e      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a2:	2308      	movs	r3, #8
 80015a4:	e00c      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015a6:	2306      	movs	r3, #6
 80015a8:	e00a      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015aa:	2305      	movs	r3, #5
 80015ac:	e008      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ae:	2304      	movs	r3, #4
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b2:	2303      	movs	r3, #3
 80015b4:	e004      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015b6:	2302      	movs	r3, #2
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <HAL_GPIO_Init+0x228>
 80015be:	2300      	movs	r3, #0
 80015c0:	69fa      	ldr	r2, [r7, #28]
 80015c2:	f002 0203 	and.w	r2, r2, #3
 80015c6:	0092      	lsls	r2, r2, #2
 80015c8:	4093      	lsls	r3, r2
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015d0:	4935      	ldr	r1, [pc, #212]	; (80016a8 <HAL_GPIO_Init+0x310>)
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	089b      	lsrs	r3, r3, #2
 80015d6:	3302      	adds	r3, #2
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015de:	4b3b      	ldr	r3, [pc, #236]	; (80016cc <HAL_GPIO_Init+0x334>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001608:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_GPIO_Init+0x334>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	43db      	mvns	r3, r3
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	4013      	ands	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d003      	beq.n	800162c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	4313      	orrs	r3, r2
 800162a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800162c:	4a27      	ldr	r2, [pc, #156]	; (80016cc <HAL_GPIO_Init+0x334>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001632:	4b26      	ldr	r3, [pc, #152]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	43db      	mvns	r3, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4013      	ands	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001656:	4a1d      	ldr	r2, [pc, #116]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <HAL_GPIO_Init+0x334>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001678:	69ba      	ldr	r2, [r7, #24]
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4313      	orrs	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001680:	4a12      	ldr	r2, [pc, #72]	; (80016cc <HAL_GPIO_Init+0x334>)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3301      	adds	r3, #1
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	f67f ae90 	bls.w	80013b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3724      	adds	r7, #36	; 0x24
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40013800 	.word	0x40013800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020400 	.word	0x40020400
 80016b4:	40020800 	.word	0x40020800
 80016b8:	40020c00 	.word	0x40020c00
 80016bc:	40021000 	.word	0x40021000
 80016c0:	40021400 	.word	0x40021400
 80016c4:	40021800 	.word	0x40021800
 80016c8:	40021c00 	.word	0x40021c00
 80016cc:	40013c00 	.word	0x40013c00

080016d0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e0cd      	b.n	8001888 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016ec:	2201      	movs	r2, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80016fe:	68fa      	ldr	r2, [r7, #12]
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	429a      	cmp	r2, r3
 8001704:	f040 80bd 	bne.w	8001882 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001708:	4a65      	ldr	r2, [pc, #404]	; (80018a0 <HAL_GPIO_DeInit+0x1d0>)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001714:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0303 	and.w	r3, r3, #3
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	220f      	movs	r2, #15
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	4013      	ands	r3, r2
 8001728:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a5d      	ldr	r2, [pc, #372]	; (80018a4 <HAL_GPIO_DeInit+0x1d4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d02b      	beq.n	800178a <HAL_GPIO_DeInit+0xba>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a5c      	ldr	r2, [pc, #368]	; (80018a8 <HAL_GPIO_DeInit+0x1d8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d025      	beq.n	8001786 <HAL_GPIO_DeInit+0xb6>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a5b      	ldr	r2, [pc, #364]	; (80018ac <HAL_GPIO_DeInit+0x1dc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01f      	beq.n	8001782 <HAL_GPIO_DeInit+0xb2>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a5a      	ldr	r2, [pc, #360]	; (80018b0 <HAL_GPIO_DeInit+0x1e0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d019      	beq.n	800177e <HAL_GPIO_DeInit+0xae>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a59      	ldr	r2, [pc, #356]	; (80018b4 <HAL_GPIO_DeInit+0x1e4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_DeInit+0xaa>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a58      	ldr	r2, [pc, #352]	; (80018b8 <HAL_GPIO_DeInit+0x1e8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00d      	beq.n	8001776 <HAL_GPIO_DeInit+0xa6>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a57      	ldr	r2, [pc, #348]	; (80018bc <HAL_GPIO_DeInit+0x1ec>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_DeInit+0xa2>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a56      	ldr	r2, [pc, #344]	; (80018c0 <HAL_GPIO_DeInit+0x1f0>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_GPIO_DeInit+0x9e>
 800176a:	2307      	movs	r3, #7
 800176c:	e00e      	b.n	800178c <HAL_GPIO_DeInit+0xbc>
 800176e:	2308      	movs	r3, #8
 8001770:	e00c      	b.n	800178c <HAL_GPIO_DeInit+0xbc>
 8001772:	2306      	movs	r3, #6
 8001774:	e00a      	b.n	800178c <HAL_GPIO_DeInit+0xbc>
 8001776:	2305      	movs	r3, #5
 8001778:	e008      	b.n	800178c <HAL_GPIO_DeInit+0xbc>
 800177a:	2304      	movs	r3, #4
 800177c:	e006      	b.n	800178c <HAL_GPIO_DeInit+0xbc>
 800177e:	2303      	movs	r3, #3
 8001780:	e004      	b.n	800178c <HAL_GPIO_DeInit+0xbc>
 8001782:	2302      	movs	r3, #2
 8001784:	e002      	b.n	800178c <HAL_GPIO_DeInit+0xbc>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_GPIO_DeInit+0xbc>
 800178a:	2300      	movs	r3, #0
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	f002 0203 	and.w	r2, r2, #3
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	4093      	lsls	r3, r2
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	429a      	cmp	r2, r3
 800179a:	d132      	bne.n	8001802 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800179c:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <HAL_GPIO_DeInit+0x1f4>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	4947      	ldr	r1, [pc, #284]	; (80018c4 <HAL_GPIO_DeInit+0x1f4>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80017aa:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <HAL_GPIO_DeInit+0x1f4>)
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	4944      	ldr	r1, [pc, #272]	; (80018c4 <HAL_GPIO_DeInit+0x1f4>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80017b8:	4b42      	ldr	r3, [pc, #264]	; (80018c4 <HAL_GPIO_DeInit+0x1f4>)
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43db      	mvns	r3, r3
 80017c0:	4940      	ldr	r1, [pc, #256]	; (80018c4 <HAL_GPIO_DeInit+0x1f4>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80017c6:	4b3f      	ldr	r3, [pc, #252]	; (80018c4 <HAL_GPIO_DeInit+0x1f4>)
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	493d      	ldr	r1, [pc, #244]	; (80018c4 <HAL_GPIO_DeInit+0x1f4>)
 80017d0:	4013      	ands	r3, r2
 80017d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f003 0303 	and.w	r3, r3, #3
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	220f      	movs	r2, #15
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80017e4:	4a2e      	ldr	r2, [pc, #184]	; (80018a0 <HAL_GPIO_DeInit+0x1d0>)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	089b      	lsrs	r3, r3, #2
 80017ea:	3302      	adds	r3, #2
 80017ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	43da      	mvns	r2, r3
 80017f4:	482a      	ldr	r0, [pc, #168]	; (80018a0 <HAL_GPIO_DeInit+0x1d0>)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	400a      	ands	r2, r1
 80017fc:	3302      	adds	r3, #2
 80017fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	697b      	ldr	r3, [r7, #20]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	2103      	movs	r1, #3
 800180c:	fa01 f303 	lsl.w	r3, r1, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	401a      	ands	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	220f      	movs	r2, #15
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	08d2      	lsrs	r2, r2, #3
 8001838:	4019      	ands	r1, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2103      	movs	r1, #3
 800184c:	fa01 f303 	lsl.w	r3, r1, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	2101      	movs	r1, #1
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	fa01 f303 	lsl.w	r3, r1, r3
 8001864:	43db      	mvns	r3, r3
 8001866:	401a      	ands	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2103      	movs	r1, #3
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	401a      	ands	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	2b0f      	cmp	r3, #15
 800188c:	f67f af2e 	bls.w	80016ec <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	371c      	adds	r7, #28
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	40013800 	.word	0x40013800
 80018a4:	40020000 	.word	0x40020000
 80018a8:	40020400 	.word	0x40020400
 80018ac:	40020800 	.word	0x40020800
 80018b0:	40020c00 	.word	0x40020c00
 80018b4:	40021000 	.word	0x40021000
 80018b8:	40021400 	.word	0x40021400
 80018bc:	40021800 	.word	0x40021800
 80018c0:	40021c00 	.word	0x40021c00
 80018c4:	40013c00 	.word	0x40013c00

080018c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	460b      	mov	r3, r1
 80018d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691a      	ldr	r2, [r3, #16]
 80018d8:	887b      	ldrh	r3, [r7, #2]
 80018da:	4013      	ands	r3, r2
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
 80018e4:	e001      	b.n	80018ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	460b      	mov	r3, r1
 8001902:	807b      	strh	r3, [r7, #2]
 8001904:	4613      	mov	r3, r2
 8001906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001908:	787b      	ldrb	r3, [r7, #1]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001914:	e003      	b.n	800191e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001916:	887b      	ldrh	r3, [r7, #2]
 8001918:	041a      	lsls	r2, r3, #16
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	619a      	str	r2, [r3, #24]
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr

0800192a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800192a:	b480      	push	{r7}
 800192c:	b085      	sub	sp, #20
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
 800193a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800193c:	887a      	ldrh	r2, [r7, #2]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	041a      	lsls	r2, r3, #16
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43d9      	mvns	r1, r3
 8001948:	887b      	ldrh	r3, [r7, #2]
 800194a:	400b      	ands	r3, r1
 800194c:	431a      	orrs	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	619a      	str	r2, [r3, #24]
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
	...

08001960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800196e:	2301      	movs	r3, #1
 8001970:	e267      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0301 	and.w	r3, r3, #1
 800197a:	2b00      	cmp	r3, #0
 800197c:	d075      	beq.n	8001a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800197e:	4b88      	ldr	r3, [pc, #544]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 030c 	and.w	r3, r3, #12
 8001986:	2b04      	cmp	r3, #4
 8001988:	d00c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800198a:	4b85      	ldr	r3, [pc, #532]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001992:	2b08      	cmp	r3, #8
 8001994:	d112      	bne.n	80019bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001996:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800199e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019a2:	d10b      	bne.n	80019bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	4b7e      	ldr	r3, [pc, #504]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d05b      	beq.n	8001a68 <HAL_RCC_OscConfig+0x108>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d157      	bne.n	8001a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e242      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d106      	bne.n	80019d4 <HAL_RCC_OscConfig+0x74>
 80019c6:	4b76      	ldr	r3, [pc, #472]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a75      	ldr	r2, [pc, #468]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d0:	6013      	str	r3, [r2, #0]
 80019d2:	e01d      	b.n	8001a10 <HAL_RCC_OscConfig+0xb0>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019dc:	d10c      	bne.n	80019f8 <HAL_RCC_OscConfig+0x98>
 80019de:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6f      	ldr	r2, [pc, #444]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019e8:	6013      	str	r3, [r2, #0]
 80019ea:	4b6d      	ldr	r3, [pc, #436]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a6c      	ldr	r2, [pc, #432]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6013      	str	r3, [r2, #0]
 80019f6:	e00b      	b.n	8001a10 <HAL_RCC_OscConfig+0xb0>
 80019f8:	4b69      	ldr	r3, [pc, #420]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a68      	ldr	r2, [pc, #416]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 80019fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b66      	ldr	r3, [pc, #408]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a65      	ldr	r2, [pc, #404]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d013      	beq.n	8001a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff fb0c 	bl	8001034 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fb08 	bl	8001034 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e207      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	4b5b      	ldr	r3, [pc, #364]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f0      	beq.n	8001a20 <HAL_RCC_OscConfig+0xc0>
 8001a3e:	e014      	b.n	8001a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff faf8 	bl	8001034 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a48:	f7ff faf4 	bl	8001034 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b64      	cmp	r3, #100	; 0x64
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1f3      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	4b51      	ldr	r3, [pc, #324]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f0      	bne.n	8001a48 <HAL_RCC_OscConfig+0xe8>
 8001a66:	e000      	b.n	8001a6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d063      	beq.n	8001b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a76:	4b4a      	ldr	r3, [pc, #296]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d00b      	beq.n	8001a9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a82:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d11c      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8e:	4b44      	ldr	r3, [pc, #272]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d116      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d005      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x152>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	68db      	ldr	r3, [r3, #12]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d001      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e1c7      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ab2:	4b3b      	ldr	r3, [pc, #236]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4937      	ldr	r1, [pc, #220]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ac6:	e03a      	b.n	8001b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d020      	beq.n	8001b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad0:	4b34      	ldr	r3, [pc, #208]	; (8001ba4 <HAL_RCC_OscConfig+0x244>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad6:	f7ff faad 	bl	8001034 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ade:	f7ff faa9 	bl	8001034 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e1a8      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	4b2b      	ldr	r3, [pc, #172]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0302 	and.w	r3, r3, #2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d0f0      	beq.n	8001ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afc:	4b28      	ldr	r3, [pc, #160]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4925      	ldr	r1, [pc, #148]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	600b      	str	r3, [r1, #0]
 8001b10:	e015      	b.n	8001b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b12:	4b24      	ldr	r3, [pc, #144]	; (8001ba4 <HAL_RCC_OscConfig+0x244>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fa8c 	bl	8001034 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b20:	f7ff fa88 	bl	8001034 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e187      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d036      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d016      	beq.n	8001b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b52:	4b15      	ldr	r3, [pc, #84]	; (8001ba8 <HAL_RCC_OscConfig+0x248>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b58:	f7ff fa6c 	bl	8001034 <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b60:	f7ff fa68 	bl	8001034 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e167      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_RCC_OscConfig+0x240>)
 8001b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x200>
 8001b7e:	e01b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_OscConfig+0x248>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b86:	f7ff fa55 	bl	8001034 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b8c:	e00e      	b.n	8001bac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b8e:	f7ff fa51 	bl	8001034 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d907      	bls.n	8001bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e150      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
 8001ba0:	40023800 	.word	0x40023800
 8001ba4:	42470000 	.word	0x42470000
 8001ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	4b88      	ldr	r3, [pc, #544]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1ea      	bne.n	8001b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8097 	beq.w	8001cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bca:	4b81      	ldr	r3, [pc, #516]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d10f      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	4b7d      	ldr	r3, [pc, #500]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	4a7c      	ldr	r2, [pc, #496]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be4:	6413      	str	r3, [r2, #64]	; 0x40
 8001be6:	4b7a      	ldr	r3, [pc, #488]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bf6:	4b77      	ldr	r3, [pc, #476]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d118      	bne.n	8001c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c02:	4b74      	ldr	r3, [pc, #464]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a73      	ldr	r2, [pc, #460]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fa11 	bl	8001034 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	e008      	b.n	8001c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c16:	f7ff fa0d 	bl	8001034 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e10c      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c28:	4b6a      	ldr	r3, [pc, #424]	; (8001dd4 <HAL_RCC_OscConfig+0x474>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x2ea>
 8001c3c:	4b64      	ldr	r3, [pc, #400]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	4a63      	ldr	r2, [pc, #396]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6713      	str	r3, [r2, #112]	; 0x70
 8001c48:	e01c      	b.n	8001c84 <HAL_RCC_OscConfig+0x324>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d10c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x30c>
 8001c52:	4b5f      	ldr	r3, [pc, #380]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c56:	4a5e      	ldr	r2, [pc, #376]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c58:	f043 0304 	orr.w	r3, r3, #4
 8001c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c5e:	4b5c      	ldr	r3, [pc, #368]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c62:	4a5b      	ldr	r2, [pc, #364]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6a:	e00b      	b.n	8001c84 <HAL_RCC_OscConfig+0x324>
 8001c6c:	4b58      	ldr	r3, [pc, #352]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c70:	4a57      	ldr	r2, [pc, #348]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70
 8001c78:	4b55      	ldr	r3, [pc, #340]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	4a54      	ldr	r2, [pc, #336]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001c7e:	f023 0304 	bic.w	r3, r3, #4
 8001c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d015      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7ff f9d2 	bl	8001034 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7ff f9ce 	bl	8001034 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e0cb      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001caa:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d0ee      	beq.n	8001c94 <HAL_RCC_OscConfig+0x334>
 8001cb6:	e014      	b.n	8001ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff f9bc 	bl	8001034 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc0:	f7ff f9b8 	bl	8001034 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e0b5      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd6:	4b3e      	ldr	r3, [pc, #248]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1ee      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce2:	7dfb      	ldrb	r3, [r7, #23]
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d105      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce8:	4b39      	ldr	r3, [pc, #228]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	4a38      	ldr	r2, [pc, #224]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a1 	beq.w	8001e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cfe:	4b34      	ldr	r3, [pc, #208]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b08      	cmp	r3, #8
 8001d08:	d05c      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d141      	bne.n	8001d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff f98c 	bl	8001034 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d20:	f7ff f988 	bl	8001034 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e087      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d32:	4b27      	ldr	r3, [pc, #156]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d1f0      	bne.n	8001d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	69da      	ldr	r2, [r3, #28]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	019b      	lsls	r3, r3, #6
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d54:	085b      	lsrs	r3, r3, #1
 8001d56:	3b01      	subs	r3, #1
 8001d58:	041b      	lsls	r3, r3, #16
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d60:	061b      	lsls	r3, r3, #24
 8001d62:	491b      	ldr	r1, [pc, #108]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d64:	4313      	orrs	r3, r2
 8001d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f961 	bl	8001034 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d76:	f7ff f95d 	bl	8001034 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e05c      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d88:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x416>
 8001d94:	e054      	b.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_RCC_OscConfig+0x478>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff f94a 	bl	8001034 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001da4:	f7ff f946 	bl	8001034 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e045      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_RCC_OscConfig+0x470>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d1f0      	bne.n	8001da4 <HAL_RCC_OscConfig+0x444>
 8001dc2:	e03d      	b.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e038      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40007000 	.word	0x40007000
 8001dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x4ec>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d028      	beq.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d121      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d11a      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d111      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	3b01      	subs	r3, #1
 8001e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d001      	beq.n	8001e40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3718      	adds	r7, #24
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800

08001e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d101      	bne.n	8001e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e0cc      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e64:	4b68      	ldr	r3, [pc, #416]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	683a      	ldr	r2, [r7, #0]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d90c      	bls.n	8001e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e72:	4b65      	ldr	r3, [pc, #404]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	b2d2      	uxtb	r2, r2
 8001e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b63      	ldr	r3, [pc, #396]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0307 	and.w	r3, r3, #7
 8001e82:	683a      	ldr	r2, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0b8      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ea4:	4b59      	ldr	r3, [pc, #356]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	4a58      	ldr	r2, [pc, #352]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d005      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ebc:	4b53      	ldr	r3, [pc, #332]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	4a52      	ldr	r2, [pc, #328]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec8:	4b50      	ldr	r3, [pc, #320]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	494d      	ldr	r1, [pc, #308]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d044      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eee:	4b47      	ldr	r3, [pc, #284]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d119      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e07f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d003      	beq.n	8001f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d107      	bne.n	8001f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0e:	4b3f      	ldr	r3, [pc, #252]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d109      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e06f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e067      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f2e:	4b37      	ldr	r3, [pc, #220]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f023 0203 	bic.w	r2, r3, #3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4934      	ldr	r1, [pc, #208]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f40:	f7ff f878 	bl	8001034 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f46:	e00a      	b.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f48:	f7ff f874 	bl	8001034 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e04f      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f5e:	4b2b      	ldr	r3, [pc, #172]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	f003 020c 	and.w	r2, r3, #12
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d1eb      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b25      	ldr	r3, [pc, #148]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0307 	and.w	r3, r3, #7
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d20c      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e032      	b.n	8001ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4916      	ldr	r1, [pc, #88]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	490e      	ldr	r1, [pc, #56]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fd6:	f000 f821 	bl	800201c <HAL_RCC_GetSysClockFreq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	490a      	ldr	r1, [pc, #40]	; (8002010 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	5ccb      	ldrb	r3, [r1, r3]
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	4a09      	ldr	r2, [pc, #36]	; (8002014 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ff2:	4b09      	ldr	r3, [pc, #36]	; (8002018 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7fe fef8 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40023c00 	.word	0x40023c00
 800200c:	40023800 	.word	0x40023800
 8002010:	08007350 	.word	0x08007350
 8002014:	200000b0 	.word	0x200000b0
 8002018:	200000b4 	.word	0x200000b4

0800201c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800201c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002020:	b090      	sub	sp, #64	; 0x40
 8002022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002024:	2300      	movs	r3, #0
 8002026:	637b      	str	r3, [r7, #52]	; 0x34
 8002028:	2300      	movs	r3, #0
 800202a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800202c:	2300      	movs	r3, #0
 800202e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b08      	cmp	r3, #8
 800203e:	d00d      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x40>
 8002040:	2b08      	cmp	r3, #8
 8002042:	f200 80a1 	bhi.w	8002188 <HAL_RCC_GetSysClockFreq+0x16c>
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <HAL_RCC_GetSysClockFreq+0x34>
 800204a:	2b04      	cmp	r3, #4
 800204c:	d003      	beq.n	8002056 <HAL_RCC_GetSysClockFreq+0x3a>
 800204e:	e09b      	b.n	8002188 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002050:	4b53      	ldr	r3, [pc, #332]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002052:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002054:	e09b      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002056:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002058:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800205a:	e098      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800205c:	4b4f      	ldr	r3, [pc, #316]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002066:	4b4d      	ldr	r3, [pc, #308]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d028      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002072:	4b4a      	ldr	r3, [pc, #296]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	2200      	movs	r2, #0
 800207a:	623b      	str	r3, [r7, #32]
 800207c:	627a      	str	r2, [r7, #36]	; 0x24
 800207e:	6a3b      	ldr	r3, [r7, #32]
 8002080:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002084:	2100      	movs	r1, #0
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002088:	fb03 f201 	mul.w	r2, r3, r1
 800208c:	2300      	movs	r3, #0
 800208e:	fb00 f303 	mul.w	r3, r0, r3
 8002092:	4413      	add	r3, r2
 8002094:	4a43      	ldr	r2, [pc, #268]	; (80021a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002096:	fba0 1202 	umull	r1, r2, r0, r2
 800209a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800209c:	460a      	mov	r2, r1
 800209e:	62ba      	str	r2, [r7, #40]	; 0x28
 80020a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020a2:	4413      	add	r3, r2
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020a8:	2200      	movs	r2, #0
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	61fa      	str	r2, [r7, #28]
 80020ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020b6:	f7fe f8e3 	bl	8000280 <__aeabi_uldivmod>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4613      	mov	r3, r2
 80020c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c2:	e053      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020c4:	4b35      	ldr	r3, [pc, #212]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	099b      	lsrs	r3, r3, #6
 80020ca:	2200      	movs	r2, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	617a      	str	r2, [r7, #20]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80020d6:	f04f 0b00 	mov.w	fp, #0
 80020da:	4652      	mov	r2, sl
 80020dc:	465b      	mov	r3, fp
 80020de:	f04f 0000 	mov.w	r0, #0
 80020e2:	f04f 0100 	mov.w	r1, #0
 80020e6:	0159      	lsls	r1, r3, #5
 80020e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ec:	0150      	lsls	r0, r2, #5
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	ebb2 080a 	subs.w	r8, r2, sl
 80020f6:	eb63 090b 	sbc.w	r9, r3, fp
 80020fa:	f04f 0200 	mov.w	r2, #0
 80020fe:	f04f 0300 	mov.w	r3, #0
 8002102:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002106:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800210a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800210e:	ebb2 0408 	subs.w	r4, r2, r8
 8002112:	eb63 0509 	sbc.w	r5, r3, r9
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	00eb      	lsls	r3, r5, #3
 8002120:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002124:	00e2      	lsls	r2, r4, #3
 8002126:	4614      	mov	r4, r2
 8002128:	461d      	mov	r5, r3
 800212a:	eb14 030a 	adds.w	r3, r4, sl
 800212e:	603b      	str	r3, [r7, #0]
 8002130:	eb45 030b 	adc.w	r3, r5, fp
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	f04f 0300 	mov.w	r3, #0
 800213e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002142:	4629      	mov	r1, r5
 8002144:	028b      	lsls	r3, r1, #10
 8002146:	4621      	mov	r1, r4
 8002148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800214c:	4621      	mov	r1, r4
 800214e:	028a      	lsls	r2, r1, #10
 8002150:	4610      	mov	r0, r2
 8002152:	4619      	mov	r1, r3
 8002154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002156:	2200      	movs	r2, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	60fa      	str	r2, [r7, #12]
 800215c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002160:	f7fe f88e 	bl	8000280 <__aeabi_uldivmod>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4613      	mov	r3, r2
 800216a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_GetSysClockFreq+0x180>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	0c1b      	lsrs	r3, r3, #16
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	3301      	adds	r3, #1
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800217c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	fbb2 f3f3 	udiv	r3, r2, r3
 8002184:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002186:	e002      	b.n	800218e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002188:	4b05      	ldr	r3, [pc, #20]	; (80021a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800218a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800218c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800218e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002190:	4618      	mov	r0, r3
 8002192:	3740      	adds	r7, #64	; 0x40
 8002194:	46bd      	mov	sp, r7
 8002196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800219a:	bf00      	nop
 800219c:	40023800 	.word	0x40023800
 80021a0:	00f42400 	.word	0x00f42400
 80021a4:	017d7840 	.word	0x017d7840

080021a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	200000b0 	.word	0x200000b0

080021c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80021c4:	f7ff fff0 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	0a9b      	lsrs	r3, r3, #10
 80021d0:	f003 0307 	and.w	r3, r3, #7
 80021d4:	4903      	ldr	r1, [pc, #12]	; (80021e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d6:	5ccb      	ldrb	r3, [r1, r3]
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40023800 	.word	0x40023800
 80021e4:	08007360 	.word	0x08007360

080021e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021ec:	f7ff ffdc 	bl	80021a8 <HAL_RCC_GetHCLKFreq>
 80021f0:	4602      	mov	r2, r0
 80021f2:	4b05      	ldr	r3, [pc, #20]	; (8002208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	0b5b      	lsrs	r3, r3, #13
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	4903      	ldr	r1, [pc, #12]	; (800220c <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fe:	5ccb      	ldrb	r3, [r1, r3]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002204:	4618      	mov	r0, r3
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40023800 	.word	0x40023800
 800220c:	08007360 	.word	0x08007360

08002210 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	220f      	movs	r2, #15
 800221e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <HAL_RCC_GetClockConfig+0x5c>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0203 	and.w	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <HAL_RCC_GetClockConfig+0x5c>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002238:	4b0c      	ldr	r3, [pc, #48]	; (800226c <HAL_RCC_GetClockConfig+0x5c>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_RCC_GetClockConfig+0x5c>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	08db      	lsrs	r3, r3, #3
 800224a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002252:	4b07      	ldr	r3, [pc, #28]	; (8002270 <HAL_RCC_GetClockConfig+0x60>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0207 	and.w	r2, r3, #7
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	601a      	str	r2, [r3, #0]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr
 800226a:	bf00      	nop
 800226c:	40023800 	.word	0x40023800
 8002270:	40023c00 	.word	0x40023c00

08002274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e041      	b.n	800230a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d106      	bne.n	80022a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f000 f839 	bl	8002312 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2202      	movs	r2, #2
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3304      	adds	r3, #4
 80022b0:	4619      	mov	r1, r3
 80022b2:	4610      	mov	r0, r2
 80022b4:	f000 f9d8 	bl	8002668 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}

08002312 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b01      	cmp	r3, #1
 800233a:	d001      	beq.n	8002340 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e04e      	b.n	80023de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2202      	movs	r2, #2
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f042 0201 	orr.w	r2, r2, #1
 8002356:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a23      	ldr	r2, [pc, #140]	; (80023ec <HAL_TIM_Base_Start_IT+0xc4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d022      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800236a:	d01d      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a1f      	ldr	r2, [pc, #124]	; (80023f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d018      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a1e      	ldr	r2, [pc, #120]	; (80023f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d013      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a1c      	ldr	r2, [pc, #112]	; (80023f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00e      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a1b      	ldr	r2, [pc, #108]	; (80023fc <HAL_TIM_Base_Start_IT+0xd4>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d009      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a19      	ldr	r2, [pc, #100]	; (8002400 <HAL_TIM_Base_Start_IT+0xd8>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d004      	beq.n	80023a8 <HAL_TIM_Base_Start_IT+0x80>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <HAL_TIM_Base_Start_IT+0xdc>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d111      	bne.n	80023cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d010      	beq.n	80023dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f042 0201 	orr.w	r2, r2, #1
 80023c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023ca:	e007      	b.n	80023dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0201 	orr.w	r2, r2, #1
 80023da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40000400 	.word	0x40000400
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40000c00 	.word	0x40000c00
 80023fc:	40010400 	.word	0x40010400
 8002400:	40014000 	.word	0x40014000
 8002404:	40001800 	.word	0x40001800

08002408 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b02      	cmp	r3, #2
 800241c:	d122      	bne.n	8002464 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b02      	cmp	r3, #2
 800242a:	d11b      	bne.n	8002464 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f06f 0202 	mvn.w	r2, #2
 8002434:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	f003 0303 	and.w	r3, r3, #3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 f8ee 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 8002450:	e005      	b.n	800245e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f8e0 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 f8f1 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2200      	movs	r2, #0
 8002462:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	f003 0304 	and.w	r3, r3, #4
 800246e:	2b04      	cmp	r3, #4
 8002470:	d122      	bne.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b04      	cmp	r3, #4
 800247e:	d11b      	bne.n	80024b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f06f 0204 	mvn.w	r2, #4
 8002488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	699b      	ldr	r3, [r3, #24]
 8002496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 f8c4 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 80024a4:	e005      	b.n	80024b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f8b6 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f8c7 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	f003 0308 	and.w	r3, r3, #8
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d122      	bne.n	800250c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d11b      	bne.n	800250c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f06f 0208 	mvn.w	r2, #8
 80024dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2204      	movs	r2, #4
 80024e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f000 f89a 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 80024f8:	e005      	b.n	8002506 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f88c 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f000 f89d 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	2b10      	cmp	r3, #16
 8002518:	d122      	bne.n	8002560 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	f003 0310 	and.w	r3, r3, #16
 8002524:	2b10      	cmp	r3, #16
 8002526:	d11b      	bne.n	8002560 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f06f 0210 	mvn.w	r2, #16
 8002530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2208      	movs	r2, #8
 8002536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f870 	bl	800262c <HAL_TIM_IC_CaptureCallback>
 800254c:	e005      	b.n	800255a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 f862 	bl	8002618 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 f873 	bl	8002640 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b01      	cmp	r3, #1
 800256c:	d10e      	bne.n	800258c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b01      	cmp	r3, #1
 800257a:	d107      	bne.n	800258c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f06f 0201 	mvn.w	r2, #1
 8002584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fb88 	bl	8000c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002596:	2b80      	cmp	r3, #128	; 0x80
 8002598:	d10e      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025a4:	2b80      	cmp	r3, #128	; 0x80
 80025a6:	d107      	bne.n	80025b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f902 	bl	80027bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025c2:	2b40      	cmp	r3, #64	; 0x40
 80025c4:	d10e      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d0:	2b40      	cmp	r3, #64	; 0x40
 80025d2:	d107      	bne.n	80025e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f838 	bl	8002654 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b20      	cmp	r3, #32
 80025f0:	d10e      	bne.n	8002610 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d107      	bne.n	8002610 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f06f 0220 	mvn.w	r2, #32
 8002608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f8cc 	bl	80027a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002610:	bf00      	nop
 8002612:	3708      	adds	r7, #8
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002668:	b480      	push	{r7}
 800266a:	b085      	sub	sp, #20
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a40      	ldr	r2, [pc, #256]	; (800277c <TIM_Base_SetConfig+0x114>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d013      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002686:	d00f      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a3d      	ldr	r2, [pc, #244]	; (8002780 <TIM_Base_SetConfig+0x118>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d00b      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	4a3c      	ldr	r2, [pc, #240]	; (8002784 <TIM_Base_SetConfig+0x11c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d007      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a3b      	ldr	r2, [pc, #236]	; (8002788 <TIM_Base_SetConfig+0x120>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d003      	beq.n	80026a8 <TIM_Base_SetConfig+0x40>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a3a      	ldr	r2, [pc, #232]	; (800278c <TIM_Base_SetConfig+0x124>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d108      	bne.n	80026ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a2f      	ldr	r2, [pc, #188]	; (800277c <TIM_Base_SetConfig+0x114>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02b      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c8:	d027      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a2c      	ldr	r2, [pc, #176]	; (8002780 <TIM_Base_SetConfig+0x118>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d023      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a2b      	ldr	r2, [pc, #172]	; (8002784 <TIM_Base_SetConfig+0x11c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d01f      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <TIM_Base_SetConfig+0x120>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01b      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a29      	ldr	r2, [pc, #164]	; (800278c <TIM_Base_SetConfig+0x124>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d017      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a28      	ldr	r2, [pc, #160]	; (8002790 <TIM_Base_SetConfig+0x128>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d013      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a27      	ldr	r2, [pc, #156]	; (8002794 <TIM_Base_SetConfig+0x12c>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d00f      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a26      	ldr	r2, [pc, #152]	; (8002798 <TIM_Base_SetConfig+0x130>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00b      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a25      	ldr	r2, [pc, #148]	; (800279c <TIM_Base_SetConfig+0x134>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d007      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a24      	ldr	r2, [pc, #144]	; (80027a0 <TIM_Base_SetConfig+0x138>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d003      	beq.n	800271a <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a23      	ldr	r2, [pc, #140]	; (80027a4 <TIM_Base_SetConfig+0x13c>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d108      	bne.n	800272c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	4313      	orrs	r3, r2
 800272a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	4313      	orrs	r3, r2
 8002738:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <TIM_Base_SetConfig+0x114>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d003      	beq.n	8002760 <TIM_Base_SetConfig+0xf8>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	4a0c      	ldr	r2, [pc, #48]	; (800278c <TIM_Base_SetConfig+0x124>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d103      	bne.n	8002768 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	615a      	str	r2, [r3, #20]
}
 800276e:	bf00      	nop
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40010000 	.word	0x40010000
 8002780:	40000400 	.word	0x40000400
 8002784:	40000800 	.word	0x40000800
 8002788:	40000c00 	.word	0x40000c00
 800278c:	40010400 	.word	0x40010400
 8002790:	40014000 	.word	0x40014000
 8002794:	40014400 	.word	0x40014400
 8002798:	40014800 	.word	0x40014800
 800279c:	40001800 	.word	0x40001800
 80027a0:	40001c00 	.word	0x40001c00
 80027a4:	40002000 	.word	0x40002000

080027a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ce:	4770      	bx	lr

080027d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e03f      	b.n	8002862 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d106      	bne.n	80027fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7fe fa90 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002812:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 fe0d 	bl	8003434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691a      	ldr	r2, [r3, #16]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002828:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	695a      	ldr	r2, [r3, #20]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002838:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68da      	ldr	r2, [r3, #12]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002848:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2220      	movs	r2, #32
 8002854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e021      	b.n	80028c0 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002892:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7fe fa89 	bl	8000dac <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08a      	sub	sp, #40	; 0x28
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	4613      	mov	r3, r2
 80028d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b20      	cmp	r3, #32
 80028e6:	d17c      	bne.n	80029e2 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d002      	beq.n	80028f4 <HAL_UART_Transmit+0x2c>
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e075      	b.n	80029e4 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_UART_Transmit+0x3e>
 8002902:	2302      	movs	r3, #2
 8002904:	e06e      	b.n	80029e4 <HAL_UART_Transmit+0x11c>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2221      	movs	r2, #33	; 0x21
 8002918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800291c:	f7fe fb8a 	bl	8001034 <HAL_GetTick>
 8002920:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	88fa      	ldrh	r2, [r7, #6]
 800292c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002936:	d108      	bne.n	800294a <HAL_UART_Transmit+0x82>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d104      	bne.n	800294a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002940:	2300      	movs	r3, #0
 8002942:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	e003      	b.n	8002952 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2200      	movs	r2, #0
 8002956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800295a:	e02a      	b.n	80029b2 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2200      	movs	r2, #0
 8002964:	2180      	movs	r1, #128	; 0x80
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fb1e 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e036      	b.n	80029e4 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d10b      	bne.n	8002994 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	881b      	ldrh	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800298a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	3302      	adds	r3, #2
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	e007      	b.n	80029a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	781a      	ldrb	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	3301      	adds	r3, #1
 80029a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1cf      	bne.n	800295c <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	2200      	movs	r2, #0
 80029c4:	2140      	movs	r1, #64	; 0x40
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 faee 	bl	8002fa8 <UART_WaitOnFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e006      	b.n	80029e4 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2220      	movs	r2, #32
 80029da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d11d      	bne.n	8002a42 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_UART_Receive_IT+0x26>
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e016      	b.n	8002a44 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_UART_Receive_IT+0x38>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e00f      	b.n	8002a44 <HAL_UART_Receive_IT+0x58>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a32:	88fb      	ldrh	r3, [r7, #6]
 8002a34:	461a      	mov	r2, r3
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 fb23 	bl	8003084 <UART_Start_Receive_IT>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	e000      	b.n	8002a44 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
  }
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b0ba      	sub	sp, #232	; 0xe8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10f      	bne.n	8002ab2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d009      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x66>
 8002a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	f000 fc07 	bl	80032be <UART_Receive_IT>
      return;
 8002ab0:	e256      	b.n	8002f60 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002ab2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 80de 	beq.w	8002c78 <HAL_UART_IRQHandler+0x22c>
 8002abc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d106      	bne.n	8002ad6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002acc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f000 80d1 	beq.w	8002c78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <HAL_UART_IRQHandler+0xae>
 8002ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d005      	beq.n	8002afa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f043 0201 	orr.w	r2, r3, #1
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_UART_IRQHandler+0xd2>
 8002b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d005      	beq.n	8002b1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f043 0202 	orr.w	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00b      	beq.n	8002b42 <HAL_UART_IRQHandler+0xf6>
 8002b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d005      	beq.n	8002b42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f043 0204 	orr.w	r2, r3, #4
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d011      	beq.n	8002b72 <HAL_UART_IRQHandler+0x126>
 8002b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d105      	bne.n	8002b66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d005      	beq.n	8002b72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f043 0208 	orr.w	r2, r3, #8
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 81ed 	beq.w	8002f56 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_UART_IRQHandler+0x14e>
 8002b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d002      	beq.n	8002b9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fb92 	bl	80032be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	bf0c      	ite	eq
 8002ba8:	2301      	moveq	r3, #1
 8002baa:	2300      	movne	r3, #0
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d103      	bne.n	8002bc6 <HAL_UART_IRQHandler+0x17a>
 8002bbe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d04f      	beq.n	8002c66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f000 fa9a 	bl	8003100 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bd6:	2b40      	cmp	r3, #64	; 0x40
 8002bd8:	d141      	bne.n	8002c5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	3314      	adds	r3, #20
 8002be0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bf0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3314      	adds	r3, #20
 8002c02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c16:	e841 2300 	strex	r3, r2, [r1]
 8002c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1d9      	bne.n	8002bda <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d013      	beq.n	8002c56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	4a7d      	ldr	r2, [pc, #500]	; (8002e28 <HAL_UART_IRQHandler+0x3dc>)
 8002c34:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fe fb8a 	bl	8001354 <HAL_DMA_Abort_IT>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c50:	4610      	mov	r0, r2
 8002c52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c54:	e00e      	b.n	8002c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f990 	bl	8002f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c5c:	e00a      	b.n	8002c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 f98c 	bl	8002f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c64:	e006      	b.n	8002c74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 f988 	bl	8002f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c72:	e170      	b.n	8002f56 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	bf00      	nop
    return;
 8002c76:	e16e      	b.n	8002f56 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	f040 814a 	bne.w	8002f16 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c86:	f003 0310 	and.w	r3, r3, #16
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f000 8143 	beq.w	8002f16 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	f000 813c 	beq.w	8002f16 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbe:	2b40      	cmp	r3, #64	; 0x40
 8002cc0:	f040 80b4 	bne.w	8002e2c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002cd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 8140 	beq.w	8002f5a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	f080 8139 	bcs.w	8002f5a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cfa:	f000 8088 	beq.w	8002e0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	330c      	adds	r3, #12
 8002d04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d0c:	e853 3f00 	ldrex	r3, [r3]
 8002d10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d2a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1d9      	bne.n	8002cfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	3314      	adds	r3, #20
 8002d50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d54:	e853 3f00 	ldrex	r3, [r3]
 8002d58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d5c:	f023 0301 	bic.w	r3, r3, #1
 8002d60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3314      	adds	r3, #20
 8002d6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d7a:	e841 2300 	strex	r3, r2, [r1]
 8002d7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1e1      	bne.n	8002d4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	3314      	adds	r3, #20
 8002d8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d90:	e853 3f00 	ldrex	r3, [r3]
 8002d94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3314      	adds	r3, #20
 8002da6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002daa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002db0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002db2:	e841 2300 	strex	r3, r2, [r1]
 8002db6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1e3      	bne.n	8002d86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	330c      	adds	r3, #12
 8002dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dd6:	e853 3f00 	ldrex	r3, [r3]
 8002dda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002ddc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dde:	f023 0310 	bic.w	r3, r3, #16
 8002de2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	330c      	adds	r3, #12
 8002dec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002df0:	65ba      	str	r2, [r7, #88]	; 0x58
 8002df2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002df4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002df6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002df8:	e841 2300 	strex	r3, r2, [r1]
 8002dfc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1e3      	bne.n	8002dcc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fe fa33 	bl	8001274 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f8b6 	bl	8002f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e24:	e099      	b.n	8002f5a <HAL_UART_IRQHandler+0x50e>
 8002e26:	bf00      	nop
 8002e28:	080031c7 	.word	0x080031c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 808b 	beq.w	8002f5e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8086 	beq.w	8002f5e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	330c      	adds	r3, #12
 8002e58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	330c      	adds	r3, #12
 8002e72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e76:	647a      	str	r2, [r7, #68]	; 0x44
 8002e78:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e3      	bne.n	8002e52 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	3314      	adds	r3, #20
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	e853 3f00 	ldrex	r3, [r3]
 8002e98:	623b      	str	r3, [r7, #32]
   return(result);
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f023 0301 	bic.w	r3, r3, #1
 8002ea0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3314      	adds	r3, #20
 8002eaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002eae:	633a      	str	r2, [r7, #48]	; 0x30
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eb6:	e841 2300 	strex	r3, r2, [r1]
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1e3      	bne.n	8002e8a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	330c      	adds	r3, #12
 8002ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	e853 3f00 	ldrex	r3, [r3]
 8002ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0310 	bic.w	r3, r3, #16
 8002ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	330c      	adds	r3, #12
 8002ef0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ef4:	61fa      	str	r2, [r7, #28]
 8002ef6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef8:	69b9      	ldr	r1, [r7, #24]
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	e841 2300 	strex	r3, r2, [r1]
 8002f00:	617b      	str	r3, [r7, #20]
   return(result);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1e3      	bne.n	8002ed0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f83e 	bl	8002f90 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f14:	e023      	b.n	8002f5e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d009      	beq.n	8002f36 <HAL_UART_IRQHandler+0x4ea>
 8002f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f95d 	bl	80031ee <UART_Transmit_IT>
    return;
 8002f34:	e014      	b.n	8002f60 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00e      	beq.n	8002f60 <HAL_UART_IRQHandler+0x514>
 8002f42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d008      	beq.n	8002f60 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f99d 	bl	800328e <UART_EndTransmit_IT>
    return;
 8002f54:	e004      	b.n	8002f60 <HAL_UART_IRQHandler+0x514>
    return;
 8002f56:	bf00      	nop
 8002f58:	e002      	b.n	8002f60 <HAL_UART_IRQHandler+0x514>
      return;
 8002f5a:	bf00      	nop
 8002f5c:	e000      	b.n	8002f60 <HAL_UART_IRQHandler+0x514>
      return;
 8002f5e:	bf00      	nop
  }
}
 8002f60:	37e8      	adds	r7, #232	; 0xe8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop

08002f68 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b090      	sub	sp, #64	; 0x40
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	603b      	str	r3, [r7, #0]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fb8:	e050      	b.n	800305c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d04c      	beq.n	800305c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d007      	beq.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fc8:	f7fe f834 	bl	8001034 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d241      	bcs.n	800305c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	330c      	adds	r3, #12
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	e853 3f00 	ldrex	r3, [r3]
 8002fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ff8:	637a      	str	r2, [r7, #52]	; 0x34
 8002ffa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003000:	e841 2300 	strex	r3, r2, [r1]
 8003004:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1e5      	bne.n	8002fd8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	3314      	adds	r3, #20
 8003012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	e853 3f00 	ldrex	r3, [r3]
 800301a:	613b      	str	r3, [r7, #16]
   return(result);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f023 0301 	bic.w	r3, r3, #1
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3314      	adds	r3, #20
 800302a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800302c:	623a      	str	r2, [r7, #32]
 800302e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003030:	69f9      	ldr	r1, [r7, #28]
 8003032:	6a3a      	ldr	r2, [r7, #32]
 8003034:	e841 2300 	strex	r3, r2, [r1]
 8003038:	61bb      	str	r3, [r7, #24]
   return(result);
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1e5      	bne.n	800300c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e00f      	b.n	800307c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4013      	ands	r3, r2
 8003066:	68ba      	ldr	r2, [r7, #8]
 8003068:	429a      	cmp	r2, r3
 800306a:	bf0c      	ite	eq
 800306c:	2301      	moveq	r3, #1
 800306e:	2300      	movne	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	461a      	mov	r2, r3
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	429a      	cmp	r2, r3
 8003078:	d09f      	beq.n	8002fba <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	3740      	adds	r7, #64	; 0x40
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}

08003084 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	4613      	mov	r3, r2
 8003090:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	88fa      	ldrh	r2, [r7, #6]
 80030a2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2222      	movs	r2, #34	; 0x22
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68da      	ldr	r2, [r3, #12]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f042 0201 	orr.w	r2, r2, #1
 80030e0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0220 	orr.w	r2, r2, #32
 80030f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003100:	b480      	push	{r7}
 8003102:	b095      	sub	sp, #84	; 0x54
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003112:	e853 3f00 	ldrex	r3, [r3]
 8003116:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800311a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800311e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	330c      	adds	r3, #12
 8003126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003128:	643a      	str	r2, [r7, #64]	; 0x40
 800312a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800312c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800312e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003130:	e841 2300 	strex	r3, r2, [r1]
 8003134:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1e5      	bne.n	8003108 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3314      	adds	r3, #20
 8003142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	e853 3f00 	ldrex	r3, [r3]
 800314a:	61fb      	str	r3, [r7, #28]
   return(result);
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f023 0301 	bic.w	r3, r3, #1
 8003152:	64bb      	str	r3, [r7, #72]	; 0x48
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800315c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800315e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003160:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003164:	e841 2300 	strex	r3, r2, [r1]
 8003168:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e5      	bne.n	800313c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003174:	2b01      	cmp	r3, #1
 8003176:	d119      	bne.n	80031ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	330c      	adds	r3, #12
 800317e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	e853 3f00 	ldrex	r3, [r3]
 8003186:	60bb      	str	r3, [r7, #8]
   return(result);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f023 0310 	bic.w	r3, r3, #16
 800318e:	647b      	str	r3, [r7, #68]	; 0x44
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003198:	61ba      	str	r2, [r7, #24]
 800319a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6979      	ldr	r1, [r7, #20]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	613b      	str	r3, [r7, #16]
   return(result);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e5      	bne.n	8003178 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031ba:	bf00      	nop
 80031bc:	3754      	adds	r7, #84	; 0x54
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff fecb 	bl	8002f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031e6:	bf00      	nop
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b21      	cmp	r3, #33	; 0x21
 8003200:	d13e      	bne.n	8003280 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800320a:	d114      	bne.n	8003236 <UART_Transmit_IT+0x48>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d110      	bne.n	8003236 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	881b      	ldrh	r3, [r3, #0]
 800321e:	461a      	mov	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003228:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	1c9a      	adds	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	621a      	str	r2, [r3, #32]
 8003234:	e008      	b.n	8003248 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	1c59      	adds	r1, r3, #1
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6211      	str	r1, [r2, #32]
 8003240:	781a      	ldrb	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29b      	uxth	r3, r3
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4619      	mov	r1, r3
 8003256:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10f      	bne.n	800327c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68da      	ldr	r2, [r3, #12]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800326a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68da      	ldr	r2, [r3, #12]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800327a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	e000      	b.n	8003282 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003280:	2302      	movs	r3, #2
  }
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2220      	movs	r2, #32
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff fe5a 	bl	8002f68 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b08c      	sub	sp, #48	; 0x30
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b22      	cmp	r3, #34	; 0x22
 80032d0:	f040 80ab 	bne.w	800342a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032dc:	d117      	bne.n	800330e <UART_Receive_IT+0x50>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	691b      	ldr	r3, [r3, #16]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d113      	bne.n	800330e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032e6:	2300      	movs	r3, #0
 80032e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ee:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003300:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003306:	1c9a      	adds	r2, r3, #2
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
 800330c:	e026      	b.n	800335c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003312:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003314:	2300      	movs	r3, #0
 8003316:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003320:	d007      	beq.n	8003332 <UART_Receive_IT+0x74>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <UART_Receive_IT+0x82>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	b2da      	uxtb	r2, r3
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	701a      	strb	r2, [r3, #0]
 800333e:	e008      	b.n	8003352 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800334c:	b2da      	uxtb	r2, r3
 800334e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003350:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003360:	b29b      	uxth	r3, r3
 8003362:	3b01      	subs	r3, #1
 8003364:	b29b      	uxth	r3, r3
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	4619      	mov	r1, r3
 800336a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800336c:	2b00      	cmp	r3, #0
 800336e:	d15a      	bne.n	8003426 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68da      	ldr	r2, [r3, #12]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f022 0220 	bic.w	r2, r2, #32
 800337e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800338e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695a      	ldr	r2, [r3, #20]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2220      	movs	r2, #32
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d135      	bne.n	800341c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	e853 3f00 	ldrex	r3, [r3]
 80033c4:	613b      	str	r3, [r7, #16]
   return(result);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f023 0310 	bic.w	r3, r3, #16
 80033cc:	627b      	str	r3, [r7, #36]	; 0x24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d6:	623a      	str	r2, [r7, #32]
 80033d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033da:	69f9      	ldr	r1, [r7, #28]
 80033dc:	6a3a      	ldr	r2, [r7, #32]
 80033de:	e841 2300 	strex	r3, r2, [r1]
 80033e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1e5      	bne.n	80033b6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0310 	and.w	r3, r3, #16
 80033f4:	2b10      	cmp	r3, #16
 80033f6:	d10a      	bne.n	800340e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033f8:	2300      	movs	r3, #0
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003412:	4619      	mov	r1, r3
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f7ff fdbb 	bl	8002f90 <HAL_UARTEx_RxEventCallback>
 800341a:	e002      	b.n	8003422 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7fd f9af 	bl	8000780 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e002      	b.n	800342c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	3730      	adds	r7, #48	; 0x30
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	b0c0      	sub	sp, #256	; 0x100
 800343a:	af00      	add	r7, sp, #0
 800343c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800344c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003450:	68d9      	ldr	r1, [r3, #12]
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	ea40 0301 	orr.w	r3, r0, r1
 800345c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800345e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	431a      	orrs	r2, r3
 800346c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	4313      	orrs	r3, r2
 800347c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800348c:	f021 010c 	bic.w	r1, r1, #12
 8003490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800349a:	430b      	orrs	r3, r1
 800349c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80034aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ae:	6999      	ldr	r1, [r3, #24]
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	ea40 0301 	orr.w	r3, r0, r1
 80034ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b8f      	ldr	r3, [pc, #572]	; (8003700 <UART_SetConfig+0x2cc>)
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d005      	beq.n	80034d4 <UART_SetConfig+0xa0>
 80034c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	4b8d      	ldr	r3, [pc, #564]	; (8003704 <UART_SetConfig+0x2d0>)
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d104      	bne.n	80034de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034d4:	f7fe fe88 	bl	80021e8 <HAL_RCC_GetPCLK2Freq>
 80034d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034dc:	e003      	b.n	80034e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034de:	f7fe fe6f 	bl	80021c0 <HAL_RCC_GetPCLK1Freq>
 80034e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f0:	f040 810c 	bne.w	800370c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034f8:	2200      	movs	r2, #0
 80034fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003502:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003506:	4622      	mov	r2, r4
 8003508:	462b      	mov	r3, r5
 800350a:	1891      	adds	r1, r2, r2
 800350c:	65b9      	str	r1, [r7, #88]	; 0x58
 800350e:	415b      	adcs	r3, r3
 8003510:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003512:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003516:	4621      	mov	r1, r4
 8003518:	eb12 0801 	adds.w	r8, r2, r1
 800351c:	4629      	mov	r1, r5
 800351e:	eb43 0901 	adc.w	r9, r3, r1
 8003522:	f04f 0200 	mov.w	r2, #0
 8003526:	f04f 0300 	mov.w	r3, #0
 800352a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800352e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003532:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003536:	4690      	mov	r8, r2
 8003538:	4699      	mov	r9, r3
 800353a:	4623      	mov	r3, r4
 800353c:	eb18 0303 	adds.w	r3, r8, r3
 8003540:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003544:	462b      	mov	r3, r5
 8003546:	eb49 0303 	adc.w	r3, r9, r3
 800354a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800354e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800355a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800355e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003562:	460b      	mov	r3, r1
 8003564:	18db      	adds	r3, r3, r3
 8003566:	653b      	str	r3, [r7, #80]	; 0x50
 8003568:	4613      	mov	r3, r2
 800356a:	eb42 0303 	adc.w	r3, r2, r3
 800356e:	657b      	str	r3, [r7, #84]	; 0x54
 8003570:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003574:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003578:	f7fc fe82 	bl	8000280 <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4b61      	ldr	r3, [pc, #388]	; (8003708 <UART_SetConfig+0x2d4>)
 8003582:	fba3 2302 	umull	r2, r3, r3, r2
 8003586:	095b      	lsrs	r3, r3, #5
 8003588:	011c      	lsls	r4, r3, #4
 800358a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800358e:	2200      	movs	r2, #0
 8003590:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003594:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003598:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800359c:	4642      	mov	r2, r8
 800359e:	464b      	mov	r3, r9
 80035a0:	1891      	adds	r1, r2, r2
 80035a2:	64b9      	str	r1, [r7, #72]	; 0x48
 80035a4:	415b      	adcs	r3, r3
 80035a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035ac:	4641      	mov	r1, r8
 80035ae:	eb12 0a01 	adds.w	sl, r2, r1
 80035b2:	4649      	mov	r1, r9
 80035b4:	eb43 0b01 	adc.w	fp, r3, r1
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035cc:	4692      	mov	sl, r2
 80035ce:	469b      	mov	fp, r3
 80035d0:	4643      	mov	r3, r8
 80035d2:	eb1a 0303 	adds.w	r3, sl, r3
 80035d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035da:	464b      	mov	r3, r9
 80035dc:	eb4b 0303 	adc.w	r3, fp, r3
 80035e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035f8:	460b      	mov	r3, r1
 80035fa:	18db      	adds	r3, r3, r3
 80035fc:	643b      	str	r3, [r7, #64]	; 0x40
 80035fe:	4613      	mov	r3, r2
 8003600:	eb42 0303 	adc.w	r3, r2, r3
 8003604:	647b      	str	r3, [r7, #68]	; 0x44
 8003606:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800360a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800360e:	f7fc fe37 	bl	8000280 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4611      	mov	r1, r2
 8003618:	4b3b      	ldr	r3, [pc, #236]	; (8003708 <UART_SetConfig+0x2d4>)
 800361a:	fba3 2301 	umull	r2, r3, r3, r1
 800361e:	095b      	lsrs	r3, r3, #5
 8003620:	2264      	movs	r2, #100	; 0x64
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	1acb      	subs	r3, r1, r3
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800362e:	4b36      	ldr	r3, [pc, #216]	; (8003708 <UART_SetConfig+0x2d4>)
 8003630:	fba3 2302 	umull	r2, r3, r3, r2
 8003634:	095b      	lsrs	r3, r3, #5
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800363c:	441c      	add	r4, r3
 800363e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003642:	2200      	movs	r2, #0
 8003644:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003648:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800364c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003650:	4642      	mov	r2, r8
 8003652:	464b      	mov	r3, r9
 8003654:	1891      	adds	r1, r2, r2
 8003656:	63b9      	str	r1, [r7, #56]	; 0x38
 8003658:	415b      	adcs	r3, r3
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800365c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003660:	4641      	mov	r1, r8
 8003662:	1851      	adds	r1, r2, r1
 8003664:	6339      	str	r1, [r7, #48]	; 0x30
 8003666:	4649      	mov	r1, r9
 8003668:	414b      	adcs	r3, r1
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003678:	4659      	mov	r1, fp
 800367a:	00cb      	lsls	r3, r1, #3
 800367c:	4651      	mov	r1, sl
 800367e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003682:	4651      	mov	r1, sl
 8003684:	00ca      	lsls	r2, r1, #3
 8003686:	4610      	mov	r0, r2
 8003688:	4619      	mov	r1, r3
 800368a:	4603      	mov	r3, r0
 800368c:	4642      	mov	r2, r8
 800368e:	189b      	adds	r3, r3, r2
 8003690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003694:	464b      	mov	r3, r9
 8003696:	460a      	mov	r2, r1
 8003698:	eb42 0303 	adc.w	r3, r2, r3
 800369c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036b4:	460b      	mov	r3, r1
 80036b6:	18db      	adds	r3, r3, r3
 80036b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ba:	4613      	mov	r3, r2
 80036bc:	eb42 0303 	adc.w	r3, r2, r3
 80036c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036ca:	f7fc fdd9 	bl	8000280 <__aeabi_uldivmod>
 80036ce:	4602      	mov	r2, r0
 80036d0:	460b      	mov	r3, r1
 80036d2:	4b0d      	ldr	r3, [pc, #52]	; (8003708 <UART_SetConfig+0x2d4>)
 80036d4:	fba3 1302 	umull	r1, r3, r3, r2
 80036d8:	095b      	lsrs	r3, r3, #5
 80036da:	2164      	movs	r1, #100	; 0x64
 80036dc:	fb01 f303 	mul.w	r3, r1, r3
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	00db      	lsls	r3, r3, #3
 80036e4:	3332      	adds	r3, #50	; 0x32
 80036e6:	4a08      	ldr	r2, [pc, #32]	; (8003708 <UART_SetConfig+0x2d4>)
 80036e8:	fba2 2303 	umull	r2, r3, r2, r3
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	f003 0207 	and.w	r2, r3, #7
 80036f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4422      	add	r2, r4
 80036fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036fc:	e105      	b.n	800390a <UART_SetConfig+0x4d6>
 80036fe:	bf00      	nop
 8003700:	40011000 	.word	0x40011000
 8003704:	40011400 	.word	0x40011400
 8003708:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800370c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003710:	2200      	movs	r2, #0
 8003712:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003716:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800371a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800371e:	4642      	mov	r2, r8
 8003720:	464b      	mov	r3, r9
 8003722:	1891      	adds	r1, r2, r2
 8003724:	6239      	str	r1, [r7, #32]
 8003726:	415b      	adcs	r3, r3
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
 800372a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800372e:	4641      	mov	r1, r8
 8003730:	1854      	adds	r4, r2, r1
 8003732:	4649      	mov	r1, r9
 8003734:	eb43 0501 	adc.w	r5, r3, r1
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	00eb      	lsls	r3, r5, #3
 8003742:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003746:	00e2      	lsls	r2, r4, #3
 8003748:	4614      	mov	r4, r2
 800374a:	461d      	mov	r5, r3
 800374c:	4643      	mov	r3, r8
 800374e:	18e3      	adds	r3, r4, r3
 8003750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003754:	464b      	mov	r3, r9
 8003756:	eb45 0303 	adc.w	r3, r5, r3
 800375a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800375e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800376a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800377a:	4629      	mov	r1, r5
 800377c:	008b      	lsls	r3, r1, #2
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003784:	4621      	mov	r1, r4
 8003786:	008a      	lsls	r2, r1, #2
 8003788:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800378c:	f7fc fd78 	bl	8000280 <__aeabi_uldivmod>
 8003790:	4602      	mov	r2, r0
 8003792:	460b      	mov	r3, r1
 8003794:	4b60      	ldr	r3, [pc, #384]	; (8003918 <UART_SetConfig+0x4e4>)
 8003796:	fba3 2302 	umull	r2, r3, r3, r2
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	011c      	lsls	r4, r3, #4
 800379e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037a2:	2200      	movs	r2, #0
 80037a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80037a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037b0:	4642      	mov	r2, r8
 80037b2:	464b      	mov	r3, r9
 80037b4:	1891      	adds	r1, r2, r2
 80037b6:	61b9      	str	r1, [r7, #24]
 80037b8:	415b      	adcs	r3, r3
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c0:	4641      	mov	r1, r8
 80037c2:	1851      	adds	r1, r2, r1
 80037c4:	6139      	str	r1, [r7, #16]
 80037c6:	4649      	mov	r1, r9
 80037c8:	414b      	adcs	r3, r1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	f04f 0300 	mov.w	r3, #0
 80037d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037d8:	4659      	mov	r1, fp
 80037da:	00cb      	lsls	r3, r1, #3
 80037dc:	4651      	mov	r1, sl
 80037de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e2:	4651      	mov	r1, sl
 80037e4:	00ca      	lsls	r2, r1, #3
 80037e6:	4610      	mov	r0, r2
 80037e8:	4619      	mov	r1, r3
 80037ea:	4603      	mov	r3, r0
 80037ec:	4642      	mov	r2, r8
 80037ee:	189b      	adds	r3, r3, r2
 80037f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037f4:	464b      	mov	r3, r9
 80037f6:	460a      	mov	r2, r1
 80037f8:	eb42 0303 	adc.w	r3, r2, r3
 80037fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	67bb      	str	r3, [r7, #120]	; 0x78
 800380a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800380c:	f04f 0200 	mov.w	r2, #0
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003818:	4649      	mov	r1, r9
 800381a:	008b      	lsls	r3, r1, #2
 800381c:	4641      	mov	r1, r8
 800381e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003822:	4641      	mov	r1, r8
 8003824:	008a      	lsls	r2, r1, #2
 8003826:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800382a:	f7fc fd29 	bl	8000280 <__aeabi_uldivmod>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4b39      	ldr	r3, [pc, #228]	; (8003918 <UART_SetConfig+0x4e4>)
 8003834:	fba3 1302 	umull	r1, r3, r3, r2
 8003838:	095b      	lsrs	r3, r3, #5
 800383a:	2164      	movs	r1, #100	; 0x64
 800383c:	fb01 f303 	mul.w	r3, r1, r3
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	3332      	adds	r3, #50	; 0x32
 8003846:	4a34      	ldr	r2, [pc, #208]	; (8003918 <UART_SetConfig+0x4e4>)
 8003848:	fba2 2303 	umull	r2, r3, r2, r3
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003852:	441c      	add	r4, r3
 8003854:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003858:	2200      	movs	r2, #0
 800385a:	673b      	str	r3, [r7, #112]	; 0x70
 800385c:	677a      	str	r2, [r7, #116]	; 0x74
 800385e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003862:	4642      	mov	r2, r8
 8003864:	464b      	mov	r3, r9
 8003866:	1891      	adds	r1, r2, r2
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	415b      	adcs	r3, r3
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003872:	4641      	mov	r1, r8
 8003874:	1851      	adds	r1, r2, r1
 8003876:	6039      	str	r1, [r7, #0]
 8003878:	4649      	mov	r1, r9
 800387a:	414b      	adcs	r3, r1
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	f04f 0200 	mov.w	r2, #0
 8003882:	f04f 0300 	mov.w	r3, #0
 8003886:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800388a:	4659      	mov	r1, fp
 800388c:	00cb      	lsls	r3, r1, #3
 800388e:	4651      	mov	r1, sl
 8003890:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003894:	4651      	mov	r1, sl
 8003896:	00ca      	lsls	r2, r1, #3
 8003898:	4610      	mov	r0, r2
 800389a:	4619      	mov	r1, r3
 800389c:	4603      	mov	r3, r0
 800389e:	4642      	mov	r2, r8
 80038a0:	189b      	adds	r3, r3, r2
 80038a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038a4:	464b      	mov	r3, r9
 80038a6:	460a      	mov	r2, r1
 80038a8:	eb42 0303 	adc.w	r3, r2, r3
 80038ac:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	663b      	str	r3, [r7, #96]	; 0x60
 80038b8:	667a      	str	r2, [r7, #100]	; 0x64
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038c6:	4649      	mov	r1, r9
 80038c8:	008b      	lsls	r3, r1, #2
 80038ca:	4641      	mov	r1, r8
 80038cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d0:	4641      	mov	r1, r8
 80038d2:	008a      	lsls	r2, r1, #2
 80038d4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038d8:	f7fc fcd2 	bl	8000280 <__aeabi_uldivmod>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4b0d      	ldr	r3, [pc, #52]	; (8003918 <UART_SetConfig+0x4e4>)
 80038e2:	fba3 1302 	umull	r1, r3, r3, r2
 80038e6:	095b      	lsrs	r3, r3, #5
 80038e8:	2164      	movs	r1, #100	; 0x64
 80038ea:	fb01 f303 	mul.w	r3, r1, r3
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	3332      	adds	r3, #50	; 0x32
 80038f4:	4a08      	ldr	r2, [pc, #32]	; (8003918 <UART_SetConfig+0x4e4>)
 80038f6:	fba2 2303 	umull	r2, r3, r2, r3
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	f003 020f 	and.w	r2, r3, #15
 8003900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4422      	add	r2, r4
 8003908:	609a      	str	r2, [r3, #8]
}
 800390a:	bf00      	nop
 800390c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003910:	46bd      	mov	sp, r7
 8003912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003916:	bf00      	nop
 8003918:	51eb851f 	.word	0x51eb851f

0800391c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800391c:	b480      	push	{r7}
 800391e:	b083      	sub	sp, #12
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f103 0208 	add.w	r2, r3, #8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f04f 32ff 	mov.w	r2, #4294967295
 8003934:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f103 0208 	add.w	r2, r3, #8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f103 0208 	add.w	r2, r3, #8
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	683a      	ldr	r2, [r7, #0]
 800399a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1c5a      	adds	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	601a      	str	r2, [r3, #0]
}
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
 80039c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039d4:	d103      	bne.n	80039de <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	60fb      	str	r3, [r7, #12]
 80039dc:	e00c      	b.n	80039f8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3308      	adds	r3, #8
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e002      	b.n	80039ec <vListInsert+0x2e>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d2f6      	bcs.n	80039e6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	601a      	str	r2, [r3, #0]
}
 8003a24:	bf00      	nop
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b085      	sub	sp, #20
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	691b      	ldr	r3, [r3, #16]
 8003a3c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	6892      	ldr	r2, [r2, #8]
 8003a46:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6852      	ldr	r2, [r2, #4]
 8003a50:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d103      	bne.n	8003a64 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	1e5a      	subs	r2, r3, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b086      	sub	sp, #24
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d10a      	bne.n	8003ab2 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003aae:	bf00      	nop
 8003ab0:	e7fe      	b.n	8003ab0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d05d      	beq.n	8003b74 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d059      	beq.n	8003b74 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac8:	2100      	movs	r1, #0
 8003aca:	fba3 2302 	umull	r2, r3, r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d000      	beq.n	8003ad4 <xQueueGenericReset+0x50>
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d14c      	bne.n	8003b74 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 8003ada:	f002 fbd5 	bl	8006288 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae6:	6939      	ldr	r1, [r7, #16]
 8003ae8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003aea:	fb01 f303 	mul.w	r3, r1, r3
 8003aee:	441a      	add	r2, r3
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	2200      	movs	r2, #0
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	6939      	ldr	r1, [r7, #16]
 8003b0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	441a      	add	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	22ff      	movs	r2, #255	; 0xff
 8003b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	22ff      	movs	r2, #255	; 0xff
 8003b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d114      	bne.n	8003b5a <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01a      	beq.n	8003b6e <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	3310      	adds	r3, #16
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f001 fa15 	bl	8004f6c <xTaskRemoveFromEventList>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d012      	beq.n	8003b6e <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003b48:	4b15      	ldr	r3, [pc, #84]	; (8003ba0 <xQueueGenericReset+0x11c>)
 8003b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	e009      	b.n	8003b6e <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	3310      	adds	r3, #16
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f7ff fedc 	bl	800391c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	3324      	adds	r3, #36	; 0x24
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fed7 	bl	800391c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8003b6e:	f002 fbbb 	bl	80062e8 <vPortExitCritical>
 8003b72:	e001      	b.n	8003b78 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d10a      	bne.n	8003b94 <xQueueGenericReset+0x110>
        __asm volatile
 8003b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b82:	f383 8811 	msr	BASEPRI, r3
 8003b86:	f3bf 8f6f 	isb	sy
 8003b8a:	f3bf 8f4f 	dsb	sy
 8003b8e:	60bb      	str	r3, [r7, #8]
    }
 8003b90:	bf00      	nop
 8003b92:	e7fe      	b.n	8003b92 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003b94:	697b      	ldr	r3, [r7, #20]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	e000ed04 	.word	0xe000ed04

08003ba4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d02e      	beq.n	8003c1a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d000      	beq.n	8003bcc <xQueueGenericCreate+0x28>
 8003bca:	2101      	movs	r1, #1
 8003bcc:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d123      	bne.n	8003c1a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003bda:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003bde:	d81c      	bhi.n	8003c1a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	fb02 f303 	mul.w	r3, r2, r3
 8003be8:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	3350      	adds	r3, #80	; 0x50
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f002 fc6c 	bl	80064cc <pvPortMalloc>
 8003bf4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d01c      	beq.n	8003c36 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	3350      	adds	r3, #80	; 0x50
 8003c04:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c06:	79fa      	ldrb	r2, [r7, #7]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	68b9      	ldr	r1, [r7, #8]
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f814 	bl	8003c40 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003c18:	e00d      	b.n	8003c36 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <xQueueGenericCreate+0x92>
        __asm volatile
 8003c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c24:	f383 8811 	msr	BASEPRI, r3
 8003c28:	f3bf 8f6f 	isb	sy
 8003c2c:	f3bf 8f4f 	dsb	sy
 8003c30:	613b      	str	r3, [r7, #16]
    }
 8003c32:	bf00      	nop
 8003c34:	e7fe      	b.n	8003c34 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003c36:	69fb      	ldr	r3, [r7, #28]
    }
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3720      	adds	r7, #32
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	60b9      	str	r1, [r7, #8]
 8003c4a:	607a      	str	r2, [r7, #4]
 8003c4c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d103      	bne.n	8003c5c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e002      	b.n	8003c62 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c6e:	2101      	movs	r1, #1
 8003c70:	69b8      	ldr	r0, [r7, #24]
 8003c72:	f7ff ff07 	bl	8003a84 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
	...

08003c88 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b08e      	sub	sp, #56	; 0x38
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c96:	2300      	movs	r3, #0
 8003c98:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d10a      	bne.n	8003cba <xQueueGenericSend+0x32>
        __asm volatile
 8003ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca8:	f383 8811 	msr	BASEPRI, r3
 8003cac:	f3bf 8f6f 	isb	sy
 8003cb0:	f3bf 8f4f 	dsb	sy
 8003cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003cb6:	bf00      	nop
 8003cb8:	e7fe      	b.n	8003cb8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d103      	bne.n	8003cc8 <xQueueGenericSend+0x40>
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <xQueueGenericSend+0x44>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <xQueueGenericSend+0x46>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10a      	bne.n	8003ce8 <xQueueGenericSend+0x60>
        __asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003ce4:	bf00      	nop
 8003ce6:	e7fe      	b.n	8003ce6 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d103      	bne.n	8003cf6 <xQueueGenericSend+0x6e>
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d101      	bne.n	8003cfa <xQueueGenericSend+0x72>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <xQueueGenericSend+0x74>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <xQueueGenericSend+0x8e>
        __asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	623b      	str	r3, [r7, #32]
    }
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d16:	f001 fb3b 	bl	8005390 <xTaskGetSchedulerState>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d102      	bne.n	8003d26 <xQueueGenericSend+0x9e>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <xQueueGenericSend+0xa2>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <xQueueGenericSend+0xa4>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <xQueueGenericSend+0xbe>
        __asm volatile
 8003d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d34:	f383 8811 	msr	BASEPRI, r3
 8003d38:	f3bf 8f6f 	isb	sy
 8003d3c:	f3bf 8f4f 	dsb	sy
 8003d40:	61fb      	str	r3, [r7, #28]
    }
 8003d42:	bf00      	nop
 8003d44:	e7fe      	b.n	8003d44 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d46:	f002 fa9f 	bl	8006288 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <xQueueGenericSend+0xd4>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d129      	bne.n	8003db0 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d62:	f000 fa19 	bl	8004198 <prvCopyDataToQueue>
 8003d66:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d010      	beq.n	8003d92 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d72:	3324      	adds	r3, #36	; 0x24
 8003d74:	4618      	mov	r0, r3
 8003d76:	f001 f8f9 	bl	8004f6c <xTaskRemoveFromEventList>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d013      	beq.n	8003da8 <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003d80:	4b3f      	ldr	r3, [pc, #252]	; (8003e80 <xQueueGenericSend+0x1f8>)
 8003d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	e00a      	b.n	8003da8 <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003d98:	4b39      	ldr	r3, [pc, #228]	; (8003e80 <xQueueGenericSend+0x1f8>)
 8003d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003da8:	f002 fa9e 	bl	80062e8 <vPortExitCritical>
                return pdPASS;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e063      	b.n	8003e78 <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d103      	bne.n	8003dbe <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003db6:	f002 fa97 	bl	80062e8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e05c      	b.n	8003e78 <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f001 f9a5 	bl	8005118 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003dd2:	f002 fa89 	bl	80062e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003dd6:	f000 fdd3 	bl	8004980 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003dda:	f002 fa55 	bl	8006288 <vPortEnterCritical>
 8003dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003de4:	b25b      	sxtb	r3, r3
 8003de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dea:	d103      	bne.n	8003df4 <xQueueGenericSend+0x16c>
 8003dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003dfa:	b25b      	sxtb	r3, r3
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e00:	d103      	bne.n	8003e0a <xQueueGenericSend+0x182>
 8003e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e0a:	f002 fa6d 	bl	80062e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e0e:	1d3a      	adds	r2, r7, #4
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	4611      	mov	r1, r2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 f994 	bl	8005144 <xTaskCheckForTimeOut>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d124      	bne.n	8003e6c <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e24:	f000 fab0 	bl	8004388 <prvIsQueueFull>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d018      	beq.n	8003e60 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e30:	3310      	adds	r3, #16
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	4611      	mov	r1, r2
 8003e36:	4618      	mov	r0, r3
 8003e38:	f001 f82e 	bl	8004e98 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e3e:	f000 fa3b 	bl	80042b8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003e42:	f000 fdab 	bl	800499c <xTaskResumeAll>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f47f af7c 	bne.w	8003d46 <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8003e4e:	4b0c      	ldr	r3, [pc, #48]	; (8003e80 <xQueueGenericSend+0x1f8>)
 8003e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e54:	601a      	str	r2, [r3, #0]
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	f3bf 8f6f 	isb	sy
 8003e5e:	e772      	b.n	8003d46 <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e62:	f000 fa29 	bl	80042b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e66:	f000 fd99 	bl	800499c <xTaskResumeAll>
 8003e6a:	e76c      	b.n	8003d46 <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003e6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e6e:	f000 fa23 	bl	80042b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e72:	f000 fd93 	bl	800499c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003e76:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3738      	adds	r7, #56	; 0x38
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b090      	sub	sp, #64	; 0x40
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8003e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10a      	bne.n	8003eb2 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003eae:	bf00      	nop
 8003eb0:	e7fe      	b.n	8003eb0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <xQueueGenericSendFromISR+0x3c>
 8003eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <xQueueGenericSendFromISR+0x40>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <xQueueGenericSendFromISR+0x42>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10a      	bne.n	8003ee0 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d103      	bne.n	8003eee <xQueueGenericSendFromISR+0x6a>
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d101      	bne.n	8003ef2 <xQueueGenericSendFromISR+0x6e>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e000      	b.n	8003ef4 <xQueueGenericSendFromISR+0x70>
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10a      	bne.n	8003f0e <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	623b      	str	r3, [r7, #32]
    }
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f0e:	f002 fa9d 	bl	800644c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003f12:	f3ef 8211 	mrs	r2, BASEPRI
 8003f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f1a:	f383 8811 	msr	BASEPRI, r3
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	f3bf 8f4f 	dsb	sy
 8003f26:	61fa      	str	r2, [r7, #28]
 8003f28:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d302      	bcc.n	8003f40 <xQueueGenericSendFromISR+0xbc>
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d13e      	bne.n	8003fbe <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003f56:	f000 f91f 	bl	8004198 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003f5a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f62:	d112      	bne.n	8003f8a <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d025      	beq.n	8003fb8 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6e:	3324      	adds	r3, #36	; 0x24
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fffb 	bl	8004f6c <xTaskRemoveFromEventList>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d01d      	beq.n	8003fb8 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d01a      	beq.n	8003fb8 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e016      	b.n	8003fb8 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003f8a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f90:	d10a      	bne.n	8003fa8 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	617b      	str	r3, [r7, #20]
    }
 8003fa4:	bf00      	nop
 8003fa6:	e7fe      	b.n	8003fa6 <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003fa8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fac:	3301      	adds	r3, #1
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	b25a      	sxtb	r2, r3
 8003fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8003fbc:	e001      	b.n	8003fc2 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003fcc:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3740      	adds	r7, #64	; 0x40
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}

08003fd8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08c      	sub	sp, #48	; 0x30
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <xQueueReceive+0x30>
        __asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	623b      	str	r3, [r7, #32]
    }
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <xQueueReceive+0x3e>
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <xQueueReceive+0x42>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueReceive+0x44>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xQueueReceive+0x5e>
        __asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	61fb      	str	r3, [r7, #28]
    }
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004036:	f001 f9ab 	bl	8005390 <xTaskGetSchedulerState>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d102      	bne.n	8004046 <xQueueReceive+0x6e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d101      	bne.n	800404a <xQueueReceive+0x72>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <xQueueReceive+0x74>
 800404a:	2300      	movs	r3, #0
 800404c:	2b00      	cmp	r3, #0
 800404e:	d10a      	bne.n	8004066 <xQueueReceive+0x8e>
        __asm volatile
 8004050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004054:	f383 8811 	msr	BASEPRI, r3
 8004058:	f3bf 8f6f 	isb	sy
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	61bb      	str	r3, [r7, #24]
    }
 8004062:	bf00      	nop
 8004064:	e7fe      	b.n	8004064 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004066:	f002 f90f 	bl	8006288 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004072:	2b00      	cmp	r3, #0
 8004074:	d01f      	beq.n	80040b6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004076:	68b9      	ldr	r1, [r7, #8]
 8004078:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800407a:	f000 f8f7 	bl	800426c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	1e5a      	subs	r2, r3, #1
 8004082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004084:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00f      	beq.n	80040ae <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800408e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004090:	3310      	adds	r3, #16
 8004092:	4618      	mov	r0, r3
 8004094:	f000 ff6a 	bl	8004f6c <xTaskRemoveFromEventList>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800409e:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <xQueueReceive+0x1bc>)
 80040a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80040ae:	f002 f91b 	bl	80062e8 <vPortExitCritical>
                return pdPASS;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e069      	b.n	800418a <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80040bc:	f002 f914 	bl	80062e8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80040c0:	2300      	movs	r3, #0
 80040c2:	e062      	b.n	800418a <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80040c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80040ca:	f107 0310 	add.w	r3, r7, #16
 80040ce:	4618      	mov	r0, r3
 80040d0:	f001 f822 	bl	8005118 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80040d4:	2301      	movs	r3, #1
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80040d8:	f002 f906 	bl	80062e8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80040dc:	f000 fc50 	bl	8004980 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80040e0:	f002 f8d2 	bl	8006288 <vPortEnterCritical>
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040ea:	b25b      	sxtb	r3, r3
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f0:	d103      	bne.n	80040fa <xQueueReceive+0x122>
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	2200      	movs	r2, #0
 80040f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004100:	b25b      	sxtb	r3, r3
 8004102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004106:	d103      	bne.n	8004110 <xQueueReceive+0x138>
 8004108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800410a:	2200      	movs	r2, #0
 800410c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004110:	f002 f8ea 	bl	80062e8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004114:	1d3a      	adds	r2, r7, #4
 8004116:	f107 0310 	add.w	r3, r7, #16
 800411a:	4611      	mov	r1, r2
 800411c:	4618      	mov	r0, r3
 800411e:	f001 f811 	bl	8005144 <xTaskCheckForTimeOut>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d123      	bne.n	8004170 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800412a:	f000 f917 	bl	800435c <prvIsQueueEmpty>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d017      	beq.n	8004164 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004136:	3324      	adds	r3, #36	; 0x24
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	4611      	mov	r1, r2
 800413c:	4618      	mov	r0, r3
 800413e:	f000 feab 	bl	8004e98 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004144:	f000 f8b8 	bl	80042b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004148:	f000 fc28 	bl	800499c <xTaskResumeAll>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d189      	bne.n	8004066 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <xQueueReceive+0x1bc>)
 8004154:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	f3bf 8f4f 	dsb	sy
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	e780      	b.n	8004066 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004166:	f000 f8a7 	bl	80042b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800416a:	f000 fc17 	bl	800499c <xTaskResumeAll>
 800416e:	e77a      	b.n	8004066 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004170:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004172:	f000 f8a1 	bl	80042b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004176:	f000 fc11 	bl	800499c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800417a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800417c:	f000 f8ee 	bl	800435c <prvIsQueueEmpty>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	f43f af6f 	beq.w	8004066 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004188:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800418a:	4618      	mov	r0, r3
 800418c:	3730      	adds	r7, #48	; 0x30
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	e000ed04 	.word	0xe000ed04

08004198 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d14d      	bne.n	800425a <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f001 f902 	bl	80053cc <xTaskPriorityDisinherit>
 80041c8:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e043      	b.n	800425a <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d119      	bne.n	800420c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6858      	ldr	r0, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	461a      	mov	r2, r3
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	f002 fb9a 	bl	800691c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f0:	441a      	add	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d32b      	bcc.n	800425a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	e026      	b.n	800425a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	68d8      	ldr	r0, [r3, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	461a      	mov	r2, r3
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	f002 fb80 	bl	800691c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	425b      	negs	r3, r3
 8004226:	441a      	add	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d207      	bcs.n	8004248 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004240:	425b      	negs	r3, r3
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d105      	bne.n	800425a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3b01      	subs	r3, #1
 8004258:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004262:	697b      	ldr	r3, [r7, #20]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d018      	beq.n	80042b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	441a      	add	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	d303      	bcc.n	80042a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68d9      	ldr	r1, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	461a      	mov	r2, r3
 80042aa:	6838      	ldr	r0, [r7, #0]
 80042ac:	f002 fb36 	bl	800691c <memcpy>
    }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80042c0:	f001 ffe2 	bl	8006288 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80042cc:	e011      	b.n	80042f2 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3324      	adds	r3, #36	; 0x24
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fe46 	bl	8004f6c <xTaskRemoveFromEventList>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80042e6:	f000 ff93 	bl	8005210 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80042f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	dce9      	bgt.n	80042ce <prvUnlockQueue+0x16>
 80042fa:	e000      	b.n	80042fe <prvUnlockQueue+0x46>
                        break;
 80042fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	22ff      	movs	r2, #255	; 0xff
 8004302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004306:	f001 ffef 	bl	80062e8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800430a:	f001 ffbd 	bl	8006288 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004314:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004316:	e011      	b.n	800433c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d012      	beq.n	8004346 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3310      	adds	r3, #16
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fe21 	bl	8004f6c <xTaskRemoveFromEventList>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004330:	f000 ff6e 	bl	8005210 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004334:	7bbb      	ldrb	r3, [r7, #14]
 8004336:	3b01      	subs	r3, #1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800433c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004340:	2b00      	cmp	r3, #0
 8004342:	dce9      	bgt.n	8004318 <prvUnlockQueue+0x60>
 8004344:	e000      	b.n	8004348 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004346:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	22ff      	movs	r2, #255	; 0xff
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004350:	f001 ffca 	bl	80062e8 <vPortExitCritical>
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004364:	f001 ff90 	bl	8006288 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e001      	b.n	800437a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800437a:	f001 ffb5 	bl	80062e8 <vPortExitCritical>

    return xReturn;
 800437e:	68fb      	ldr	r3, [r7, #12]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004390:	f001 ff7a 	bl	8006288 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800439c:	429a      	cmp	r2, r3
 800439e:	d102      	bne.n	80043a6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80043a0:	2301      	movs	r3, #1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e001      	b.n	80043aa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043aa:	f001 ff9d 	bl	80062e8 <vPortExitCritical>

    return xReturn;
 80043ae:	68fb      	ldr	r3, [r7, #12]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <vQueueAddToRegistry+0x26>
        __asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	60fb      	str	r3, [r7, #12]
    }
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d024      	beq.n	8004432 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e01e      	b.n	800442c <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80043ee:	4a18      	ldr	r2, [pc, #96]	; (8004450 <vQueueAddToRegistry+0x98>)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d105      	bne.n	800440a <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	4a13      	ldr	r2, [pc, #76]	; (8004450 <vQueueAddToRegistry+0x98>)
 8004404:	4413      	add	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
                    break;
 8004408:	e013      	b.n	8004432 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <vQueueAddToRegistry+0x6e>
 8004410:	4a0f      	ldr	r2, [pc, #60]	; (8004450 <vQueueAddToRegistry+0x98>)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d104      	bne.n	8004426 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4a0b      	ldr	r2, [pc, #44]	; (8004450 <vQueueAddToRegistry+0x98>)
 8004422:	4413      	add	r3, r2
 8004424:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	3301      	adds	r3, #1
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	2b07      	cmp	r3, #7
 8004430:	d9dd      	bls.n	80043ee <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d005      	beq.n	8004444 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	20000210 	.word	0x20000210

08004454 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004464:	f001 ff10 	bl	8006288 <vPortEnterCritical>
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800446e:	b25b      	sxtb	r3, r3
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004474:	d103      	bne.n	800447e <vQueueWaitForMessageRestricted+0x2a>
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004484:	b25b      	sxtb	r3, r3
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d103      	bne.n	8004494 <vQueueWaitForMessageRestricted+0x40>
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2200      	movs	r2, #0
 8004490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004494:	f001 ff28 	bl	80062e8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449c:	2b00      	cmp	r3, #0
 800449e:	d106      	bne.n	80044ae <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3324      	adds	r3, #36	; 0x24
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f000 fd19 	bl	8004ee0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80044ae:	6978      	ldr	r0, [r7, #20]
 80044b0:	f7ff ff02 	bl	80042b8 <prvUnlockQueue>
    }
 80044b4:	bf00      	nop
 80044b6:	3718      	adds	r7, #24
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08c      	sub	sp, #48	; 0x30
 80044c0:	af04      	add	r7, sp, #16
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	603b      	str	r3, [r7, #0]
 80044c8:	4613      	mov	r3, r2
 80044ca:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044cc:	88fb      	ldrh	r3, [r7, #6]
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 fffb 	bl	80064cc <pvPortMalloc>
 80044d6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00e      	beq.n	80044fc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044de:	2058      	movs	r0, #88	; 0x58
 80044e0:	f001 fff4 	bl	80064cc <pvPortMalloc>
 80044e4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	631a      	str	r2, [r3, #48]	; 0x30
 80044f2:	e005      	b.n	8004500 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80044f4:	6978      	ldr	r0, [r7, #20]
 80044f6:	f002 f8c9 	bl	800668c <vPortFree>
 80044fa:	e001      	b.n	8004500 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d013      	beq.n	800452e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004506:	88fa      	ldrh	r2, [r7, #6]
 8004508:	2300      	movs	r3, #0
 800450a:	9303      	str	r3, [sp, #12]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	9302      	str	r3, [sp, #8]
 8004510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004512:	9301      	str	r3, [sp, #4]
 8004514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 f80e 	bl	800453e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004522:	69f8      	ldr	r0, [r7, #28]
 8004524:	f000 f8b0 	bl	8004688 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004528:	2301      	movs	r3, #1
 800452a:	61bb      	str	r3, [r7, #24]
 800452c:	e002      	b.n	8004534 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800452e:	f04f 33ff 	mov.w	r3, #4294967295
 8004532:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004534:	69bb      	ldr	r3, [r7, #24]
    }
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b088      	sub	sp, #32
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
 800454a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800454c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	461a      	mov	r2, r3
 8004556:	21a5      	movs	r1, #165	; 0xa5
 8004558:	f002 f9ee 	bl	8006938 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004566:	3b01      	subs	r3, #1
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	f023 0307 	bic.w	r3, r3, #7
 8004574:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	f003 0307 	and.w	r3, r3, #7
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00a      	beq.n	8004596 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	617b      	str	r3, [r7, #20]
    }
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01f      	beq.n	80045dc <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800459c:	2300      	movs	r3, #0
 800459e:	61fb      	str	r3, [r7, #28]
 80045a0:	e012      	b.n	80045c8 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045a2:	68ba      	ldr	r2, [r7, #8]
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	4413      	add	r3, r2
 80045a8:	7819      	ldrb	r1, [r3, #0]
 80045aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	4413      	add	r3, r2
 80045b0:	3334      	adds	r3, #52	; 0x34
 80045b2:	460a      	mov	r2, r1
 80045b4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d006      	beq.n	80045d0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	3301      	adds	r3, #1
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	2b09      	cmp	r3, #9
 80045cc:	d9e9      	bls.n	80045a2 <prvInitialiseNewTask+0x64>
 80045ce:	e000      	b.n	80045d2 <prvInitialiseNewTask+0x94>
            {
                break;
 80045d0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045da:	e003      	b.n	80045e4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d90a      	bls.n	8004600 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80045ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ee:	f383 8811 	msr	BASEPRI, r3
 80045f2:	f3bf 8f6f 	isb	sy
 80045f6:	f3bf 8f4f 	dsb	sy
 80045fa:	613b      	str	r3, [r7, #16]
    }
 80045fc:	bf00      	nop
 80045fe:	e7fe      	b.n	80045fe <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004602:	2b04      	cmp	r3, #4
 8004604:	d901      	bls.n	800460a <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004606:	2304      	movs	r3, #4
 8004608:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800460a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800460e:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004614:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	2200      	movs	r2, #0
 800461a:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800461c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800461e:	3304      	adds	r3, #4
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff f99b 	bl	800395c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004628:	3318      	adds	r3, #24
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff f996 	bl	800395c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004634:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	f1c3 0205 	rsb	r2, r3, #5
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004644:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	3350      	adds	r3, #80	; 0x50
 800464a:	2204      	movs	r2, #4
 800464c:	2100      	movs	r1, #0
 800464e:	4618      	mov	r0, r3
 8004650:	f002 f972 	bl	8006938 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	3354      	adds	r3, #84	; 0x54
 8004658:	2201      	movs	r2, #1
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f002 f96b 	bl	8006938 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	68f9      	ldr	r1, [r7, #12]
 8004666:	69b8      	ldr	r0, [r7, #24]
 8004668:	f001 fcdc 	bl	8006024 <pxPortInitialiseStack>
 800466c:	4602      	mov	r2, r0
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800467e:	bf00      	nop
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
	...

08004688 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004690:	f001 fdfa 	bl	8006288 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004694:	4b40      	ldr	r3, [pc, #256]	; (8004798 <prvAddNewTaskToReadyList+0x110>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	3301      	adds	r3, #1
 800469a:	4a3f      	ldr	r2, [pc, #252]	; (8004798 <prvAddNewTaskToReadyList+0x110>)
 800469c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800469e:	4b3f      	ldr	r3, [pc, #252]	; (800479c <prvAddNewTaskToReadyList+0x114>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d109      	bne.n	80046ba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80046a6:	4a3d      	ldr	r2, [pc, #244]	; (800479c <prvAddNewTaskToReadyList+0x114>)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046ac:	4b3a      	ldr	r3, [pc, #232]	; (8004798 <prvAddNewTaskToReadyList+0x110>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d110      	bne.n	80046d6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80046b4:	f000 fdd2 	bl	800525c <prvInitialiseTaskLists>
 80046b8:	e00d      	b.n	80046d6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80046ba:	4b39      	ldr	r3, [pc, #228]	; (80047a0 <prvAddNewTaskToReadyList+0x118>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046c2:	4b36      	ldr	r3, [pc, #216]	; (800479c <prvAddNewTaskToReadyList+0x114>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d802      	bhi.n	80046d6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80046d0:	4a32      	ldr	r2, [pc, #200]	; (800479c <prvAddNewTaskToReadyList+0x114>)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80046d6:	4b33      	ldr	r3, [pc, #204]	; (80047a4 <prvAddNewTaskToReadyList+0x11c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	3301      	adds	r3, #1
 80046dc:	4a31      	ldr	r2, [pc, #196]	; (80047a4 <prvAddNewTaskToReadyList+0x11c>)
 80046de:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046e0:	4b30      	ldr	r3, [pc, #192]	; (80047a4 <prvAddNewTaskToReadyList+0x11c>)
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ec:	2201      	movs	r2, #1
 80046ee:	409a      	lsls	r2, r3
 80046f0:	4b2d      	ldr	r3, [pc, #180]	; (80047a8 <prvAddNewTaskToReadyList+0x120>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	4a2c      	ldr	r2, [pc, #176]	; (80047a8 <prvAddNewTaskToReadyList+0x120>)
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046fe:	492b      	ldr	r1, [pc, #172]	; (80047ac <prvAddNewTaskToReadyList+0x124>)
 8004700:	4613      	mov	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	3304      	adds	r3, #4
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	609a      	str	r2, [r3, #8]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	3204      	adds	r2, #4
 8004726:	605a      	str	r2, [r3, #4]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	1d1a      	adds	r2, r3, #4
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4613      	mov	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <prvAddNewTaskToReadyList+0x124>)
 800473e:	441a      	add	r2, r3
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	615a      	str	r2, [r3, #20]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004748:	4918      	ldr	r1, [pc, #96]	; (80047ac <prvAddNewTaskToReadyList+0x124>)
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	1c59      	adds	r1, r3, #1
 8004758:	4814      	ldr	r0, [pc, #80]	; (80047ac <prvAddNewTaskToReadyList+0x124>)
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4403      	add	r3, r0
 8004764:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004766:	f001 fdbf 	bl	80062e8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800476a:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <prvAddNewTaskToReadyList+0x118>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00e      	beq.n	8004790 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <prvAddNewTaskToReadyList+0x114>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	429a      	cmp	r2, r3
 800477e:	d207      	bcs.n	8004790 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004780:	4b0b      	ldr	r3, [pc, #44]	; (80047b0 <prvAddNewTaskToReadyList+0x128>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004790:	bf00      	nop
 8004792:	3710      	adds	r7, #16
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	20000328 	.word	0x20000328
 800479c:	20000250 	.word	0x20000250
 80047a0:	20000334 	.word	0x20000334
 80047a4:	20000344 	.word	0x20000344
 80047a8:	20000330 	.word	0x20000330
 80047ac:	20000254 	.word	0x20000254
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80047bc:	f001 fd64 	bl	8006288 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d102      	bne.n	80047cc <vTaskDelete+0x18>
 80047c6:	4b3b      	ldr	r3, [pc, #236]	; (80048b4 <vTaskDelete+0x100>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	e000      	b.n	80047ce <vTaskDelete+0x1a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7ff f92b 	bl	8003a30 <uxListRemove>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d115      	bne.n	800480c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e4:	4934      	ldr	r1, [pc, #208]	; (80048b8 <vTaskDelete+0x104>)
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10a      	bne.n	800480c <vTaskDelete+0x58>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	2201      	movs	r2, #1
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43da      	mvns	r2, r3
 8004802:	4b2e      	ldr	r3, [pc, #184]	; (80048bc <vTaskDelete+0x108>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4013      	ands	r3, r2
 8004808:	4a2c      	ldr	r2, [pc, #176]	; (80048bc <vTaskDelete+0x108>)
 800480a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004810:	2b00      	cmp	r3, #0
 8004812:	d004      	beq.n	800481e <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3318      	adds	r3, #24
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff f909 	bl	8003a30 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800481e:	4b28      	ldr	r3, [pc, #160]	; (80048c0 <vTaskDelete+0x10c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3301      	adds	r3, #1
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <vTaskDelete+0x10c>)
 8004826:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8004828:	4b22      	ldr	r3, [pc, #136]	; (80048b4 <vTaskDelete+0x100>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	429a      	cmp	r2, r3
 8004830:	d10b      	bne.n	800484a <vTaskDelete+0x96>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	3304      	adds	r3, #4
 8004836:	4619      	mov	r1, r3
 8004838:	4822      	ldr	r0, [pc, #136]	; (80048c4 <vTaskDelete+0x110>)
 800483a:	f7ff f89c 	bl	8003976 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800483e:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <vTaskDelete+0x114>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3301      	adds	r3, #1
 8004844:	4a20      	ldr	r2, [pc, #128]	; (80048c8 <vTaskDelete+0x114>)
 8004846:	6013      	str	r3, [r2, #0]
 8004848:	e006      	b.n	8004858 <vTaskDelete+0xa4>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 800484a:	4b20      	ldr	r3, [pc, #128]	; (80048cc <vTaskDelete+0x118>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3b01      	subs	r3, #1
 8004850:	4a1e      	ldr	r2, [pc, #120]	; (80048cc <vTaskDelete+0x118>)
 8004852:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8004854:	f000 fd80 	bl	8005358 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8004858:	f001 fd46 	bl	80062e8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 800485c:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <vTaskDelete+0x100>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	429a      	cmp	r2, r3
 8004864:	d002      	beq.n	800486c <vTaskDelete+0xb8>
        {
            prvDeleteTCB( pxTCB );
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 fd66 	bl	8005338 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 800486c:	4b18      	ldr	r3, [pc, #96]	; (80048d0 <vTaskDelete+0x11c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d01b      	beq.n	80048ac <vTaskDelete+0xf8>
        {
            if( pxTCB == pxCurrentTCB )
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <vTaskDelete+0x100>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	429a      	cmp	r2, r3
 800487c:	d116      	bne.n	80048ac <vTaskDelete+0xf8>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 800487e:	4b15      	ldr	r3, [pc, #84]	; (80048d4 <vTaskDelete+0x120>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <vTaskDelete+0xe8>
        __asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	60bb      	str	r3, [r7, #8]
    }
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <vTaskDelete+0xe6>
                portYIELD_WITHIN_API();
 800489c:	4b0e      	ldr	r3, [pc, #56]	; (80048d8 <vTaskDelete+0x124>)
 800489e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048a2:	601a      	str	r2, [r3, #0]
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80048ac:	bf00      	nop
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	20000250 	.word	0x20000250
 80048b8:	20000254 	.word	0x20000254
 80048bc:	20000330 	.word	0x20000330
 80048c0:	20000344 	.word	0x20000344
 80048c4:	200002fc 	.word	0x200002fc
 80048c8:	20000310 	.word	0x20000310
 80048cc:	20000328 	.word	0x20000328
 80048d0:	20000334 	.word	0x20000334
 80048d4:	20000350 	.word	0x20000350
 80048d8:	e000ed04 	.word	0xe000ed04

080048dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80048e2:	4b20      	ldr	r3, [pc, #128]	; (8004964 <vTaskStartScheduler+0x88>)
 80048e4:	9301      	str	r3, [sp, #4]
 80048e6:	2300      	movs	r3, #0
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	2300      	movs	r3, #0
 80048ec:	2282      	movs	r2, #130	; 0x82
 80048ee:	491e      	ldr	r1, [pc, #120]	; (8004968 <vTaskStartScheduler+0x8c>)
 80048f0:	481e      	ldr	r0, [pc, #120]	; (800496c <vTaskStartScheduler+0x90>)
 80048f2:	f7ff fde3 	bl	80044bc <xTaskCreate>
 80048f6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d102      	bne.n	8004904 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80048fe:	f001 f865 	bl	80059cc <xTimerCreateTimerTask>
 8004902:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b01      	cmp	r3, #1
 8004908:	d116      	bne.n	8004938 <vTaskStartScheduler+0x5c>
        __asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	60bb      	str	r3, [r7, #8]
    }
 800491c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800491e:	4b14      	ldr	r3, [pc, #80]	; (8004970 <vTaskStartScheduler+0x94>)
 8004920:	f04f 32ff 	mov.w	r2, #4294967295
 8004924:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004926:	4b13      	ldr	r3, [pc, #76]	; (8004974 <vTaskStartScheduler+0x98>)
 8004928:	2201      	movs	r2, #1
 800492a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800492c:	4b12      	ldr	r3, [pc, #72]	; (8004978 <vTaskStartScheduler+0x9c>)
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004932:	f001 fc07 	bl	8006144 <xPortStartScheduler>
 8004936:	e00e      	b.n	8004956 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d10a      	bne.n	8004956 <vTaskStartScheduler+0x7a>
        __asm volatile
 8004940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004944:	f383 8811 	msr	BASEPRI, r3
 8004948:	f3bf 8f6f 	isb	sy
 800494c:	f3bf 8f4f 	dsb	sy
 8004950:	607b      	str	r3, [r7, #4]
    }
 8004952:	bf00      	nop
 8004954:	e7fe      	b.n	8004954 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004956:	4b09      	ldr	r3, [pc, #36]	; (800497c <vTaskStartScheduler+0xa0>)
 8004958:	681b      	ldr	r3, [r3, #0]
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	2000034c 	.word	0x2000034c
 8004968:	08007338 	.word	0x08007338
 800496c:	08005229 	.word	0x08005229
 8004970:	20000348 	.word	0x20000348
 8004974:	20000334 	.word	0x20000334
 8004978:	2000032c 	.word	0x2000032c
 800497c:	200000bc 	.word	0x200000bc

08004980 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004984:	4b04      	ldr	r3, [pc, #16]	; (8004998 <vTaskSuspendAll+0x18>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3301      	adds	r3, #1
 800498a:	4a03      	ldr	r2, [pc, #12]	; (8004998 <vTaskSuspendAll+0x18>)
 800498c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800498e:	bf00      	nop
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr
 8004998:	20000350 	.word	0x20000350

0800499c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b088      	sub	sp, #32
 80049a0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80049aa:	4b71      	ldr	r3, [pc, #452]	; (8004b70 <xTaskResumeAll+0x1d4>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10a      	bne.n	80049c8 <xTaskResumeAll+0x2c>
        __asm volatile
 80049b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b6:	f383 8811 	msr	BASEPRI, r3
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	f3bf 8f4f 	dsb	sy
 80049c2:	607b      	str	r3, [r7, #4]
    }
 80049c4:	bf00      	nop
 80049c6:	e7fe      	b.n	80049c6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80049c8:	f001 fc5e 	bl	8006288 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80049cc:	4b68      	ldr	r3, [pc, #416]	; (8004b70 <xTaskResumeAll+0x1d4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	4a67      	ldr	r2, [pc, #412]	; (8004b70 <xTaskResumeAll+0x1d4>)
 80049d4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049d6:	4b66      	ldr	r3, [pc, #408]	; (8004b70 <xTaskResumeAll+0x1d4>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f040 80c0 	bne.w	8004b60 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049e0:	4b64      	ldr	r3, [pc, #400]	; (8004b74 <xTaskResumeAll+0x1d8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80bb 	beq.w	8004b60 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049ea:	e08a      	b.n	8004b02 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ec:	4b62      	ldr	r3, [pc, #392]	; (8004b78 <xTaskResumeAll+0x1dc>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f8:	613b      	str	r3, [r7, #16]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	69fa      	ldr	r2, [r7, #28]
 8004a00:	6a12      	ldr	r2, [r2, #32]
 8004a02:	609a      	str	r2, [r3, #8]
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	69d2      	ldr	r2, [r2, #28]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	3318      	adds	r3, #24
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d103      	bne.n	8004a22 <xTaskResumeAll+0x86>
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	6a1a      	ldr	r2, [r3, #32]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2200      	movs	r2, #0
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	1e5a      	subs	r2, r3, #1
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	68d2      	ldr	r2, [r2, #12]
 8004a40:	609a      	str	r2, [r3, #8]
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	6892      	ldr	r2, [r2, #8]
 8004a4a:	605a      	str	r2, [r3, #4]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	685a      	ldr	r2, [r3, #4]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	3304      	adds	r3, #4
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d103      	bne.n	8004a60 <xTaskResumeAll+0xc4>
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	605a      	str	r2, [r3, #4]
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	2200      	movs	r2, #0
 8004a64:	615a      	str	r2, [r3, #20]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	1e5a      	subs	r2, r3, #1
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a74:	2201      	movs	r2, #1
 8004a76:	409a      	lsls	r2, r3
 8004a78:	4b40      	ldr	r3, [pc, #256]	; (8004b7c <xTaskResumeAll+0x1e0>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	4a3f      	ldr	r2, [pc, #252]	; (8004b7c <xTaskResumeAll+0x1e0>)
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a86:	493e      	ldr	r1, [pc, #248]	; (8004b80 <xTaskResumeAll+0x1e4>)
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	440b      	add	r3, r1
 8004a92:	3304      	adds	r3, #4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	609a      	str	r2, [r3, #8]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	60da      	str	r2, [r3, #12]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	69fa      	ldr	r2, [r7, #28]
 8004aac:	3204      	adds	r2, #4
 8004aae:	605a      	str	r2, [r3, #4]
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	1d1a      	adds	r2, r3, #4
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	609a      	str	r2, [r3, #8]
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4a2e      	ldr	r2, [pc, #184]	; (8004b80 <xTaskResumeAll+0x1e4>)
 8004ac6:	441a      	add	r2, r3
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	615a      	str	r2, [r3, #20]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	492b      	ldr	r1, [pc, #172]	; (8004b80 <xTaskResumeAll+0x1e4>)
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	440b      	add	r3, r1
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	1c59      	adds	r1, r3, #1
 8004ae0:	4827      	ldr	r0, [pc, #156]	; (8004b80 <xTaskResumeAll+0x1e4>)
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4403      	add	r3, r0
 8004aec:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af2:	4b24      	ldr	r3, [pc, #144]	; (8004b84 <xTaskResumeAll+0x1e8>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d302      	bcc.n	8004b02 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8004afc:	4b22      	ldr	r3, [pc, #136]	; (8004b88 <xTaskResumeAll+0x1ec>)
 8004afe:	2201      	movs	r2, #1
 8004b00:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b02:	4b1d      	ldr	r3, [pc, #116]	; (8004b78 <xTaskResumeAll+0x1dc>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f47f af70 	bne.w	80049ec <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004b12:	f000 fc21 	bl	8005358 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b16:	4b1d      	ldr	r3, [pc, #116]	; (8004b8c <xTaskResumeAll+0x1f0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d010      	beq.n	8004b44 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004b22:	f000 f847 	bl	8004bb4 <xTaskIncrementTick>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d002      	beq.n	8004b32 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8004b2c:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <xTaskResumeAll+0x1ec>)
 8004b2e:	2201      	movs	r2, #1
 8004b30:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1f1      	bne.n	8004b22 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8004b3e:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <xTaskResumeAll+0x1f0>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004b44:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <xTaskResumeAll+0x1ec>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d009      	beq.n	8004b60 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004b50:	4b0f      	ldr	r3, [pc, #60]	; (8004b90 <xTaskResumeAll+0x1f4>)
 8004b52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004b60:	f001 fbc2 	bl	80062e8 <vPortExitCritical>

    return xAlreadyYielded;
 8004b64:	69bb      	ldr	r3, [r7, #24]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3720      	adds	r7, #32
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000350 	.word	0x20000350
 8004b74:	20000328 	.word	0x20000328
 8004b78:	200002e8 	.word	0x200002e8
 8004b7c:	20000330 	.word	0x20000330
 8004b80:	20000254 	.word	0x20000254
 8004b84:	20000250 	.word	0x20000250
 8004b88:	2000033c 	.word	0x2000033c
 8004b8c:	20000338 	.word	0x20000338
 8004b90:	e000ed04 	.word	0xe000ed04

08004b94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004b9a:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <xTaskGetTickCount+0x1c>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004ba0:	687b      	ldr	r3, [r7, #4]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	2000032c 	.word	0x2000032c

08004bb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bbe:	4b7d      	ldr	r3, [pc, #500]	; (8004db4 <xTaskIncrementTick+0x200>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f040 80ec 	bne.w	8004da0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bc8:	4b7b      	ldr	r3, [pc, #492]	; (8004db8 <xTaskIncrementTick+0x204>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004bd0:	4a79      	ldr	r2, [pc, #484]	; (8004db8 <xTaskIncrementTick+0x204>)
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bd6:	6a3b      	ldr	r3, [r7, #32]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d120      	bne.n	8004c1e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004bdc:	4b77      	ldr	r3, [pc, #476]	; (8004dbc <xTaskIncrementTick+0x208>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <xTaskIncrementTick+0x48>
        __asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	607b      	str	r3, [r7, #4]
    }
 8004bf8:	bf00      	nop
 8004bfa:	e7fe      	b.n	8004bfa <xTaskIncrementTick+0x46>
 8004bfc:	4b6f      	ldr	r3, [pc, #444]	; (8004dbc <xTaskIncrementTick+0x208>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	4b6f      	ldr	r3, [pc, #444]	; (8004dc0 <xTaskIncrementTick+0x20c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a6d      	ldr	r2, [pc, #436]	; (8004dbc <xTaskIncrementTick+0x208>)
 8004c08:	6013      	str	r3, [r2, #0]
 8004c0a:	4a6d      	ldr	r2, [pc, #436]	; (8004dc0 <xTaskIncrementTick+0x20c>)
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	6013      	str	r3, [r2, #0]
 8004c10:	4b6c      	ldr	r3, [pc, #432]	; (8004dc4 <xTaskIncrementTick+0x210>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3301      	adds	r3, #1
 8004c16:	4a6b      	ldr	r2, [pc, #428]	; (8004dc4 <xTaskIncrementTick+0x210>)
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	f000 fb9d 	bl	8005358 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004c1e:	4b6a      	ldr	r3, [pc, #424]	; (8004dc8 <xTaskIncrementTick+0x214>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6a3a      	ldr	r2, [r7, #32]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	f0c0 80a6 	bcc.w	8004d76 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c2a:	4b64      	ldr	r3, [pc, #400]	; (8004dbc <xTaskIncrementTick+0x208>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d104      	bne.n	8004c3e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c34:	4b64      	ldr	r3, [pc, #400]	; (8004dc8 <xTaskIncrementTick+0x214>)
 8004c36:	f04f 32ff 	mov.w	r2, #4294967295
 8004c3a:	601a      	str	r2, [r3, #0]
                    break;
 8004c3c:	e09b      	b.n	8004d76 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c3e:	4b5f      	ldr	r3, [pc, #380]	; (8004dbc <xTaskIncrementTick+0x208>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004c4e:	6a3a      	ldr	r2, [r7, #32]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d203      	bcs.n	8004c5e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004c56:	4a5c      	ldr	r2, [pc, #368]	; (8004dc8 <xTaskIncrementTick+0x214>)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004c5c:	e08b      	b.n	8004d76 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	613b      	str	r3, [r7, #16]
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	68d2      	ldr	r2, [r2, #12]
 8004c6c:	609a      	str	r2, [r3, #8]
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	69ba      	ldr	r2, [r7, #24]
 8004c74:	6892      	ldr	r2, [r2, #8]
 8004c76:	605a      	str	r2, [r3, #4]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d103      	bne.n	8004c8c <xTaskIncrementTick+0xd8>
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	68da      	ldr	r2, [r3, #12]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	615a      	str	r2, [r3, #20]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	1e5a      	subs	r2, r3, #1
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d01e      	beq.n	8004ce2 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca8:	60fb      	str	r3, [r7, #12]
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	69db      	ldr	r3, [r3, #28]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	6a12      	ldr	r2, [r2, #32]
 8004cb2:	609a      	str	r2, [r3, #8]
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	6a1b      	ldr	r3, [r3, #32]
 8004cb8:	69ba      	ldr	r2, [r7, #24]
 8004cba:	69d2      	ldr	r2, [r2, #28]
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	3318      	adds	r3, #24
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d103      	bne.n	8004cd2 <xTaskIncrementTick+0x11e>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	6a1a      	ldr	r2, [r3, #32]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	605a      	str	r2, [r3, #4]
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	1e5a      	subs	r2, r3, #1
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	409a      	lsls	r2, r3
 8004cea:	4b38      	ldr	r3, [pc, #224]	; (8004dcc <xTaskIncrementTick+0x218>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	4a36      	ldr	r2, [pc, #216]	; (8004dcc <xTaskIncrementTick+0x218>)
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf8:	4935      	ldr	r1, [pc, #212]	; (8004dd0 <xTaskIncrementTick+0x21c>)
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	009b      	lsls	r3, r3, #2
 8004cfe:	4413      	add	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	440b      	add	r3, r1
 8004d04:	3304      	adds	r3, #4
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	60da      	str	r2, [r3, #12]
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	3204      	adds	r2, #4
 8004d20:	605a      	str	r2, [r3, #4]
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	1d1a      	adds	r2, r3, #4
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	609a      	str	r2, [r3, #8]
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <xTaskIncrementTick+0x21c>)
 8004d38:	441a      	add	r2, r3
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	615a      	str	r2, [r3, #20]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d42:	4923      	ldr	r1, [pc, #140]	; (8004dd0 <xTaskIncrementTick+0x21c>)
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	1c59      	adds	r1, r3, #1
 8004d52:	481f      	ldr	r0, [pc, #124]	; (8004dd0 <xTaskIncrementTick+0x21c>)
 8004d54:	4613      	mov	r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	4413      	add	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4403      	add	r3, r0
 8004d5e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d64:	4b1b      	ldr	r3, [pc, #108]	; (8004dd4 <xTaskIncrementTick+0x220>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	f4ff af5d 	bcc.w	8004c2a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8004d70:	2301      	movs	r3, #1
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d74:	e759      	b.n	8004c2a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d76:	4b17      	ldr	r3, [pc, #92]	; (8004dd4 <xTaskIncrementTick+0x220>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	4914      	ldr	r1, [pc, #80]	; (8004dd0 <xTaskIncrementTick+0x21c>)
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d901      	bls.n	8004d92 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <xTaskIncrementTick+0x224>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d007      	beq.n	8004daa <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9e:	e004      	b.n	8004daa <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004da0:	4b0e      	ldr	r3, [pc, #56]	; (8004ddc <xTaskIncrementTick+0x228>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <xTaskIncrementTick+0x228>)
 8004da8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3728      	adds	r7, #40	; 0x28
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20000350 	.word	0x20000350
 8004db8:	2000032c 	.word	0x2000032c
 8004dbc:	200002e0 	.word	0x200002e0
 8004dc0:	200002e4 	.word	0x200002e4
 8004dc4:	20000340 	.word	0x20000340
 8004dc8:	20000348 	.word	0x20000348
 8004dcc:	20000330 	.word	0x20000330
 8004dd0:	20000254 	.word	0x20000254
 8004dd4:	20000250 	.word	0x20000250
 8004dd8:	2000033c 	.word	0x2000033c
 8004ddc:	20000338 	.word	0x20000338

08004de0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004de6:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <vTaskSwitchContext+0xa4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004dee:	4b26      	ldr	r3, [pc, #152]	; (8004e88 <vTaskSwitchContext+0xa8>)
 8004df0:	2201      	movs	r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004df4:	e03f      	b.n	8004e76 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004df6:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <vTaskSwitchContext+0xa8>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dfc:	4b23      	ldr	r3, [pc, #140]	; (8004e8c <vTaskSwitchContext+0xac>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	fab3 f383 	clz	r3, r3
 8004e08:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
 8004e0c:	f1c3 031f 	rsb	r3, r3, #31
 8004e10:	617b      	str	r3, [r7, #20]
 8004e12:	491f      	ldr	r1, [pc, #124]	; (8004e90 <vTaskSwitchContext+0xb0>)
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	440b      	add	r3, r1
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <vTaskSwitchContext+0x5c>
        __asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	607b      	str	r3, [r7, #4]
    }
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <vTaskSwitchContext+0x5a>
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4a12      	ldr	r2, [pc, #72]	; (8004e90 <vTaskSwitchContext+0xb0>)
 8004e48:	4413      	add	r3, r2
 8004e4a:	613b      	str	r3, [r7, #16]
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	3308      	adds	r3, #8
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d104      	bne.n	8004e6c <vTaskSwitchContext+0x8c>
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	605a      	str	r2, [r3, #4]
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <vTaskSwitchContext+0xb4>)
 8004e74:	6013      	str	r3, [r2, #0]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	20000350 	.word	0x20000350
 8004e88:	2000033c 	.word	0x2000033c
 8004e8c:	20000330 	.word	0x20000330
 8004e90:	20000254 	.word	0x20000254
 8004e94:	20000250 	.word	0x20000250

08004e98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60fb      	str	r3, [r7, #12]
    }
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ebe:	4b07      	ldr	r3, [pc, #28]	; (8004edc <vTaskPlaceOnEventList+0x44>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3318      	adds	r3, #24
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7fe fd79 	bl	80039be <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ecc:	2101      	movs	r1, #1
 8004ece:	6838      	ldr	r0, [r7, #0]
 8004ed0:	f000 fcfc 	bl	80058cc <prvAddCurrentTaskToDelayedList>
}
 8004ed4:	bf00      	nop
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000250 	.word	0x20000250

08004ee0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d10a      	bne.n	8004f08 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8004ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef6:	f383 8811 	msr	BASEPRI, r3
 8004efa:	f3bf 8f6f 	isb	sy
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	613b      	str	r3, [r7, #16]
    }
 8004f04:	bf00      	nop
 8004f06:	e7fe      	b.n	8004f06 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	617b      	str	r3, [r7, #20]
 8004f0e:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <vTaskPlaceOnEventListRestricted+0x88>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	61da      	str	r2, [r3, #28]
 8004f16:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <vTaskPlaceOnEventListRestricted+0x88>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	6892      	ldr	r2, [r2, #8]
 8004f1e:	621a      	str	r2, [r3, #32]
 8004f20:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <vTaskPlaceOnEventListRestricted+0x88>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	3218      	adds	r2, #24
 8004f2a:	605a      	str	r2, [r3, #4]
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <vTaskPlaceOnEventListRestricted+0x88>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f103 0218 	add.w	r2, r3, #24
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <vTaskPlaceOnEventListRestricted+0x88>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d002      	beq.n	8004f56 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8004f50:	f04f 33ff 	mov.w	r3, #4294967295
 8004f54:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f56:	6879      	ldr	r1, [r7, #4]
 8004f58:	68b8      	ldr	r0, [r7, #8]
 8004f5a:	f000 fcb7 	bl	80058cc <prvAddCurrentTaskToDelayedList>
    }
 8004f5e:	bf00      	nop
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000250 	.word	0x20000250

08004f6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b08b      	sub	sp, #44	; 0x2c
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004f7c:	6a3b      	ldr	r3, [r7, #32]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10a      	bne.n	8004f98 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	60fb      	str	r3, [r7, #12]
    }
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9c:	61fb      	str	r3, [r7, #28]
 8004f9e:	6a3b      	ldr	r3, [r7, #32]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	6a3a      	ldr	r2, [r7, #32]
 8004fa4:	6a12      	ldr	r2, [r2, #32]
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	69d2      	ldr	r2, [r2, #28]
 8004fb0:	605a      	str	r2, [r3, #4]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	3318      	adds	r3, #24
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d103      	bne.n	8004fc6 <xTaskRemoveFromEventList+0x5a>
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	629a      	str	r2, [r3, #40]	; 0x28
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1e5a      	subs	r2, r3, #1
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd6:	4b4a      	ldr	r3, [pc, #296]	; (8005100 <xTaskRemoveFromEventList+0x194>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d15e      	bne.n	800509c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004fde:	6a3b      	ldr	r3, [r7, #32]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	6a3a      	ldr	r2, [r7, #32]
 8004fea:	68d2      	ldr	r2, [r2, #12]
 8004fec:	609a      	str	r2, [r3, #8]
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	6a3a      	ldr	r2, [r7, #32]
 8004ff4:	6892      	ldr	r2, [r2, #8]
 8004ff6:	605a      	str	r2, [r3, #4]
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	3304      	adds	r3, #4
 8005000:	429a      	cmp	r2, r3
 8005002:	d103      	bne.n	800500c <xTaskRemoveFromEventList+0xa0>
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	605a      	str	r2, [r3, #4]
 800500c:	6a3b      	ldr	r3, [r7, #32]
 800500e:	2200      	movs	r2, #0
 8005010:	615a      	str	r2, [r3, #20]
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	1e5a      	subs	r2, r3, #1
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800501c:	6a3b      	ldr	r3, [r7, #32]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	2201      	movs	r2, #1
 8005022:	409a      	lsls	r2, r3
 8005024:	4b37      	ldr	r3, [pc, #220]	; (8005104 <xTaskRemoveFromEventList+0x198>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4313      	orrs	r3, r2
 800502a:	4a36      	ldr	r2, [pc, #216]	; (8005104 <xTaskRemoveFromEventList+0x198>)
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005032:	4935      	ldr	r1, [pc, #212]	; (8005108 <xTaskRemoveFromEventList+0x19c>)
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	3304      	adds	r3, #4
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	613b      	str	r3, [r7, #16]
 8005044:	6a3b      	ldr	r3, [r7, #32]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	609a      	str	r2, [r3, #8]
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	6a3a      	ldr	r2, [r7, #32]
 8005058:	3204      	adds	r2, #4
 800505a:	605a      	str	r2, [r3, #4]
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	1d1a      	adds	r2, r3, #4
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	4a25      	ldr	r2, [pc, #148]	; (8005108 <xTaskRemoveFromEventList+0x19c>)
 8005072:	441a      	add	r2, r3
 8005074:	6a3b      	ldr	r3, [r7, #32]
 8005076:	615a      	str	r2, [r3, #20]
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507c:	4922      	ldr	r1, [pc, #136]	; (8005108 <xTaskRemoveFromEventList+0x19c>)
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	1c59      	adds	r1, r3, #1
 800508c:	481e      	ldr	r0, [pc, #120]	; (8005108 <xTaskRemoveFromEventList+0x19c>)
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4403      	add	r3, r0
 8005098:	6019      	str	r1, [r3, #0]
 800509a:	e01b      	b.n	80050d4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800509c:	4b1b      	ldr	r3, [pc, #108]	; (800510c <xTaskRemoveFromEventList+0x1a0>)
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	61bb      	str	r3, [r7, #24]
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	61da      	str	r2, [r3, #28]
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	689a      	ldr	r2, [r3, #8]
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	621a      	str	r2, [r3, #32]
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	6a3a      	ldr	r2, [r7, #32]
 80050b6:	3218      	adds	r2, #24
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	6a3b      	ldr	r3, [r7, #32]
 80050bc:	f103 0218 	add.w	r2, r3, #24
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	609a      	str	r2, [r3, #8]
 80050c4:	6a3b      	ldr	r3, [r7, #32]
 80050c6:	4a11      	ldr	r2, [pc, #68]	; (800510c <xTaskRemoveFromEventList+0x1a0>)
 80050c8:	629a      	str	r2, [r3, #40]	; 0x28
 80050ca:	4b10      	ldr	r3, [pc, #64]	; (800510c <xTaskRemoveFromEventList+0x1a0>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3301      	adds	r3, #1
 80050d0:	4a0e      	ldr	r2, [pc, #56]	; (800510c <xTaskRemoveFromEventList+0x1a0>)
 80050d2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050d8:	4b0d      	ldr	r3, [pc, #52]	; (8005110 <xTaskRemoveFromEventList+0x1a4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050de:	429a      	cmp	r2, r3
 80050e0:	d905      	bls.n	80050ee <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80050e2:	2301      	movs	r3, #1
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80050e6:	4b0b      	ldr	r3, [pc, #44]	; (8005114 <xTaskRemoveFromEventList+0x1a8>)
 80050e8:	2201      	movs	r2, #1
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e001      	b.n	80050f2 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	372c      	adds	r7, #44	; 0x2c
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr
 8005100:	20000350 	.word	0x20000350
 8005104:	20000330 	.word	0x20000330
 8005108:	20000254 	.word	0x20000254
 800510c:	200002e8 	.word	0x200002e8
 8005110:	20000250 	.word	0x20000250
 8005114:	2000033c 	.word	0x2000033c

08005118 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005120:	4b06      	ldr	r3, [pc, #24]	; (800513c <vTaskInternalSetTimeOutState+0x24>)
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <vTaskInternalSetTimeOutState+0x28>)
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	605a      	str	r2, [r3, #4]
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	20000340 	.word	0x20000340
 8005140:	2000032c 	.word	0x2000032c

08005144 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
    }
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	60fb      	str	r3, [r7, #12]
    }
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005186:	f001 f87f 	bl	8006288 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800518a:	4b1f      	ldr	r3, [pc, #124]	; (8005208 <xTaskCheckForTimeOut+0xc4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	69ba      	ldr	r2, [r7, #24]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a2:	d102      	bne.n	80051aa <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61fb      	str	r3, [r7, #28]
 80051a8:	e026      	b.n	80051f8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	4b17      	ldr	r3, [pc, #92]	; (800520c <xTaskCheckForTimeOut+0xc8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d00a      	beq.n	80051cc <xTaskCheckForTimeOut+0x88>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	69ba      	ldr	r2, [r7, #24]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d305      	bcc.n	80051cc <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	e015      	b.n	80051f8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d20b      	bcs.n	80051ee <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	1ad2      	subs	r2, r2, r3
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff ff98 	bl	8005118 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80051e8:	2300      	movs	r3, #0
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	e004      	b.n	80051f8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80051f4:	2301      	movs	r3, #1
 80051f6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80051f8:	f001 f876 	bl	80062e8 <vPortExitCritical>

    return xReturn;
 80051fc:	69fb      	ldr	r3, [r7, #28]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3720      	adds	r7, #32
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	2000032c 	.word	0x2000032c
 800520c:	20000340 	.word	0x20000340

08005210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005210:	b480      	push	{r7}
 8005212:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005214:	4b03      	ldr	r3, [pc, #12]	; (8005224 <vTaskMissedYield+0x14>)
 8005216:	2201      	movs	r2, #1
 8005218:	601a      	str	r2, [r3, #0]
}
 800521a:	bf00      	nop
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	2000033c 	.word	0x2000033c

08005228 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005230:	f000 f854 	bl	80052dc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <prvIdleTask+0x2c>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d907      	bls.n	800524c <prvIdleTask+0x24>
                {
                    taskYIELD();
 800523c:	4b06      	ldr	r3, [pc, #24]	; (8005258 <prvIdleTask+0x30>)
 800523e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	f3bf 8f4f 	dsb	sy
 8005248:	f3bf 8f6f 	isb	sy
                /* Call the user defined function from within the idle task.  This
                 * allows the application designer to add background functionality
                 * without the overhead of a separate task.
                 * NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
                 * CALL A FUNCTION THAT MIGHT BLOCK. */
                vApplicationIdleHook();
 800524c:	f7fb fa90 	bl	8000770 <vApplicationIdleHook>
        prvCheckTasksWaitingTermination();
 8005250:	e7ee      	b.n	8005230 <prvIdleTask+0x8>
 8005252:	bf00      	nop
 8005254:	20000254 	.word	0x20000254
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005262:	2300      	movs	r3, #0
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	e00c      	b.n	8005282 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4a12      	ldr	r2, [pc, #72]	; (80052bc <prvInitialiseTaskLists+0x60>)
 8005274:	4413      	add	r3, r2
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fb50 	bl	800391c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3301      	adds	r3, #1
 8005280:	607b      	str	r3, [r7, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d9ef      	bls.n	8005268 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005288:	480d      	ldr	r0, [pc, #52]	; (80052c0 <prvInitialiseTaskLists+0x64>)
 800528a:	f7fe fb47 	bl	800391c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800528e:	480d      	ldr	r0, [pc, #52]	; (80052c4 <prvInitialiseTaskLists+0x68>)
 8005290:	f7fe fb44 	bl	800391c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005294:	480c      	ldr	r0, [pc, #48]	; (80052c8 <prvInitialiseTaskLists+0x6c>)
 8005296:	f7fe fb41 	bl	800391c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800529a:	480c      	ldr	r0, [pc, #48]	; (80052cc <prvInitialiseTaskLists+0x70>)
 800529c:	f7fe fb3e 	bl	800391c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80052a0:	480b      	ldr	r0, [pc, #44]	; (80052d0 <prvInitialiseTaskLists+0x74>)
 80052a2:	f7fe fb3b 	bl	800391c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <prvInitialiseTaskLists+0x78>)
 80052a8:	4a05      	ldr	r2, [pc, #20]	; (80052c0 <prvInitialiseTaskLists+0x64>)
 80052aa:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <prvInitialiseTaskLists+0x7c>)
 80052ae:	4a05      	ldr	r2, [pc, #20]	; (80052c4 <prvInitialiseTaskLists+0x68>)
 80052b0:	601a      	str	r2, [r3, #0]
}
 80052b2:	bf00      	nop
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000254 	.word	0x20000254
 80052c0:	200002b8 	.word	0x200002b8
 80052c4:	200002cc 	.word	0x200002cc
 80052c8:	200002e8 	.word	0x200002e8
 80052cc:	200002fc 	.word	0x200002fc
 80052d0:	20000314 	.word	0x20000314
 80052d4:	200002e0 	.word	0x200002e0
 80052d8:	200002e4 	.word	0x200002e4

080052dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052e2:	e019      	b.n	8005318 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80052e4:	f000 ffd0 	bl	8006288 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052e8:	4b10      	ldr	r3, [pc, #64]	; (800532c <prvCheckTasksWaitingTermination+0x50>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	3304      	adds	r3, #4
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7fe fb9b 	bl	8003a30 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80052fa:	4b0d      	ldr	r3, [pc, #52]	; (8005330 <prvCheckTasksWaitingTermination+0x54>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3b01      	subs	r3, #1
 8005300:	4a0b      	ldr	r2, [pc, #44]	; (8005330 <prvCheckTasksWaitingTermination+0x54>)
 8005302:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <prvCheckTasksWaitingTermination+0x58>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3b01      	subs	r3, #1
 800530a:	4a0a      	ldr	r2, [pc, #40]	; (8005334 <prvCheckTasksWaitingTermination+0x58>)
 800530c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800530e:	f000 ffeb 	bl	80062e8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f810 	bl	8005338 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005318:	4b06      	ldr	r3, [pc, #24]	; (8005334 <prvCheckTasksWaitingTermination+0x58>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e1      	bne.n	80052e4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005320:	bf00      	nop
 8005322:	bf00      	nop
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	200002fc 	.word	0x200002fc
 8005330:	20000328 	.word	0x20000328
 8005334:	20000310 	.word	0x20000310

08005338 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005344:	4618      	mov	r0, r3
 8005346:	f001 f9a1 	bl	800668c <vPortFree>
                vPortFree( pxTCB );
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f001 f99e 	bl	800668c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800535c:	4b0a      	ldr	r3, [pc, #40]	; (8005388 <prvResetNextTaskUnblockTime+0x30>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d104      	bne.n	8005370 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005366:	4b09      	ldr	r3, [pc, #36]	; (800538c <prvResetNextTaskUnblockTime+0x34>)
 8005368:	f04f 32ff 	mov.w	r2, #4294967295
 800536c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800536e:	e005      	b.n	800537c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <prvResetNextTaskUnblockTime+0x30>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a04      	ldr	r2, [pc, #16]	; (800538c <prvResetNextTaskUnblockTime+0x34>)
 800537a:	6013      	str	r3, [r2, #0]
}
 800537c:	bf00      	nop
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	200002e0 	.word	0x200002e0
 800538c:	20000348 	.word	0x20000348

08005390 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005396:	4b0b      	ldr	r3, [pc, #44]	; (80053c4 <xTaskGetSchedulerState+0x34>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800539e:	2301      	movs	r3, #1
 80053a0:	607b      	str	r3, [r7, #4]
 80053a2:	e008      	b.n	80053b6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053a4:	4b08      	ldr	r3, [pc, #32]	; (80053c8 <xTaskGetSchedulerState+0x38>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80053ac:	2302      	movs	r3, #2
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	e001      	b.n	80053b6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80053b2:	2300      	movs	r3, #0
 80053b4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80053b6:	687b      	ldr	r3, [r7, #4]
    }
 80053b8:	4618      	mov	r0, r3
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c2:	4770      	bx	lr
 80053c4:	20000334 	.word	0x20000334
 80053c8:	20000350 	.word	0x20000350

080053cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	f000 808c 	beq.w	80054fc <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80053e4:	4b48      	ldr	r3, [pc, #288]	; (8005508 <xTaskPriorityDisinherit+0x13c>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	69ba      	ldr	r2, [r7, #24]
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d00a      	beq.n	8005404 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	613b      	str	r3, [r7, #16]
    }
 8005400:	bf00      	nop
 8005402:	e7fe      	b.n	8005402 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	60fb      	str	r3, [r7, #12]
    }
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	1e5a      	subs	r2, r3, #1
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005434:	429a      	cmp	r2, r3
 8005436:	d061      	beq.n	80054fc <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d15d      	bne.n	80054fc <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	3304      	adds	r3, #4
 8005444:	4618      	mov	r0, r3
 8005446:	f7fe faf3 	bl	8003a30 <uxListRemove>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d10a      	bne.n	8005466 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005454:	2201      	movs	r2, #1
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43da      	mvns	r2, r3
 800545c:	4b2b      	ldr	r3, [pc, #172]	; (800550c <xTaskPriorityDisinherit+0x140>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4013      	ands	r3, r2
 8005462:	4a2a      	ldr	r2, [pc, #168]	; (800550c <xTaskPriorityDisinherit+0x140>)
 8005464:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005472:	f1c3 0205 	rsb	r2, r3, #5
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	2201      	movs	r2, #1
 8005480:	409a      	lsls	r2, r3
 8005482:	4b22      	ldr	r3, [pc, #136]	; (800550c <xTaskPriorityDisinherit+0x140>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4313      	orrs	r3, r2
 8005488:	4a20      	ldr	r2, [pc, #128]	; (800550c <xTaskPriorityDisinherit+0x140>)
 800548a:	6013      	str	r3, [r2, #0]
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005490:	491f      	ldr	r1, [pc, #124]	; (8005510 <xTaskPriorityDisinherit+0x144>)
 8005492:	4613      	mov	r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	4413      	add	r3, r2
 8005498:	009b      	lsls	r3, r3, #2
 800549a:	440b      	add	r3, r1
 800549c:	3304      	adds	r3, #4
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	617b      	str	r3, [r7, #20]
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	609a      	str	r2, [r3, #8]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	60da      	str	r2, [r3, #12]
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	3204      	adds	r2, #4
 80054b8:	605a      	str	r2, [r3, #4]
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	1d1a      	adds	r2, r3, #4
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	609a      	str	r2, [r3, #8]
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c6:	4613      	mov	r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4a10      	ldr	r2, [pc, #64]	; (8005510 <xTaskPriorityDisinherit+0x144>)
 80054d0:	441a      	add	r2, r3
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	615a      	str	r2, [r3, #20]
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054da:	490d      	ldr	r1, [pc, #52]	; (8005510 <xTaskPriorityDisinherit+0x144>)
 80054dc:	4613      	mov	r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4413      	add	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	440b      	add	r3, r1
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	1c59      	adds	r1, r3, #1
 80054ea:	4809      	ldr	r0, [pc, #36]	; (8005510 <xTaskPriorityDisinherit+0x144>)
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	4403      	add	r3, r0
 80054f6:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80054f8:	2301      	movs	r3, #1
 80054fa:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80054fc:	69fb      	ldr	r3, [r7, #28]
    }
 80054fe:	4618      	mov	r0, r3
 8005500:	3720      	adds	r7, #32
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20000250 	.word	0x20000250
 800550c:	20000330 	.word	0x20000330
 8005510:	20000254 	.word	0x20000254

08005514 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
 8005520:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00a      	beq.n	800553e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8005528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552c:	f383 8811 	msr	BASEPRI, r3
 8005530:	f3bf 8f6f 	isb	sy
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	613b      	str	r3, [r7, #16]
    }
 800553a:	bf00      	nop
 800553c:	e7fe      	b.n	800553c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800553e:	f000 fea3 	bl	8006288 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005542:	4b32      	ldr	r3, [pc, #200]	; (800560c <xTaskGenericNotifyWait+0xf8>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	4413      	add	r3, r2
 800554a:	3354      	adds	r3, #84	; 0x54
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d022      	beq.n	800559a <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005554:	4b2d      	ldr	r3, [pc, #180]	; (800560c <xTaskGenericNotifyWait+0xf8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	3214      	adds	r2, #20
 800555c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	43d2      	mvns	r2, r2
 8005564:	4011      	ands	r1, r2
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	3214      	adds	r2, #20
 800556a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800556e:	4b27      	ldr	r3, [pc, #156]	; (800560c <xTaskGenericNotifyWait+0xf8>)
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	3354      	adds	r3, #84	; 0x54
 8005578:	2201      	movs	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00b      	beq.n	800559a <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005582:	2101      	movs	r1, #1
 8005584:	6a38      	ldr	r0, [r7, #32]
 8005586:	f000 f9a1 	bl	80058cc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800558a:	4b21      	ldr	r3, [pc, #132]	; (8005610 <xTaskGenericNotifyWait+0xfc>)
 800558c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	f3bf 8f4f 	dsb	sy
 8005596:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800559a:	f000 fea5 	bl	80062e8 <vPortExitCritical>

        taskENTER_CRITICAL();
 800559e:	f000 fe73 	bl	8006288 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d007      	beq.n	80055b8 <xTaskGenericNotifyWait+0xa4>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80055a8:	4b18      	ldr	r3, [pc, #96]	; (800560c <xTaskGenericNotifyWait+0xf8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	3214      	adds	r2, #20
 80055b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80055b8:	4b14      	ldr	r3, [pc, #80]	; (800560c <xTaskGenericNotifyWait+0xf8>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	3354      	adds	r3, #84	; 0x54
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d002      	beq.n	80055d0 <xTaskGenericNotifyWait+0xbc>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e00e      	b.n	80055ee <xTaskGenericNotifyWait+0xda>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80055d0:	4b0e      	ldr	r3, [pc, #56]	; (800560c <xTaskGenericNotifyWait+0xf8>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	3214      	adds	r2, #20
 80055d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	43d2      	mvns	r2, r2
 80055e0:	4011      	ands	r1, r2
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	3214      	adds	r2, #20
 80055e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80055ea:	2301      	movs	r3, #1
 80055ec:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80055ee:	4b07      	ldr	r3, [pc, #28]	; (800560c <xTaskGenericNotifyWait+0xf8>)
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	4413      	add	r3, r2
 80055f6:	3354      	adds	r3, #84	; 0x54
 80055f8:	2200      	movs	r2, #0
 80055fa:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80055fc:	f000 fe74 	bl	80062e8 <vPortExitCritical>

        return xReturn;
 8005600:	697b      	ldr	r3, [r7, #20]
    }
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	20000250 	.word	0x20000250
 8005610:	e000ed04 	.word	0xe000ed04

08005614 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005614:	b580      	push	{r7, lr}
 8005616:	b092      	sub	sp, #72	; 0x48
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005622:	2301      	movs	r3, #1
 8005624:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10a      	bne.n	8005642 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 800563e:	bf00      	nop
 8005640:	e7fe      	b.n	8005640 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00a      	beq.n	800565e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8005648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
    }
 800565a:	bf00      	nop
 800565c:	e7fe      	b.n	800565c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800565e:	f000 fef5 	bl	800644c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	643b      	str	r3, [r7, #64]	; 0x40
        __asm volatile
 8005666:	f3ef 8211 	mrs	r2, BASEPRI
 800566a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800566e:	f383 8811 	msr	BASEPRI, r3
 8005672:	f3bf 8f6f 	isb	sy
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	623a      	str	r2, [r7, #32]
 800567c:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 800567e:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005680:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8005682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005684:	2b00      	cmp	r3, #0
 8005686:	d006      	beq.n	8005696 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	3214      	adds	r2, #20
 800568e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005692:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005694:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4413      	add	r3, r2
 800569c:	3354      	adds	r3, #84	; 0x54
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80056a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	4413      	add	r3, r2
 80056aa:	3354      	adds	r3, #84	; 0x54
 80056ac:	2202      	movs	r2, #2
 80056ae:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80056b0:	78fb      	ldrb	r3, [r7, #3]
 80056b2:	2b04      	cmp	r3, #4
 80056b4:	d83b      	bhi.n	800572e <xTaskGenericNotifyFromISR+0x11a>
 80056b6:	a201      	add	r2, pc, #4	; (adr r2, 80056bc <xTaskGenericNotifyFromISR+0xa8>)
 80056b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056bc:	0800574d 	.word	0x0800574d
 80056c0:	080056d1 	.word	0x080056d1
 80056c4:	080056ed 	.word	0x080056ed
 80056c8:	08005705 	.word	0x08005705
 80056cc:	08005713 	.word	0x08005713
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80056d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d2:	68ba      	ldr	r2, [r7, #8]
 80056d4:	3214      	adds	r2, #20
 80056d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	ea42 0103 	orr.w	r1, r2, r3
 80056e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	3214      	adds	r2, #20
 80056e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80056ea:	e032      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80056ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	3214      	adds	r2, #20
 80056f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056fa:	68ba      	ldr	r2, [r7, #8]
 80056fc:	3214      	adds	r2, #20
 80056fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005702:	e026      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	3214      	adds	r2, #20
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005710:	e01f      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005712:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005716:	2b02      	cmp	r3, #2
 8005718:	d006      	beq.n	8005728 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800571a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	3214      	adds	r2, #20
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005726:	e014      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8005728:	2300      	movs	r3, #0
 800572a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 800572c:	e011      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800572e:	4b60      	ldr	r3, [pc, #384]	; (80058b0 <xTaskGenericNotifyFromISR+0x29c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00c      	beq.n	8005750 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61bb      	str	r3, [r7, #24]
    }
 8005748:	bf00      	nop
 800574a:	e7fe      	b.n	800574a <xTaskGenericNotifyFromISR+0x136>
                    break;
 800574c:	bf00      	nop
 800574e:	e000      	b.n	8005752 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8005750:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005752:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005756:	2b01      	cmp	r3, #1
 8005758:	f040 809e 	bne.w	8005898 <xTaskGenericNotifyFromISR+0x284>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800575c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <xTaskGenericNotifyFromISR+0x166>
        __asm volatile
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	f383 8811 	msr	BASEPRI, r3
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	f3bf 8f4f 	dsb	sy
 8005774:	617b      	str	r3, [r7, #20]
    }
 8005776:	bf00      	nop
 8005778:	e7fe      	b.n	8005778 <xTaskGenericNotifyFromISR+0x164>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800577a:	4b4e      	ldr	r3, [pc, #312]	; (80058b4 <xTaskGenericNotifyFromISR+0x2a0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d15e      	bne.n	8005840 <xTaskGenericNotifyFromISR+0x22c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	633b      	str	r3, [r7, #48]	; 0x30
 8005788:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800578e:	68d2      	ldr	r2, [r2, #12]
 8005790:	609a      	str	r2, [r3, #8]
 8005792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005798:	6892      	ldr	r2, [r2, #8]
 800579a:	605a      	str	r2, [r3, #4]
 800579c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a2:	3304      	adds	r3, #4
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d103      	bne.n	80057b0 <xTaskGenericNotifyFromISR+0x19c>
 80057a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ae:	605a      	str	r2, [r3, #4]
 80057b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057b2:	2200      	movs	r2, #0
 80057b4:	615a      	str	r2, [r3, #20]
 80057b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	1e5a      	subs	r2, r3, #1
 80057bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057be:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80057c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c4:	2201      	movs	r2, #1
 80057c6:	409a      	lsls	r2, r3
 80057c8:	4b3b      	ldr	r3, [pc, #236]	; (80058b8 <xTaskGenericNotifyFromISR+0x2a4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	4a3a      	ldr	r2, [pc, #232]	; (80058b8 <xTaskGenericNotifyFromISR+0x2a4>)
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d6:	4939      	ldr	r1, [pc, #228]	; (80058bc <xTaskGenericNotifyFromISR+0x2a8>)
 80057d8:	4613      	mov	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	4413      	add	r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	440b      	add	r3, r1
 80057e2:	3304      	adds	r3, #4
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057ec:	609a      	str	r2, [r3, #8]
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f4:	60da      	str	r2, [r3, #12]
 80057f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057fc:	3204      	adds	r2, #4
 80057fe:	605a      	str	r2, [r3, #4]
 8005800:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005802:	1d1a      	adds	r2, r3, #4
 8005804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005806:	609a      	str	r2, [r3, #8]
 8005808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4a29      	ldr	r2, [pc, #164]	; (80058bc <xTaskGenericNotifyFromISR+0x2a8>)
 8005816:	441a      	add	r2, r3
 8005818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581a:	615a      	str	r2, [r3, #20]
 800581c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005820:	4926      	ldr	r1, [pc, #152]	; (80058bc <xTaskGenericNotifyFromISR+0x2a8>)
 8005822:	4613      	mov	r3, r2
 8005824:	009b      	lsls	r3, r3, #2
 8005826:	4413      	add	r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	1c59      	adds	r1, r3, #1
 8005830:	4822      	ldr	r0, [pc, #136]	; (80058bc <xTaskGenericNotifyFromISR+0x2a8>)
 8005832:	4613      	mov	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4403      	add	r3, r0
 800583c:	6019      	str	r1, [r3, #0]
 800583e:	e01b      	b.n	8005878 <xTaskGenericNotifyFromISR+0x264>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005840:	4b1f      	ldr	r3, [pc, #124]	; (80058c0 <xTaskGenericNotifyFromISR+0x2ac>)
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
 8005846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800584a:	61da      	str	r2, [r3, #28]
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005852:	621a      	str	r2, [r3, #32]
 8005854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800585a:	3218      	adds	r2, #24
 800585c:	605a      	str	r2, [r3, #4]
 800585e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005860:	f103 0218 	add.w	r2, r3, #24
 8005864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005866:	609a      	str	r2, [r3, #8]
 8005868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800586a:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <xTaskGenericNotifyFromISR+0x2ac>)
 800586c:	629a      	str	r2, [r3, #40]	; 0x28
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <xTaskGenericNotifyFromISR+0x2ac>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3301      	adds	r3, #1
 8005874:	4a12      	ldr	r2, [pc, #72]	; (80058c0 <xTaskGenericNotifyFromISR+0x2ac>)
 8005876:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800587a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587c:	4b11      	ldr	r3, [pc, #68]	; (80058c4 <xTaskGenericNotifyFromISR+0x2b0>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005882:	429a      	cmp	r2, r3
 8005884:	d908      	bls.n	8005898 <xTaskGenericNotifyFromISR+0x284>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005886:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005888:	2b00      	cmp	r3, #0
 800588a:	d002      	beq.n	8005892 <xTaskGenericNotifyFromISR+0x27e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800588c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588e:	2201      	movs	r2, #1
 8005890:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8005892:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <xTaskGenericNotifyFromISR+0x2b4>)
 8005894:	2201      	movs	r2, #1
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589a:	613b      	str	r3, [r7, #16]
        __asm volatile
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f383 8811 	msr	BASEPRI, r3
    }
 80058a2:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80058a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 80058a6:	4618      	mov	r0, r3
 80058a8:	3748      	adds	r7, #72	; 0x48
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	2000032c 	.word	0x2000032c
 80058b4:	20000350 	.word	0x20000350
 80058b8:	20000330 	.word	0x20000330
 80058bc:	20000254 	.word	0x20000254
 80058c0:	200002e8 	.word	0x200002e8
 80058c4:	20000250 	.word	0x20000250
 80058c8:	2000033c 	.word	0x2000033c

080058cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b086      	sub	sp, #24
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80058d6:	4b36      	ldr	r3, [pc, #216]	; (80059b0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80058dc:	4b35      	ldr	r3, [pc, #212]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3304      	adds	r3, #4
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe f8a4 	bl	8003a30 <uxListRemove>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80058ee:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f4:	2201      	movs	r2, #1
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43da      	mvns	r2, r3
 80058fc:	4b2e      	ldr	r3, [pc, #184]	; (80059b8 <prvAddCurrentTaskToDelayedList+0xec>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4013      	ands	r3, r2
 8005902:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <prvAddCurrentTaskToDelayedList+0xec>)
 8005904:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800590c:	d124      	bne.n	8005958 <prvAddCurrentTaskToDelayedList+0x8c>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d021      	beq.n	8005958 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005914:	4b29      	ldr	r3, [pc, #164]	; (80059bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	4b26      	ldr	r3, [pc, #152]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	609a      	str	r2, [r3, #8]
 8005922:	4b24      	ldr	r3, [pc, #144]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	6892      	ldr	r2, [r2, #8]
 800592a:	60da      	str	r2, [r3, #12]
 800592c:	4b21      	ldr	r3, [pc, #132]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	3204      	adds	r2, #4
 8005936:	605a      	str	r2, [r3, #4]
 8005938:	4b1e      	ldr	r3, [pc, #120]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	1d1a      	adds	r2, r3, #4
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	609a      	str	r2, [r3, #8]
 8005942:	4b1c      	ldr	r3, [pc, #112]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005948:	615a      	str	r2, [r3, #20]
 800594a:	4b1c      	ldr	r3, [pc, #112]	; (80059bc <prvAddCurrentTaskToDelayedList+0xf0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3301      	adds	r3, #1
 8005950:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <prvAddCurrentTaskToDelayedList+0xf0>)
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005956:	e026      	b.n	80059a6 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4413      	add	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005960:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	429a      	cmp	r2, r3
 800596e:	d209      	bcs.n	8005984 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005970:	4b13      	ldr	r3, [pc, #76]	; (80059c0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3304      	adds	r3, #4
 800597a:	4619      	mov	r1, r3
 800597c:	4610      	mov	r0, r2
 800597e:	f7fe f81e 	bl	80039be <vListInsert>
}
 8005982:	e010      	b.n	80059a6 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005984:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	4b0a      	ldr	r3, [pc, #40]	; (80059b4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3304      	adds	r3, #4
 800598e:	4619      	mov	r1, r3
 8005990:	4610      	mov	r0, r2
 8005992:	f7fe f814 	bl	80039be <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005996:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	429a      	cmp	r2, r3
 800599e:	d202      	bcs.n	80059a6 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80059a0:	4a09      	ldr	r2, [pc, #36]	; (80059c8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	6013      	str	r3, [r2, #0]
}
 80059a6:	bf00      	nop
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	2000032c 	.word	0x2000032c
 80059b4:	20000250 	.word	0x20000250
 80059b8:	20000330 	.word	0x20000330
 80059bc:	20000314 	.word	0x20000314
 80059c0:	200002e4 	.word	0x200002e4
 80059c4:	200002e0 	.word	0x200002e0
 80059c8:	20000348 	.word	0x20000348

080059cc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80059d6:	f000 faef 	bl	8005fb8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80059da:	4b11      	ldr	r3, [pc, #68]	; (8005a20 <xTimerCreateTimerTask+0x54>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80059e2:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <xTimerCreateTimerTask+0x58>)
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	2302      	movs	r3, #2
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2300      	movs	r3, #0
 80059ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80059f0:	490d      	ldr	r1, [pc, #52]	; (8005a28 <xTimerCreateTimerTask+0x5c>)
 80059f2:	480e      	ldr	r0, [pc, #56]	; (8005a2c <xTimerCreateTimerTask+0x60>)
 80059f4:	f7fe fd62 	bl	80044bc <xTaskCreate>
 80059f8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	603b      	str	r3, [r7, #0]
    }
 8005a12:	bf00      	nop
 8005a14:	e7fe      	b.n	8005a14 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8005a16:	687b      	ldr	r3, [r7, #4]
    }
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	20000384 	.word	0x20000384
 8005a24:	20000388 	.word	0x20000388
 8005a28:	08007340 	.word	0x08007340
 8005a2c:	08005c25 	.word	0x08005c25

08005a30 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005a3e:	202c      	movs	r0, #44	; 0x2c
 8005a40:	f000 fd44 	bl	80064cc <pvPortMalloc>
 8005a44:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00d      	beq.n	8005a68 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	9301      	str	r3, [sp, #4]
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f000 f805 	bl	8005a72 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005a68:	697b      	ldr	r3, [r7, #20]
        }
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3718      	adds	r7, #24
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	60b9      	str	r1, [r7, #8]
 8005a7c:	607a      	str	r2, [r7, #4]
 8005a7e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <prvInitialiseNewTimer+0x2a>
        __asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	617b      	str	r3, [r7, #20]
    }
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 8005a9c:	f000 fa8c 	bl	8005fb8 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab4:	6a3a      	ldr	r2, [r7, #32]
 8005ab6:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aba:	3304      	adds	r3, #4
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fd ff4d 	bl	800395c <vListInitialiseItem>

        if( uxAutoReload != pdFALSE )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d008      	beq.n	8005ada <prvInitialiseNewTimer+0x68>
        {
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ace:	f043 0304 	orr.w	r3, r3, #4
 8005ad2:	b2da      	uxtb	r2, r3
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8005ada:	bf00      	nop
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
	...

08005ae4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	; 0x28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005af2:	2300      	movs	r3, #0
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d10a      	bne.n	8005b12 <xTimerGenericCommand+0x2e>
        __asm volatile
 8005afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b00:	f383 8811 	msr	BASEPRI, r3
 8005b04:	f3bf 8f6f 	isb	sy
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	623b      	str	r3, [r7, #32]
    }
 8005b0e:	bf00      	nop
 8005b10:	e7fe      	b.n	8005b10 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005b12:	4b1a      	ldr	r3, [pc, #104]	; (8005b7c <xTimerGenericCommand+0x98>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d02a      	beq.n	8005b70 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	dc18      	bgt.n	8005b5e <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b2c:	f7ff fc30 	bl	8005390 <xTaskGetSchedulerState>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b02      	cmp	r3, #2
 8005b34:	d109      	bne.n	8005b4a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b36:	4b11      	ldr	r3, [pc, #68]	; (8005b7c <xTimerGenericCommand+0x98>)
 8005b38:	6818      	ldr	r0, [r3, #0]
 8005b3a:	f107 0114 	add.w	r1, r7, #20
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b42:	f7fe f8a1 	bl	8003c88 <xQueueGenericSend>
 8005b46:	6278      	str	r0, [r7, #36]	; 0x24
 8005b48:	e012      	b.n	8005b70 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b4a:	4b0c      	ldr	r3, [pc, #48]	; (8005b7c <xTimerGenericCommand+0x98>)
 8005b4c:	6818      	ldr	r0, [r3, #0]
 8005b4e:	f107 0114 	add.w	r1, r7, #20
 8005b52:	2300      	movs	r3, #0
 8005b54:	2200      	movs	r2, #0
 8005b56:	f7fe f897 	bl	8003c88 <xQueueGenericSend>
 8005b5a:	6278      	str	r0, [r7, #36]	; 0x24
 8005b5c:	e008      	b.n	8005b70 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b5e:	4b07      	ldr	r3, [pc, #28]	; (8005b7c <xTimerGenericCommand+0x98>)
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	f107 0114 	add.w	r1, r7, #20
 8005b66:	2300      	movs	r3, #0
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	f7fe f98b 	bl	8003e84 <xQueueGenericSendFromISR>
 8005b6e:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8005b72:	4618      	mov	r0, r3
 8005b74:	3728      	adds	r7, #40	; 0x28
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20000384 	.word	0x20000384

08005b80 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005b8c:	e008      	b.n	8005ba0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	4413      	add	r3, r2
 8005b96:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	699a      	ldr	r2, [r3, #24]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	18d1      	adds	r1, r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f8dd 	bl	8005d6c <prvInsertTimerInActiveList>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1ea      	bne.n	8005b8e <prvReloadTimer+0xe>
        }
    }
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bce:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <prvProcessExpiredTimer+0x5c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fd ff27 	bl	8003a30 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	68f8      	ldr	r0, [r7, #12]
 8005bf6:	f7ff ffc3 	bl	8005b80 <prvReloadTimer>
 8005bfa:	e008      	b.n	8005c0e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c02:	f023 0301 	bic.w	r3, r3, #1
 8005c06:	b2da      	uxtb	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	68f8      	ldr	r0, [r7, #12]
 8005c14:	4798      	blx	r3
    }
 8005c16:	bf00      	nop
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	2000037c 	.word	0x2000037c

08005c24 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c2c:	f107 0308 	add.w	r3, r7, #8
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 f857 	bl	8005ce4 <prvGetNextExpireTime>
 8005c36:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f803 	bl	8005c48 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8005c42:	f000 f8d5 	bl	8005df0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c46:	e7f1      	b.n	8005c2c <prvTimerTask+0x8>

08005c48 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005c52:	f7fe fe95 	bl	8004980 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c56:	f107 0308 	add.w	r3, r7, #8
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f000 f866 	bl	8005d2c <prvSampleTimeNow>
 8005c60:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d130      	bne.n	8005cca <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10a      	bne.n	8005c84 <prvProcessTimerOrBlockTask+0x3c>
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d806      	bhi.n	8005c84 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005c76:	f7fe fe91 	bl	800499c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c7a:	68f9      	ldr	r1, [r7, #12]
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7ff ffa1 	bl	8005bc4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005c82:	e024      	b.n	8005cce <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d008      	beq.n	8005c9c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <prvProcessTimerOrBlockTask+0x90>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <prvProcessTimerOrBlockTask+0x50>
 8005c94:	2301      	movs	r3, #1
 8005c96:	e000      	b.n	8005c9a <prvProcessTimerOrBlockTask+0x52>
 8005c98:	2300      	movs	r3, #0
 8005c9a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005c9c:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <prvProcessTimerOrBlockTask+0x94>)
 8005c9e:	6818      	ldr	r0, [r3, #0]
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	4619      	mov	r1, r3
 8005caa:	f7fe fbd3 	bl	8004454 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005cae:	f7fe fe75 	bl	800499c <xTaskResumeAll>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d10a      	bne.n	8005cce <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005cb8:	4b09      	ldr	r3, [pc, #36]	; (8005ce0 <prvProcessTimerOrBlockTask+0x98>)
 8005cba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cbe:	601a      	str	r2, [r3, #0]
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	f3bf 8f6f 	isb	sy
    }
 8005cc8:	e001      	b.n	8005cce <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8005cca:	f7fe fe67 	bl	800499c <xTaskResumeAll>
    }
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000380 	.word	0x20000380
 8005cdc:	20000384 	.word	0x20000384
 8005ce0:	e000ed04 	.word	0xe000ed04

08005ce4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005cec:	4b0e      	ldr	r3, [pc, #56]	; (8005d28 <prvGetNextExpireTime+0x44>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <prvGetNextExpireTime+0x16>
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	e000      	b.n	8005cfc <prvGetNextExpireTime+0x18>
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d105      	bne.n	8005d14 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d08:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <prvGetNextExpireTime+0x44>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e001      	b.n	8005d18 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005d18:	68fb      	ldr	r3, [r7, #12]
    }
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3714      	adds	r7, #20
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	2000037c 	.word	0x2000037c

08005d2c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005d34:	f7fe ff2e 	bl	8004b94 <xTaskGetTickCount>
 8005d38:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005d3a:	4b0b      	ldr	r3, [pc, #44]	; (8005d68 <prvSampleTimeNow+0x3c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d205      	bcs.n	8005d50 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005d44:	f000 f912 	bl	8005f6c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e002      	b.n	8005d56 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005d56:	4a04      	ldr	r2, [pc, #16]	; (8005d68 <prvSampleTimeNow+0x3c>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
    }
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	2000038c 	.word	0x2000038c

08005d6c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b086      	sub	sp, #24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d812      	bhi.n	8005db8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	1ad2      	subs	r2, r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	699b      	ldr	r3, [r3, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	e01b      	b.n	8005dde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005da6:	4b10      	ldr	r3, [pc, #64]	; (8005de8 <prvInsertTimerInActiveList+0x7c>)
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	3304      	adds	r3, #4
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f7fd fe04 	bl	80039be <vListInsert>
 8005db6:	e012      	b.n	8005dde <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d206      	bcs.n	8005dce <prvInsertTimerInActiveList+0x62>
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d302      	bcc.n	8005dce <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	e007      	b.n	8005dde <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <prvInsertTimerInActiveList+0x80>)
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4610      	mov	r0, r2
 8005dda:	f7fd fdf0 	bl	80039be <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005dde:	697b      	ldr	r3, [r7, #20]
    }
 8005de0:	4618      	mov	r0, r3
 8005de2:	3718      	adds	r7, #24
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	20000380 	.word	0x20000380
 8005dec:	2000037c 	.word	0x2000037c

08005df0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005df6:	e0a6      	b.n	8005f46 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f2c0 80a2 	blt.w	8005f44 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d004      	beq.n	8005e16 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	3304      	adds	r3, #4
 8005e10:	4618      	mov	r0, r3
 8005e12:	f7fd fe0d 	bl	8003a30 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e16:	1d3b      	adds	r3, r7, #4
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff ff87 	bl	8005d2c <prvSampleTimeNow>
 8005e1e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	2b08      	cmp	r3, #8
 8005e26:	f200 808e 	bhi.w	8005f46 <prvProcessReceivedCommands+0x156>
 8005e2a:	a201      	add	r2, pc, #4	; (adr r2, 8005e30 <prvProcessReceivedCommands+0x40>)
 8005e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e30:	08005e55 	.word	0x08005e55
 8005e34:	08005e55 	.word	0x08005e55
 8005e38:	08005ebd 	.word	0x08005ebd
 8005e3c:	08005ed1 	.word	0x08005ed1
 8005e40:	08005f1b 	.word	0x08005f1b
 8005e44:	08005e55 	.word	0x08005e55
 8005e48:	08005e55 	.word	0x08005e55
 8005e4c:	08005ebd 	.word	0x08005ebd
 8005e50:	08005ed1 	.word	0x08005ed1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	b2da      	uxtb	r2, r3
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	18d1      	adds	r1, r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	69ba      	ldr	r2, [r7, #24]
 8005e72:	69f8      	ldr	r0, [r7, #28]
 8005e74:	f7ff ff7a 	bl	8005d6c <prvInsertTimerInActiveList>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d063      	beq.n	8005f46 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e84:	f003 0304 	and.w	r3, r3, #4
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d009      	beq.n	8005ea0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	4413      	add	r3, r2
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4619      	mov	r1, r3
 8005e98:	69f8      	ldr	r0, [r7, #28]
 8005e9a:	f7ff fe71 	bl	8005b80 <prvReloadTimer>
 8005e9e:	e008      	b.n	8005eb2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ea6:	f023 0301 	bic.w	r3, r3, #1
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005eb2:	69fb      	ldr	r3, [r7, #28]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	69f8      	ldr	r0, [r7, #28]
 8005eb8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8005eba:	e044      	b.n	8005f46 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ec2:	f023 0301 	bic.w	r3, r3, #1
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8005ece:	e03a      	b.n	8005f46 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005ee8:	69fb      	ldr	r3, [r7, #28]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10a      	bne.n	8005f06 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	617b      	str	r3, [r7, #20]
    }
 8005f02:	bf00      	nop
 8005f04:	e7fe      	b.n	8005f04 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	699a      	ldr	r2, [r3, #24]
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	18d1      	adds	r1, r2, r3
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	69f8      	ldr	r0, [r7, #28]
 8005f14:	f7ff ff2a 	bl	8005d6c <prvInsertTimerInActiveList>
                        break;
 8005f18:	e015      	b.n	8005f46 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f1a:	69fb      	ldr	r3, [r7, #28]
 8005f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d103      	bne.n	8005f30 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8005f28:	69f8      	ldr	r0, [r7, #28]
 8005f2a:	f000 fbaf 	bl	800668c <vPortFree>
 8005f2e:	e00a      	b.n	8005f46 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005f36:	f023 0301 	bic.w	r3, r3, #1
 8005f3a:	b2da      	uxtb	r2, r3
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005f42:	e000      	b.n	8005f46 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8005f44:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f46:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <prvProcessReceivedCommands+0x178>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f107 0108 	add.w	r1, r7, #8
 8005f4e:	2200      	movs	r2, #0
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe f841 	bl	8003fd8 <xQueueReceive>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f47f af4d 	bne.w	8005df8 <prvProcessReceivedCommands+0x8>
        }
    }
 8005f5e:	bf00      	nop
 8005f60:	bf00      	nop
 8005f62:	3720      	adds	r7, #32
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	20000384 	.word	0x20000384

08005f6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f72:	e009      	b.n	8005f88 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f74:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <prvSwitchTimerLists+0x44>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8005f7e:	f04f 31ff 	mov.w	r1, #4294967295
 8005f82:	6838      	ldr	r0, [r7, #0]
 8005f84:	f7ff fe1e 	bl	8005bc4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005f88:	4b09      	ldr	r3, [pc, #36]	; (8005fb0 <prvSwitchTimerLists+0x44>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8005f92:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <prvSwitchTimerLists+0x44>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <prvSwitchTimerLists+0x48>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <prvSwitchTimerLists+0x44>)
 8005f9e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005fa0:	4a04      	ldr	r2, [pc, #16]	; (8005fb4 <prvSwitchTimerLists+0x48>)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6013      	str	r3, [r2, #0]
    }
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop
 8005fb0:	2000037c 	.word	0x2000037c
 8005fb4:	20000380 	.word	0x20000380

08005fb8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005fbc:	f000 f964 	bl	8006288 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005fc0:	4b12      	ldr	r3, [pc, #72]	; (800600c <prvCheckForValidListAndQueue+0x54>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d11d      	bne.n	8006004 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005fc8:	4811      	ldr	r0, [pc, #68]	; (8006010 <prvCheckForValidListAndQueue+0x58>)
 8005fca:	f7fd fca7 	bl	800391c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005fce:	4811      	ldr	r0, [pc, #68]	; (8006014 <prvCheckForValidListAndQueue+0x5c>)
 8005fd0:	f7fd fca4 	bl	800391c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005fd4:	4b10      	ldr	r3, [pc, #64]	; (8006018 <prvCheckForValidListAndQueue+0x60>)
 8005fd6:	4a0e      	ldr	r2, [pc, #56]	; (8006010 <prvCheckForValidListAndQueue+0x58>)
 8005fd8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005fda:	4b10      	ldr	r3, [pc, #64]	; (800601c <prvCheckForValidListAndQueue+0x64>)
 8005fdc:	4a0d      	ldr	r2, [pc, #52]	; (8006014 <prvCheckForValidListAndQueue+0x5c>)
 8005fde:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	210c      	movs	r1, #12
 8005fe4:	200a      	movs	r0, #10
 8005fe6:	f7fd fddd 	bl	8003ba4 <xQueueGenericCreate>
 8005fea:	4603      	mov	r3, r0
 8005fec:	4a07      	ldr	r2, [pc, #28]	; (800600c <prvCheckForValidListAndQueue+0x54>)
 8005fee:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005ff0:	4b06      	ldr	r3, [pc, #24]	; (800600c <prvCheckForValidListAndQueue+0x54>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ff8:	4b04      	ldr	r3, [pc, #16]	; (800600c <prvCheckForValidListAndQueue+0x54>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4908      	ldr	r1, [pc, #32]	; (8006020 <prvCheckForValidListAndQueue+0x68>)
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe f9da 	bl	80043b8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006004:	f000 f970 	bl	80062e8 <vPortExitCritical>
    }
 8006008:	bf00      	nop
 800600a:	bd80      	pop	{r7, pc}
 800600c:	20000384 	.word	0x20000384
 8006010:	20000354 	.word	0x20000354
 8006014:	20000368 	.word	0x20000368
 8006018:	2000037c 	.word	0x2000037c
 800601c:	20000380 	.word	0x20000380
 8006020:	08007348 	.word	0x08007348

08006024 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	60f8      	str	r0, [r7, #12]
 800602c:	60b9      	str	r1, [r7, #8]
 800602e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3b04      	subs	r3, #4
 8006034:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800603c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3b04      	subs	r3, #4
 8006042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	f023 0201 	bic.w	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	3b04      	subs	r3, #4
 8006052:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006054:	4a0c      	ldr	r2, [pc, #48]	; (8006088 <pxPortInitialiseStack+0x64>)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3b14      	subs	r3, #20
 800605e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	3b04      	subs	r3, #4
 800606a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f06f 0202 	mvn.w	r2, #2
 8006072:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	3b20      	subs	r3, #32
 8006078:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800607a:	68fb      	ldr	r3, [r7, #12]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3714      	adds	r7, #20
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr
 8006088:	0800608d 	.word	0x0800608d

0800608c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006092:	2300      	movs	r3, #0
 8006094:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006096:	4b12      	ldr	r3, [pc, #72]	; (80060e0 <prvTaskExitError+0x54>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800609e:	d00a      	beq.n	80060b6 <prvTaskExitError+0x2a>
        __asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	60fb      	str	r3, [r7, #12]
    }
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <prvTaskExitError+0x28>
        __asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60bb      	str	r3, [r7, #8]
    }
 80060c8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80060ca:	bf00      	nop
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0fc      	beq.n	80060cc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	200000c0 	.word	0x200000c0
	...

080060f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <pxCurrentTCBConst2>)
 80060f2:	6819      	ldr	r1, [r3, #0]
 80060f4:	6808      	ldr	r0, [r1, #0]
 80060f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060fa:	f380 8809 	msr	PSP, r0
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f04f 0000 	mov.w	r0, #0
 8006106:	f380 8811 	msr	BASEPRI, r0
 800610a:	4770      	bx	lr
 800610c:	f3af 8000 	nop.w

08006110 <pxCurrentTCBConst2>:
 8006110:	20000250 	.word	0x20000250
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006114:	bf00      	nop
 8006116:	bf00      	nop

08006118 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006118:	4808      	ldr	r0, [pc, #32]	; (800613c <prvPortStartFirstTask+0x24>)
 800611a:	6800      	ldr	r0, [r0, #0]
 800611c:	6800      	ldr	r0, [r0, #0]
 800611e:	f380 8808 	msr	MSP, r0
 8006122:	f04f 0000 	mov.w	r0, #0
 8006126:	f380 8814 	msr	CONTROL, r0
 800612a:	b662      	cpsie	i
 800612c:	b661      	cpsie	f
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	df00      	svc	0
 8006138:	bf00      	nop
 800613a:	0000      	.short	0x0000
 800613c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006140:	bf00      	nop
 8006142:	bf00      	nop

08006144 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800614a:	4b46      	ldr	r3, [pc, #280]	; (8006264 <xPortStartScheduler+0x120>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a46      	ldr	r2, [pc, #280]	; (8006268 <xPortStartScheduler+0x124>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d10a      	bne.n	800616a <xPortStartScheduler+0x26>
        __asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	613b      	str	r3, [r7, #16]
    }
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800616a:	4b3e      	ldr	r3, [pc, #248]	; (8006264 <xPortStartScheduler+0x120>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a3f      	ldr	r2, [pc, #252]	; (800626c <xPortStartScheduler+0x128>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10a      	bne.n	800618a <xPortStartScheduler+0x46>
        __asm volatile
 8006174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	60fb      	str	r3, [r7, #12]
    }
 8006186:	bf00      	nop
 8006188:	e7fe      	b.n	8006188 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800618a:	4b39      	ldr	r3, [pc, #228]	; (8006270 <xPortStartScheduler+0x12c>)
 800618c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	b2db      	uxtb	r3, r3
 8006194:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	22ff      	movs	r2, #255	; 0xff
 800619a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	781b      	ldrb	r3, [r3, #0]
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061a4:	78fb      	ldrb	r3, [r7, #3]
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	4b31      	ldr	r3, [pc, #196]	; (8006274 <xPortStartScheduler+0x130>)
 80061b0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061b2:	4b31      	ldr	r3, [pc, #196]	; (8006278 <xPortStartScheduler+0x134>)
 80061b4:	2207      	movs	r2, #7
 80061b6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061b8:	e009      	b.n	80061ce <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80061ba:	4b2f      	ldr	r3, [pc, #188]	; (8006278 <xPortStartScheduler+0x134>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3b01      	subs	r3, #1
 80061c0:	4a2d      	ldr	r2, [pc, #180]	; (8006278 <xPortStartScheduler+0x134>)
 80061c2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061c4:	78fb      	ldrb	r3, [r7, #3]
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061ce:	78fb      	ldrb	r3, [r7, #3]
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d6:	2b80      	cmp	r3, #128	; 0x80
 80061d8:	d0ef      	beq.n	80061ba <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061da:	4b27      	ldr	r3, [pc, #156]	; (8006278 <xPortStartScheduler+0x134>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f1c3 0307 	rsb	r3, r3, #7
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	d00a      	beq.n	80061fc <xPortStartScheduler+0xb8>
        __asm volatile
 80061e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ea:	f383 8811 	msr	BASEPRI, r3
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f3bf 8f4f 	dsb	sy
 80061f6:	60bb      	str	r3, [r7, #8]
    }
 80061f8:	bf00      	nop
 80061fa:	e7fe      	b.n	80061fa <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80061fc:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <xPortStartScheduler+0x134>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <xPortStartScheduler+0x134>)
 8006204:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006206:	4b1c      	ldr	r3, [pc, #112]	; (8006278 <xPortStartScheduler+0x134>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800620e:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <xPortStartScheduler+0x134>)
 8006210:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	b2da      	uxtb	r2, r3
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800621a:	4b18      	ldr	r3, [pc, #96]	; (800627c <xPortStartScheduler+0x138>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a17      	ldr	r2, [pc, #92]	; (800627c <xPortStartScheduler+0x138>)
 8006220:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006224:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006226:	4b15      	ldr	r3, [pc, #84]	; (800627c <xPortStartScheduler+0x138>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a14      	ldr	r2, [pc, #80]	; (800627c <xPortStartScheduler+0x138>)
 800622c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006230:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006232:	f000 f8db 	bl	80063ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006236:	4b12      	ldr	r3, [pc, #72]	; (8006280 <xPortStartScheduler+0x13c>)
 8006238:	2200      	movs	r2, #0
 800623a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800623c:	f000 f8fa 	bl	8006434 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006240:	4b10      	ldr	r3, [pc, #64]	; (8006284 <xPortStartScheduler+0x140>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a0f      	ldr	r2, [pc, #60]	; (8006284 <xPortStartScheduler+0x140>)
 8006246:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800624a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800624c:	f7ff ff64 	bl	8006118 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006250:	f7fe fdc6 	bl	8004de0 <vTaskSwitchContext>
    prvTaskExitError();
 8006254:	f7ff ff1a 	bl	800608c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	e000ed00 	.word	0xe000ed00
 8006268:	410fc271 	.word	0x410fc271
 800626c:	410fc270 	.word	0x410fc270
 8006270:	e000e400 	.word	0xe000e400
 8006274:	20000390 	.word	0x20000390
 8006278:	20000394 	.word	0x20000394
 800627c:	e000ed20 	.word	0xe000ed20
 8006280:	200000c0 	.word	0x200000c0
 8006284:	e000ef34 	.word	0xe000ef34

08006288 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
        __asm volatile
 800628e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	f3bf 8f6f 	isb	sy
 800629a:	f3bf 8f4f 	dsb	sy
 800629e:	607b      	str	r3, [r7, #4]
    }
 80062a0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80062a2:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <vPortEnterCritical+0x58>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3301      	adds	r3, #1
 80062a8:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <vPortEnterCritical+0x58>)
 80062aa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80062ac:	4b0c      	ldr	r3, [pc, #48]	; (80062e0 <vPortEnterCritical+0x58>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d10f      	bne.n	80062d4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062b4:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <vPortEnterCritical+0x5c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	b2db      	uxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00a      	beq.n	80062d4 <vPortEnterCritical+0x4c>
        __asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	603b      	str	r3, [r7, #0]
    }
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <vPortEnterCritical+0x4a>
    }
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	200000c0 	.word	0x200000c0
 80062e4:	e000ed04 	.word	0xe000ed04

080062e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80062ee:	4b12      	ldr	r3, [pc, #72]	; (8006338 <vPortExitCritical+0x50>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <vPortExitCritical+0x24>
        __asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	607b      	str	r3, [r7, #4]
    }
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800630c:	4b0a      	ldr	r3, [pc, #40]	; (8006338 <vPortExitCritical+0x50>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3b01      	subs	r3, #1
 8006312:	4a09      	ldr	r2, [pc, #36]	; (8006338 <vPortExitCritical+0x50>)
 8006314:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006316:	4b08      	ldr	r3, [pc, #32]	; (8006338 <vPortExitCritical+0x50>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d105      	bne.n	800632a <vPortExitCritical+0x42>
 800631e:	2300      	movs	r3, #0
 8006320:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	f383 8811 	msr	BASEPRI, r3
    }
 8006328:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr
 8006336:	bf00      	nop
 8006338:	200000c0 	.word	0x200000c0
 800633c:	00000000 	.word	0x00000000

08006340 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006340:	f3ef 8009 	mrs	r0, PSP
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	4b15      	ldr	r3, [pc, #84]	; (80063a0 <pxCurrentTCBConst>)
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	f01e 0f10 	tst.w	lr, #16
 8006350:	bf08      	it	eq
 8006352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800635a:	6010      	str	r0, [r2, #0]
 800635c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006364:	f380 8811 	msr	BASEPRI, r0
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	f3bf 8f6f 	isb	sy
 8006370:	f7fe fd36 	bl	8004de0 <vTaskSwitchContext>
 8006374:	f04f 0000 	mov.w	r0, #0
 8006378:	f380 8811 	msr	BASEPRI, r0
 800637c:	bc09      	pop	{r0, r3}
 800637e:	6819      	ldr	r1, [r3, #0]
 8006380:	6808      	ldr	r0, [r1, #0]
 8006382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006386:	f01e 0f10 	tst.w	lr, #16
 800638a:	bf08      	it	eq
 800638c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006390:	f380 8809 	msr	PSP, r0
 8006394:	f3bf 8f6f 	isb	sy
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	f3af 8000 	nop.w

080063a0 <pxCurrentTCBConst>:
 80063a0:	20000250 	.word	0x20000250
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop

080063a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
        __asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	607b      	str	r3, [r7, #4]
    }
 80063c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80063c2:	f7fe fbf7 	bl	8004bb4 <xTaskIncrementTick>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063cc:	4b06      	ldr	r3, [pc, #24]	; (80063e8 <SysTick_Handler+0x40>)
 80063ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063d2:	601a      	str	r2, [r3, #0]
 80063d4:	2300      	movs	r3, #0
 80063d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f383 8811 	msr	BASEPRI, r3
    }
 80063de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}
 80063e8:	e000ed04 	.word	0xe000ed04

080063ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063f0:	4b0b      	ldr	r3, [pc, #44]	; (8006420 <vPortSetupTimerInterrupt+0x34>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063f6:	4b0b      	ldr	r3, [pc, #44]	; (8006424 <vPortSetupTimerInterrupt+0x38>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <vPortSetupTimerInterrupt+0x3c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a0a      	ldr	r2, [pc, #40]	; (800642c <vPortSetupTimerInterrupt+0x40>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	099b      	lsrs	r3, r3, #6
 8006408:	4a09      	ldr	r2, [pc, #36]	; (8006430 <vPortSetupTimerInterrupt+0x44>)
 800640a:	3b01      	subs	r3, #1
 800640c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800640e:	4b04      	ldr	r3, [pc, #16]	; (8006420 <vPortSetupTimerInterrupt+0x34>)
 8006410:	2207      	movs	r2, #7
 8006412:	601a      	str	r2, [r3, #0]
}
 8006414:	bf00      	nop
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	e000e010 	.word	0xe000e010
 8006424:	e000e018 	.word	0xe000e018
 8006428:	200000b0 	.word	0x200000b0
 800642c:	10624dd3 	.word	0x10624dd3
 8006430:	e000e014 	.word	0xe000e014

08006434 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006444 <vPortEnableVFP+0x10>
 8006438:	6801      	ldr	r1, [r0, #0]
 800643a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800643e:	6001      	str	r1, [r0, #0]
 8006440:	4770      	bx	lr
 8006442:	0000      	.short	0x0000
 8006444:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop

0800644c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006452:	f3ef 8305 	mrs	r3, IPSR
 8006456:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2b0f      	cmp	r3, #15
 800645c:	d914      	bls.n	8006488 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800645e:	4a17      	ldr	r2, [pc, #92]	; (80064bc <vPortValidateInterruptPriority+0x70>)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4413      	add	r3, r2
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006468:	4b15      	ldr	r3, [pc, #84]	; (80064c0 <vPortValidateInterruptPriority+0x74>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	7afa      	ldrb	r2, [r7, #11]
 800646e:	429a      	cmp	r2, r3
 8006470:	d20a      	bcs.n	8006488 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	607b      	str	r3, [r7, #4]
    }
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006488:	4b0e      	ldr	r3, [pc, #56]	; (80064c4 <vPortValidateInterruptPriority+0x78>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006490:	4b0d      	ldr	r3, [pc, #52]	; (80064c8 <vPortValidateInterruptPriority+0x7c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	429a      	cmp	r2, r3
 8006496:	d90a      	bls.n	80064ae <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	603b      	str	r3, [r7, #0]
    }
 80064aa:	bf00      	nop
 80064ac:	e7fe      	b.n	80064ac <vPortValidateInterruptPriority+0x60>
    }
 80064ae:	bf00      	nop
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	e000e3f0 	.word	0xe000e3f0
 80064c0:	20000390 	.word	0x20000390
 80064c4:	e000ed0c 	.word	0xe000ed0c
 80064c8:	20000394 	.word	0x20000394

080064cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b08a      	sub	sp, #40	; 0x28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80064d8:	f7fe fa52 	bl	8004980 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80064dc:	4b65      	ldr	r3, [pc, #404]	; (8006674 <pvPortMalloc+0x1a8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80064e4:	f000 f934 	bl	8006750 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064e8:	4b63      	ldr	r3, [pc, #396]	; (8006678 <pvPortMalloc+0x1ac>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4013      	ands	r3, r2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 80a7 	bne.w	8006644 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d02d      	beq.n	8006558 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80064fc:	2208      	movs	r2, #8
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	429a      	cmp	r2, r3
 8006506:	d227      	bcs.n	8006558 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8006508:	2208      	movs	r2, #8
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2b00      	cmp	r3, #0
 8006518:	d021      	beq.n	800655e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f023 0307 	bic.w	r3, r3, #7
 8006520:	3308      	adds	r3, #8
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	429a      	cmp	r2, r3
 8006526:	d214      	bcs.n	8006552 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f023 0307 	bic.w	r3, r3, #7
 800652e:	3308      	adds	r3, #8
 8006530:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	2b00      	cmp	r3, #0
 800653a:	d010      	beq.n	800655e <pvPortMalloc+0x92>
        __asm volatile
 800653c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006540:	f383 8811 	msr	BASEPRI, r3
 8006544:	f3bf 8f6f 	isb	sy
 8006548:	f3bf 8f4f 	dsb	sy
 800654c:	617b      	str	r3, [r7, #20]
    }
 800654e:	bf00      	nop
 8006550:	e7fe      	b.n	8006550 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006552:	2300      	movs	r3, #0
 8006554:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006556:	e002      	b.n	800655e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8006558:	2300      	movs	r3, #0
 800655a:	607b      	str	r3, [r7, #4]
 800655c:	e000      	b.n	8006560 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800655e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d06e      	beq.n	8006644 <pvPortMalloc+0x178>
 8006566:	4b45      	ldr	r3, [pc, #276]	; (800667c <pvPortMalloc+0x1b0>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	429a      	cmp	r2, r3
 800656e:	d869      	bhi.n	8006644 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006570:	4b43      	ldr	r3, [pc, #268]	; (8006680 <pvPortMalloc+0x1b4>)
 8006572:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006574:	4b42      	ldr	r3, [pc, #264]	; (8006680 <pvPortMalloc+0x1b4>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800657a:	e004      	b.n	8006586 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800657c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d903      	bls.n	8006598 <pvPortMalloc+0xcc>
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1f1      	bne.n	800657c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006598:	4b36      	ldr	r3, [pc, #216]	; (8006674 <pvPortMalloc+0x1a8>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800659e:	429a      	cmp	r2, r3
 80065a0:	d050      	beq.n	8006644 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2208      	movs	r2, #8
 80065a8:	4413      	add	r3, r2
 80065aa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	685a      	ldr	r2, [r3, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	1ad2      	subs	r2, r2, r3
 80065bc:	2308      	movs	r3, #8
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d91f      	bls.n	8006604 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	4413      	add	r3, r2
 80065ca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065cc:	69bb      	ldr	r3, [r7, #24]
 80065ce:	f003 0307 	and.w	r3, r3, #7
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <pvPortMalloc+0x120>
        __asm volatile
 80065d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065da:	f383 8811 	msr	BASEPRI, r3
 80065de:	f3bf 8f6f 	isb	sy
 80065e2:	f3bf 8f4f 	dsb	sy
 80065e6:	613b      	str	r3, [r7, #16]
    }
 80065e8:	bf00      	nop
 80065ea:	e7fe      	b.n	80065ea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	1ad2      	subs	r2, r2, r3
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065fe:	69b8      	ldr	r0, [r7, #24]
 8006600:	f000 f908 	bl	8006814 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006604:	4b1d      	ldr	r3, [pc, #116]	; (800667c <pvPortMalloc+0x1b0>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	4a1b      	ldr	r2, [pc, #108]	; (800667c <pvPortMalloc+0x1b0>)
 8006610:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006612:	4b1a      	ldr	r3, [pc, #104]	; (800667c <pvPortMalloc+0x1b0>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b1b      	ldr	r3, [pc, #108]	; (8006684 <pvPortMalloc+0x1b8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d203      	bcs.n	8006626 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800661e:	4b17      	ldr	r3, [pc, #92]	; (800667c <pvPortMalloc+0x1b0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a18      	ldr	r2, [pc, #96]	; (8006684 <pvPortMalloc+0x1b8>)
 8006624:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	4b13      	ldr	r3, [pc, #76]	; (8006678 <pvPortMalloc+0x1ac>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	431a      	orrs	r2, r3
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800663a:	4b13      	ldr	r3, [pc, #76]	; (8006688 <pvPortMalloc+0x1bc>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3301      	adds	r3, #1
 8006640:	4a11      	ldr	r2, [pc, #68]	; (8006688 <pvPortMalloc+0x1bc>)
 8006642:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006644:	f7fe f9aa 	bl	800499c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <pvPortMalloc+0x19c>
        __asm volatile
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	f383 8811 	msr	BASEPRI, r3
 800665a:	f3bf 8f6f 	isb	sy
 800665e:	f3bf 8f4f 	dsb	sy
 8006662:	60fb      	str	r3, [r7, #12]
    }
 8006664:	bf00      	nop
 8006666:	e7fe      	b.n	8006666 <pvPortMalloc+0x19a>
    return pvReturn;
 8006668:	69fb      	ldr	r3, [r7, #28]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3728      	adds	r7, #40	; 0x28
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	20012fa0 	.word	0x20012fa0
 8006678:	20012fb4 	.word	0x20012fb4
 800667c:	20012fa4 	.word	0x20012fa4
 8006680:	20012f98 	.word	0x20012f98
 8006684:	20012fa8 	.word	0x20012fa8
 8006688:	20012fac 	.word	0x20012fac

0800668c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d04d      	beq.n	800673a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800669e:	2308      	movs	r3, #8
 80066a0:	425b      	negs	r3, r3
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	4413      	add	r3, r2
 80066a6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	4b24      	ldr	r3, [pc, #144]	; (8006744 <vPortFree+0xb8>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4013      	ands	r3, r2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10a      	bne.n	80066d0 <vPortFree+0x44>
        __asm volatile
 80066ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066be:	f383 8811 	msr	BASEPRI, r3
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	f3bf 8f4f 	dsb	sy
 80066ca:	60fb      	str	r3, [r7, #12]
    }
 80066cc:	bf00      	nop
 80066ce:	e7fe      	b.n	80066ce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00a      	beq.n	80066ee <vPortFree+0x62>
        __asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	60bb      	str	r3, [r7, #8]
    }
 80066ea:	bf00      	nop
 80066ec:	e7fe      	b.n	80066ec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	685a      	ldr	r2, [r3, #4]
 80066f2:	4b14      	ldr	r3, [pc, #80]	; (8006744 <vPortFree+0xb8>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01e      	beq.n	800673a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d11a      	bne.n	800673a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	685a      	ldr	r2, [r3, #4]
 8006708:	4b0e      	ldr	r3, [pc, #56]	; (8006744 <vPortFree+0xb8>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	43db      	mvns	r3, r3
 800670e:	401a      	ands	r2, r3
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8006714:	f7fe f934 	bl	8004980 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	4b0a      	ldr	r3, [pc, #40]	; (8006748 <vPortFree+0xbc>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4413      	add	r3, r2
 8006722:	4a09      	ldr	r2, [pc, #36]	; (8006748 <vPortFree+0xbc>)
 8006724:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006726:	6938      	ldr	r0, [r7, #16]
 8006728:	f000 f874 	bl	8006814 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800672c:	4b07      	ldr	r3, [pc, #28]	; (800674c <vPortFree+0xc0>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	3301      	adds	r3, #1
 8006732:	4a06      	ldr	r2, [pc, #24]	; (800674c <vPortFree+0xc0>)
 8006734:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006736:	f7fe f931 	bl	800499c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800673a:	bf00      	nop
 800673c:	3718      	adds	r7, #24
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20012fb4 	.word	0x20012fb4
 8006748:	20012fa4 	.word	0x20012fa4
 800674c:	20012fb0 	.word	0x20012fb0

08006750 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006756:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800675a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800675c:	4b27      	ldr	r3, [pc, #156]	; (80067fc <prvHeapInit+0xac>)
 800675e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00c      	beq.n	8006784 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3307      	adds	r3, #7
 800676e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f023 0307 	bic.w	r3, r3, #7
 8006776:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	4a1f      	ldr	r2, [pc, #124]	; (80067fc <prvHeapInit+0xac>)
 8006780:	4413      	add	r3, r2
 8006782:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006788:	4a1d      	ldr	r2, [pc, #116]	; (8006800 <prvHeapInit+0xb0>)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800678e:	4b1c      	ldr	r3, [pc, #112]	; (8006800 <prvHeapInit+0xb0>)
 8006790:	2200      	movs	r2, #0
 8006792:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68ba      	ldr	r2, [r7, #8]
 8006798:	4413      	add	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800679c:	2208      	movs	r2, #8
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1a9b      	subs	r3, r3, r2
 80067a2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f023 0307 	bic.w	r3, r3, #7
 80067aa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	4a15      	ldr	r2, [pc, #84]	; (8006804 <prvHeapInit+0xb4>)
 80067b0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80067b2:	4b14      	ldr	r3, [pc, #80]	; (8006804 <prvHeapInit+0xb4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2200      	movs	r2, #0
 80067b8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80067ba:	4b12      	ldr	r3, [pc, #72]	; (8006804 <prvHeapInit+0xb4>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2200      	movs	r2, #0
 80067c0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	1ad2      	subs	r2, r2, r3
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067d0:	4b0c      	ldr	r3, [pc, #48]	; (8006804 <prvHeapInit+0xb4>)
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <prvHeapInit+0xb8>)
 80067de:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	4a09      	ldr	r2, [pc, #36]	; (800680c <prvHeapInit+0xbc>)
 80067e6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067e8:	4b09      	ldr	r3, [pc, #36]	; (8006810 <prvHeapInit+0xc0>)
 80067ea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80067ee:	601a      	str	r2, [r3, #0]
}
 80067f0:	bf00      	nop
 80067f2:	3714      	adds	r7, #20
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr
 80067fc:	20000398 	.word	0x20000398
 8006800:	20012f98 	.word	0x20012f98
 8006804:	20012fa0 	.word	0x20012fa0
 8006808:	20012fa8 	.word	0x20012fa8
 800680c:	20012fa4 	.word	0x20012fa4
 8006810:	20012fb4 	.word	0x20012fb4

08006814 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800681c:	4b28      	ldr	r3, [pc, #160]	; (80068c0 <prvInsertBlockIntoFreeList+0xac>)
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	e002      	b.n	8006828 <prvInsertBlockIntoFreeList+0x14>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	60fb      	str	r3, [r7, #12]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	429a      	cmp	r2, r3
 8006830:	d8f7      	bhi.n	8006822 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	4413      	add	r3, r2
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	429a      	cmp	r2, r3
 8006842:	d108      	bne.n	8006856 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	441a      	add	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	441a      	add	r2, r3
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	429a      	cmp	r2, r3
 8006868:	d118      	bne.n	800689c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	4b15      	ldr	r3, [pc, #84]	; (80068c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	d00d      	beq.n	8006892 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	685a      	ldr	r2, [r3, #4]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	441a      	add	r2, r3
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	601a      	str	r2, [r3, #0]
 8006890:	e008      	b.n	80068a4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006892:	4b0c      	ldr	r3, [pc, #48]	; (80068c4 <prvInsertBlockIntoFreeList+0xb0>)
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	601a      	str	r2, [r3, #0]
 800689a:	e003      	b.n	80068a4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d002      	beq.n	80068b2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	20012f98 	.word	0x20012f98
 80068c4:	20012fa0 	.word	0x20012fa0

080068c8 <__errno>:
 80068c8:	4b01      	ldr	r3, [pc, #4]	; (80068d0 <__errno+0x8>)
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	200000c4 	.word	0x200000c4

080068d4 <__libc_init_array>:
 80068d4:	b570      	push	{r4, r5, r6, lr}
 80068d6:	4d0d      	ldr	r5, [pc, #52]	; (800690c <__libc_init_array+0x38>)
 80068d8:	4c0d      	ldr	r4, [pc, #52]	; (8006910 <__libc_init_array+0x3c>)
 80068da:	1b64      	subs	r4, r4, r5
 80068dc:	10a4      	asrs	r4, r4, #2
 80068de:	2600      	movs	r6, #0
 80068e0:	42a6      	cmp	r6, r4
 80068e2:	d109      	bne.n	80068f8 <__libc_init_array+0x24>
 80068e4:	4d0b      	ldr	r5, [pc, #44]	; (8006914 <__libc_init_array+0x40>)
 80068e6:	4c0c      	ldr	r4, [pc, #48]	; (8006918 <__libc_init_array+0x44>)
 80068e8:	f000 fc8e 	bl	8007208 <_init>
 80068ec:	1b64      	subs	r4, r4, r5
 80068ee:	10a4      	asrs	r4, r4, #2
 80068f0:	2600      	movs	r6, #0
 80068f2:	42a6      	cmp	r6, r4
 80068f4:	d105      	bne.n	8006902 <__libc_init_array+0x2e>
 80068f6:	bd70      	pop	{r4, r5, r6, pc}
 80068f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068fc:	4798      	blx	r3
 80068fe:	3601      	adds	r6, #1
 8006900:	e7ee      	b.n	80068e0 <__libc_init_array+0xc>
 8006902:	f855 3b04 	ldr.w	r3, [r5], #4
 8006906:	4798      	blx	r3
 8006908:	3601      	adds	r6, #1
 800690a:	e7f2      	b.n	80068f2 <__libc_init_array+0x1e>
 800690c:	080073a4 	.word	0x080073a4
 8006910:	080073a4 	.word	0x080073a4
 8006914:	080073a4 	.word	0x080073a4
 8006918:	080073a8 	.word	0x080073a8

0800691c <memcpy>:
 800691c:	440a      	add	r2, r1
 800691e:	4291      	cmp	r1, r2
 8006920:	f100 33ff 	add.w	r3, r0, #4294967295
 8006924:	d100      	bne.n	8006928 <memcpy+0xc>
 8006926:	4770      	bx	lr
 8006928:	b510      	push	{r4, lr}
 800692a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800692e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006932:	4291      	cmp	r1, r2
 8006934:	d1f9      	bne.n	800692a <memcpy+0xe>
 8006936:	bd10      	pop	{r4, pc}

08006938 <memset>:
 8006938:	4402      	add	r2, r0
 800693a:	4603      	mov	r3, r0
 800693c:	4293      	cmp	r3, r2
 800693e:	d100      	bne.n	8006942 <memset+0xa>
 8006940:	4770      	bx	lr
 8006942:	f803 1b01 	strb.w	r1, [r3], #1
 8006946:	e7f9      	b.n	800693c <memset+0x4>

08006948 <siprintf>:
 8006948:	b40e      	push	{r1, r2, r3}
 800694a:	b500      	push	{lr}
 800694c:	b09c      	sub	sp, #112	; 0x70
 800694e:	ab1d      	add	r3, sp, #116	; 0x74
 8006950:	9002      	str	r0, [sp, #8]
 8006952:	9006      	str	r0, [sp, #24]
 8006954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006958:	4809      	ldr	r0, [pc, #36]	; (8006980 <siprintf+0x38>)
 800695a:	9107      	str	r1, [sp, #28]
 800695c:	9104      	str	r1, [sp, #16]
 800695e:	4909      	ldr	r1, [pc, #36]	; (8006984 <siprintf+0x3c>)
 8006960:	f853 2b04 	ldr.w	r2, [r3], #4
 8006964:	9105      	str	r1, [sp, #20]
 8006966:	6800      	ldr	r0, [r0, #0]
 8006968:	9301      	str	r3, [sp, #4]
 800696a:	a902      	add	r1, sp, #8
 800696c:	f000 f868 	bl	8006a40 <_svfiprintf_r>
 8006970:	9b02      	ldr	r3, [sp, #8]
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	b01c      	add	sp, #112	; 0x70
 8006978:	f85d eb04 	ldr.w	lr, [sp], #4
 800697c:	b003      	add	sp, #12
 800697e:	4770      	bx	lr
 8006980:	200000c4 	.word	0x200000c4
 8006984:	ffff0208 	.word	0xffff0208

08006988 <__ssputs_r>:
 8006988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800698c:	688e      	ldr	r6, [r1, #8]
 800698e:	429e      	cmp	r6, r3
 8006990:	4682      	mov	sl, r0
 8006992:	460c      	mov	r4, r1
 8006994:	4690      	mov	r8, r2
 8006996:	461f      	mov	r7, r3
 8006998:	d838      	bhi.n	8006a0c <__ssputs_r+0x84>
 800699a:	898a      	ldrh	r2, [r1, #12]
 800699c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069a0:	d032      	beq.n	8006a08 <__ssputs_r+0x80>
 80069a2:	6825      	ldr	r5, [r4, #0]
 80069a4:	6909      	ldr	r1, [r1, #16]
 80069a6:	eba5 0901 	sub.w	r9, r5, r1
 80069aa:	6965      	ldr	r5, [r4, #20]
 80069ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069b4:	3301      	adds	r3, #1
 80069b6:	444b      	add	r3, r9
 80069b8:	106d      	asrs	r5, r5, #1
 80069ba:	429d      	cmp	r5, r3
 80069bc:	bf38      	it	cc
 80069be:	461d      	movcc	r5, r3
 80069c0:	0553      	lsls	r3, r2, #21
 80069c2:	d531      	bpl.n	8006a28 <__ssputs_r+0xa0>
 80069c4:	4629      	mov	r1, r5
 80069c6:	f000 fb55 	bl	8007074 <_malloc_r>
 80069ca:	4606      	mov	r6, r0
 80069cc:	b950      	cbnz	r0, 80069e4 <__ssputs_r+0x5c>
 80069ce:	230c      	movs	r3, #12
 80069d0:	f8ca 3000 	str.w	r3, [sl]
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069da:	81a3      	strh	r3, [r4, #12]
 80069dc:	f04f 30ff 	mov.w	r0, #4294967295
 80069e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069e4:	6921      	ldr	r1, [r4, #16]
 80069e6:	464a      	mov	r2, r9
 80069e8:	f7ff ff98 	bl	800691c <memcpy>
 80069ec:	89a3      	ldrh	r3, [r4, #12]
 80069ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069f6:	81a3      	strh	r3, [r4, #12]
 80069f8:	6126      	str	r6, [r4, #16]
 80069fa:	6165      	str	r5, [r4, #20]
 80069fc:	444e      	add	r6, r9
 80069fe:	eba5 0509 	sub.w	r5, r5, r9
 8006a02:	6026      	str	r6, [r4, #0]
 8006a04:	60a5      	str	r5, [r4, #8]
 8006a06:	463e      	mov	r6, r7
 8006a08:	42be      	cmp	r6, r7
 8006a0a:	d900      	bls.n	8006a0e <__ssputs_r+0x86>
 8006a0c:	463e      	mov	r6, r7
 8006a0e:	6820      	ldr	r0, [r4, #0]
 8006a10:	4632      	mov	r2, r6
 8006a12:	4641      	mov	r1, r8
 8006a14:	f000 faa8 	bl	8006f68 <memmove>
 8006a18:	68a3      	ldr	r3, [r4, #8]
 8006a1a:	1b9b      	subs	r3, r3, r6
 8006a1c:	60a3      	str	r3, [r4, #8]
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	4433      	add	r3, r6
 8006a22:	6023      	str	r3, [r4, #0]
 8006a24:	2000      	movs	r0, #0
 8006a26:	e7db      	b.n	80069e0 <__ssputs_r+0x58>
 8006a28:	462a      	mov	r2, r5
 8006a2a:	f000 fb97 	bl	800715c <_realloc_r>
 8006a2e:	4606      	mov	r6, r0
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d1e1      	bne.n	80069f8 <__ssputs_r+0x70>
 8006a34:	6921      	ldr	r1, [r4, #16]
 8006a36:	4650      	mov	r0, sl
 8006a38:	f000 fab0 	bl	8006f9c <_free_r>
 8006a3c:	e7c7      	b.n	80069ce <__ssputs_r+0x46>
	...

08006a40 <_svfiprintf_r>:
 8006a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a44:	4698      	mov	r8, r3
 8006a46:	898b      	ldrh	r3, [r1, #12]
 8006a48:	061b      	lsls	r3, r3, #24
 8006a4a:	b09d      	sub	sp, #116	; 0x74
 8006a4c:	4607      	mov	r7, r0
 8006a4e:	460d      	mov	r5, r1
 8006a50:	4614      	mov	r4, r2
 8006a52:	d50e      	bpl.n	8006a72 <_svfiprintf_r+0x32>
 8006a54:	690b      	ldr	r3, [r1, #16]
 8006a56:	b963      	cbnz	r3, 8006a72 <_svfiprintf_r+0x32>
 8006a58:	2140      	movs	r1, #64	; 0x40
 8006a5a:	f000 fb0b 	bl	8007074 <_malloc_r>
 8006a5e:	6028      	str	r0, [r5, #0]
 8006a60:	6128      	str	r0, [r5, #16]
 8006a62:	b920      	cbnz	r0, 8006a6e <_svfiprintf_r+0x2e>
 8006a64:	230c      	movs	r3, #12
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	e0d1      	b.n	8006c12 <_svfiprintf_r+0x1d2>
 8006a6e:	2340      	movs	r3, #64	; 0x40
 8006a70:	616b      	str	r3, [r5, #20]
 8006a72:	2300      	movs	r3, #0
 8006a74:	9309      	str	r3, [sp, #36]	; 0x24
 8006a76:	2320      	movs	r3, #32
 8006a78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a80:	2330      	movs	r3, #48	; 0x30
 8006a82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006c2c <_svfiprintf_r+0x1ec>
 8006a86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a8a:	f04f 0901 	mov.w	r9, #1
 8006a8e:	4623      	mov	r3, r4
 8006a90:	469a      	mov	sl, r3
 8006a92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a96:	b10a      	cbz	r2, 8006a9c <_svfiprintf_r+0x5c>
 8006a98:	2a25      	cmp	r2, #37	; 0x25
 8006a9a:	d1f9      	bne.n	8006a90 <_svfiprintf_r+0x50>
 8006a9c:	ebba 0b04 	subs.w	fp, sl, r4
 8006aa0:	d00b      	beq.n	8006aba <_svfiprintf_r+0x7a>
 8006aa2:	465b      	mov	r3, fp
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	4638      	mov	r0, r7
 8006aaa:	f7ff ff6d 	bl	8006988 <__ssputs_r>
 8006aae:	3001      	adds	r0, #1
 8006ab0:	f000 80aa 	beq.w	8006c08 <_svfiprintf_r+0x1c8>
 8006ab4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ab6:	445a      	add	r2, fp
 8006ab8:	9209      	str	r2, [sp, #36]	; 0x24
 8006aba:	f89a 3000 	ldrb.w	r3, [sl]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f000 80a2 	beq.w	8006c08 <_svfiprintf_r+0x1c8>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8006aca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ace:	f10a 0a01 	add.w	sl, sl, #1
 8006ad2:	9304      	str	r3, [sp, #16]
 8006ad4:	9307      	str	r3, [sp, #28]
 8006ad6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ada:	931a      	str	r3, [sp, #104]	; 0x68
 8006adc:	4654      	mov	r4, sl
 8006ade:	2205      	movs	r2, #5
 8006ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ae4:	4851      	ldr	r0, [pc, #324]	; (8006c2c <_svfiprintf_r+0x1ec>)
 8006ae6:	f7f9 fb7b 	bl	80001e0 <memchr>
 8006aea:	9a04      	ldr	r2, [sp, #16]
 8006aec:	b9d8      	cbnz	r0, 8006b26 <_svfiprintf_r+0xe6>
 8006aee:	06d0      	lsls	r0, r2, #27
 8006af0:	bf44      	itt	mi
 8006af2:	2320      	movmi	r3, #32
 8006af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006af8:	0711      	lsls	r1, r2, #28
 8006afa:	bf44      	itt	mi
 8006afc:	232b      	movmi	r3, #43	; 0x2b
 8006afe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b02:	f89a 3000 	ldrb.w	r3, [sl]
 8006b06:	2b2a      	cmp	r3, #42	; 0x2a
 8006b08:	d015      	beq.n	8006b36 <_svfiprintf_r+0xf6>
 8006b0a:	9a07      	ldr	r2, [sp, #28]
 8006b0c:	4654      	mov	r4, sl
 8006b0e:	2000      	movs	r0, #0
 8006b10:	f04f 0c0a 	mov.w	ip, #10
 8006b14:	4621      	mov	r1, r4
 8006b16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b1a:	3b30      	subs	r3, #48	; 0x30
 8006b1c:	2b09      	cmp	r3, #9
 8006b1e:	d94e      	bls.n	8006bbe <_svfiprintf_r+0x17e>
 8006b20:	b1b0      	cbz	r0, 8006b50 <_svfiprintf_r+0x110>
 8006b22:	9207      	str	r2, [sp, #28]
 8006b24:	e014      	b.n	8006b50 <_svfiprintf_r+0x110>
 8006b26:	eba0 0308 	sub.w	r3, r0, r8
 8006b2a:	fa09 f303 	lsl.w	r3, r9, r3
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	9304      	str	r3, [sp, #16]
 8006b32:	46a2      	mov	sl, r4
 8006b34:	e7d2      	b.n	8006adc <_svfiprintf_r+0x9c>
 8006b36:	9b03      	ldr	r3, [sp, #12]
 8006b38:	1d19      	adds	r1, r3, #4
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	9103      	str	r1, [sp, #12]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bfbb      	ittet	lt
 8006b42:	425b      	neglt	r3, r3
 8006b44:	f042 0202 	orrlt.w	r2, r2, #2
 8006b48:	9307      	strge	r3, [sp, #28]
 8006b4a:	9307      	strlt	r3, [sp, #28]
 8006b4c:	bfb8      	it	lt
 8006b4e:	9204      	strlt	r2, [sp, #16]
 8006b50:	7823      	ldrb	r3, [r4, #0]
 8006b52:	2b2e      	cmp	r3, #46	; 0x2e
 8006b54:	d10c      	bne.n	8006b70 <_svfiprintf_r+0x130>
 8006b56:	7863      	ldrb	r3, [r4, #1]
 8006b58:	2b2a      	cmp	r3, #42	; 0x2a
 8006b5a:	d135      	bne.n	8006bc8 <_svfiprintf_r+0x188>
 8006b5c:	9b03      	ldr	r3, [sp, #12]
 8006b5e:	1d1a      	adds	r2, r3, #4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	9203      	str	r2, [sp, #12]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	bfb8      	it	lt
 8006b68:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b6c:	3402      	adds	r4, #2
 8006b6e:	9305      	str	r3, [sp, #20]
 8006b70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006c3c <_svfiprintf_r+0x1fc>
 8006b74:	7821      	ldrb	r1, [r4, #0]
 8006b76:	2203      	movs	r2, #3
 8006b78:	4650      	mov	r0, sl
 8006b7a:	f7f9 fb31 	bl	80001e0 <memchr>
 8006b7e:	b140      	cbz	r0, 8006b92 <_svfiprintf_r+0x152>
 8006b80:	2340      	movs	r3, #64	; 0x40
 8006b82:	eba0 000a 	sub.w	r0, r0, sl
 8006b86:	fa03 f000 	lsl.w	r0, r3, r0
 8006b8a:	9b04      	ldr	r3, [sp, #16]
 8006b8c:	4303      	orrs	r3, r0
 8006b8e:	3401      	adds	r4, #1
 8006b90:	9304      	str	r3, [sp, #16]
 8006b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b96:	4826      	ldr	r0, [pc, #152]	; (8006c30 <_svfiprintf_r+0x1f0>)
 8006b98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b9c:	2206      	movs	r2, #6
 8006b9e:	f7f9 fb1f 	bl	80001e0 <memchr>
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	d038      	beq.n	8006c18 <_svfiprintf_r+0x1d8>
 8006ba6:	4b23      	ldr	r3, [pc, #140]	; (8006c34 <_svfiprintf_r+0x1f4>)
 8006ba8:	bb1b      	cbnz	r3, 8006bf2 <_svfiprintf_r+0x1b2>
 8006baa:	9b03      	ldr	r3, [sp, #12]
 8006bac:	3307      	adds	r3, #7
 8006bae:	f023 0307 	bic.w	r3, r3, #7
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	9303      	str	r3, [sp, #12]
 8006bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb8:	4433      	add	r3, r6
 8006bba:	9309      	str	r3, [sp, #36]	; 0x24
 8006bbc:	e767      	b.n	8006a8e <_svfiprintf_r+0x4e>
 8006bbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	2001      	movs	r0, #1
 8006bc6:	e7a5      	b.n	8006b14 <_svfiprintf_r+0xd4>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	3401      	adds	r4, #1
 8006bcc:	9305      	str	r3, [sp, #20]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	f04f 0c0a 	mov.w	ip, #10
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bda:	3a30      	subs	r2, #48	; 0x30
 8006bdc:	2a09      	cmp	r2, #9
 8006bde:	d903      	bls.n	8006be8 <_svfiprintf_r+0x1a8>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d0c5      	beq.n	8006b70 <_svfiprintf_r+0x130>
 8006be4:	9105      	str	r1, [sp, #20]
 8006be6:	e7c3      	b.n	8006b70 <_svfiprintf_r+0x130>
 8006be8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bec:	4604      	mov	r4, r0
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e7f0      	b.n	8006bd4 <_svfiprintf_r+0x194>
 8006bf2:	ab03      	add	r3, sp, #12
 8006bf4:	9300      	str	r3, [sp, #0]
 8006bf6:	462a      	mov	r2, r5
 8006bf8:	4b0f      	ldr	r3, [pc, #60]	; (8006c38 <_svfiprintf_r+0x1f8>)
 8006bfa:	a904      	add	r1, sp, #16
 8006bfc:	4638      	mov	r0, r7
 8006bfe:	f3af 8000 	nop.w
 8006c02:	1c42      	adds	r2, r0, #1
 8006c04:	4606      	mov	r6, r0
 8006c06:	d1d6      	bne.n	8006bb6 <_svfiprintf_r+0x176>
 8006c08:	89ab      	ldrh	r3, [r5, #12]
 8006c0a:	065b      	lsls	r3, r3, #25
 8006c0c:	f53f af2c 	bmi.w	8006a68 <_svfiprintf_r+0x28>
 8006c10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c12:	b01d      	add	sp, #116	; 0x74
 8006c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c18:	ab03      	add	r3, sp, #12
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	462a      	mov	r2, r5
 8006c1e:	4b06      	ldr	r3, [pc, #24]	; (8006c38 <_svfiprintf_r+0x1f8>)
 8006c20:	a904      	add	r1, sp, #16
 8006c22:	4638      	mov	r0, r7
 8006c24:	f000 f87a 	bl	8006d1c <_printf_i>
 8006c28:	e7eb      	b.n	8006c02 <_svfiprintf_r+0x1c2>
 8006c2a:	bf00      	nop
 8006c2c:	08007368 	.word	0x08007368
 8006c30:	08007372 	.word	0x08007372
 8006c34:	00000000 	.word	0x00000000
 8006c38:	08006989 	.word	0x08006989
 8006c3c:	0800736e 	.word	0x0800736e

08006c40 <_printf_common>:
 8006c40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c44:	4616      	mov	r6, r2
 8006c46:	4699      	mov	r9, r3
 8006c48:	688a      	ldr	r2, [r1, #8]
 8006c4a:	690b      	ldr	r3, [r1, #16]
 8006c4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c50:	4293      	cmp	r3, r2
 8006c52:	bfb8      	it	lt
 8006c54:	4613      	movlt	r3, r2
 8006c56:	6033      	str	r3, [r6, #0]
 8006c58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	460c      	mov	r4, r1
 8006c60:	b10a      	cbz	r2, 8006c66 <_printf_common+0x26>
 8006c62:	3301      	adds	r3, #1
 8006c64:	6033      	str	r3, [r6, #0]
 8006c66:	6823      	ldr	r3, [r4, #0]
 8006c68:	0699      	lsls	r1, r3, #26
 8006c6a:	bf42      	ittt	mi
 8006c6c:	6833      	ldrmi	r3, [r6, #0]
 8006c6e:	3302      	addmi	r3, #2
 8006c70:	6033      	strmi	r3, [r6, #0]
 8006c72:	6825      	ldr	r5, [r4, #0]
 8006c74:	f015 0506 	ands.w	r5, r5, #6
 8006c78:	d106      	bne.n	8006c88 <_printf_common+0x48>
 8006c7a:	f104 0a19 	add.w	sl, r4, #25
 8006c7e:	68e3      	ldr	r3, [r4, #12]
 8006c80:	6832      	ldr	r2, [r6, #0]
 8006c82:	1a9b      	subs	r3, r3, r2
 8006c84:	42ab      	cmp	r3, r5
 8006c86:	dc26      	bgt.n	8006cd6 <_printf_common+0x96>
 8006c88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c8c:	1e13      	subs	r3, r2, #0
 8006c8e:	6822      	ldr	r2, [r4, #0]
 8006c90:	bf18      	it	ne
 8006c92:	2301      	movne	r3, #1
 8006c94:	0692      	lsls	r2, r2, #26
 8006c96:	d42b      	bmi.n	8006cf0 <_printf_common+0xb0>
 8006c98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c9c:	4649      	mov	r1, r9
 8006c9e:	4638      	mov	r0, r7
 8006ca0:	47c0      	blx	r8
 8006ca2:	3001      	adds	r0, #1
 8006ca4:	d01e      	beq.n	8006ce4 <_printf_common+0xa4>
 8006ca6:	6823      	ldr	r3, [r4, #0]
 8006ca8:	68e5      	ldr	r5, [r4, #12]
 8006caa:	6832      	ldr	r2, [r6, #0]
 8006cac:	f003 0306 	and.w	r3, r3, #6
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	bf08      	it	eq
 8006cb4:	1aad      	subeq	r5, r5, r2
 8006cb6:	68a3      	ldr	r3, [r4, #8]
 8006cb8:	6922      	ldr	r2, [r4, #16]
 8006cba:	bf0c      	ite	eq
 8006cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cc0:	2500      	movne	r5, #0
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	bfc4      	itt	gt
 8006cc6:	1a9b      	subgt	r3, r3, r2
 8006cc8:	18ed      	addgt	r5, r5, r3
 8006cca:	2600      	movs	r6, #0
 8006ccc:	341a      	adds	r4, #26
 8006cce:	42b5      	cmp	r5, r6
 8006cd0:	d11a      	bne.n	8006d08 <_printf_common+0xc8>
 8006cd2:	2000      	movs	r0, #0
 8006cd4:	e008      	b.n	8006ce8 <_printf_common+0xa8>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	4652      	mov	r2, sl
 8006cda:	4649      	mov	r1, r9
 8006cdc:	4638      	mov	r0, r7
 8006cde:	47c0      	blx	r8
 8006ce0:	3001      	adds	r0, #1
 8006ce2:	d103      	bne.n	8006cec <_printf_common+0xac>
 8006ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cec:	3501      	adds	r5, #1
 8006cee:	e7c6      	b.n	8006c7e <_printf_common+0x3e>
 8006cf0:	18e1      	adds	r1, r4, r3
 8006cf2:	1c5a      	adds	r2, r3, #1
 8006cf4:	2030      	movs	r0, #48	; 0x30
 8006cf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cfa:	4422      	add	r2, r4
 8006cfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d04:	3302      	adds	r3, #2
 8006d06:	e7c7      	b.n	8006c98 <_printf_common+0x58>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	4622      	mov	r2, r4
 8006d0c:	4649      	mov	r1, r9
 8006d0e:	4638      	mov	r0, r7
 8006d10:	47c0      	blx	r8
 8006d12:	3001      	adds	r0, #1
 8006d14:	d0e6      	beq.n	8006ce4 <_printf_common+0xa4>
 8006d16:	3601      	adds	r6, #1
 8006d18:	e7d9      	b.n	8006cce <_printf_common+0x8e>
	...

08006d1c <_printf_i>:
 8006d1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	7e0f      	ldrb	r7, [r1, #24]
 8006d22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d24:	2f78      	cmp	r7, #120	; 0x78
 8006d26:	4691      	mov	r9, r2
 8006d28:	4680      	mov	r8, r0
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	469a      	mov	sl, r3
 8006d2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d32:	d807      	bhi.n	8006d44 <_printf_i+0x28>
 8006d34:	2f62      	cmp	r7, #98	; 0x62
 8006d36:	d80a      	bhi.n	8006d4e <_printf_i+0x32>
 8006d38:	2f00      	cmp	r7, #0
 8006d3a:	f000 80d8 	beq.w	8006eee <_printf_i+0x1d2>
 8006d3e:	2f58      	cmp	r7, #88	; 0x58
 8006d40:	f000 80a3 	beq.w	8006e8a <_printf_i+0x16e>
 8006d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d4c:	e03a      	b.n	8006dc4 <_printf_i+0xa8>
 8006d4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d52:	2b15      	cmp	r3, #21
 8006d54:	d8f6      	bhi.n	8006d44 <_printf_i+0x28>
 8006d56:	a101      	add	r1, pc, #4	; (adr r1, 8006d5c <_printf_i+0x40>)
 8006d58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d5c:	08006db5 	.word	0x08006db5
 8006d60:	08006dc9 	.word	0x08006dc9
 8006d64:	08006d45 	.word	0x08006d45
 8006d68:	08006d45 	.word	0x08006d45
 8006d6c:	08006d45 	.word	0x08006d45
 8006d70:	08006d45 	.word	0x08006d45
 8006d74:	08006dc9 	.word	0x08006dc9
 8006d78:	08006d45 	.word	0x08006d45
 8006d7c:	08006d45 	.word	0x08006d45
 8006d80:	08006d45 	.word	0x08006d45
 8006d84:	08006d45 	.word	0x08006d45
 8006d88:	08006ed5 	.word	0x08006ed5
 8006d8c:	08006df9 	.word	0x08006df9
 8006d90:	08006eb7 	.word	0x08006eb7
 8006d94:	08006d45 	.word	0x08006d45
 8006d98:	08006d45 	.word	0x08006d45
 8006d9c:	08006ef7 	.word	0x08006ef7
 8006da0:	08006d45 	.word	0x08006d45
 8006da4:	08006df9 	.word	0x08006df9
 8006da8:	08006d45 	.word	0x08006d45
 8006dac:	08006d45 	.word	0x08006d45
 8006db0:	08006ebf 	.word	0x08006ebf
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	1d1a      	adds	r2, r3, #4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	602a      	str	r2, [r5, #0]
 8006dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e0a3      	b.n	8006f10 <_printf_i+0x1f4>
 8006dc8:	6820      	ldr	r0, [r4, #0]
 8006dca:	6829      	ldr	r1, [r5, #0]
 8006dcc:	0606      	lsls	r6, r0, #24
 8006dce:	f101 0304 	add.w	r3, r1, #4
 8006dd2:	d50a      	bpl.n	8006dea <_printf_i+0xce>
 8006dd4:	680e      	ldr	r6, [r1, #0]
 8006dd6:	602b      	str	r3, [r5, #0]
 8006dd8:	2e00      	cmp	r6, #0
 8006dda:	da03      	bge.n	8006de4 <_printf_i+0xc8>
 8006ddc:	232d      	movs	r3, #45	; 0x2d
 8006dde:	4276      	negs	r6, r6
 8006de0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de4:	485e      	ldr	r0, [pc, #376]	; (8006f60 <_printf_i+0x244>)
 8006de6:	230a      	movs	r3, #10
 8006de8:	e019      	b.n	8006e1e <_printf_i+0x102>
 8006dea:	680e      	ldr	r6, [r1, #0]
 8006dec:	602b      	str	r3, [r5, #0]
 8006dee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006df2:	bf18      	it	ne
 8006df4:	b236      	sxthne	r6, r6
 8006df6:	e7ef      	b.n	8006dd8 <_printf_i+0xbc>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	6820      	ldr	r0, [r4, #0]
 8006dfc:	1d19      	adds	r1, r3, #4
 8006dfe:	6029      	str	r1, [r5, #0]
 8006e00:	0601      	lsls	r1, r0, #24
 8006e02:	d501      	bpl.n	8006e08 <_printf_i+0xec>
 8006e04:	681e      	ldr	r6, [r3, #0]
 8006e06:	e002      	b.n	8006e0e <_printf_i+0xf2>
 8006e08:	0646      	lsls	r6, r0, #25
 8006e0a:	d5fb      	bpl.n	8006e04 <_printf_i+0xe8>
 8006e0c:	881e      	ldrh	r6, [r3, #0]
 8006e0e:	4854      	ldr	r0, [pc, #336]	; (8006f60 <_printf_i+0x244>)
 8006e10:	2f6f      	cmp	r7, #111	; 0x6f
 8006e12:	bf0c      	ite	eq
 8006e14:	2308      	moveq	r3, #8
 8006e16:	230a      	movne	r3, #10
 8006e18:	2100      	movs	r1, #0
 8006e1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e1e:	6865      	ldr	r5, [r4, #4]
 8006e20:	60a5      	str	r5, [r4, #8]
 8006e22:	2d00      	cmp	r5, #0
 8006e24:	bfa2      	ittt	ge
 8006e26:	6821      	ldrge	r1, [r4, #0]
 8006e28:	f021 0104 	bicge.w	r1, r1, #4
 8006e2c:	6021      	strge	r1, [r4, #0]
 8006e2e:	b90e      	cbnz	r6, 8006e34 <_printf_i+0x118>
 8006e30:	2d00      	cmp	r5, #0
 8006e32:	d04d      	beq.n	8006ed0 <_printf_i+0x1b4>
 8006e34:	4615      	mov	r5, r2
 8006e36:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e3a:	fb03 6711 	mls	r7, r3, r1, r6
 8006e3e:	5dc7      	ldrb	r7, [r0, r7]
 8006e40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e44:	4637      	mov	r7, r6
 8006e46:	42bb      	cmp	r3, r7
 8006e48:	460e      	mov	r6, r1
 8006e4a:	d9f4      	bls.n	8006e36 <_printf_i+0x11a>
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d10b      	bne.n	8006e68 <_printf_i+0x14c>
 8006e50:	6823      	ldr	r3, [r4, #0]
 8006e52:	07de      	lsls	r6, r3, #31
 8006e54:	d508      	bpl.n	8006e68 <_printf_i+0x14c>
 8006e56:	6923      	ldr	r3, [r4, #16]
 8006e58:	6861      	ldr	r1, [r4, #4]
 8006e5a:	4299      	cmp	r1, r3
 8006e5c:	bfde      	ittt	le
 8006e5e:	2330      	movle	r3, #48	; 0x30
 8006e60:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e64:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e68:	1b52      	subs	r2, r2, r5
 8006e6a:	6122      	str	r2, [r4, #16]
 8006e6c:	f8cd a000 	str.w	sl, [sp]
 8006e70:	464b      	mov	r3, r9
 8006e72:	aa03      	add	r2, sp, #12
 8006e74:	4621      	mov	r1, r4
 8006e76:	4640      	mov	r0, r8
 8006e78:	f7ff fee2 	bl	8006c40 <_printf_common>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d14c      	bne.n	8006f1a <_printf_i+0x1fe>
 8006e80:	f04f 30ff 	mov.w	r0, #4294967295
 8006e84:	b004      	add	sp, #16
 8006e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8a:	4835      	ldr	r0, [pc, #212]	; (8006f60 <_printf_i+0x244>)
 8006e8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006e90:	6829      	ldr	r1, [r5, #0]
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	f851 6b04 	ldr.w	r6, [r1], #4
 8006e98:	6029      	str	r1, [r5, #0]
 8006e9a:	061d      	lsls	r5, r3, #24
 8006e9c:	d514      	bpl.n	8006ec8 <_printf_i+0x1ac>
 8006e9e:	07df      	lsls	r7, r3, #31
 8006ea0:	bf44      	itt	mi
 8006ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8006ea6:	6023      	strmi	r3, [r4, #0]
 8006ea8:	b91e      	cbnz	r6, 8006eb2 <_printf_i+0x196>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	f023 0320 	bic.w	r3, r3, #32
 8006eb0:	6023      	str	r3, [r4, #0]
 8006eb2:	2310      	movs	r3, #16
 8006eb4:	e7b0      	b.n	8006e18 <_printf_i+0xfc>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	f043 0320 	orr.w	r3, r3, #32
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	2378      	movs	r3, #120	; 0x78
 8006ec0:	4828      	ldr	r0, [pc, #160]	; (8006f64 <_printf_i+0x248>)
 8006ec2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ec6:	e7e3      	b.n	8006e90 <_printf_i+0x174>
 8006ec8:	0659      	lsls	r1, r3, #25
 8006eca:	bf48      	it	mi
 8006ecc:	b2b6      	uxthmi	r6, r6
 8006ece:	e7e6      	b.n	8006e9e <_printf_i+0x182>
 8006ed0:	4615      	mov	r5, r2
 8006ed2:	e7bb      	b.n	8006e4c <_printf_i+0x130>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	6826      	ldr	r6, [r4, #0]
 8006ed8:	6961      	ldr	r1, [r4, #20]
 8006eda:	1d18      	adds	r0, r3, #4
 8006edc:	6028      	str	r0, [r5, #0]
 8006ede:	0635      	lsls	r5, r6, #24
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	d501      	bpl.n	8006ee8 <_printf_i+0x1cc>
 8006ee4:	6019      	str	r1, [r3, #0]
 8006ee6:	e002      	b.n	8006eee <_printf_i+0x1d2>
 8006ee8:	0670      	lsls	r0, r6, #25
 8006eea:	d5fb      	bpl.n	8006ee4 <_printf_i+0x1c8>
 8006eec:	8019      	strh	r1, [r3, #0]
 8006eee:	2300      	movs	r3, #0
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	4615      	mov	r5, r2
 8006ef4:	e7ba      	b.n	8006e6c <_printf_i+0x150>
 8006ef6:	682b      	ldr	r3, [r5, #0]
 8006ef8:	1d1a      	adds	r2, r3, #4
 8006efa:	602a      	str	r2, [r5, #0]
 8006efc:	681d      	ldr	r5, [r3, #0]
 8006efe:	6862      	ldr	r2, [r4, #4]
 8006f00:	2100      	movs	r1, #0
 8006f02:	4628      	mov	r0, r5
 8006f04:	f7f9 f96c 	bl	80001e0 <memchr>
 8006f08:	b108      	cbz	r0, 8006f0e <_printf_i+0x1f2>
 8006f0a:	1b40      	subs	r0, r0, r5
 8006f0c:	6060      	str	r0, [r4, #4]
 8006f0e:	6863      	ldr	r3, [r4, #4]
 8006f10:	6123      	str	r3, [r4, #16]
 8006f12:	2300      	movs	r3, #0
 8006f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f18:	e7a8      	b.n	8006e6c <_printf_i+0x150>
 8006f1a:	6923      	ldr	r3, [r4, #16]
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	4649      	mov	r1, r9
 8006f20:	4640      	mov	r0, r8
 8006f22:	47d0      	blx	sl
 8006f24:	3001      	adds	r0, #1
 8006f26:	d0ab      	beq.n	8006e80 <_printf_i+0x164>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	079b      	lsls	r3, r3, #30
 8006f2c:	d413      	bmi.n	8006f56 <_printf_i+0x23a>
 8006f2e:	68e0      	ldr	r0, [r4, #12]
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	4298      	cmp	r0, r3
 8006f34:	bfb8      	it	lt
 8006f36:	4618      	movlt	r0, r3
 8006f38:	e7a4      	b.n	8006e84 <_printf_i+0x168>
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	4632      	mov	r2, r6
 8006f3e:	4649      	mov	r1, r9
 8006f40:	4640      	mov	r0, r8
 8006f42:	47d0      	blx	sl
 8006f44:	3001      	adds	r0, #1
 8006f46:	d09b      	beq.n	8006e80 <_printf_i+0x164>
 8006f48:	3501      	adds	r5, #1
 8006f4a:	68e3      	ldr	r3, [r4, #12]
 8006f4c:	9903      	ldr	r1, [sp, #12]
 8006f4e:	1a5b      	subs	r3, r3, r1
 8006f50:	42ab      	cmp	r3, r5
 8006f52:	dcf2      	bgt.n	8006f3a <_printf_i+0x21e>
 8006f54:	e7eb      	b.n	8006f2e <_printf_i+0x212>
 8006f56:	2500      	movs	r5, #0
 8006f58:	f104 0619 	add.w	r6, r4, #25
 8006f5c:	e7f5      	b.n	8006f4a <_printf_i+0x22e>
 8006f5e:	bf00      	nop
 8006f60:	08007379 	.word	0x08007379
 8006f64:	0800738a 	.word	0x0800738a

08006f68 <memmove>:
 8006f68:	4288      	cmp	r0, r1
 8006f6a:	b510      	push	{r4, lr}
 8006f6c:	eb01 0402 	add.w	r4, r1, r2
 8006f70:	d902      	bls.n	8006f78 <memmove+0x10>
 8006f72:	4284      	cmp	r4, r0
 8006f74:	4623      	mov	r3, r4
 8006f76:	d807      	bhi.n	8006f88 <memmove+0x20>
 8006f78:	1e43      	subs	r3, r0, #1
 8006f7a:	42a1      	cmp	r1, r4
 8006f7c:	d008      	beq.n	8006f90 <memmove+0x28>
 8006f7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f86:	e7f8      	b.n	8006f7a <memmove+0x12>
 8006f88:	4402      	add	r2, r0
 8006f8a:	4601      	mov	r1, r0
 8006f8c:	428a      	cmp	r2, r1
 8006f8e:	d100      	bne.n	8006f92 <memmove+0x2a>
 8006f90:	bd10      	pop	{r4, pc}
 8006f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f9a:	e7f7      	b.n	8006f8c <memmove+0x24>

08006f9c <_free_r>:
 8006f9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006f9e:	2900      	cmp	r1, #0
 8006fa0:	d044      	beq.n	800702c <_free_r+0x90>
 8006fa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa6:	9001      	str	r0, [sp, #4]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	f1a1 0404 	sub.w	r4, r1, #4
 8006fae:	bfb8      	it	lt
 8006fb0:	18e4      	addlt	r4, r4, r3
 8006fb2:	f000 f913 	bl	80071dc <__malloc_lock>
 8006fb6:	4a1e      	ldr	r2, [pc, #120]	; (8007030 <_free_r+0x94>)
 8006fb8:	9801      	ldr	r0, [sp, #4]
 8006fba:	6813      	ldr	r3, [r2, #0]
 8006fbc:	b933      	cbnz	r3, 8006fcc <_free_r+0x30>
 8006fbe:	6063      	str	r3, [r4, #4]
 8006fc0:	6014      	str	r4, [r2, #0]
 8006fc2:	b003      	add	sp, #12
 8006fc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fc8:	f000 b90e 	b.w	80071e8 <__malloc_unlock>
 8006fcc:	42a3      	cmp	r3, r4
 8006fce:	d908      	bls.n	8006fe2 <_free_r+0x46>
 8006fd0:	6825      	ldr	r5, [r4, #0]
 8006fd2:	1961      	adds	r1, r4, r5
 8006fd4:	428b      	cmp	r3, r1
 8006fd6:	bf01      	itttt	eq
 8006fd8:	6819      	ldreq	r1, [r3, #0]
 8006fda:	685b      	ldreq	r3, [r3, #4]
 8006fdc:	1949      	addeq	r1, r1, r5
 8006fde:	6021      	streq	r1, [r4, #0]
 8006fe0:	e7ed      	b.n	8006fbe <_free_r+0x22>
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	b10b      	cbz	r3, 8006fec <_free_r+0x50>
 8006fe8:	42a3      	cmp	r3, r4
 8006fea:	d9fa      	bls.n	8006fe2 <_free_r+0x46>
 8006fec:	6811      	ldr	r1, [r2, #0]
 8006fee:	1855      	adds	r5, r2, r1
 8006ff0:	42a5      	cmp	r5, r4
 8006ff2:	d10b      	bne.n	800700c <_free_r+0x70>
 8006ff4:	6824      	ldr	r4, [r4, #0]
 8006ff6:	4421      	add	r1, r4
 8006ff8:	1854      	adds	r4, r2, r1
 8006ffa:	42a3      	cmp	r3, r4
 8006ffc:	6011      	str	r1, [r2, #0]
 8006ffe:	d1e0      	bne.n	8006fc2 <_free_r+0x26>
 8007000:	681c      	ldr	r4, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	6053      	str	r3, [r2, #4]
 8007006:	4421      	add	r1, r4
 8007008:	6011      	str	r1, [r2, #0]
 800700a:	e7da      	b.n	8006fc2 <_free_r+0x26>
 800700c:	d902      	bls.n	8007014 <_free_r+0x78>
 800700e:	230c      	movs	r3, #12
 8007010:	6003      	str	r3, [r0, #0]
 8007012:	e7d6      	b.n	8006fc2 <_free_r+0x26>
 8007014:	6825      	ldr	r5, [r4, #0]
 8007016:	1961      	adds	r1, r4, r5
 8007018:	428b      	cmp	r3, r1
 800701a:	bf04      	itt	eq
 800701c:	6819      	ldreq	r1, [r3, #0]
 800701e:	685b      	ldreq	r3, [r3, #4]
 8007020:	6063      	str	r3, [r4, #4]
 8007022:	bf04      	itt	eq
 8007024:	1949      	addeq	r1, r1, r5
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	6054      	str	r4, [r2, #4]
 800702a:	e7ca      	b.n	8006fc2 <_free_r+0x26>
 800702c:	b003      	add	sp, #12
 800702e:	bd30      	pop	{r4, r5, pc}
 8007030:	20012fb8 	.word	0x20012fb8

08007034 <sbrk_aligned>:
 8007034:	b570      	push	{r4, r5, r6, lr}
 8007036:	4e0e      	ldr	r6, [pc, #56]	; (8007070 <sbrk_aligned+0x3c>)
 8007038:	460c      	mov	r4, r1
 800703a:	6831      	ldr	r1, [r6, #0]
 800703c:	4605      	mov	r5, r0
 800703e:	b911      	cbnz	r1, 8007046 <sbrk_aligned+0x12>
 8007040:	f000 f8bc 	bl	80071bc <_sbrk_r>
 8007044:	6030      	str	r0, [r6, #0]
 8007046:	4621      	mov	r1, r4
 8007048:	4628      	mov	r0, r5
 800704a:	f000 f8b7 	bl	80071bc <_sbrk_r>
 800704e:	1c43      	adds	r3, r0, #1
 8007050:	d00a      	beq.n	8007068 <sbrk_aligned+0x34>
 8007052:	1cc4      	adds	r4, r0, #3
 8007054:	f024 0403 	bic.w	r4, r4, #3
 8007058:	42a0      	cmp	r0, r4
 800705a:	d007      	beq.n	800706c <sbrk_aligned+0x38>
 800705c:	1a21      	subs	r1, r4, r0
 800705e:	4628      	mov	r0, r5
 8007060:	f000 f8ac 	bl	80071bc <_sbrk_r>
 8007064:	3001      	adds	r0, #1
 8007066:	d101      	bne.n	800706c <sbrk_aligned+0x38>
 8007068:	f04f 34ff 	mov.w	r4, #4294967295
 800706c:	4620      	mov	r0, r4
 800706e:	bd70      	pop	{r4, r5, r6, pc}
 8007070:	20012fbc 	.word	0x20012fbc

08007074 <_malloc_r>:
 8007074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007078:	1ccd      	adds	r5, r1, #3
 800707a:	f025 0503 	bic.w	r5, r5, #3
 800707e:	3508      	adds	r5, #8
 8007080:	2d0c      	cmp	r5, #12
 8007082:	bf38      	it	cc
 8007084:	250c      	movcc	r5, #12
 8007086:	2d00      	cmp	r5, #0
 8007088:	4607      	mov	r7, r0
 800708a:	db01      	blt.n	8007090 <_malloc_r+0x1c>
 800708c:	42a9      	cmp	r1, r5
 800708e:	d905      	bls.n	800709c <_malloc_r+0x28>
 8007090:	230c      	movs	r3, #12
 8007092:	603b      	str	r3, [r7, #0]
 8007094:	2600      	movs	r6, #0
 8007096:	4630      	mov	r0, r6
 8007098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709c:	4e2e      	ldr	r6, [pc, #184]	; (8007158 <_malloc_r+0xe4>)
 800709e:	f000 f89d 	bl	80071dc <__malloc_lock>
 80070a2:	6833      	ldr	r3, [r6, #0]
 80070a4:	461c      	mov	r4, r3
 80070a6:	bb34      	cbnz	r4, 80070f6 <_malloc_r+0x82>
 80070a8:	4629      	mov	r1, r5
 80070aa:	4638      	mov	r0, r7
 80070ac:	f7ff ffc2 	bl	8007034 <sbrk_aligned>
 80070b0:	1c43      	adds	r3, r0, #1
 80070b2:	4604      	mov	r4, r0
 80070b4:	d14d      	bne.n	8007152 <_malloc_r+0xde>
 80070b6:	6834      	ldr	r4, [r6, #0]
 80070b8:	4626      	mov	r6, r4
 80070ba:	2e00      	cmp	r6, #0
 80070bc:	d140      	bne.n	8007140 <_malloc_r+0xcc>
 80070be:	6823      	ldr	r3, [r4, #0]
 80070c0:	4631      	mov	r1, r6
 80070c2:	4638      	mov	r0, r7
 80070c4:	eb04 0803 	add.w	r8, r4, r3
 80070c8:	f000 f878 	bl	80071bc <_sbrk_r>
 80070cc:	4580      	cmp	r8, r0
 80070ce:	d13a      	bne.n	8007146 <_malloc_r+0xd2>
 80070d0:	6821      	ldr	r1, [r4, #0]
 80070d2:	3503      	adds	r5, #3
 80070d4:	1a6d      	subs	r5, r5, r1
 80070d6:	f025 0503 	bic.w	r5, r5, #3
 80070da:	3508      	adds	r5, #8
 80070dc:	2d0c      	cmp	r5, #12
 80070de:	bf38      	it	cc
 80070e0:	250c      	movcc	r5, #12
 80070e2:	4629      	mov	r1, r5
 80070e4:	4638      	mov	r0, r7
 80070e6:	f7ff ffa5 	bl	8007034 <sbrk_aligned>
 80070ea:	3001      	adds	r0, #1
 80070ec:	d02b      	beq.n	8007146 <_malloc_r+0xd2>
 80070ee:	6823      	ldr	r3, [r4, #0]
 80070f0:	442b      	add	r3, r5
 80070f2:	6023      	str	r3, [r4, #0]
 80070f4:	e00e      	b.n	8007114 <_malloc_r+0xa0>
 80070f6:	6822      	ldr	r2, [r4, #0]
 80070f8:	1b52      	subs	r2, r2, r5
 80070fa:	d41e      	bmi.n	800713a <_malloc_r+0xc6>
 80070fc:	2a0b      	cmp	r2, #11
 80070fe:	d916      	bls.n	800712e <_malloc_r+0xba>
 8007100:	1961      	adds	r1, r4, r5
 8007102:	42a3      	cmp	r3, r4
 8007104:	6025      	str	r5, [r4, #0]
 8007106:	bf18      	it	ne
 8007108:	6059      	strne	r1, [r3, #4]
 800710a:	6863      	ldr	r3, [r4, #4]
 800710c:	bf08      	it	eq
 800710e:	6031      	streq	r1, [r6, #0]
 8007110:	5162      	str	r2, [r4, r5]
 8007112:	604b      	str	r3, [r1, #4]
 8007114:	4638      	mov	r0, r7
 8007116:	f104 060b 	add.w	r6, r4, #11
 800711a:	f000 f865 	bl	80071e8 <__malloc_unlock>
 800711e:	f026 0607 	bic.w	r6, r6, #7
 8007122:	1d23      	adds	r3, r4, #4
 8007124:	1af2      	subs	r2, r6, r3
 8007126:	d0b6      	beq.n	8007096 <_malloc_r+0x22>
 8007128:	1b9b      	subs	r3, r3, r6
 800712a:	50a3      	str	r3, [r4, r2]
 800712c:	e7b3      	b.n	8007096 <_malloc_r+0x22>
 800712e:	6862      	ldr	r2, [r4, #4]
 8007130:	42a3      	cmp	r3, r4
 8007132:	bf0c      	ite	eq
 8007134:	6032      	streq	r2, [r6, #0]
 8007136:	605a      	strne	r2, [r3, #4]
 8007138:	e7ec      	b.n	8007114 <_malloc_r+0xa0>
 800713a:	4623      	mov	r3, r4
 800713c:	6864      	ldr	r4, [r4, #4]
 800713e:	e7b2      	b.n	80070a6 <_malloc_r+0x32>
 8007140:	4634      	mov	r4, r6
 8007142:	6876      	ldr	r6, [r6, #4]
 8007144:	e7b9      	b.n	80070ba <_malloc_r+0x46>
 8007146:	230c      	movs	r3, #12
 8007148:	603b      	str	r3, [r7, #0]
 800714a:	4638      	mov	r0, r7
 800714c:	f000 f84c 	bl	80071e8 <__malloc_unlock>
 8007150:	e7a1      	b.n	8007096 <_malloc_r+0x22>
 8007152:	6025      	str	r5, [r4, #0]
 8007154:	e7de      	b.n	8007114 <_malloc_r+0xa0>
 8007156:	bf00      	nop
 8007158:	20012fb8 	.word	0x20012fb8

0800715c <_realloc_r>:
 800715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007160:	4680      	mov	r8, r0
 8007162:	4614      	mov	r4, r2
 8007164:	460e      	mov	r6, r1
 8007166:	b921      	cbnz	r1, 8007172 <_realloc_r+0x16>
 8007168:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800716c:	4611      	mov	r1, r2
 800716e:	f7ff bf81 	b.w	8007074 <_malloc_r>
 8007172:	b92a      	cbnz	r2, 8007180 <_realloc_r+0x24>
 8007174:	f7ff ff12 	bl	8006f9c <_free_r>
 8007178:	4625      	mov	r5, r4
 800717a:	4628      	mov	r0, r5
 800717c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007180:	f000 f838 	bl	80071f4 <_malloc_usable_size_r>
 8007184:	4284      	cmp	r4, r0
 8007186:	4607      	mov	r7, r0
 8007188:	d802      	bhi.n	8007190 <_realloc_r+0x34>
 800718a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800718e:	d812      	bhi.n	80071b6 <_realloc_r+0x5a>
 8007190:	4621      	mov	r1, r4
 8007192:	4640      	mov	r0, r8
 8007194:	f7ff ff6e 	bl	8007074 <_malloc_r>
 8007198:	4605      	mov	r5, r0
 800719a:	2800      	cmp	r0, #0
 800719c:	d0ed      	beq.n	800717a <_realloc_r+0x1e>
 800719e:	42bc      	cmp	r4, r7
 80071a0:	4622      	mov	r2, r4
 80071a2:	4631      	mov	r1, r6
 80071a4:	bf28      	it	cs
 80071a6:	463a      	movcs	r2, r7
 80071a8:	f7ff fbb8 	bl	800691c <memcpy>
 80071ac:	4631      	mov	r1, r6
 80071ae:	4640      	mov	r0, r8
 80071b0:	f7ff fef4 	bl	8006f9c <_free_r>
 80071b4:	e7e1      	b.n	800717a <_realloc_r+0x1e>
 80071b6:	4635      	mov	r5, r6
 80071b8:	e7df      	b.n	800717a <_realloc_r+0x1e>
	...

080071bc <_sbrk_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4d06      	ldr	r5, [pc, #24]	; (80071d8 <_sbrk_r+0x1c>)
 80071c0:	2300      	movs	r3, #0
 80071c2:	4604      	mov	r4, r0
 80071c4:	4608      	mov	r0, r1
 80071c6:	602b      	str	r3, [r5, #0]
 80071c8:	f7f9 fe8c 	bl	8000ee4 <_sbrk>
 80071cc:	1c43      	adds	r3, r0, #1
 80071ce:	d102      	bne.n	80071d6 <_sbrk_r+0x1a>
 80071d0:	682b      	ldr	r3, [r5, #0]
 80071d2:	b103      	cbz	r3, 80071d6 <_sbrk_r+0x1a>
 80071d4:	6023      	str	r3, [r4, #0]
 80071d6:	bd38      	pop	{r3, r4, r5, pc}
 80071d8:	20012fc0 	.word	0x20012fc0

080071dc <__malloc_lock>:
 80071dc:	4801      	ldr	r0, [pc, #4]	; (80071e4 <__malloc_lock+0x8>)
 80071de:	f000 b811 	b.w	8007204 <__retarget_lock_acquire_recursive>
 80071e2:	bf00      	nop
 80071e4:	20012fc4 	.word	0x20012fc4

080071e8 <__malloc_unlock>:
 80071e8:	4801      	ldr	r0, [pc, #4]	; (80071f0 <__malloc_unlock+0x8>)
 80071ea:	f000 b80c 	b.w	8007206 <__retarget_lock_release_recursive>
 80071ee:	bf00      	nop
 80071f0:	20012fc4 	.word	0x20012fc4

080071f4 <_malloc_usable_size_r>:
 80071f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071f8:	1f18      	subs	r0, r3, #4
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bfbc      	itt	lt
 80071fe:	580b      	ldrlt	r3, [r1, r0]
 8007200:	18c0      	addlt	r0, r0, r3
 8007202:	4770      	bx	lr

08007204 <__retarget_lock_acquire_recursive>:
 8007204:	4770      	bx	lr

08007206 <__retarget_lock_release_recursive>:
 8007206:	4770      	bx	lr

08007208 <_init>:
 8007208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720a:	bf00      	nop
 800720c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800720e:	bc08      	pop	{r3}
 8007210:	469e      	mov	lr, r3
 8007212:	4770      	bx	lr

08007214 <_fini>:
 8007214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007216:	bf00      	nop
 8007218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800721a:	bc08      	pop	{r3}
 800721c:	469e      	mov	lr, r3
 800721e:	4770      	bx	lr
