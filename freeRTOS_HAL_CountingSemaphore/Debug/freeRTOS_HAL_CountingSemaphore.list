
freeRTOS_HAL_CountingSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005094  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  08005224  08005224  00015224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005370  08005370  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005370  08005370  00015370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005378  08005378  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005378  08005378  00015378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800537c  0800537c  0001537c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005380  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012e60  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012e74  20012e74  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012c10  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000293a  00000000  00000000  00032c54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a0  00000000  00000000  00035590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fa8  00000000  00000000  00036630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022210  00000000  00000000  000375d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e8a  00000000  00000000  000597e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d30d4  00000000  00000000  0006c672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013f746  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000045c8  00000000  00000000  0013f798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800520c 	.word	0x0800520c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800520c 	.word	0x0800520c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <sendMessage>:

/*************************semaphore*******************************************/
SemaphoreHandle_t xCountingSemaphore = NULL;

void sendMessage(char *message)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE) != SET);
 80004ec:	bf00      	nop
 80004ee:	4b0b      	ldr	r3, [pc, #44]	; (800051c <sendMessage+0x38>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004f8:	2b80      	cmp	r3, #128	; 0x80
 80004fa:	d1f8      	bne.n	80004ee <sendMessage+0xa>
	HAL_UART_Transmit (&huart2, &message[0], strlen(message), portMAX_DELAY);
 80004fc:	6878      	ldr	r0, [r7, #4]
 80004fe:	f7ff fe67 	bl	80001d0 <strlen>
 8000502:	4603      	mov	r3, r0
 8000504:	b29a      	uxth	r2, r3
 8000506:	f04f 33ff 	mov.w	r3, #4294967295
 800050a:	6879      	ldr	r1, [r7, #4]
 800050c:	4803      	ldr	r0, [pc, #12]	; (800051c <sendMessage+0x38>)
 800050e:	f001 fd7e 	bl	800200e <HAL_UART_Transmit>
}
 8000512:	bf00      	nop
 8000514:	3708      	adds	r7, #8
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	20000030 	.word	0x20000030

08000520 <Periodic_Task_Handler>:


void Periodic_Task_Handler(void *parameters)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
	while(1)
	{
		sendMessage("periodicTask: Pending the interrupt. \r\n");
 8000528:	4806      	ldr	r0, [pc, #24]	; (8000544 <Periodic_Task_Handler+0x24>)
 800052a:	f7ff ffdb 	bl	80004e4 <sendMessage>
		vTaskDelay(pdMS_TO_TICKS(500));
 800052e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000532:	f002 ffcd 	bl	80034d0 <vTaskDelay>

		HAL_NVIC_SetPendingIRQ(EXTI0_IRQn);
 8000536:	2006      	movs	r0, #6
 8000538:	f000 fc16 	bl	8000d68 <HAL_NVIC_SetPendingIRQ>
		sendMessage("periodicTask: Resuming. \r\n");
 800053c:	4802      	ldr	r0, [pc, #8]	; (8000548 <Periodic_Task_Handler+0x28>)
 800053e:	f7ff ffd1 	bl	80004e4 <sendMessage>
		sendMessage("periodicTask: Pending the interrupt. \r\n");
 8000542:	e7f1      	b.n	8000528 <Periodic_Task_Handler+0x8>
 8000544:	08005224 	.word	0x08005224
 8000548:	0800524c 	.word	0x0800524c

0800054c <Handler_Task_Handler>:
	}
}
void Handler_Task_Handler(void *parameters)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	while(1)
	{
		xSemaphoreTake(xCountingSemaphore, portMAX_DELAY);
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <Handler_Task_Handler+0x20>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f04f 31ff 	mov.w	r1, #4294967295
 800055c:	4618      	mov	r0, r3
 800055e:	f002 fc07 	bl	8002d70 <xQueueSemaphoreTake>

		sendMessage("Handler task: processing events. \r\n");
 8000562:	4803      	ldr	r0, [pc, #12]	; (8000570 <Handler_Task_Handler+0x24>)
 8000564:	f7ff ffbe 	bl	80004e4 <sendMessage>
		xSemaphoreTake(xCountingSemaphore, portMAX_DELAY);
 8000568:	e7f4      	b.n	8000554 <Handler_Task_Handler+0x8>
 800056a:	bf00      	nop
 800056c:	2000007c 	.word	0x2000007c
 8000570:	08005268 	.word	0x08005268

08000574 <softwareInterruptConfig>:
	}
}
void softwareInterruptConfig(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI0_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY, 0);
 8000578:	2200      	movs	r2, #0
 800057a:	2105      	movs	r1, #5
 800057c:	2006      	movs	r0, #6
 800057e:	f000 fbc9 	bl	8000d14 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000582:	2006      	movs	r0, #6
 8000584:	f000 fbe2 	bl	8000d4c <HAL_NVIC_EnableIRQ>

}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}

0800058c <softwareInterrupt>:

void softwareInterrupt(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
 8000592:	2300      	movs	r3, #0
 8000594:	607b      	str	r3, [r7, #4]

	sendMessage("interrupt active. \r\n");
 8000596:	482c      	ldr	r0, [pc, #176]	; (8000648 <softwareInterrupt+0xbc>)
 8000598:	f7ff ffa4 	bl	80004e4 <sendMessage>

	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);		// 1 count semaphore
 800059c:	4b2b      	ldr	r3, [pc, #172]	; (800064c <softwareInterrupt+0xc0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	1d3a      	adds	r2, r7, #4
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f002 fa66 	bl	8002a76 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);		// 2 count semaphore
 80005aa:	4b28      	ldr	r3, [pc, #160]	; (800064c <softwareInterrupt+0xc0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	1d3a      	adds	r2, r7, #4
 80005b0:	4611      	mov	r1, r2
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 fa5f 	bl	8002a76 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);		// 3 count semaphore
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <softwareInterrupt+0xc0>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	1d3a      	adds	r2, r7, #4
 80005be:	4611      	mov	r1, r2
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fa58 	bl	8002a76 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);		// 4 count semaphore
 80005c6:	4b21      	ldr	r3, [pc, #132]	; (800064c <softwareInterrupt+0xc0>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	1d3a      	adds	r2, r7, #4
 80005cc:	4611      	mov	r1, r2
 80005ce:	4618      	mov	r0, r3
 80005d0:	f002 fa51 	bl	8002a76 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);		// 5 count semaphore
 80005d4:	4b1d      	ldr	r3, [pc, #116]	; (800064c <softwareInterrupt+0xc0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1d3a      	adds	r2, r7, #4
 80005da:	4611      	mov	r1, r2
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 fa4a 	bl	8002a76 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);		// 6 count semaphore
 80005e2:	4b1a      	ldr	r3, [pc, #104]	; (800064c <softwareInterrupt+0xc0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	1d3a      	adds	r2, r7, #4
 80005e8:	4611      	mov	r1, r2
 80005ea:	4618      	mov	r0, r3
 80005ec:	f002 fa43 	bl	8002a76 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);		// 7 count semaphore
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <softwareInterrupt+0xc0>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	1d3a      	adds	r2, r7, #4
 80005f6:	4611      	mov	r1, r2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f002 fa3c 	bl	8002a76 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);		// 8 count semaphore
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <softwareInterrupt+0xc0>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1d3a      	adds	r2, r7, #4
 8000604:	4611      	mov	r1, r2
 8000606:	4618      	mov	r0, r3
 8000608:	f002 fa35 	bl	8002a76 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);		// 9 count semaphore
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <softwareInterrupt+0xc0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	1d3a      	adds	r2, r7, #4
 8000612:	4611      	mov	r1, r2
 8000614:	4618      	mov	r0, r3
 8000616:	f002 fa2e 	bl	8002a76 <xQueueGiveFromISR>
	xSemaphoreGiveFromISR(xCountingSemaphore, &xHigherPriorityTaskWoken);		// 10 count semaphore
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <softwareInterrupt+0xc0>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	1d3a      	adds	r2, r7, #4
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f002 fa27 	bl	8002a76 <xQueueGiveFromISR>

	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <softwareInterrupt+0xb2>
 800062e:	4b08      	ldr	r3, [pc, #32]	; (8000650 <softwareInterrupt+0xc4>)
 8000630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	f3bf 8f4f 	dsb	sy
 800063a:	f3bf 8f6f 	isb	sy
}
 800063e:	bf00      	nop
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	0800528c 	.word	0x0800528c
 800064c:	2000007c 	.word	0x2000007c
 8000650:	e000ed04 	.word	0xe000ed04

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065a:	f000 fa43 	bl	8000ae4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f849 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f8cf 	bl	8000804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000666:	f000 f8a3 	bl	80007b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  sendMessage("Counting Semaphore Usage Interrupt and task\r\n");
 800066a:	4818      	ldr	r0, [pc, #96]	; (80006cc <main+0x78>)
 800066c:	f7ff ff3a 	bl	80004e4 <sendMessage>

  xCountingSemaphore = xSemaphoreCreateCounting(10, 0);
 8000670:	2100      	movs	r1, #0
 8000672:	200a      	movs	r0, #10
 8000674:	f002 f9d1 	bl	8002a1a <xQueueCreateCountingSemaphore>
 8000678:	4603      	mov	r3, r0
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <main+0x7c>)
 800067c:	6013      	str	r3, [r2, #0]

  if((xCountingSemaphore != NULL))
 800067e:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <main+0x7c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d01d      	beq.n	80006c2 <main+0x6e>
  {

	  sendMessage("Semaphore and Tasks are created\r\n");
 8000686:	4813      	ldr	r0, [pc, #76]	; (80006d4 <main+0x80>)
 8000688:	f7ff ff2c 	bl	80004e4 <sendMessage>
	  softwareInterruptConfig();
 800068c:	f7ff ff72 	bl	8000574 <softwareInterruptConfig>
	  xTaskCreate(Handler_Task_Handler,
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <main+0x84>)
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2301      	movs	r3, #1
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	f44f 72c3 	mov.w	r2, #390	; 0x186
 800069e:	490f      	ldr	r1, [pc, #60]	; (80006dc <main+0x88>)
 80006a0:	480f      	ldr	r0, [pc, #60]	; (80006e0 <main+0x8c>)
 80006a2:	f002 fd99 	bl	80031d8 <xTaskCreate>
				  configMINIMAL_STACK_SIZE*3,
				  NULL,
				  1,
				  &task1Handler);

	  xTaskCreate(Periodic_Task_Handler,
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <main+0x90>)
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2303      	movs	r3, #3
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	f44f 72c3 	mov.w	r2, #390	; 0x186
 80006b4:	490c      	ldr	r1, [pc, #48]	; (80006e8 <main+0x94>)
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <main+0x98>)
 80006b8:	f002 fd8e 	bl	80031d8 <xTaskCreate>
				  configMINIMAL_STACK_SIZE*3,
				  NULL,
				  3,
				  &task2Periodic);

	  vTaskStartScheduler();
 80006bc:	f002 ff3c 	bl	8003538 <vTaskStartScheduler>
 80006c0:	e002      	b.n	80006c8 <main+0x74>
  }
  else
  {
	  sendMessage("Semaphore and Tasks are not created\r\n");
 80006c2:	480b      	ldr	r0, [pc, #44]	; (80006f0 <main+0x9c>)
 80006c4:	f7ff ff0e 	bl	80004e4 <sendMessage>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c8:	e7fe      	b.n	80006c8 <main+0x74>
 80006ca:	bf00      	nop
 80006cc:	080052a4 	.word	0x080052a4
 80006d0:	2000007c 	.word	0x2000007c
 80006d4:	080052d4 	.word	0x080052d4
 80006d8:	20000074 	.word	0x20000074
 80006dc:	080052f8 	.word	0x080052f8
 80006e0:	0800054d 	.word	0x0800054d
 80006e4:	20000078 	.word	0x20000078
 80006e8:	08005308 	.word	0x08005308
 80006ec:	08000521 	.word	0x08000521
 80006f0:	08005318 	.word	0x08005318

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b094      	sub	sp, #80	; 0x50
 80006f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006fa:	f107 0320 	add.w	r3, r7, #32
 80006fe:	2230      	movs	r2, #48	; 0x30
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fd7a 	bl	80051fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
 8000712:	609a      	str	r2, [r3, #8]
 8000714:	60da      	str	r2, [r3, #12]
 8000716:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000718:	2300      	movs	r3, #0
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <SystemClock_Config+0xb4>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	4a21      	ldr	r2, [pc, #132]	; (80007a8 <SystemClock_Config+0xb4>)
 8000722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000726:	6413      	str	r3, [r2, #64]	; 0x40
 8000728:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <SystemClock_Config+0xb4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000734:	2300      	movs	r3, #0
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <SystemClock_Config+0xb8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a1b      	ldr	r2, [pc, #108]	; (80007ac <SystemClock_Config+0xb8>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b19      	ldr	r3, [pc, #100]	; (80007ac <SystemClock_Config+0xb8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	2300      	movs	r3, #0
 800075e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	4618      	mov	r0, r3
 8000766:	f000 fccd 	bl	8001104 <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000770:	f000 f88e 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f000 ff30 	bl	80015f4 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800079a:	f000 f879 	bl	8000890 <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	; 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b4:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007b6:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_USART2_UART_Init+0x50>)
 80007b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007ba:	4b10      	ldr	r3, [pc, #64]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80007c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007d6:	220c      	movs	r2, #12
 80007d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART2_UART_Init+0x4c>)
 80007e8:	f001 fbc4 	bl	8001f74 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007f2:	f000 f84d 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000030 	.word	0x20000030
 8000800:	40004400 	.word	0x40004400

08000804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000818:	2300      	movs	r3, #0
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_GPIO_Init+0x60>)
 800081e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000820:	4a10      	ldr	r2, [pc, #64]	; (8000864 <MX_GPIO_Init+0x60>)
 8000822:	f043 0301 	orr.w	r3, r3, #1
 8000826:	6313      	str	r3, [r2, #48]	; 0x30
 8000828:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_GPIO_Init+0x60>)
 800082a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082c:	f003 0301 	and.w	r3, r3, #1
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000834:	2301      	movs	r3, #1
 8000836:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000838:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800083c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	4619      	mov	r1, r3
 8000846:	4808      	ldr	r0, [pc, #32]	; (8000868 <MX_GPIO_Init+0x64>)
 8000848:	f000 fa9c 	bl	8000d84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2006      	movs	r0, #6
 8000852:	f000 fa5f 	bl	8000d14 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000856:	2006      	movs	r0, #6
 8000858:	f000 fa78 	bl	8000d4c <HAL_NVIC_EnableIRQ>

}
 800085c:	bf00      	nop
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	40020000 	.word	0x40020000

0800086c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d101      	bne.n	8000882 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800087e:	f000 f953 	bl	8000b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000882:	bf00      	nop
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40001000 	.word	0x40001000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <HAL_MspInit+0x4c>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a19      	ldr	r2, [pc, #100]	; (8000970 <HAL_UART_MspInit+0x84>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d12b      	bne.n	8000966 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
 8000912:	4b18      	ldr	r3, [pc, #96]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000916:	4a17      	ldr	r2, [pc, #92]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800091c:	6413      	str	r3, [r2, #64]	; 0x40
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a10      	ldr	r2, [pc, #64]	; (8000974 <HAL_UART_MspInit+0x88>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <HAL_UART_MspInit+0x88>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000946:	230c      	movs	r3, #12
 8000948:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000952:	2303      	movs	r3, #3
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000956:	2307      	movs	r3, #7
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <HAL_UART_MspInit+0x8c>)
 8000962:	f000 fa0f 	bl	8000d84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	; 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40004400 	.word	0x40004400
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000

0800097c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800098c:	2200      	movs	r2, #0
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	2036      	movs	r0, #54	; 0x36
 8000992:	f000 f9bf 	bl	8000d14 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000996:	2036      	movs	r0, #54	; 0x36
 8000998:	f000 f9d8 	bl	8000d4c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <HAL_InitTick+0xa0>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a4:	4a1d      	ldr	r2, [pc, #116]	; (8000a1c <HAL_InitTick+0xa0>)
 80009a6:	f043 0310 	orr.w	r3, r3, #16
 80009aa:	6413      	str	r3, [r2, #64]	; 0x40
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_InitTick+0xa0>)
 80009ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b0:	f003 0310 	and.w	r3, r3, #16
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b8:	f107 0210 	add.w	r2, r7, #16
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4611      	mov	r1, r2
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fff6 	bl	80019b4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009c8:	f000 ffcc 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 80009cc:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d0:	4a13      	ldr	r2, [pc, #76]	; (8000a20 <HAL_InitTick+0xa4>)
 80009d2:	fba2 2303 	umull	r2, r3, r2, r3
 80009d6:	0c9b      	lsrs	r3, r3, #18
 80009d8:	3b01      	subs	r3, #1
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_InitTick+0xa8>)
 80009de:	4a12      	ldr	r2, [pc, #72]	; (8000a28 <HAL_InitTick+0xac>)
 80009e0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009e2:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <HAL_InitTick+0xa8>)
 80009e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009e8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_InitTick+0xa8>)
 80009ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_InitTick+0xa8>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f6:	4b0b      	ldr	r3, [pc, #44]	; (8000a24 <HAL_InitTick+0xa8>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80009fc:	4809      	ldr	r0, [pc, #36]	; (8000a24 <HAL_InitTick+0xa8>)
 80009fe:	f001 f80b 	bl	8001a18 <HAL_TIM_Base_Init>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d104      	bne.n	8000a12 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a08:	4806      	ldr	r0, [pc, #24]	; (8000a24 <HAL_InitTick+0xa8>)
 8000a0a:	f001 f85f 	bl	8001acc <HAL_TIM_Base_Start_IT>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3730      	adds	r7, #48	; 0x30
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	431bde83 	.word	0x431bde83
 8000a24:	20000080 	.word	0x20000080
 8000a28:	40001000 	.word	0x40001000

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <MemManage_Handler+0x4>

08000a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a36:	e7fe      	b.n	8000a36 <BusFault_Handler+0x4>

08000a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
  softwareInterrupt();
 8000a4a:	f7ff fd9f 	bl	800058c <softwareInterrupt>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f000 fb34 	bl	80010bc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a5c:	4802      	ldr	r0, [pc, #8]	; (8000a68 <TIM6_DAC_IRQHandler+0x10>)
 8000a5e:	f001 f8a5 	bl	8001bac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	20000080 	.word	0x20000080

08000a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <SystemInit+0x20>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a76:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <SystemInit+0x20>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ac8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a96:	490e      	ldr	r1, [pc, #56]	; (8000ad0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a98:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a9c:	e002      	b.n	8000aa4 <LoopCopyDataInit>

08000a9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000aa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aa2:	3304      	adds	r3, #4

08000aa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aa8:	d3f9      	bcc.n	8000a9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ad8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000aac:	4c0b      	ldr	r4, [pc, #44]	; (8000adc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ab0:	e001      	b.n	8000ab6 <LoopFillZerobss>

08000ab2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ab2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab4:	3204      	adds	r2, #4

08000ab6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ab6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ab8:	d3fb      	bcc.n	8000ab2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aba:	f7ff ffd7 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000abe:	f004 fb6b 	bl	8005198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ac2:	f7ff fdc7 	bl	8000654 <main>
  bx  lr    
 8000ac6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ad0:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000ad4:	08005380 	.word	0x08005380
  ldr r2, =_sbss
 8000ad8:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000adc:	20012e74 	.word	0x20012e74

08000ae0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ae0:	e7fe      	b.n	8000ae0 <ADC_IRQHandler>
	...

08000ae4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_Init+0x40>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a0d      	ldr	r2, [pc, #52]	; (8000b24 <HAL_Init+0x40>)
 8000aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000af2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <HAL_Init+0x40>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a0a      	ldr	r2, [pc, #40]	; (8000b24 <HAL_Init+0x40>)
 8000afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000afe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <HAL_Init+0x40>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x40>)
 8000b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b0c:	2003      	movs	r0, #3
 8000b0e:	f000 f8f6 	bl	8000cfe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b12:	2005      	movs	r0, #5
 8000b14:	f7ff ff32 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b18:	f7ff fec0 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b1c:	2300      	movs	r3, #0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023c00 	.word	0x40023c00

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	200000c8 	.word	0x200000c8

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	200000c8 	.word	0x200000c8

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	60d3      	str	r3, [r2, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db0c      	blt.n	8000c34 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c1a:	79fb      	ldrb	r3, [r7, #7]
 8000c1c:	f003 021f 	and.w	r2, r3, #31
 8000c20:	4907      	ldr	r1, [pc, #28]	; (8000c40 <__NVIC_SetPendingIRQ+0x38>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	095b      	lsrs	r3, r3, #5
 8000c28:	2001      	movs	r0, #1
 8000c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2e:	3340      	adds	r3, #64	; 0x40
 8000c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3e:	4770      	bx	lr
 8000c40:	e000e100 	.word	0xe000e100

08000c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	6039      	str	r1, [r7, #0]
 8000c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	db0a      	blt.n	8000c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	490c      	ldr	r1, [pc, #48]	; (8000c90 <__NVIC_SetPriority+0x4c>)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	0112      	lsls	r2, r2, #4
 8000c64:	b2d2      	uxtb	r2, r2
 8000c66:	440b      	add	r3, r1
 8000c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c6c:	e00a      	b.n	8000c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	b2da      	uxtb	r2, r3
 8000c72:	4908      	ldr	r1, [pc, #32]	; (8000c94 <__NVIC_SetPriority+0x50>)
 8000c74:	79fb      	ldrb	r3, [r7, #7]
 8000c76:	f003 030f 	and.w	r3, r3, #15
 8000c7a:	3b04      	subs	r3, #4
 8000c7c:	0112      	lsls	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	761a      	strb	r2, [r3, #24]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	60f8      	str	r0, [r7, #12]
 8000ca0:	60b9      	str	r1, [r7, #8]
 8000ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	f003 0307 	and.w	r3, r3, #7
 8000caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cac:	69fb      	ldr	r3, [r7, #28]
 8000cae:	f1c3 0307 	rsb	r3, r3, #7
 8000cb2:	2b04      	cmp	r3, #4
 8000cb4:	bf28      	it	cs
 8000cb6:	2304      	movcs	r3, #4
 8000cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cba:	69fb      	ldr	r3, [r7, #28]
 8000cbc:	3304      	adds	r3, #4
 8000cbe:	2b06      	cmp	r3, #6
 8000cc0:	d902      	bls.n	8000cc8 <NVIC_EncodePriority+0x30>
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3b03      	subs	r3, #3
 8000cc6:	e000      	b.n	8000cca <NVIC_EncodePriority+0x32>
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	69bb      	ldr	r3, [r7, #24]
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	43da      	mvns	r2, r3
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cea:	43d9      	mvns	r1, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	4313      	orrs	r3, r2
         );
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3724      	adds	r7, #36	; 0x24
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b082      	sub	sp, #8
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f7ff ff2e 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}

08000d14 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b086      	sub	sp, #24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d26:	f7ff ff43 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000d2a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	68b9      	ldr	r1, [r7, #8]
 8000d30:	6978      	ldr	r0, [r7, #20]
 8000d32:	f7ff ffb1 	bl	8000c98 <NVIC_EncodePriority>
 8000d36:	4602      	mov	r2, r0
 8000d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3c:	4611      	mov	r1, r2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ff80 	bl	8000c44 <__NVIC_SetPriority>
}
 8000d44:	bf00      	nop
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff36 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4603      	mov	r3, r0
 8000d70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff46 	bl	8000c08 <__NVIC_SetPendingIRQ>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e16b      	b.n	8001078 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f040 815a 	bne.w	8001072 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f003 0303 	and.w	r3, r3, #3
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d005      	beq.n	8000dd6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d130      	bne.n	8000e38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	689b      	ldr	r3, [r3, #8]
 8000dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	2203      	movs	r2, #3
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	68da      	ldr	r2, [r3, #12]
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	43db      	mvns	r3, r3
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	4013      	ands	r3, r2
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	091b      	lsrs	r3, r3, #4
 8000e22:	f003 0201 	and.w	r2, r3, #1
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b03      	cmp	r3, #3
 8000e42:	d017      	beq.n	8000e74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	689a      	ldr	r2, [r3, #8]
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80b4 	beq.w	8001072 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	4b60      	ldr	r3, [pc, #384]	; (8001090 <HAL_GPIO_Init+0x30c>)
 8000f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f12:	4a5f      	ldr	r2, [pc, #380]	; (8001090 <HAL_GPIO_Init+0x30c>)
 8000f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f18:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1a:	4b5d      	ldr	r3, [pc, #372]	; (8001090 <HAL_GPIO_Init+0x30c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f26:	4a5b      	ldr	r2, [pc, #364]	; (8001094 <HAL_GPIO_Init+0x310>)
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0303 	and.w	r3, r3, #3
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	220f      	movs	r2, #15
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4013      	ands	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a52      	ldr	r2, [pc, #328]	; (8001098 <HAL_GPIO_Init+0x314>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d02b      	beq.n	8000faa <HAL_GPIO_Init+0x226>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a51      	ldr	r2, [pc, #324]	; (800109c <HAL_GPIO_Init+0x318>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d025      	beq.n	8000fa6 <HAL_GPIO_Init+0x222>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a50      	ldr	r2, [pc, #320]	; (80010a0 <HAL_GPIO_Init+0x31c>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d01f      	beq.n	8000fa2 <HAL_GPIO_Init+0x21e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_GPIO_Init+0x320>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x21a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4e      	ldr	r2, [pc, #312]	; (80010a8 <HAL_GPIO_Init+0x324>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x216>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4d      	ldr	r2, [pc, #308]	; (80010ac <HAL_GPIO_Init+0x328>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x212>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4c      	ldr	r2, [pc, #304]	; (80010b0 <HAL_GPIO_Init+0x32c>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x20e>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4b      	ldr	r2, [pc, #300]	; (80010b4 <HAL_GPIO_Init+0x330>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x20a>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e00e      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000f8e:	2308      	movs	r3, #8
 8000f90:	e00c      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000f92:	2306      	movs	r3, #6
 8000f94:	e00a      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000f96:	2305      	movs	r3, #5
 8000f98:	e008      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	e006      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e004      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e002      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e000      	b.n	8000fac <HAL_GPIO_Init+0x228>
 8000faa:	2300      	movs	r3, #0
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	f002 0203 	and.w	r2, r2, #3
 8000fb2:	0092      	lsls	r2, r2, #2
 8000fb4:	4093      	lsls	r3, r2
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fbc:	4935      	ldr	r1, [pc, #212]	; (8001094 <HAL_GPIO_Init+0x310>)
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	089b      	lsrs	r3, r3, #2
 8000fc2:	3302      	adds	r3, #2
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fee:	4a32      	ldr	r2, [pc, #200]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ff4:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4013      	ands	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001018:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <HAL_GPIO_Init+0x334>)
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	43db      	mvns	r3, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4013      	ands	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <HAL_GPIO_Init+0x334>)
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001048:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <HAL_GPIO_Init+0x334>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800106c:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <HAL_GPIO_Init+0x334>)
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	3301      	adds	r3, #1
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	f67f ae90 	bls.w	8000da0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40023800 	.word	0x40023800
 8001094:	40013800 	.word	0x40013800
 8001098:	40020000 	.word	0x40020000
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020800 	.word	0x40020800
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40021000 	.word	0x40021000
 80010ac:	40021400 	.word	0x40021400
 80010b0:	40021800 	.word	0x40021800
 80010b4:	40021c00 	.word	0x40021c00
 80010b8:	40013c00 	.word	0x40013c00

080010bc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010c6:	4b08      	ldr	r3, [pc, #32]	; (80010e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010c8:	695a      	ldr	r2, [r3, #20]
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	4013      	ands	r3, r2
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80010d2:	4a05      	ldr	r2, [pc, #20]	; (80010e8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f806 	bl	80010ec <HAL_GPIO_EXTI_Callback>
  }
}
 80010e0:	bf00      	nop
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40013c00 	.word	0x40013c00

080010ec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d101      	bne.n	8001116 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e267      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d075      	beq.n	800120e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001122:	4b88      	ldr	r3, [pc, #544]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	2b04      	cmp	r3, #4
 800112c:	d00c      	beq.n	8001148 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112e:	4b85      	ldr	r3, [pc, #532]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001136:	2b08      	cmp	r3, #8
 8001138:	d112      	bne.n	8001160 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800113a:	4b82      	ldr	r3, [pc, #520]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001146:	d10b      	bne.n	8001160 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001148:	4b7e      	ldr	r3, [pc, #504]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d05b      	beq.n	800120c <HAL_RCC_OscConfig+0x108>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d157      	bne.n	800120c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e242      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001168:	d106      	bne.n	8001178 <HAL_RCC_OscConfig+0x74>
 800116a:	4b76      	ldr	r3, [pc, #472]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4a75      	ldr	r2, [pc, #468]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	e01d      	b.n	80011b4 <HAL_RCC_OscConfig+0xb0>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001180:	d10c      	bne.n	800119c <HAL_RCC_OscConfig+0x98>
 8001182:	4b70      	ldr	r3, [pc, #448]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6f      	ldr	r2, [pc, #444]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b6d      	ldr	r3, [pc, #436]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a6c      	ldr	r2, [pc, #432]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e00b      	b.n	80011b4 <HAL_RCC_OscConfig+0xb0>
 800119c:	4b69      	ldr	r3, [pc, #420]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a68      	ldr	r2, [pc, #416]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	4b66      	ldr	r3, [pc, #408]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a65      	ldr	r2, [pc, #404]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80011ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d013      	beq.n	80011e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011bc:	f7ff fcc8 	bl	8000b50 <HAL_GetTick>
 80011c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	e008      	b.n	80011d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c4:	f7ff fcc4 	bl	8000b50 <HAL_GetTick>
 80011c8:	4602      	mov	r2, r0
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e207      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b5b      	ldr	r3, [pc, #364]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d0f0      	beq.n	80011c4 <HAL_RCC_OscConfig+0xc0>
 80011e2:	e014      	b.n	800120e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff fcb4 	bl	8000b50 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ec:	f7ff fcb0 	bl	8000b50 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b64      	cmp	r3, #100	; 0x64
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e1f3      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fe:	4b51      	ldr	r3, [pc, #324]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d1f0      	bne.n	80011ec <HAL_RCC_OscConfig+0xe8>
 800120a:	e000      	b.n	800120e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d063      	beq.n	80012e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121a:	4b4a      	ldr	r3, [pc, #296]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 030c 	and.w	r3, r3, #12
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00b      	beq.n	800123e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001228:	689b      	ldr	r3, [r3, #8]
 800122a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800122e:	2b08      	cmp	r3, #8
 8001230:	d11c      	bne.n	800126c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001232:	4b44      	ldr	r3, [pc, #272]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800123a:	2b00      	cmp	r3, #0
 800123c:	d116      	bne.n	800126c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d005      	beq.n	8001256 <HAL_RCC_OscConfig+0x152>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	68db      	ldr	r3, [r3, #12]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d001      	beq.n	8001256 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e1c7      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001256:	4b3b      	ldr	r3, [pc, #236]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	691b      	ldr	r3, [r3, #16]
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4937      	ldr	r1, [pc, #220]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001266:	4313      	orrs	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	e03a      	b.n	80012e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d020      	beq.n	80012b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001274:	4b34      	ldr	r3, [pc, #208]	; (8001348 <HAL_RCC_OscConfig+0x244>)
 8001276:	2201      	movs	r2, #1
 8001278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127a:	f7ff fc69 	bl	8000b50 <HAL_GetTick>
 800127e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	e008      	b.n	8001294 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001282:	f7ff fc65 	bl	8000b50 <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	2b02      	cmp	r3, #2
 800128e:	d901      	bls.n	8001294 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e1a8      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0f0      	beq.n	8001282 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4925      	ldr	r1, [pc, #148]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80012b0:	4313      	orrs	r3, r2
 80012b2:	600b      	str	r3, [r1, #0]
 80012b4:	e015      	b.n	80012e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012b6:	4b24      	ldr	r3, [pc, #144]	; (8001348 <HAL_RCC_OscConfig+0x244>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012bc:	f7ff fc48 	bl	8000b50 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012c4:	f7ff fc44 	bl	8000b50 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e187      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012d6:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f0      	bne.n	80012c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0308 	and.w	r3, r3, #8
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d036      	beq.n	800135c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d016      	beq.n	8001324 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_RCC_OscConfig+0x248>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012fc:	f7ff fc28 	bl	8000b50 <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001304:	f7ff fc24 	bl	8000b50 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e167      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_RCC_OscConfig+0x240>)
 8001318:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0x200>
 8001322:	e01b      	b.n	800135c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <HAL_RCC_OscConfig+0x248>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132a:	f7ff fc11 	bl	8000b50 <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001330:	e00e      	b.n	8001350 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001332:	f7ff fc0d 	bl	8000b50 <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d907      	bls.n	8001350 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e150      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
 8001344:	40023800 	.word	0x40023800
 8001348:	42470000 	.word	0x42470000
 800134c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001350:	4b88      	ldr	r3, [pc, #544]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1ea      	bne.n	8001332 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0304 	and.w	r3, r3, #4
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 8097 	beq.w	8001498 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800136e:	4b81      	ldr	r3, [pc, #516]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d10f      	bne.n	800139a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	4b7d      	ldr	r3, [pc, #500]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a7c      	ldr	r2, [pc, #496]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b7a      	ldr	r3, [pc, #488]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001396:	2301      	movs	r3, #1
 8001398:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139a:	4b77      	ldr	r3, [pc, #476]	; (8001578 <HAL_RCC_OscConfig+0x474>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d118      	bne.n	80013d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013a6:	4b74      	ldr	r3, [pc, #464]	; (8001578 <HAL_RCC_OscConfig+0x474>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a73      	ldr	r2, [pc, #460]	; (8001578 <HAL_RCC_OscConfig+0x474>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013b2:	f7ff fbcd 	bl	8000b50 <HAL_GetTick>
 80013b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	e008      	b.n	80013cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ba:	f7ff fbc9 	bl	8000b50 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d901      	bls.n	80013cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013c8:	2303      	movs	r3, #3
 80013ca:	e10c      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013cc:	4b6a      	ldr	r3, [pc, #424]	; (8001578 <HAL_RCC_OscConfig+0x474>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d0f0      	beq.n	80013ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d106      	bne.n	80013ee <HAL_RCC_OscConfig+0x2ea>
 80013e0:	4b64      	ldr	r3, [pc, #400]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80013e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e4:	4a63      	ldr	r2, [pc, #396]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80013e6:	f043 0301 	orr.w	r3, r3, #1
 80013ea:	6713      	str	r3, [r2, #112]	; 0x70
 80013ec:	e01c      	b.n	8001428 <HAL_RCC_OscConfig+0x324>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	2b05      	cmp	r3, #5
 80013f4:	d10c      	bne.n	8001410 <HAL_RCC_OscConfig+0x30c>
 80013f6:	4b5f      	ldr	r3, [pc, #380]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80013f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fa:	4a5e      	ldr	r2, [pc, #376]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80013fc:	f043 0304 	orr.w	r3, r3, #4
 8001400:	6713      	str	r3, [r2, #112]	; 0x70
 8001402:	4b5c      	ldr	r3, [pc, #368]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001406:	4a5b      	ldr	r2, [pc, #364]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6713      	str	r3, [r2, #112]	; 0x70
 800140e:	e00b      	b.n	8001428 <HAL_RCC_OscConfig+0x324>
 8001410:	4b58      	ldr	r3, [pc, #352]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001414:	4a57      	ldr	r2, [pc, #348]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001416:	f023 0301 	bic.w	r3, r3, #1
 800141a:	6713      	str	r3, [r2, #112]	; 0x70
 800141c:	4b55      	ldr	r3, [pc, #340]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800141e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001420:	4a54      	ldr	r2, [pc, #336]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001422:	f023 0304 	bic.w	r3, r3, #4
 8001426:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d015      	beq.n	800145c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001430:	f7ff fb8e 	bl	8000b50 <HAL_GetTick>
 8001434:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001436:	e00a      	b.n	800144e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001438:	f7ff fb8a 	bl	8000b50 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	; 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e0cb      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800144e:	4b49      	ldr	r3, [pc, #292]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d0ee      	beq.n	8001438 <HAL_RCC_OscConfig+0x334>
 800145a:	e014      	b.n	8001486 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff fb78 	bl	8000b50 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001462:	e00a      	b.n	800147a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001464:	f7ff fb74 	bl	8000b50 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001472:	4293      	cmp	r3, r2
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e0b5      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147a:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800147c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ee      	bne.n	8001464 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d105      	bne.n	8001498 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800148c:	4b39      	ldr	r3, [pc, #228]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800148e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001490:	4a38      	ldr	r2, [pc, #224]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001496:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	699b      	ldr	r3, [r3, #24]
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80a1 	beq.w	80015e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014a2:	4b34      	ldr	r3, [pc, #208]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b08      	cmp	r3, #8
 80014ac:	d05c      	beq.n	8001568 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d141      	bne.n	800153a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014b6:	4b31      	ldr	r3, [pc, #196]	; (800157c <HAL_RCC_OscConfig+0x478>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014bc:	f7ff fb48 	bl	8000b50 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014c4:	f7ff fb44 	bl	8000b50 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e087      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014d6:	4b27      	ldr	r3, [pc, #156]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1f0      	bne.n	80014c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69da      	ldr	r2, [r3, #28]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6a1b      	ldr	r3, [r3, #32]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	019b      	lsls	r3, r3, #6
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f8:	085b      	lsrs	r3, r3, #1
 80014fa:	3b01      	subs	r3, #1
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001504:	061b      	lsls	r3, r3, #24
 8001506:	491b      	ldr	r1, [pc, #108]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 8001508:	4313      	orrs	r3, r2
 800150a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <HAL_RCC_OscConfig+0x478>)
 800150e:	2201      	movs	r2, #1
 8001510:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001512:	f7ff fb1d 	bl	8000b50 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800151a:	f7ff fb19 	bl	8000b50 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e05c      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152c:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d0f0      	beq.n	800151a <HAL_RCC_OscConfig+0x416>
 8001538:	e054      	b.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_RCC_OscConfig+0x478>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb06 	bl	8000b50 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001548:	f7ff fb02 	bl	8000b50 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e045      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800155a:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_RCC_OscConfig+0x470>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x444>
 8001566:	e03d      	b.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d107      	bne.n	8001580 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e038      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
 8001574:	40023800 	.word	0x40023800
 8001578:	40007000 	.word	0x40007000
 800157c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_RCC_OscConfig+0x4ec>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d028      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001598:	429a      	cmp	r2, r3
 800159a:	d121      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d11a      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015b0:	4013      	ands	r3, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d111      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c6:	085b      	lsrs	r3, r3, #1
 80015c8:	3b01      	subs	r3, #1
 80015ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e000      	b.n	80015e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3718      	adds	r7, #24
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800

080015f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e0cc      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001608:	4b68      	ldr	r3, [pc, #416]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0307 	and.w	r3, r3, #7
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	d90c      	bls.n	8001630 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001616:	4b65      	ldr	r3, [pc, #404]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800161e:	4b63      	ldr	r3, [pc, #396]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0307 	and.w	r3, r3, #7
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e0b8      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d020      	beq.n	800167e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0304 	and.w	r3, r3, #4
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001648:	4b59      	ldr	r3, [pc, #356]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	4a58      	ldr	r2, [pc, #352]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001652:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001660:	4b53      	ldr	r3, [pc, #332]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4a52      	ldr	r2, [pc, #328]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800166a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800166c:	4b50      	ldr	r3, [pc, #320]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	494d      	ldr	r1, [pc, #308]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800167a:	4313      	orrs	r3, r2
 800167c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d044      	beq.n	8001714 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d107      	bne.n	80016a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001692:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d119      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e07f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d003      	beq.n	80016b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ae:	2b03      	cmp	r3, #3
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b2:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d109      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e06f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d101      	bne.n	80016d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e067      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016d2:	4b37      	ldr	r3, [pc, #220]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f023 0203 	bic.w	r2, r3, #3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	4934      	ldr	r1, [pc, #208]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016e4:	f7ff fa34 	bl	8000b50 <HAL_GetTick>
 80016e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ec:	f7ff fa30 	bl	8000b50 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d901      	bls.n	8001702 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016fe:	2303      	movs	r3, #3
 8001700:	e04f      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 020c 	and.w	r2, r3, #12
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	429a      	cmp	r2, r3
 8001712:	d1eb      	bne.n	80016ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001714:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0307 	and.w	r3, r3, #7
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d20c      	bcs.n	800173c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 8001724:	683a      	ldr	r2, [r7, #0]
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800172a:	4b20      	ldr	r3, [pc, #128]	; (80017ac <HAL_RCC_ClockConfig+0x1b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0307 	and.w	r3, r3, #7
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	429a      	cmp	r2, r3
 8001736:	d001      	beq.n	800173c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e032      	b.n	80017a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	4916      	ldr	r1, [pc, #88]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	4313      	orrs	r3, r2
 8001758:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0308 	and.w	r3, r3, #8
 8001762:	2b00      	cmp	r3, #0
 8001764:	d009      	beq.n	800177a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001766:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	490e      	ldr	r1, [pc, #56]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800177a:	f000 f821 	bl	80017c0 <HAL_RCC_GetSysClockFreq>
 800177e:	4602      	mov	r2, r0
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_RCC_ClockConfig+0x1bc>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	490a      	ldr	r1, [pc, #40]	; (80017b4 <HAL_RCC_ClockConfig+0x1c0>)
 800178c:	5ccb      	ldrb	r3, [r1, r3]
 800178e:	fa22 f303 	lsr.w	r3, r2, r3
 8001792:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_ClockConfig+0x1c8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff f8ee 	bl	800097c <HAL_InitTick>

  return HAL_OK;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00
 80017b0:	40023800 	.word	0x40023800
 80017b4:	08005358 	.word	0x08005358
 80017b8:	20000000 	.word	0x20000000
 80017bc:	20000004 	.word	0x20000004

080017c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017c4:	b090      	sub	sp, #64	; 0x40
 80017c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
 80017cc:	2300      	movs	r3, #0
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017d8:	4b59      	ldr	r3, [pc, #356]	; (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 80017da:	689b      	ldr	r3, [r3, #8]
 80017dc:	f003 030c 	and.w	r3, r3, #12
 80017e0:	2b08      	cmp	r3, #8
 80017e2:	d00d      	beq.n	8001800 <HAL_RCC_GetSysClockFreq+0x40>
 80017e4:	2b08      	cmp	r3, #8
 80017e6:	f200 80a1 	bhi.w	800192c <HAL_RCC_GetSysClockFreq+0x16c>
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_RCC_GetSysClockFreq+0x34>
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_GetSysClockFreq+0x3a>
 80017f2:	e09b      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b53      	ldr	r3, [pc, #332]	; (8001944 <HAL_RCC_GetSysClockFreq+0x184>)
 80017f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017f8:	e09b      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017fa:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_GetSysClockFreq+0x188>)
 80017fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017fe:	e098      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001800:	4b4f      	ldr	r3, [pc, #316]	; (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001808:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800180a:	4b4d      	ldr	r3, [pc, #308]	; (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d028      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001816:	4b4a      	ldr	r3, [pc, #296]	; (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	099b      	lsrs	r3, r3, #6
 800181c:	2200      	movs	r2, #0
 800181e:	623b      	str	r3, [r7, #32]
 8001820:	627a      	str	r2, [r7, #36]	; 0x24
 8001822:	6a3b      	ldr	r3, [r7, #32]
 8001824:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001828:	2100      	movs	r1, #0
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_GetSysClockFreq+0x188>)
 800182c:	fb03 f201 	mul.w	r2, r3, r1
 8001830:	2300      	movs	r3, #0
 8001832:	fb00 f303 	mul.w	r3, r0, r3
 8001836:	4413      	add	r3, r2
 8001838:	4a43      	ldr	r2, [pc, #268]	; (8001948 <HAL_RCC_GetSysClockFreq+0x188>)
 800183a:	fba0 1202 	umull	r1, r2, r0, r2
 800183e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001840:	460a      	mov	r2, r1
 8001842:	62ba      	str	r2, [r7, #40]	; 0x28
 8001844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001846:	4413      	add	r3, r2
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800184c:	2200      	movs	r2, #0
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	61fa      	str	r2, [r7, #28]
 8001852:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001856:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800185a:	f7fe fcc1 	bl	80001e0 <__aeabi_uldivmod>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4613      	mov	r3, r2
 8001864:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001866:	e053      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	099b      	lsrs	r3, r3, #6
 800186e:	2200      	movs	r2, #0
 8001870:	613b      	str	r3, [r7, #16]
 8001872:	617a      	str	r2, [r7, #20]
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800187a:	f04f 0b00 	mov.w	fp, #0
 800187e:	4652      	mov	r2, sl
 8001880:	465b      	mov	r3, fp
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	0159      	lsls	r1, r3, #5
 800188c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001890:	0150      	lsls	r0, r2, #5
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	ebb2 080a 	subs.w	r8, r2, sl
 800189a:	eb63 090b 	sbc.w	r9, r3, fp
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80018aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80018ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80018b2:	ebb2 0408 	subs.w	r4, r2, r8
 80018b6:	eb63 0509 	sbc.w	r5, r3, r9
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	f04f 0300 	mov.w	r3, #0
 80018c2:	00eb      	lsls	r3, r5, #3
 80018c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c8:	00e2      	lsls	r2, r4, #3
 80018ca:	4614      	mov	r4, r2
 80018cc:	461d      	mov	r5, r3
 80018ce:	eb14 030a 	adds.w	r3, r4, sl
 80018d2:	603b      	str	r3, [r7, #0]
 80018d4:	eb45 030b 	adc.w	r3, r5, fp
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018e6:	4629      	mov	r1, r5
 80018e8:	028b      	lsls	r3, r1, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f0:	4621      	mov	r1, r4
 80018f2:	028a      	lsls	r2, r1, #10
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	2200      	movs	r2, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	60fa      	str	r2, [r7, #12]
 8001900:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001904:	f7fe fc6c 	bl	80001e0 <__aeabi_uldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4613      	mov	r3, r2
 800190e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001910:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <HAL_RCC_GetSysClockFreq+0x180>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	0c1b      	lsrs	r3, r3, #16
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	3301      	adds	r3, #1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800192a:	e002      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <HAL_RCC_GetSysClockFreq+0x184>)
 800192e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001934:	4618      	mov	r0, r3
 8001936:	3740      	adds	r7, #64	; 0x40
 8001938:	46bd      	mov	sp, r7
 800193a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	00f42400 	.word	0x00f42400
 8001948:	017d7840 	.word	0x017d7840

0800194c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_RCC_GetHCLKFreq+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000000 	.word	0x20000000

08001964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001968:	f7ff fff0 	bl	800194c <HAL_RCC_GetHCLKFreq>
 800196c:	4602      	mov	r2, r0
 800196e:	4b05      	ldr	r3, [pc, #20]	; (8001984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4903      	ldr	r1, [pc, #12]	; (8001988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	08005368 	.word	0x08005368

0800198c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001990:	f7ff ffdc 	bl	800194c <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	; (80019ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	0b5b      	lsrs	r3, r3, #13
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	; (80019b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	08005368 	.word	0x08005368

080019b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	220f      	movs	r2, #15
 80019c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0203 	and.w	r2, r3, #3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d0:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019dc:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019e8:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <HAL_RCC_GetClockConfig+0x5c>)
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019f6:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <HAL_RCC_GetClockConfig+0x60>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0207 	and.w	r2, r3, #7
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	601a      	str	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40023c00 	.word	0x40023c00

08001a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e041      	b.n	8001aae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 f839 	bl	8001ab6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2202      	movs	r2, #2
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3304      	adds	r3, #4
 8001a54:	4619      	mov	r1, r3
 8001a56:	4610      	mov	r0, r2
 8001a58:	f000 f9d8 	bl	8001e0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2201      	movs	r2, #1
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b085      	sub	sp, #20
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d001      	beq.n	8001ae4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e04e      	b.n	8001b82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68da      	ldr	r2, [r3, #12]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a23      	ldr	r2, [pc, #140]	; (8001b90 <HAL_TIM_Base_Start_IT+0xc4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d022      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b0e:	d01d      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <HAL_TIM_Base_Start_IT+0xc8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d018      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_TIM_Base_Start_IT+0xcc>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d013      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_TIM_Base_Start_IT+0xd0>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00e      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d009      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d004      	beq.n	8001b4c <HAL_TIM_Base_Start_IT+0x80>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d111      	bne.n	8001b70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b06      	cmp	r3, #6
 8001b5c:	d010      	beq.n	8001b80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 0201 	orr.w	r2, r2, #1
 8001b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b6e:	e007      	b.n	8001b80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40010000 	.word	0x40010000
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40000800 	.word	0x40000800
 8001b9c:	40000c00 	.word	0x40000c00
 8001ba0:	40010400 	.word	0x40010400
 8001ba4:	40014000 	.word	0x40014000
 8001ba8:	40001800 	.word	0x40001800

08001bac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d122      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d11b      	bne.n	8001c08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f06f 0202 	mvn.w	r2, #2
 8001bd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 f8ee 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001bf4:	e005      	b.n	8001c02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f8e0 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f8f1 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	691b      	ldr	r3, [r3, #16]
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d122      	bne.n	8001c5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d11b      	bne.n	8001c5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f06f 0204 	mvn.w	r2, #4
 8001c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2202      	movs	r2, #2
 8001c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d003      	beq.n	8001c4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8c4 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001c48:	e005      	b.n	8001c56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f8b6 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 f8c7 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	691b      	ldr	r3, [r3, #16]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d122      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d11b      	bne.n	8001cb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f06f 0208 	mvn.w	r2, #8
 8001c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2204      	movs	r2, #4
 8001c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d003      	beq.n	8001c9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 f89a 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001c9c:	e005      	b.n	8001caa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 f88c 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 f89d 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b10      	cmp	r3, #16
 8001cbc:	d122      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	f003 0310 	and.w	r3, r3, #16
 8001cc8:	2b10      	cmp	r3, #16
 8001cca:	d11b      	bne.n	8001d04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f06f 0210 	mvn.w	r2, #16
 8001cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2208      	movs	r2, #8
 8001cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	69db      	ldr	r3, [r3, #28]
 8001ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f000 f870 	bl	8001dd0 <HAL_TIM_IC_CaptureCallback>
 8001cf0:	e005      	b.n	8001cfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f862 	bl	8001dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f000 f873 	bl	8001de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d10e      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d107      	bne.n	8001d30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f06f 0201 	mvn.w	r2, #1
 8001d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7fe fd9e 	bl	800086c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691b      	ldr	r3, [r3, #16]
 8001d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3a:	2b80      	cmp	r3, #128	; 0x80
 8001d3c:	d10e      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d48:	2b80      	cmp	r3, #128	; 0x80
 8001d4a:	d107      	bne.n	8001d5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f902 	bl	8001f60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d66:	2b40      	cmp	r3, #64	; 0x40
 8001d68:	d10e      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d74:	2b40      	cmp	r3, #64	; 0x40
 8001d76:	d107      	bne.n	8001d88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f838 	bl	8001df8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b20      	cmp	r3, #32
 8001d94:	d10e      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d107      	bne.n	8001db4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f06f 0220 	mvn.w	r2, #32
 8001dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f8cc 	bl	8001f4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001dec:	bf00      	nop
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a40      	ldr	r2, [pc, #256]	; (8001f20 <TIM_Base_SetConfig+0x114>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d013      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e2a:	d00f      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a3d      	ldr	r2, [pc, #244]	; (8001f24 <TIM_Base_SetConfig+0x118>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00b      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a3c      	ldr	r2, [pc, #240]	; (8001f28 <TIM_Base_SetConfig+0x11c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d007      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a3b      	ldr	r2, [pc, #236]	; (8001f2c <TIM_Base_SetConfig+0x120>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d003      	beq.n	8001e4c <TIM_Base_SetConfig+0x40>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	4a3a      	ldr	r2, [pc, #232]	; (8001f30 <TIM_Base_SetConfig+0x124>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d108      	bne.n	8001e5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <TIM_Base_SetConfig+0x114>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d02b      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e6c:	d027      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a2c      	ldr	r2, [pc, #176]	; (8001f24 <TIM_Base_SetConfig+0x118>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d023      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a2b      	ldr	r2, [pc, #172]	; (8001f28 <TIM_Base_SetConfig+0x11c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01f      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a2a      	ldr	r2, [pc, #168]	; (8001f2c <TIM_Base_SetConfig+0x120>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d01b      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <TIM_Base_SetConfig+0x124>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d017      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a28      	ldr	r2, [pc, #160]	; (8001f34 <TIM_Base_SetConfig+0x128>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d013      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a27      	ldr	r2, [pc, #156]	; (8001f38 <TIM_Base_SetConfig+0x12c>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00f      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <TIM_Base_SetConfig+0x130>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00b      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <TIM_Base_SetConfig+0x134>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a24      	ldr	r2, [pc, #144]	; (8001f44 <TIM_Base_SetConfig+0x138>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d003      	beq.n	8001ebe <TIM_Base_SetConfig+0xb2>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a23      	ldr	r2, [pc, #140]	; (8001f48 <TIM_Base_SetConfig+0x13c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d108      	bne.n	8001ed0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	695b      	ldr	r3, [r3, #20]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a0a      	ldr	r2, [pc, #40]	; (8001f20 <TIM_Base_SetConfig+0x114>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d003      	beq.n	8001f04 <TIM_Base_SetConfig+0xf8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a0c      	ldr	r2, [pc, #48]	; (8001f30 <TIM_Base_SetConfig+0x124>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d103      	bne.n	8001f0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	615a      	str	r2, [r3, #20]
}
 8001f12:	bf00      	nop
 8001f14:	3714      	adds	r7, #20
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40010000 	.word	0x40010000
 8001f24:	40000400 	.word	0x40000400
 8001f28:	40000800 	.word	0x40000800
 8001f2c:	40000c00 	.word	0x40000c00
 8001f30:	40010400 	.word	0x40010400
 8001f34:	40014000 	.word	0x40014000
 8001f38:	40014400 	.word	0x40014400
 8001f3c:	40014800 	.word	0x40014800
 8001f40:	40001800 	.word	0x40001800
 8001f44:	40001c00 	.word	0x40001c00
 8001f48:	40002000 	.word	0x40002000

08001f4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e03f      	b.n	8002006 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fca6 	bl	80008ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2224      	movs	r2, #36	; 0x24
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f000 f929 	bl	8002210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001fcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	695a      	ldr	r2, [r3, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001fdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2220      	movs	r2, #32
 8002000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b08a      	sub	sp, #40	; 0x28
 8002012:	af02      	add	r7, sp, #8
 8002014:	60f8      	str	r0, [r7, #12]
 8002016:	60b9      	str	r1, [r7, #8]
 8002018:	603b      	str	r3, [r7, #0]
 800201a:	4613      	mov	r3, r2
 800201c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b20      	cmp	r3, #32
 800202c:	d17c      	bne.n	8002128 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d002      	beq.n	800203a <HAL_UART_Transmit+0x2c>
 8002034:	88fb      	ldrh	r3, [r7, #6]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e075      	b.n	800212a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002044:	2b01      	cmp	r3, #1
 8002046:	d101      	bne.n	800204c <HAL_UART_Transmit+0x3e>
 8002048:	2302      	movs	r3, #2
 800204a:	e06e      	b.n	800212a <HAL_UART_Transmit+0x11c>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2221      	movs	r2, #33	; 0x21
 800205e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002062:	f7fe fd75 	bl	8000b50 <HAL_GetTick>
 8002066:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	88fa      	ldrh	r2, [r7, #6]
 800206c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	88fa      	ldrh	r2, [r7, #6]
 8002072:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207c:	d108      	bne.n	8002090 <HAL_UART_Transmit+0x82>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d104      	bne.n	8002090 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	e003      	b.n	8002098 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020a0:	e02a      	b.n	80020f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	2200      	movs	r2, #0
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	68f8      	ldr	r0, [r7, #12]
 80020ae:	f000 f840 	bl	8002132 <UART_WaitOnFlagUntilTimeout>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e036      	b.n	800212a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10b      	bne.n	80020da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	461a      	mov	r2, r3
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	3302      	adds	r3, #2
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	e007      	b.n	80020ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	781a      	ldrb	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	3301      	adds	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1cf      	bne.n	80020a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	2140      	movs	r1, #64	; 0x40
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f810 	bl	8002132 <UART_WaitOnFlagUntilTimeout>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002118:	2303      	movs	r3, #3
 800211a:	e006      	b.n	800212a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2220      	movs	r2, #32
 8002120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	e000      	b.n	800212a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002128:	2302      	movs	r3, #2
  }
}
 800212a:	4618      	mov	r0, r3
 800212c:	3720      	adds	r7, #32
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b090      	sub	sp, #64	; 0x40
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	603b      	str	r3, [r7, #0]
 800213e:	4613      	mov	r3, r2
 8002140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002142:	e050      	b.n	80021e6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002144:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214a:	d04c      	beq.n	80021e6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800214c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800214e:	2b00      	cmp	r3, #0
 8002150:	d007      	beq.n	8002162 <UART_WaitOnFlagUntilTimeout+0x30>
 8002152:	f7fe fcfd 	bl	8000b50 <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800215e:	429a      	cmp	r2, r3
 8002160:	d241      	bcs.n	80021e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	330c      	adds	r3, #12
 8002168:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	e853 3f00 	ldrex	r3, [r3]
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	330c      	adds	r3, #12
 8002180:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002182:	637a      	str	r2, [r7, #52]	; 0x34
 8002184:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002186:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002188:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800218a:	e841 2300 	strex	r3, r2, [r1]
 800218e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1e5      	bne.n	8002162 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	3314      	adds	r3, #20
 800219c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	e853 3f00 	ldrex	r3, [r3]
 80021a4:	613b      	str	r3, [r7, #16]
   return(result);
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3314      	adds	r3, #20
 80021b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021b6:	623a      	str	r2, [r7, #32]
 80021b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ba:	69f9      	ldr	r1, [r7, #28]
 80021bc:	6a3a      	ldr	r2, [r7, #32]
 80021be:	e841 2300 	strex	r3, r2, [r1]
 80021c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1e5      	bne.n	8002196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e00f      	b.n	8002206 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	4013      	ands	r3, r2
 80021f0:	68ba      	ldr	r2, [r7, #8]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	bf0c      	ite	eq
 80021f6:	2301      	moveq	r3, #1
 80021f8:	2300      	movne	r3, #0
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	461a      	mov	r2, r3
 80021fe:	79fb      	ldrb	r3, [r7, #7]
 8002200:	429a      	cmp	r2, r3
 8002202:	d09f      	beq.n	8002144 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3740      	adds	r7, #64	; 0x40
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002214:	b0c0      	sub	sp, #256	; 0x100
 8002216:	af00      	add	r7, sp, #0
 8002218:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800221c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800222c:	68d9      	ldr	r1, [r3, #12]
 800222e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	ea40 0301 	orr.w	r3, r0, r1
 8002238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800223a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	431a      	orrs	r2, r3
 8002248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	431a      	orrs	r2, r3
 8002250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	4313      	orrs	r3, r2
 8002258:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800225c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002268:	f021 010c 	bic.w	r1, r1, #12
 800226c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002276:	430b      	orrs	r3, r1
 8002278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800227a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800228a:	6999      	ldr	r1, [r3, #24]
 800228c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	ea40 0301 	orr.w	r3, r0, r1
 8002296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	4b8f      	ldr	r3, [pc, #572]	; (80024dc <UART_SetConfig+0x2cc>)
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d005      	beq.n	80022b0 <UART_SetConfig+0xa0>
 80022a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b8d      	ldr	r3, [pc, #564]	; (80024e0 <UART_SetConfig+0x2d0>)
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d104      	bne.n	80022ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022b0:	f7ff fb6c 	bl	800198c <HAL_RCC_GetPCLK2Freq>
 80022b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80022b8:	e003      	b.n	80022c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80022ba:	f7ff fb53 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 80022be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022c6:	69db      	ldr	r3, [r3, #28]
 80022c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022cc:	f040 810c 	bne.w	80024e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022d4:	2200      	movs	r2, #0
 80022d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80022da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80022de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80022e2:	4622      	mov	r2, r4
 80022e4:	462b      	mov	r3, r5
 80022e6:	1891      	adds	r1, r2, r2
 80022e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80022ea:	415b      	adcs	r3, r3
 80022ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80022f2:	4621      	mov	r1, r4
 80022f4:	eb12 0801 	adds.w	r8, r2, r1
 80022f8:	4629      	mov	r1, r5
 80022fa:	eb43 0901 	adc.w	r9, r3, r1
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800230a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800230e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002312:	4690      	mov	r8, r2
 8002314:	4699      	mov	r9, r3
 8002316:	4623      	mov	r3, r4
 8002318:	eb18 0303 	adds.w	r3, r8, r3
 800231c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002320:	462b      	mov	r3, r5
 8002322:	eb49 0303 	adc.w	r3, r9, r3
 8002326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800232a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002336:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800233a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800233e:	460b      	mov	r3, r1
 8002340:	18db      	adds	r3, r3, r3
 8002342:	653b      	str	r3, [r7, #80]	; 0x50
 8002344:	4613      	mov	r3, r2
 8002346:	eb42 0303 	adc.w	r3, r2, r3
 800234a:	657b      	str	r3, [r7, #84]	; 0x54
 800234c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002354:	f7fd ff44 	bl	80001e0 <__aeabi_uldivmod>
 8002358:	4602      	mov	r2, r0
 800235a:	460b      	mov	r3, r1
 800235c:	4b61      	ldr	r3, [pc, #388]	; (80024e4 <UART_SetConfig+0x2d4>)
 800235e:	fba3 2302 	umull	r2, r3, r3, r2
 8002362:	095b      	lsrs	r3, r3, #5
 8002364:	011c      	lsls	r4, r3, #4
 8002366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800236a:	2200      	movs	r2, #0
 800236c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002370:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002378:	4642      	mov	r2, r8
 800237a:	464b      	mov	r3, r9
 800237c:	1891      	adds	r1, r2, r2
 800237e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002380:	415b      	adcs	r3, r3
 8002382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002388:	4641      	mov	r1, r8
 800238a:	eb12 0a01 	adds.w	sl, r2, r1
 800238e:	4649      	mov	r1, r9
 8002390:	eb43 0b01 	adc.w	fp, r3, r1
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023a8:	4692      	mov	sl, r2
 80023aa:	469b      	mov	fp, r3
 80023ac:	4643      	mov	r3, r8
 80023ae:	eb1a 0303 	adds.w	r3, sl, r3
 80023b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023b6:	464b      	mov	r3, r9
 80023b8:	eb4b 0303 	adc.w	r3, fp, r3
 80023bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80023c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80023cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80023d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80023d4:	460b      	mov	r3, r1
 80023d6:	18db      	adds	r3, r3, r3
 80023d8:	643b      	str	r3, [r7, #64]	; 0x40
 80023da:	4613      	mov	r3, r2
 80023dc:	eb42 0303 	adc.w	r3, r2, r3
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44
 80023e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80023ea:	f7fd fef9 	bl	80001e0 <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	4b3b      	ldr	r3, [pc, #236]	; (80024e4 <UART_SetConfig+0x2d4>)
 80023f6:	fba3 2301 	umull	r2, r3, r3, r1
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2264      	movs	r2, #100	; 0x64
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	1acb      	subs	r3, r1, r3
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800240a:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <UART_SetConfig+0x2d4>)
 800240c:	fba3 2302 	umull	r2, r3, r3, r2
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002418:	441c      	add	r4, r3
 800241a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800241e:	2200      	movs	r2, #0
 8002420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002424:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800242c:	4642      	mov	r2, r8
 800242e:	464b      	mov	r3, r9
 8002430:	1891      	adds	r1, r2, r2
 8002432:	63b9      	str	r1, [r7, #56]	; 0x38
 8002434:	415b      	adcs	r3, r3
 8002436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800243c:	4641      	mov	r1, r8
 800243e:	1851      	adds	r1, r2, r1
 8002440:	6339      	str	r1, [r7, #48]	; 0x30
 8002442:	4649      	mov	r1, r9
 8002444:	414b      	adcs	r3, r1
 8002446:	637b      	str	r3, [r7, #52]	; 0x34
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002454:	4659      	mov	r1, fp
 8002456:	00cb      	lsls	r3, r1, #3
 8002458:	4651      	mov	r1, sl
 800245a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800245e:	4651      	mov	r1, sl
 8002460:	00ca      	lsls	r2, r1, #3
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	4603      	mov	r3, r0
 8002468:	4642      	mov	r2, r8
 800246a:	189b      	adds	r3, r3, r2
 800246c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002470:	464b      	mov	r3, r9
 8002472:	460a      	mov	r2, r1
 8002474:	eb42 0303 	adc.w	r3, r2, r3
 8002478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800247c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2200      	movs	r2, #0
 8002484:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002488:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800248c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002490:	460b      	mov	r3, r1
 8002492:	18db      	adds	r3, r3, r3
 8002494:	62bb      	str	r3, [r7, #40]	; 0x28
 8002496:	4613      	mov	r3, r2
 8002498:	eb42 0303 	adc.w	r3, r2, r3
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800249e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80024a6:	f7fd fe9b 	bl	80001e0 <__aeabi_uldivmod>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4b0d      	ldr	r3, [pc, #52]	; (80024e4 <UART_SetConfig+0x2d4>)
 80024b0:	fba3 1302 	umull	r1, r3, r3, r2
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	2164      	movs	r1, #100	; 0x64
 80024b8:	fb01 f303 	mul.w	r3, r1, r3
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	00db      	lsls	r3, r3, #3
 80024c0:	3332      	adds	r3, #50	; 0x32
 80024c2:	4a08      	ldr	r2, [pc, #32]	; (80024e4 <UART_SetConfig+0x2d4>)
 80024c4:	fba2 2303 	umull	r2, r3, r2, r3
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	f003 0207 	and.w	r2, r3, #7
 80024ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4422      	add	r2, r4
 80024d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80024d8:	e105      	b.n	80026e6 <UART_SetConfig+0x4d6>
 80024da:	bf00      	nop
 80024dc:	40011000 	.word	0x40011000
 80024e0:	40011400 	.word	0x40011400
 80024e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80024ec:	2200      	movs	r2, #0
 80024ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80024f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80024f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80024fa:	4642      	mov	r2, r8
 80024fc:	464b      	mov	r3, r9
 80024fe:	1891      	adds	r1, r2, r2
 8002500:	6239      	str	r1, [r7, #32]
 8002502:	415b      	adcs	r3, r3
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
 8002506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800250a:	4641      	mov	r1, r8
 800250c:	1854      	adds	r4, r2, r1
 800250e:	4649      	mov	r1, r9
 8002510:	eb43 0501 	adc.w	r5, r3, r1
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	00eb      	lsls	r3, r5, #3
 800251e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002522:	00e2      	lsls	r2, r4, #3
 8002524:	4614      	mov	r4, r2
 8002526:	461d      	mov	r5, r3
 8002528:	4643      	mov	r3, r8
 800252a:	18e3      	adds	r3, r4, r3
 800252c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002530:	464b      	mov	r3, r9
 8002532:	eb45 0303 	adc.w	r3, r5, r3
 8002536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800253a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002546:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002556:	4629      	mov	r1, r5
 8002558:	008b      	lsls	r3, r1, #2
 800255a:	4621      	mov	r1, r4
 800255c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002560:	4621      	mov	r1, r4
 8002562:	008a      	lsls	r2, r1, #2
 8002564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002568:	f7fd fe3a 	bl	80001e0 <__aeabi_uldivmod>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4b60      	ldr	r3, [pc, #384]	; (80026f4 <UART_SetConfig+0x4e4>)
 8002572:	fba3 2302 	umull	r2, r3, r3, r2
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	011c      	lsls	r4, r3, #4
 800257a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800257e:	2200      	movs	r2, #0
 8002580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002584:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800258c:	4642      	mov	r2, r8
 800258e:	464b      	mov	r3, r9
 8002590:	1891      	adds	r1, r2, r2
 8002592:	61b9      	str	r1, [r7, #24]
 8002594:	415b      	adcs	r3, r3
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800259c:	4641      	mov	r1, r8
 800259e:	1851      	adds	r1, r2, r1
 80025a0:	6139      	str	r1, [r7, #16]
 80025a2:	4649      	mov	r1, r9
 80025a4:	414b      	adcs	r3, r1
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	f04f 0200 	mov.w	r2, #0
 80025ac:	f04f 0300 	mov.w	r3, #0
 80025b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025b4:	4659      	mov	r1, fp
 80025b6:	00cb      	lsls	r3, r1, #3
 80025b8:	4651      	mov	r1, sl
 80025ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80025be:	4651      	mov	r1, sl
 80025c0:	00ca      	lsls	r2, r1, #3
 80025c2:	4610      	mov	r0, r2
 80025c4:	4619      	mov	r1, r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	4642      	mov	r2, r8
 80025ca:	189b      	adds	r3, r3, r2
 80025cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80025d0:	464b      	mov	r3, r9
 80025d2:	460a      	mov	r2, r1
 80025d4:	eb42 0303 	adc.w	r3, r2, r3
 80025d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80025dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80025e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	f04f 0300 	mov.w	r3, #0
 80025f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80025f4:	4649      	mov	r1, r9
 80025f6:	008b      	lsls	r3, r1, #2
 80025f8:	4641      	mov	r1, r8
 80025fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025fe:	4641      	mov	r1, r8
 8002600:	008a      	lsls	r2, r1, #2
 8002602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002606:	f7fd fdeb 	bl	80001e0 <__aeabi_uldivmod>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4b39      	ldr	r3, [pc, #228]	; (80026f4 <UART_SetConfig+0x4e4>)
 8002610:	fba3 1302 	umull	r1, r3, r3, r2
 8002614:	095b      	lsrs	r3, r3, #5
 8002616:	2164      	movs	r1, #100	; 0x64
 8002618:	fb01 f303 	mul.w	r3, r1, r3
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	3332      	adds	r3, #50	; 0x32
 8002622:	4a34      	ldr	r2, [pc, #208]	; (80026f4 <UART_SetConfig+0x4e4>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	095b      	lsrs	r3, r3, #5
 800262a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800262e:	441c      	add	r4, r3
 8002630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002634:	2200      	movs	r2, #0
 8002636:	673b      	str	r3, [r7, #112]	; 0x70
 8002638:	677a      	str	r2, [r7, #116]	; 0x74
 800263a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800263e:	4642      	mov	r2, r8
 8002640:	464b      	mov	r3, r9
 8002642:	1891      	adds	r1, r2, r2
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	415b      	adcs	r3, r3
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800264e:	4641      	mov	r1, r8
 8002650:	1851      	adds	r1, r2, r1
 8002652:	6039      	str	r1, [r7, #0]
 8002654:	4649      	mov	r1, r9
 8002656:	414b      	adcs	r3, r1
 8002658:	607b      	str	r3, [r7, #4]
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	f04f 0300 	mov.w	r3, #0
 8002662:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002666:	4659      	mov	r1, fp
 8002668:	00cb      	lsls	r3, r1, #3
 800266a:	4651      	mov	r1, sl
 800266c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002670:	4651      	mov	r1, sl
 8002672:	00ca      	lsls	r2, r1, #3
 8002674:	4610      	mov	r0, r2
 8002676:	4619      	mov	r1, r3
 8002678:	4603      	mov	r3, r0
 800267a:	4642      	mov	r2, r8
 800267c:	189b      	adds	r3, r3, r2
 800267e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002680:	464b      	mov	r3, r9
 8002682:	460a      	mov	r2, r1
 8002684:	eb42 0303 	adc.w	r3, r2, r3
 8002688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800268a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	663b      	str	r3, [r7, #96]	; 0x60
 8002694:	667a      	str	r2, [r7, #100]	; 0x64
 8002696:	f04f 0200 	mov.w	r2, #0
 800269a:	f04f 0300 	mov.w	r3, #0
 800269e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80026a2:	4649      	mov	r1, r9
 80026a4:	008b      	lsls	r3, r1, #2
 80026a6:	4641      	mov	r1, r8
 80026a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026ac:	4641      	mov	r1, r8
 80026ae:	008a      	lsls	r2, r1, #2
 80026b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80026b4:	f7fd fd94 	bl	80001e0 <__aeabi_uldivmod>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4b0d      	ldr	r3, [pc, #52]	; (80026f4 <UART_SetConfig+0x4e4>)
 80026be:	fba3 1302 	umull	r1, r3, r3, r2
 80026c2:	095b      	lsrs	r3, r3, #5
 80026c4:	2164      	movs	r1, #100	; 0x64
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	3332      	adds	r3, #50	; 0x32
 80026d0:	4a08      	ldr	r2, [pc, #32]	; (80026f4 <UART_SetConfig+0x4e4>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	f003 020f 	and.w	r2, r3, #15
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4422      	add	r2, r4
 80026e4:	609a      	str	r2, [r3, #8]
}
 80026e6:	bf00      	nop
 80026e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80026ec:	46bd      	mov	sp, r7
 80026ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026f2:	bf00      	nop
 80026f4:	51eb851f 	.word	0x51eb851f

080026f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f103 0208 	add.w	r2, r3, #8
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f103 0208 	add.w	r2, r3, #8
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f103 0208 	add.w	r2, r3, #8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr

08002752 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002752:	b480      	push	{r7}
 8002754:	b085      	sub	sp, #20
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
 800275a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002768:	d103      	bne.n	8002772 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e00c      	b.n	800278c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3308      	adds	r3, #8
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e002      	b.n	8002780 <vListInsert+0x2e>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	429a      	cmp	r2, r3
 800278a:	d2f6      	bcs.n	800277a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	685a      	ldr	r2, [r3, #4]
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	601a      	str	r2, [r3, #0]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6892      	ldr	r2, [r2, #8]
 80027da:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6852      	ldr	r2, [r2, #4]
 80027e4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d103      	bne.n	80027f8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689a      	ldr	r2, [r3, #8]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	1e5a      	subs	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
 8002820:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002822:	2301      	movs	r3, #1
 8002824:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002842:	bf00      	nop
 8002844:	e7fe      	b.n	8002844 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d05d      	beq.n	8002908 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002850:	2b00      	cmp	r3, #0
 8002852:	d059      	beq.n	8002908 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285c:	2100      	movs	r1, #0
 800285e:	fba3 2302 	umull	r2, r3, r3, r2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d000      	beq.n	8002868 <xQueueGenericReset+0x50>
 8002866:	2101      	movs	r1, #1
 8002868:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800286a:	2b00      	cmp	r3, #0
 800286c:	d14c      	bne.n	8002908 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800286e:	f002 f973 	bl	8004b58 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	6939      	ldr	r1, [r7, #16]
 800287c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	441a      	add	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	2200      	movs	r2, #0
 800288c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	3b01      	subs	r3, #1
 80028a0:	6939      	ldr	r1, [r7, #16]
 80028a2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028a4:	fb01 f303 	mul.w	r3, r1, r3
 80028a8:	441a      	add	r2, r3
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	22ff      	movs	r2, #255	; 0xff
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	22ff      	movs	r2, #255	; 0xff
 80028ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d114      	bne.n	80028ee <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d01a      	beq.n	8002902 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	3310      	adds	r3, #16
 80028d0:	4618      	mov	r0, r3
 80028d2:	f001 f979 	bl	8003bc8 <xTaskRemoveFromEventList>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d012      	beq.n	8002902 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80028dc:	4b15      	ldr	r3, [pc, #84]	; (8002934 <xQueueGenericReset+0x11c>)
 80028de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f3bf 8f4f 	dsb	sy
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	e009      	b.n	8002902 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	3310      	adds	r3, #16
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ff00 	bl	80026f8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	3324      	adds	r3, #36	; 0x24
 80028fc:	4618      	mov	r0, r3
 80028fe:	f7ff fefb 	bl	80026f8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002902:	f002 f959 	bl	8004bb8 <vPortExitCritical>
 8002906:	e001      	b.n	800290c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10a      	bne.n	8002928 <xQueueGenericReset+0x110>
        __asm volatile
 8002912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002916:	f383 8811 	msr	BASEPRI, r3
 800291a:	f3bf 8f6f 	isb	sy
 800291e:	f3bf 8f4f 	dsb	sy
 8002922:	60bb      	str	r3, [r7, #8]
    }
 8002924:	bf00      	nop
 8002926:	e7fe      	b.n	8002926 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002928:	697b      	ldr	r3, [r7, #20]
}
 800292a:	4618      	mov	r0, r3
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	e000ed04 	.word	0xe000ed04

08002938 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002938:	b580      	push	{r7, lr}
 800293a:	b08a      	sub	sp, #40	; 0x28
 800293c:	af02      	add	r7, sp, #8
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	4613      	mov	r3, r2
 8002944:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002946:	2300      	movs	r3, #0
 8002948:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d02e      	beq.n	80029ae <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002950:	2100      	movs	r1, #0
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	fba3 2302 	umull	r2, r3, r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d000      	beq.n	8002960 <xQueueGenericCreate+0x28>
 800295e:	2101      	movs	r1, #1
 8002960:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002962:	2b00      	cmp	r3, #0
 8002964:	d123      	bne.n	80029ae <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800296e:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002972:	d81c      	bhi.n	80029ae <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	fb02 f303 	mul.w	r3, r2, r3
 800297c:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	3350      	adds	r3, #80	; 0x50
 8002982:	4618      	mov	r0, r3
 8002984:	f002 fa0a 	bl	8004d9c <pvPortMalloc>
 8002988:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01c      	beq.n	80029ca <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3350      	adds	r3, #80	; 0x50
 8002998:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800299a:	79fa      	ldrb	r2, [r7, #7]
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	9300      	str	r3, [sp, #0]
 80029a0:	4613      	mov	r3, r2
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	68b9      	ldr	r1, [r7, #8]
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f814 	bl	80029d4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80029ac:	e00d      	b.n	80029ca <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <xQueueGenericCreate+0x92>
        __asm volatile
 80029b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b8:	f383 8811 	msr	BASEPRI, r3
 80029bc:	f3bf 8f6f 	isb	sy
 80029c0:	f3bf 8f4f 	dsb	sy
 80029c4:	613b      	str	r3, [r7, #16]
    }
 80029c6:	bf00      	nop
 80029c8:	e7fe      	b.n	80029c8 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80029ca:	69fb      	ldr	r3, [r7, #28]
    }
 80029cc:	4618      	mov	r0, r3
 80029ce:	3720      	adds	r7, #32
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d103      	bne.n	80029f0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e002      	b.n	80029f6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80029f6:	69bb      	ldr	r3, [r7, #24]
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a02:	2101      	movs	r1, #1
 8002a04:	69b8      	ldr	r0, [r7, #24]
 8002a06:	f7ff ff07 	bl	8002818 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002a12:	bf00      	nop
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]

        if( ( uxMaxCount != 0 ) &&
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d010      	beq.n	8002a50 <xQueueCreateCountingSemaphore+0x36>
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d80c      	bhi.n	8002a50 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002a36:	2202      	movs	r2, #2
 8002a38:	2100      	movs	r1, #0
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ff7c 	bl	8002938 <xQueueGenericCreate>
 8002a40:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d011      	beq.n	8002a6c <xQueueCreateCountingSemaphore+0x52>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8002a4e:	e00d      	b.n	8002a6c <xQueueCreateCountingSemaphore+0x52>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10a      	bne.n	8002a6c <xQueueCreateCountingSemaphore+0x52>
        __asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	60bb      	str	r3, [r7, #8]
    }
 8002a68:	bf00      	nop
 8002a6a:	e7fe      	b.n	8002a6a <xQueueCreateCountingSemaphore+0x50>
            mtCOVERAGE_TEST_MARKER();
        }

        return xHandle;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    }
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <xQueueGiveFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue,
                              BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b08e      	sub	sp, #56	; 0x38
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	6078      	str	r0, [r7, #4]
 8002a7e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
     * item size is 0.  Don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */

    configASSERT( pxQueue );
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <xQueueGiveFromISR+0x2a>
        __asm volatile
 8002a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8e:	f383 8811 	msr	BASEPRI, r3
 8002a92:	f3bf 8f6f 	isb	sy
 8002a96:	f3bf 8f4f 	dsb	sy
 8002a9a:	623b      	str	r3, [r7, #32]
    }
 8002a9c:	bf00      	nop
 8002a9e:	e7fe      	b.n	8002a9e <xQueueGiveFromISR+0x28>

    /* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
     * if the item size is not 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <xQueueGiveFromISR+0x48>
        __asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	61fb      	str	r3, [r7, #28]
    }
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <xQueueGiveFromISR+0x46>

    /* Normally a mutex would not be given from an interrupt, especially if
     * there is a mutex holder, as priority inheritance makes no sense for an
     * interrupts, only tasks. */
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <xQueueGiveFromISR+0x58>
 8002ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <xQueueGiveFromISR+0x5c>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <xQueueGiveFromISR+0x5e>
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d10a      	bne.n	8002aee <xQueueGiveFromISR+0x78>
        __asm volatile
 8002ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002adc:	f383 8811 	msr	BASEPRI, r3
 8002ae0:	f3bf 8f6f 	isb	sy
 8002ae4:	f3bf 8f4f 	dsb	sy
 8002ae8:	61bb      	str	r3, [r7, #24]
    }
 8002aea:	bf00      	nop
 8002aec:	e7fe      	b.n	8002aec <xQueueGiveFromISR+0x76>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002aee:	f002 f915 	bl	8004d1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002af2:	f3ef 8211 	mrs	r2, BASEPRI
 8002af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afa:	f383 8811 	msr	BASEPRI, r3
 8002afe:	f3bf 8f6f 	isb	sy
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	617a      	str	r2, [r7, #20]
 8002b08:	613b      	str	r3, [r7, #16]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002b0a:	697b      	ldr	r3, [r7, #20]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b12:	62bb      	str	r3, [r7, #40]	; 0x28

        /* When the queue is used to implement a semaphore no data is ever
         * moved through the queue but it is still valid to see if the queue 'has
         * space'. */
        if( uxMessagesWaiting < pxQueue->uxLength )
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d23a      	bcs.n	8002b94 <xQueueGiveFromISR+0x11e>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
             * holder - and if there is a mutex holder then the mutex cannot be
             * given from an ISR.  As this is the ISR version of the function it
             * can be assumed there is no mutex holder and no need to determine if
             * priority disinheritance is needed.  Simply increase the count of
             * messages (semaphores) available. */
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2e:	639a      	str	r2, [r3, #56]	; 0x38

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002b30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b38:	d112      	bne.n	8002b60 <xQueueGiveFromISR+0xea>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d025      	beq.n	8002b8e <xQueueGiveFromISR+0x118>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b44:	3324      	adds	r3, #36	; 0x24
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 f83e 	bl	8003bc8 <xTaskRemoveFromEventList>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01d      	beq.n	8002b8e <xQueueGiveFromISR+0x118>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d01a      	beq.n	8002b8e <xQueueGiveFromISR+0x118>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e016      	b.n	8002b8e <xQueueGiveFromISR+0x118>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002b64:	2b7f      	cmp	r3, #127	; 0x7f
 8002b66:	d10a      	bne.n	8002b7e <xQueueGiveFromISR+0x108>
        __asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	60fb      	str	r3, [r7, #12]
    }
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xQueueGiveFromISR+0x106>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b82:	3301      	adds	r3, #1
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	b25a      	sxtb	r2, r3
 8002b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	637b      	str	r3, [r7, #52]	; 0x34
 8002b92:	e001      	b.n	8002b98 <xQueueGiveFromISR+0x122>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
 8002b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9a:	60bb      	str	r3, [r7, #8]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002ba2:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3738      	adds	r7, #56	; 0x38
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
	...

08002bb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b08c      	sub	sp, #48	; 0x30
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <xQueueReceive+0x30>
        __asm volatile
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	623b      	str	r3, [r7, #32]
    }
 8002bdc:	bf00      	nop
 8002bde:	e7fe      	b.n	8002bde <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d103      	bne.n	8002bee <xQueueReceive+0x3e>
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <xQueueReceive+0x42>
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e000      	b.n	8002bf4 <xQueueReceive+0x44>
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10a      	bne.n	8002c0e <xQueueReceive+0x5e>
        __asm volatile
 8002bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfc:	f383 8811 	msr	BASEPRI, r3
 8002c00:	f3bf 8f6f 	isb	sy
 8002c04:	f3bf 8f4f 	dsb	sy
 8002c08:	61fb      	str	r3, [r7, #28]
    }
 8002c0a:	bf00      	nop
 8002c0c:	e7fe      	b.n	8002c0c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c0e:	f001 f9eb 	bl	8003fe8 <xTaskGetSchedulerState>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d102      	bne.n	8002c1e <xQueueReceive+0x6e>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <xQueueReceive+0x72>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e000      	b.n	8002c24 <xQueueReceive+0x74>
 8002c22:	2300      	movs	r3, #0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10a      	bne.n	8002c3e <xQueueReceive+0x8e>
        __asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	61bb      	str	r3, [r7, #24]
    }
 8002c3a:	bf00      	nop
 8002c3c:	e7fe      	b.n	8002c3c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c3e:	f001 ff8b 	bl	8004b58 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01f      	beq.n	8002c8e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c4e:	68b9      	ldr	r1, [r7, #8]
 8002c50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c52:	f000 f9b1 	bl	8002fb8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	1e5a      	subs	r2, r3, #1
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00f      	beq.n	8002c86 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c68:	3310      	adds	r3, #16
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 ffac 	bl	8003bc8 <xTaskRemoveFromEventList>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002c76:	4b3d      	ldr	r3, [pc, #244]	; (8002d6c <xQueueReceive+0x1bc>)
 8002c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002c86:	f001 ff97 	bl	8004bb8 <vPortExitCritical>
                return pdPASS;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e069      	b.n	8002d62 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d103      	bne.n	8002c9c <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002c94:	f001 ff90 	bl	8004bb8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	e062      	b.n	8002d62 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d106      	bne.n	8002cb0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002ca2:	f107 0310 	add.w	r3, r7, #16
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f001 f864 	bl	8003d74 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002cac:	2301      	movs	r3, #1
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002cb0:	f001 ff82 	bl	8004bb8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002cb4:	f000 fc92 	bl	80035dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cb8:	f001 ff4e 	bl	8004b58 <vPortEnterCritical>
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d103      	bne.n	8002cd2 <xQueueReceive+0x122>
 8002cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cd8:	b25b      	sxtb	r3, r3
 8002cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cde:	d103      	bne.n	8002ce8 <xQueueReceive+0x138>
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ce8:	f001 ff66 	bl	8004bb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002cec:	1d3a      	adds	r2, r7, #4
 8002cee:	f107 0310 	add.w	r3, r7, #16
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f001 f853 	bl	8003da0 <xTaskCheckForTimeOut>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d123      	bne.n	8002d48 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d02:	f000 f9d1 	bl	80030a8 <prvIsQueueEmpty>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d017      	beq.n	8002d3c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d0e:	3324      	adds	r3, #36	; 0x24
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4611      	mov	r1, r2
 8002d14:	4618      	mov	r0, r3
 8002d16:	f000 feed 	bl	8003af4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d1c:	f000 f972 	bl	8003004 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d20:	f000 fc6a 	bl	80035f8 <xTaskResumeAll>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d189      	bne.n	8002c3e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002d2a:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <xQueueReceive+0x1bc>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
 8002d3a:	e780      	b.n	8002c3e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d3e:	f000 f961 	bl	8003004 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d42:	f000 fc59 	bl	80035f8 <xTaskResumeAll>
 8002d46:	e77a      	b.n	8002c3e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d4a:	f000 f95b 	bl	8003004 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002d4e:	f000 fc53 	bl	80035f8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d54:	f000 f9a8 	bl	80030a8 <prvIsQueueEmpty>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f43f af6f 	beq.w	8002c3e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002d60:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3730      	adds	r7, #48	; 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	e000ed04 	.word	0xe000ed04

08002d70 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b08e      	sub	sp, #56	; 0x38
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	62fb      	str	r3, [r7, #44]	; 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002d82:	2300      	movs	r3, #0
 8002d84:	633b      	str	r3, [r7, #48]	; 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d10a      	bne.n	8002da2 <xQueueSemaphoreTake+0x32>
        __asm volatile
 8002d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d90:	f383 8811 	msr	BASEPRI, r3
 8002d94:	f3bf 8f6f 	isb	sy
 8002d98:	f3bf 8f4f 	dsb	sy
 8002d9c:	623b      	str	r3, [r7, #32]
    }
 8002d9e:	bf00      	nop
 8002da0:	e7fe      	b.n	8002da0 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00a      	beq.n	8002dc0 <xQueueSemaphoreTake+0x50>
        __asm volatile
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	f383 8811 	msr	BASEPRI, r3
 8002db2:	f3bf 8f6f 	isb	sy
 8002db6:	f3bf 8f4f 	dsb	sy
 8002dba:	61fb      	str	r3, [r7, #28]
    }
 8002dbc:	bf00      	nop
 8002dbe:	e7fe      	b.n	8002dbe <xQueueSemaphoreTake+0x4e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dc0:	f001 f912 	bl	8003fe8 <xTaskGetSchedulerState>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <xQueueSemaphoreTake+0x60>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <xQueueSemaphoreTake+0x64>
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e000      	b.n	8002dd6 <xQueueSemaphoreTake+0x66>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10a      	bne.n	8002df0 <xQueueSemaphoreTake+0x80>
        __asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	61bb      	str	r3, [r7, #24]
    }
 8002dec:	bf00      	nop
 8002dee:	e7fe      	b.n	8002dee <xQueueSemaphoreTake+0x7e>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002df0:	f001 feb2 	bl	8004b58 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d024      	beq.n	8002e4a <xQueueSemaphoreTake+0xda>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e02:	1e5a      	subs	r2, r3, #1
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	639a      	str	r2, [r3, #56]	; 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d104      	bne.n	8002e1a <xQueueSemaphoreTake+0xaa>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002e10:	f001 fa5e 	bl	80042d0 <pvTaskIncrementMutexHeldCount>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e18:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00f      	beq.n	8002e42 <xQueueSemaphoreTake+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e24:	3310      	adds	r3, #16
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fece 	bl	8003bc8 <xTaskRemoveFromEventList>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <xQueueSemaphoreTake+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e32:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <xQueueSemaphoreTake+0x214>)
 8002e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	f3bf 8f4f 	dsb	sy
 8002e3e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002e42:	f001 feb9 	bl	8004bb8 <vPortExitCritical>
                return pdPASS;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e097      	b.n	8002f7a <xQueueSemaphoreTake+0x20a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d111      	bne.n	8002e74 <xQueueSemaphoreTake+0x104>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <xQueueSemaphoreTake+0xfc>
        __asm volatile
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	f383 8811 	msr	BASEPRI, r3
 8002e5e:	f3bf 8f6f 	isb	sy
 8002e62:	f3bf 8f4f 	dsb	sy
 8002e66:	617b      	str	r3, [r7, #20]
    }
 8002e68:	bf00      	nop
 8002e6a:	e7fe      	b.n	8002e6a <xQueueSemaphoreTake+0xfa>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002e6c:	f001 fea4 	bl	8004bb8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002e70:	2300      	movs	r3, #0
 8002e72:	e082      	b.n	8002f7a <xQueueSemaphoreTake+0x20a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d106      	bne.n	8002e88 <xQueueSemaphoreTake+0x118>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002e7a:	f107 030c 	add.w	r3, r7, #12
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 ff78 	bl	8003d74 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002e84:	2301      	movs	r3, #1
 8002e86:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002e88:	f001 fe96 	bl	8004bb8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002e8c:	f000 fba6 	bl	80035dc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002e90:	f001 fe62 	bl	8004b58 <vPortEnterCritical>
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d103      	bne.n	8002eaa <xQueueSemaphoreTake+0x13a>
 8002ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d103      	bne.n	8002ec0 <xQueueSemaphoreTake+0x150>
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ec0:	f001 fe7a 	bl	8004bb8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ec4:	463a      	mov	r2, r7
 8002ec6:	f107 030c 	add.w	r3, r7, #12
 8002eca:	4611      	mov	r1, r2
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f000 ff67 	bl	8003da0 <xTaskCheckForTimeOut>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d132      	bne.n	8002f3e <xQueueSemaphoreTake+0x1ce>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ed8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002eda:	f000 f8e5 	bl	80030a8 <prvIsQueueEmpty>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d026      	beq.n	8002f32 <xQueueSemaphoreTake+0x1c2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <xQueueSemaphoreTake+0x190>
                        {
                            taskENTER_CRITICAL();
 8002eec:	f001 fe34 	bl	8004b58 <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f001 f895 	bl	8004024 <xTaskPriorityInherit>
 8002efa:	6338      	str	r0, [r7, #48]	; 0x30
                            }
                            taskEXIT_CRITICAL();
 8002efc:	f001 fe5c 	bl	8004bb8 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f02:	3324      	adds	r3, #36	; 0x24
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	4611      	mov	r1, r2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f000 fdf3 	bl	8003af4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002f0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f10:	f000 f878 	bl	8003004 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002f14:	f000 fb70 	bl	80035f8 <xTaskResumeAll>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f47f af68 	bne.w	8002df0 <xQueueSemaphoreTake+0x80>
                {
                    portYIELD_WITHIN_API();
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <xQueueSemaphoreTake+0x214>)
 8002f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
 8002f30:	e75e      	b.n	8002df0 <xQueueSemaphoreTake+0x80>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f34:	f000 f866 	bl	8003004 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f38:	f000 fb5e 	bl	80035f8 <xTaskResumeAll>
 8002f3c:	e758      	b.n	8002df0 <xQueueSemaphoreTake+0x80>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002f3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f40:	f000 f860 	bl	8003004 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f44:	f000 fb58 	bl	80035f8 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f4a:	f000 f8ad 	bl	80030a8 <prvIsQueueEmpty>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f43f af4d 	beq.w	8002df0 <xQueueSemaphoreTake+0x80>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00d      	beq.n	8002f78 <xQueueSemaphoreTake+0x208>
                        {
                            taskENTER_CRITICAL();
 8002f5c:	f001 fdfc 	bl	8004b58 <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002f60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f62:	f000 f811 	bl	8002f88 <prvGetDisinheritPriorityAfterTimeout>
 8002f66:	6278      	str	r0, [r7, #36]	; 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 f8f6 	bl	8004160 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8002f74:	f001 fe20 	bl	8004bb8 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002f78:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3738      	adds	r7, #56	; 0x38
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	e000ed04 	.word	0xe000ed04

08002f88 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002f88:	b480      	push	{r7}
 8002f8a:	b085      	sub	sp, #20
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d006      	beq.n	8002fa6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f1c3 0305 	rsb	r3, r3, #5
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	e001      	b.n	8002faa <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002faa:	68fb      	ldr	r3, [r7, #12]
    }
 8002fac:	4618      	mov	r0, r3
 8002fae:	3714      	adds	r7, #20
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d018      	beq.n	8002ffc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	441a      	add	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	68da      	ldr	r2, [r3, #12]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d303      	bcc.n	8002fec <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68d9      	ldr	r1, [r3, #12]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	6838      	ldr	r0, [r7, #0]
 8002ff8:	f002 f8f2 	bl	80051e0 <memcpy>
    }
}
 8002ffc:	bf00      	nop
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800300c:	f001 fda4 	bl	8004b58 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003016:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003018:	e011      	b.n	800303e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	2b00      	cmp	r3, #0
 8003020:	d012      	beq.n	8003048 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	3324      	adds	r3, #36	; 0x24
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fdce 	bl	8003bc8 <xTaskRemoveFromEventList>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003032:	f000 ff1b 	bl	8003e6c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	3b01      	subs	r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800303e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003042:	2b00      	cmp	r3, #0
 8003044:	dce9      	bgt.n	800301a <prvUnlockQueue+0x16>
 8003046:	e000      	b.n	800304a <prvUnlockQueue+0x46>
                        break;
 8003048:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	22ff      	movs	r2, #255	; 0xff
 800304e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003052:	f001 fdb1 	bl	8004bb8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003056:	f001 fd7f 	bl	8004b58 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003060:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003062:	e011      	b.n	8003088 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d012      	beq.n	8003092 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3310      	adds	r3, #16
 8003070:	4618      	mov	r0, r3
 8003072:	f000 fda9 	bl	8003bc8 <xTaskRemoveFromEventList>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800307c:	f000 fef6 	bl	8003e6c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003080:	7bbb      	ldrb	r3, [r7, #14]
 8003082:	3b01      	subs	r3, #1
 8003084:	b2db      	uxtb	r3, r3
 8003086:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003088:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800308c:	2b00      	cmp	r3, #0
 800308e:	dce9      	bgt.n	8003064 <prvUnlockQueue+0x60>
 8003090:	e000      	b.n	8003094 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003092:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	22ff      	movs	r2, #255	; 0xff
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800309c:	f001 fd8c 	bl	8004bb8 <vPortExitCritical>
}
 80030a0:	bf00      	nop
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b084      	sub	sp, #16
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80030b0:	f001 fd52 	bl	8004b58 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d102      	bne.n	80030c2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80030bc:	2301      	movs	r3, #1
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	e001      	b.n	80030c6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80030c6:	f001 fd77 	bl	8004bb8 <vPortExitCritical>

    return xReturn;
 80030ca:	68fb      	ldr	r3, [r7, #12]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10a      	bne.n	80030fa <vQueueAddToRegistry+0x26>
        __asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	60fb      	str	r3, [r7, #12]
    }
 80030f6:	bf00      	nop
 80030f8:	e7fe      	b.n	80030f8 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d024      	beq.n	800314e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003104:	2300      	movs	r3, #0
 8003106:	617b      	str	r3, [r7, #20]
 8003108:	e01e      	b.n	8003148 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <vQueueAddToRegistry+0x98>)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4413      	add	r3, r2
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	429a      	cmp	r2, r3
 8003118:	d105      	bne.n	8003126 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4a13      	ldr	r2, [pc, #76]	; (800316c <vQueueAddToRegistry+0x98>)
 8003120:	4413      	add	r3, r2
 8003122:	613b      	str	r3, [r7, #16]
                    break;
 8003124:	e013      	b.n	800314e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10a      	bne.n	8003142 <vQueueAddToRegistry+0x6e>
 800312c:	4a0f      	ldr	r2, [pc, #60]	; (800316c <vQueueAddToRegistry+0x98>)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d104      	bne.n	8003142 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4a0b      	ldr	r2, [pc, #44]	; (800316c <vQueueAddToRegistry+0x98>)
 800313e:	4413      	add	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3301      	adds	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b07      	cmp	r3, #7
 800314c:	d9dd      	bls.n	800310a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	683a      	ldr	r2, [r7, #0]
 8003158:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr
 800316c:	200000cc 	.word	0x200000cc

08003170 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8003180:	f001 fcea 	bl	8004b58 <vPortEnterCritical>
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800318a:	b25b      	sxtb	r3, r3
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d103      	bne.n	800319a <vQueueWaitForMessageRestricted+0x2a>
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031a0:	b25b      	sxtb	r3, r3
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d103      	bne.n	80031b0 <vQueueWaitForMessageRestricted+0x40>
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031b0:	f001 fd02 	bl	8004bb8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d106      	bne.n	80031ca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	3324      	adds	r3, #36	; 0x24
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f000 fcb9 	bl	8003b3c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80031ca:	6978      	ldr	r0, [r7, #20]
 80031cc:	f7ff ff1a 	bl	8003004 <prvUnlockQueue>
    }
 80031d0:	bf00      	nop
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}

080031d8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08c      	sub	sp, #48	; 0x30
 80031dc:	af04      	add	r7, sp, #16
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 fdd5 	bl	8004d9c <pvPortMalloc>
 80031f2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00e      	beq.n	8003218 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031fa:	2058      	movs	r0, #88	; 0x58
 80031fc:	f001 fdce 	bl	8004d9c <pvPortMalloc>
 8003200:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
 800320e:	e005      	b.n	800321c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8003210:	6978      	ldr	r0, [r7, #20]
 8003212:	f001 fea3 	bl	8004f5c <vPortFree>
 8003216:	e001      	b.n	800321c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d013      	beq.n	800324a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003222:	88fa      	ldrh	r2, [r7, #6]
 8003224:	2300      	movs	r3, #0
 8003226:	9303      	str	r3, [sp, #12]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	9302      	str	r3, [sp, #8]
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68b9      	ldr	r1, [r7, #8]
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f000 f80e 	bl	800325a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800323e:	69f8      	ldr	r0, [r7, #28]
 8003240:	f000 f8b0 	bl	80033a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003244:	2301      	movs	r3, #1
 8003246:	61bb      	str	r3, [r7, #24]
 8003248:	e002      	b.n	8003250 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800324a:	f04f 33ff 	mov.w	r3, #4294967295
 800324e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8003250:	69bb      	ldr	r3, [r7, #24]
    }
 8003252:	4618      	mov	r0, r3
 8003254:	3720      	adds	r7, #32
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b088      	sub	sp, #32
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
 8003266:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	461a      	mov	r2, r3
 8003272:	21a5      	movs	r1, #165	; 0xa5
 8003274:	f001 ffc2 	bl	80051fc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003282:	3b01      	subs	r3, #1
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800328a:	69bb      	ldr	r3, [r7, #24]
 800328c:	f023 0307 	bic.w	r3, r3, #7
 8003290:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f003 0307 	and.w	r3, r3, #7
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00a      	beq.n	80032b2 <prvInitialiseNewTask+0x58>
        __asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	617b      	str	r3, [r7, #20]
    }
 80032ae:	bf00      	nop
 80032b0:	e7fe      	b.n	80032b0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d01f      	beq.n	80032f8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]
 80032bc:	e012      	b.n	80032e4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	4413      	add	r3, r2
 80032c4:	7819      	ldrb	r1, [r3, #0]
 80032c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	4413      	add	r3, r2
 80032cc:	3334      	adds	r3, #52	; 0x34
 80032ce:	460a      	mov	r2, r1
 80032d0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80032d2:	68ba      	ldr	r2, [r7, #8]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3301      	adds	r3, #1
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	2b09      	cmp	r3, #9
 80032e8:	d9e9      	bls.n	80032be <prvInitialiseNewTask+0x64>
 80032ea:	e000      	b.n	80032ee <prvInitialiseNewTask+0x94>
            {
                break;
 80032ec:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	2200      	movs	r2, #0
 80032f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80032f6:	e003      	b.n	8003300 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	2b04      	cmp	r3, #4
 8003304:	d90a      	bls.n	800331c <prvInitialiseNewTask+0xc2>
        __asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	613b      	str	r3, [r7, #16]
    }
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	2b04      	cmp	r3, #4
 8003320:	d901      	bls.n	8003326 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003322:	2304      	movs	r3, #4
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003330:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	2200      	movs	r2, #0
 8003336:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	3304      	adds	r3, #4
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff f9fb 	bl	8002738 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003344:	3318      	adds	r3, #24
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff f9f6 	bl	8002738 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003350:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	f1c3 0205 	rsb	r2, r3, #5
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800335c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003360:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003364:	3350      	adds	r3, #80	; 0x50
 8003366:	2204      	movs	r2, #4
 8003368:	2100      	movs	r1, #0
 800336a:	4618      	mov	r0, r3
 800336c:	f001 ff46 	bl	80051fc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003372:	3354      	adds	r3, #84	; 0x54
 8003374:	2201      	movs	r2, #1
 8003376:	2100      	movs	r1, #0
 8003378:	4618      	mov	r0, r3
 800337a:	f001 ff3f 	bl	80051fc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800337e:	683a      	ldr	r2, [r7, #0]
 8003380:	68f9      	ldr	r1, [r7, #12]
 8003382:	69b8      	ldr	r0, [r7, #24]
 8003384:	f001 fabc 	bl	8004900 <pxPortInitialiseStack>
 8003388:	4602      	mov	r2, r0
 800338a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003396:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003398:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800339a:	bf00      	nop
 800339c:	3720      	adds	r7, #32
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80033ac:	f001 fbd4 	bl	8004b58 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80033b0:	4b40      	ldr	r3, [pc, #256]	; (80034b4 <prvAddNewTaskToReadyList+0x110>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3301      	adds	r3, #1
 80033b6:	4a3f      	ldr	r2, [pc, #252]	; (80034b4 <prvAddNewTaskToReadyList+0x110>)
 80033b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80033ba:	4b3f      	ldr	r3, [pc, #252]	; (80034b8 <prvAddNewTaskToReadyList+0x114>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d109      	bne.n	80033d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80033c2:	4a3d      	ldr	r2, [pc, #244]	; (80034b8 <prvAddNewTaskToReadyList+0x114>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033c8:	4b3a      	ldr	r3, [pc, #232]	; (80034b4 <prvAddNewTaskToReadyList+0x110>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d110      	bne.n	80033f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80033d0:	f000 fd70 	bl	8003eb4 <prvInitialiseTaskLists>
 80033d4:	e00d      	b.n	80033f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80033d6:	4b39      	ldr	r3, [pc, #228]	; (80034bc <prvAddNewTaskToReadyList+0x118>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033de:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <prvAddNewTaskToReadyList+0x114>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d802      	bhi.n	80033f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80033ec:	4a32      	ldr	r2, [pc, #200]	; (80034b8 <prvAddNewTaskToReadyList+0x114>)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80033f2:	4b33      	ldr	r3, [pc, #204]	; (80034c0 <prvAddNewTaskToReadyList+0x11c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	4a31      	ldr	r2, [pc, #196]	; (80034c0 <prvAddNewTaskToReadyList+0x11c>)
 80033fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033fc:	4b30      	ldr	r3, [pc, #192]	; (80034c0 <prvAddNewTaskToReadyList+0x11c>)
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	2201      	movs	r2, #1
 800340a:	409a      	lsls	r2, r3
 800340c:	4b2d      	ldr	r3, [pc, #180]	; (80034c4 <prvAddNewTaskToReadyList+0x120>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <prvAddNewTaskToReadyList+0x120>)
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341a:	492b      	ldr	r1, [pc, #172]	; (80034c8 <prvAddNewTaskToReadyList+0x124>)
 800341c:	4613      	mov	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	4413      	add	r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	3304      	adds	r3, #4
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	689a      	ldr	r2, [r3, #8]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	3204      	adds	r2, #4
 8003442:	605a      	str	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	1d1a      	adds	r2, r3, #4
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	4613      	mov	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4413      	add	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4a1b      	ldr	r2, [pc, #108]	; (80034c8 <prvAddNewTaskToReadyList+0x124>)
 800345a:	441a      	add	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	615a      	str	r2, [r3, #20]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	4918      	ldr	r1, [pc, #96]	; (80034c8 <prvAddNewTaskToReadyList+0x124>)
 8003466:	4613      	mov	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	1c59      	adds	r1, r3, #1
 8003474:	4814      	ldr	r0, [pc, #80]	; (80034c8 <prvAddNewTaskToReadyList+0x124>)
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4403      	add	r3, r0
 8003480:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003482:	f001 fb99 	bl	8004bb8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <prvAddNewTaskToReadyList+0x118>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00e      	beq.n	80034ac <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <prvAddNewTaskToReadyList+0x114>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	429a      	cmp	r2, r3
 800349a:	d207      	bcs.n	80034ac <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <prvAddNewTaskToReadyList+0x128>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	200001e4 	.word	0x200001e4
 80034b8:	2000010c 	.word	0x2000010c
 80034bc:	200001f0 	.word	0x200001f0
 80034c0:	20000200 	.word	0x20000200
 80034c4:	200001ec 	.word	0x200001ec
 80034c8:	20000110 	.word	0x20000110
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d017      	beq.n	8003512 <vTaskDelay+0x42>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80034e2:	4b13      	ldr	r3, [pc, #76]	; (8003530 <vTaskDelay+0x60>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <vTaskDelay+0x30>
        __asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60bb      	str	r3, [r7, #8]
    }
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8003500:	f000 f86c 	bl	80035dc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003504:	2100      	movs	r1, #0
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fef6 	bl	80042f8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800350c:	f000 f874 	bl	80035f8 <xTaskResumeAll>
 8003510:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d107      	bne.n	8003528 <vTaskDelay+0x58>
        {
            portYIELD_WITHIN_API();
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <vTaskDelay+0x64>)
 800351a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	2000020c 	.word	0x2000020c
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <vTaskStartScheduler+0x88>)
 8003540:	9301      	str	r3, [sp, #4]
 8003542:	2300      	movs	r3, #0
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2300      	movs	r3, #0
 8003548:	2282      	movs	r2, #130	; 0x82
 800354a:	491e      	ldr	r1, [pc, #120]	; (80035c4 <vTaskStartScheduler+0x8c>)
 800354c:	481e      	ldr	r0, [pc, #120]	; (80035c8 <vTaskStartScheduler+0x90>)
 800354e:	f7ff fe43 	bl	80031d8 <xTaskCreate>
 8003552:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d102      	bne.n	8003560 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800355a:	f000 ff4d 	bl	80043f8 <xTimerCreateTimerTask>
 800355e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d116      	bne.n	8003594 <vTaskStartScheduler+0x5c>
        __asm volatile
 8003566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800356a:	f383 8811 	msr	BASEPRI, r3
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	f3bf 8f4f 	dsb	sy
 8003576:	60bb      	str	r3, [r7, #8]
    }
 8003578:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800357a:	4b14      	ldr	r3, [pc, #80]	; (80035cc <vTaskStartScheduler+0x94>)
 800357c:	f04f 32ff 	mov.w	r2, #4294967295
 8003580:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003582:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <vTaskStartScheduler+0x98>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003588:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <vTaskStartScheduler+0x9c>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800358e:	f001 fa41 	bl	8004a14 <xPortStartScheduler>
 8003592:	e00e      	b.n	80035b2 <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800359a:	d10a      	bne.n	80035b2 <vTaskStartScheduler+0x7a>
        __asm volatile
 800359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035a0:	f383 8811 	msr	BASEPRI, r3
 80035a4:	f3bf 8f6f 	isb	sy
 80035a8:	f3bf 8f4f 	dsb	sy
 80035ac:	607b      	str	r3, [r7, #4]
    }
 80035ae:	bf00      	nop
 80035b0:	e7fe      	b.n	80035b0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80035b2:	4b09      	ldr	r3, [pc, #36]	; (80035d8 <vTaskStartScheduler+0xa0>)
 80035b4:	681b      	ldr	r3, [r3, #0]
}
 80035b6:	bf00      	nop
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000208 	.word	0x20000208
 80035c4:	08005340 	.word	0x08005340
 80035c8:	08003e85 	.word	0x08003e85
 80035cc:	20000204 	.word	0x20000204
 80035d0:	200001f0 	.word	0x200001f0
 80035d4:	200001e8 	.word	0x200001e8
 80035d8:	2000000c 	.word	0x2000000c

080035dc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <vTaskSuspendAll+0x18>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3301      	adds	r3, #1
 80035e6:	4a03      	ldr	r2, [pc, #12]	; (80035f4 <vTaskSuspendAll+0x18>)
 80035e8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80035ea:	bf00      	nop
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	2000020c 	.word	0x2000020c

080035f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003606:	4b71      	ldr	r3, [pc, #452]	; (80037cc <xTaskResumeAll+0x1d4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <xTaskResumeAll+0x2c>
        __asm volatile
 800360e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003612:	f383 8811 	msr	BASEPRI, r3
 8003616:	f3bf 8f6f 	isb	sy
 800361a:	f3bf 8f4f 	dsb	sy
 800361e:	607b      	str	r3, [r7, #4]
    }
 8003620:	bf00      	nop
 8003622:	e7fe      	b.n	8003622 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003624:	f001 fa98 	bl	8004b58 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003628:	4b68      	ldr	r3, [pc, #416]	; (80037cc <xTaskResumeAll+0x1d4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3b01      	subs	r3, #1
 800362e:	4a67      	ldr	r2, [pc, #412]	; (80037cc <xTaskResumeAll+0x1d4>)
 8003630:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003632:	4b66      	ldr	r3, [pc, #408]	; (80037cc <xTaskResumeAll+0x1d4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2b00      	cmp	r3, #0
 8003638:	f040 80c0 	bne.w	80037bc <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800363c:	4b64      	ldr	r3, [pc, #400]	; (80037d0 <xTaskResumeAll+0x1d8>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 80bb 	beq.w	80037bc <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003646:	e08a      	b.n	800375e <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003648:	4b62      	ldr	r3, [pc, #392]	; (80037d4 <xTaskResumeAll+0x1dc>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003654:	613b      	str	r3, [r7, #16]
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	69db      	ldr	r3, [r3, #28]
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	6a12      	ldr	r2, [r2, #32]
 800365e:	609a      	str	r2, [r3, #8]
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	69fa      	ldr	r2, [r7, #28]
 8003666:	69d2      	ldr	r2, [r2, #28]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	685a      	ldr	r2, [r3, #4]
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3318      	adds	r3, #24
 8003672:	429a      	cmp	r2, r3
 8003674:	d103      	bne.n	800367e <xTaskResumeAll+0x86>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	6a1a      	ldr	r2, [r3, #32]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	605a      	str	r2, [r3, #4]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	2200      	movs	r2, #0
 8003682:	629a      	str	r2, [r3, #40]	; 0x28
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	1e5a      	subs	r2, r3, #1
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	69fa      	ldr	r2, [r7, #28]
 800369a:	68d2      	ldr	r2, [r2, #12]
 800369c:	609a      	str	r2, [r3, #8]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	69fa      	ldr	r2, [r7, #28]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	605a      	str	r2, [r3, #4]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3304      	adds	r3, #4
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d103      	bne.n	80036bc <xTaskResumeAll+0xc4>
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	2200      	movs	r2, #0
 80036c0:	615a      	str	r2, [r3, #20]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	1e5a      	subs	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	2201      	movs	r2, #1
 80036d2:	409a      	lsls	r2, r3
 80036d4:	4b40      	ldr	r3, [pc, #256]	; (80037d8 <xTaskResumeAll+0x1e0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4313      	orrs	r3, r2
 80036da:	4a3f      	ldr	r2, [pc, #252]	; (80037d8 <xTaskResumeAll+0x1e0>)
 80036dc:	6013      	str	r3, [r2, #0]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	493e      	ldr	r1, [pc, #248]	; (80037dc <xTaskResumeAll+0x1e4>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	3304      	adds	r3, #4
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60bb      	str	r3, [r7, #8]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	60da      	str	r2, [r3, #12]
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	69fa      	ldr	r2, [r7, #28]
 8003708:	3204      	adds	r2, #4
 800370a:	605a      	str	r2, [r3, #4]
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	1d1a      	adds	r2, r3, #4
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	4613      	mov	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4a2e      	ldr	r2, [pc, #184]	; (80037dc <xTaskResumeAll+0x1e4>)
 8003722:	441a      	add	r2, r3
 8003724:	69fb      	ldr	r3, [r7, #28]
 8003726:	615a      	str	r2, [r3, #20]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800372c:	492b      	ldr	r1, [pc, #172]	; (80037dc <xTaskResumeAll+0x1e4>)
 800372e:	4613      	mov	r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	1c59      	adds	r1, r3, #1
 800373c:	4827      	ldr	r0, [pc, #156]	; (80037dc <xTaskResumeAll+0x1e4>)
 800373e:	4613      	mov	r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	4413      	add	r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4403      	add	r3, r0
 8003748:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374e:	4b24      	ldr	r3, [pc, #144]	; (80037e0 <xTaskResumeAll+0x1e8>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	429a      	cmp	r2, r3
 8003756:	d302      	bcc.n	800375e <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8003758:	4b22      	ldr	r3, [pc, #136]	; (80037e4 <xTaskResumeAll+0x1ec>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800375e:	4b1d      	ldr	r3, [pc, #116]	; (80037d4 <xTaskResumeAll+0x1dc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f47f af70 	bne.w	8003648 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800376e:	f000 fc1f 	bl	8003fb0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003772:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <xTaskResumeAll+0x1f0>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d010      	beq.n	80037a0 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800377e:	f000 f847 	bl	8003810 <xTaskIncrementTick>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8003788:	4b16      	ldr	r3, [pc, #88]	; (80037e4 <xTaskResumeAll+0x1ec>)
 800378a:	2201      	movs	r2, #1
 800378c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	3b01      	subs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f1      	bne.n	800377e <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <xTaskResumeAll+0x1f0>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80037a0:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <xTaskResumeAll+0x1ec>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80037a8:	2301      	movs	r3, #1
 80037aa:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <xTaskResumeAll+0x1f4>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	f3bf 8f4f 	dsb	sy
 80037b8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80037bc:	f001 f9fc 	bl	8004bb8 <vPortExitCritical>

    return xAlreadyYielded;
 80037c0:	69bb      	ldr	r3, [r7, #24]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3720      	adds	r7, #32
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	2000020c 	.word	0x2000020c
 80037d0:	200001e4 	.word	0x200001e4
 80037d4:	200001a4 	.word	0x200001a4
 80037d8:	200001ec 	.word	0x200001ec
 80037dc:	20000110 	.word	0x20000110
 80037e0:	2000010c 	.word	0x2000010c
 80037e4:	200001f8 	.word	0x200001f8
 80037e8:	200001f4 	.word	0x200001f4
 80037ec:	e000ed04 	.word	0xe000ed04

080037f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <xTaskGetTickCount+0x1c>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80037fc:	687b      	ldr	r3, [r7, #4]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	200001e8 	.word	0x200001e8

08003810 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003816:	2300      	movs	r3, #0
 8003818:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800381a:	4b7d      	ldr	r3, [pc, #500]	; (8003a10 <xTaskIncrementTick+0x200>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 80ec 	bne.w	80039fc <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003824:	4b7b      	ldr	r3, [pc, #492]	; (8003a14 <xTaskIncrementTick+0x204>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	3301      	adds	r3, #1
 800382a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800382c:	4a79      	ldr	r2, [pc, #484]	; (8003a14 <xTaskIncrementTick+0x204>)
 800382e:	6a3b      	ldr	r3, [r7, #32]
 8003830:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d120      	bne.n	800387a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003838:	4b77      	ldr	r3, [pc, #476]	; (8003a18 <xTaskIncrementTick+0x208>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <xTaskIncrementTick+0x48>
        __asm volatile
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	607b      	str	r3, [r7, #4]
    }
 8003854:	bf00      	nop
 8003856:	e7fe      	b.n	8003856 <xTaskIncrementTick+0x46>
 8003858:	4b6f      	ldr	r3, [pc, #444]	; (8003a18 <xTaskIncrementTick+0x208>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61fb      	str	r3, [r7, #28]
 800385e:	4b6f      	ldr	r3, [pc, #444]	; (8003a1c <xTaskIncrementTick+0x20c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6d      	ldr	r2, [pc, #436]	; (8003a18 <xTaskIncrementTick+0x208>)
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4a6d      	ldr	r2, [pc, #436]	; (8003a1c <xTaskIncrementTick+0x20c>)
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b6c      	ldr	r3, [pc, #432]	; (8003a20 <xTaskIncrementTick+0x210>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3301      	adds	r3, #1
 8003872:	4a6b      	ldr	r2, [pc, #428]	; (8003a20 <xTaskIncrementTick+0x210>)
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	f000 fb9b 	bl	8003fb0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800387a:	4b6a      	ldr	r3, [pc, #424]	; (8003a24 <xTaskIncrementTick+0x214>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6a3a      	ldr	r2, [r7, #32]
 8003880:	429a      	cmp	r2, r3
 8003882:	f0c0 80a6 	bcc.w	80039d2 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003886:	4b64      	ldr	r3, [pc, #400]	; (8003a18 <xTaskIncrementTick+0x208>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d104      	bne.n	800389a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003890:	4b64      	ldr	r3, [pc, #400]	; (8003a24 <xTaskIncrementTick+0x214>)
 8003892:	f04f 32ff 	mov.w	r2, #4294967295
 8003896:	601a      	str	r2, [r3, #0]
                    break;
 8003898:	e09b      	b.n	80039d2 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800389a:	4b5f      	ldr	r3, [pc, #380]	; (8003a18 <xTaskIncrementTick+0x208>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80038aa:	6a3a      	ldr	r2, [r7, #32]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d203      	bcs.n	80038ba <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80038b2:	4a5c      	ldr	r2, [pc, #368]	; (8003a24 <xTaskIncrementTick+0x214>)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80038b8:	e08b      	b.n	80039d2 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	68d2      	ldr	r2, [r2, #12]
 80038c8:	609a      	str	r2, [r3, #8]
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	6892      	ldr	r2, [r2, #8]
 80038d2:	605a      	str	r2, [r3, #4]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	3304      	adds	r3, #4
 80038dc:	429a      	cmp	r2, r3
 80038de:	d103      	bne.n	80038e8 <xTaskIncrementTick+0xd8>
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2200      	movs	r2, #0
 80038ec:	615a      	str	r2, [r3, #20]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	1e5a      	subs	r2, r3, #1
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01e      	beq.n	800393e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003904:	60fb      	str	r3, [r7, #12]
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	69ba      	ldr	r2, [r7, #24]
 800390c:	6a12      	ldr	r2, [r2, #32]
 800390e:	609a      	str	r2, [r3, #8]
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	69d2      	ldr	r2, [r2, #28]
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	3318      	adds	r3, #24
 8003922:	429a      	cmp	r2, r3
 8003924:	d103      	bne.n	800392e <xTaskIncrementTick+0x11e>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	6a1a      	ldr	r2, [r3, #32]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	605a      	str	r2, [r3, #4]
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2200      	movs	r2, #0
 8003932:	629a      	str	r2, [r3, #40]	; 0x28
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	1e5a      	subs	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003942:	2201      	movs	r2, #1
 8003944:	409a      	lsls	r2, r3
 8003946:	4b38      	ldr	r3, [pc, #224]	; (8003a28 <xTaskIncrementTick+0x218>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4313      	orrs	r3, r2
 800394c:	4a36      	ldr	r2, [pc, #216]	; (8003a28 <xTaskIncrementTick+0x218>)
 800394e:	6013      	str	r3, [r2, #0]
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003954:	4935      	ldr	r1, [pc, #212]	; (8003a2c <xTaskIncrementTick+0x21c>)
 8003956:	4613      	mov	r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3304      	adds	r3, #4
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60bb      	str	r3, [r7, #8]
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	3204      	adds	r2, #4
 800397c:	605a      	str	r2, [r3, #4]
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	1d1a      	adds	r2, r3, #4
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	609a      	str	r2, [r3, #8]
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800398a:	4613      	mov	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4413      	add	r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4a26      	ldr	r2, [pc, #152]	; (8003a2c <xTaskIncrementTick+0x21c>)
 8003994:	441a      	add	r2, r3
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	615a      	str	r2, [r3, #20]
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399e:	4923      	ldr	r1, [pc, #140]	; (8003a2c <xTaskIncrementTick+0x21c>)
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1c59      	adds	r1, r3, #1
 80039ae:	481f      	ldr	r0, [pc, #124]	; (8003a2c <xTaskIncrementTick+0x21c>)
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4403      	add	r3, r0
 80039ba:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039c0:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <xTaskIncrementTick+0x220>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	429a      	cmp	r2, r3
 80039c8:	f4ff af5d 	bcc.w	8003886 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80039cc:	2301      	movs	r3, #1
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039d0:	e759      	b.n	8003886 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <xTaskIncrementTick+0x220>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039d8:	4914      	ldr	r1, [pc, #80]	; (8003a2c <xTaskIncrementTick+0x21c>)
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d901      	bls.n	80039ee <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80039ea:	2301      	movs	r3, #1
 80039ec:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80039ee:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <xTaskIncrementTick+0x224>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d007      	beq.n	8003a06 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80039f6:	2301      	movs	r3, #1
 80039f8:	627b      	str	r3, [r7, #36]	; 0x24
 80039fa:	e004      	b.n	8003a06 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80039fc:	4b0e      	ldr	r3, [pc, #56]	; (8003a38 <xTaskIncrementTick+0x228>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	3301      	adds	r3, #1
 8003a02:	4a0d      	ldr	r2, [pc, #52]	; (8003a38 <xTaskIncrementTick+0x228>)
 8003a04:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3728      	adds	r7, #40	; 0x28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	2000020c 	.word	0x2000020c
 8003a14:	200001e8 	.word	0x200001e8
 8003a18:	2000019c 	.word	0x2000019c
 8003a1c:	200001a0 	.word	0x200001a0
 8003a20:	200001fc 	.word	0x200001fc
 8003a24:	20000204 	.word	0x20000204
 8003a28:	200001ec 	.word	0x200001ec
 8003a2c:	20000110 	.word	0x20000110
 8003a30:	2000010c 	.word	0x2000010c
 8003a34:	200001f8 	.word	0x200001f8
 8003a38:	200001f4 	.word	0x200001f4

08003a3c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b087      	sub	sp, #28
 8003a40:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003a42:	4b27      	ldr	r3, [pc, #156]	; (8003ae0 <vTaskSwitchContext+0xa4>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d003      	beq.n	8003a52 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003a4a:	4b26      	ldr	r3, [pc, #152]	; (8003ae4 <vTaskSwitchContext+0xa8>)
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003a50:	e03f      	b.n	8003ad2 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8003a52:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <vTaskSwitchContext+0xa8>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a58:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <vTaskSwitchContext+0xac>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003a66:	7afb      	ldrb	r3, [r7, #11]
 8003a68:	f1c3 031f 	rsb	r3, r3, #31
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	491f      	ldr	r1, [pc, #124]	; (8003aec <vTaskSwitchContext+0xb0>)
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10a      	bne.n	8003a98 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	607b      	str	r3, [r7, #4]
    }
 8003a94:	bf00      	nop
 8003a96:	e7fe      	b.n	8003a96 <vTaskSwitchContext+0x5a>
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4a12      	ldr	r2, [pc, #72]	; (8003aec <vTaskSwitchContext+0xb0>)
 8003aa4:	4413      	add	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	3308      	adds	r3, #8
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d104      	bne.n	8003ac8 <vTaskSwitchContext+0x8c>
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	605a      	str	r2, [r3, #4]
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	4a08      	ldr	r2, [pc, #32]	; (8003af0 <vTaskSwitchContext+0xb4>)
 8003ad0:	6013      	str	r3, [r2, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	371c      	adds	r7, #28
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	2000020c 	.word	0x2000020c
 8003ae4:	200001f8 	.word	0x200001f8
 8003ae8:	200001ec 	.word	0x200001ec
 8003aec:	20000110 	.word	0x20000110
 8003af0:	2000010c 	.word	0x2000010c

08003af4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10a      	bne.n	8003b1a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b08:	f383 8811 	msr	BASEPRI, r3
 8003b0c:	f3bf 8f6f 	isb	sy
 8003b10:	f3bf 8f4f 	dsb	sy
 8003b14:	60fb      	str	r3, [r7, #12]
    }
 8003b16:	bf00      	nop
 8003b18:	e7fe      	b.n	8003b18 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b1a:	4b07      	ldr	r3, [pc, #28]	; (8003b38 <vTaskPlaceOnEventList+0x44>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	3318      	adds	r3, #24
 8003b20:	4619      	mov	r1, r3
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fe fe15 	bl	8002752 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b28:	2101      	movs	r1, #1
 8003b2a:	6838      	ldr	r0, [r7, #0]
 8003b2c:	f000 fbe4 	bl	80042f8 <prvAddCurrentTaskToDelayedList>
}
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	2000010c 	.word	0x2000010c

08003b3c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b52:	f383 8811 	msr	BASEPRI, r3
 8003b56:	f3bf 8f6f 	isb	sy
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	613b      	str	r3, [r7, #16]
    }
 8003b60:	bf00      	nop
 8003b62:	e7fe      	b.n	8003b62 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	617b      	str	r3, [r7, #20]
 8003b6a:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	61da      	str	r2, [r3, #28]
 8003b72:	4b14      	ldr	r3, [pc, #80]	; (8003bc4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	697a      	ldr	r2, [r7, #20]
 8003b78:	6892      	ldr	r2, [r2, #8]
 8003b7a:	621a      	str	r2, [r3, #32]
 8003b7c:	4b11      	ldr	r3, [pc, #68]	; (8003bc4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	3218      	adds	r2, #24
 8003b86:	605a      	str	r2, [r3, #4]
 8003b88:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f103 0218 	add.w	r2, r3, #24
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	609a      	str	r2, [r3, #8]
 8003b94:	4b0b      	ldr	r3, [pc, #44]	; (8003bc4 <vTaskPlaceOnEventListRestricted+0x88>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003bac:	f04f 33ff 	mov.w	r3, #4294967295
 8003bb0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	68b8      	ldr	r0, [r7, #8]
 8003bb6:	f000 fb9f 	bl	80042f8 <prvAddCurrentTaskToDelayedList>
    }
 8003bba:	bf00      	nop
 8003bbc:	3718      	adds	r7, #24
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2000010c 	.word	0x2000010c

08003bc8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b08b      	sub	sp, #44	; 0x2c
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003bd8:	6a3b      	ldr	r3, [r7, #32]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8003bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be2:	f383 8811 	msr	BASEPRI, r3
 8003be6:	f3bf 8f6f 	isb	sy
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	60fb      	str	r3, [r7, #12]
    }
 8003bf0:	bf00      	nop
 8003bf2:	e7fe      	b.n	8003bf2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003bf4:	6a3b      	ldr	r3, [r7, #32]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	6a3b      	ldr	r3, [r7, #32]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	6a3a      	ldr	r2, [r7, #32]
 8003c00:	6a12      	ldr	r2, [r2, #32]
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	69d2      	ldr	r2, [r2, #28]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	6a3b      	ldr	r3, [r7, #32]
 8003c14:	3318      	adds	r3, #24
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d103      	bne.n	8003c22 <xTaskRemoveFromEventList+0x5a>
 8003c1a:	6a3b      	ldr	r3, [r7, #32]
 8003c1c:	6a1a      	ldr	r2, [r3, #32]
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	605a      	str	r2, [r3, #4]
 8003c22:	6a3b      	ldr	r3, [r7, #32]
 8003c24:	2200      	movs	r2, #0
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	1e5a      	subs	r2, r3, #1
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c32:	4b4a      	ldr	r3, [pc, #296]	; (8003d5c <xTaskRemoveFromEventList+0x194>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d15e      	bne.n	8003cf8 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	6a3a      	ldr	r2, [r7, #32]
 8003c46:	68d2      	ldr	r2, [r2, #12]
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	6a3a      	ldr	r2, [r7, #32]
 8003c50:	6892      	ldr	r2, [r2, #8]
 8003c52:	605a      	str	r2, [r3, #4]
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	6a3b      	ldr	r3, [r7, #32]
 8003c5a:	3304      	adds	r3, #4
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d103      	bne.n	8003c68 <xTaskRemoveFromEventList+0xa0>
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	6a3b      	ldr	r3, [r7, #32]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	615a      	str	r2, [r3, #20]
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	1e5a      	subs	r2, r3, #1
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003c78:	6a3b      	ldr	r3, [r7, #32]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	409a      	lsls	r2, r3
 8003c80:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <xTaskRemoveFromEventList+0x198>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	4a36      	ldr	r2, [pc, #216]	; (8003d60 <xTaskRemoveFromEventList+0x198>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8e:	4935      	ldr	r1, [pc, #212]	; (8003d64 <xTaskRemoveFromEventList+0x19c>)
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	609a      	str	r2, [r3, #8]
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	6a3a      	ldr	r2, [r7, #32]
 8003cb4:	3204      	adds	r2, #4
 8003cb6:	605a      	str	r2, [r3, #4]
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	1d1a      	adds	r2, r3, #4
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4413      	add	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4a25      	ldr	r2, [pc, #148]	; (8003d64 <xTaskRemoveFromEventList+0x19c>)
 8003cce:	441a      	add	r2, r3
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	615a      	str	r2, [r3, #20]
 8003cd4:	6a3b      	ldr	r3, [r7, #32]
 8003cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd8:	4922      	ldr	r1, [pc, #136]	; (8003d64 <xTaskRemoveFromEventList+0x19c>)
 8003cda:	4613      	mov	r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	4413      	add	r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1c59      	adds	r1, r3, #1
 8003ce8:	481e      	ldr	r0, [pc, #120]	; (8003d64 <xTaskRemoveFromEventList+0x19c>)
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4403      	add	r3, r0
 8003cf4:	6019      	str	r1, [r3, #0]
 8003cf6:	e01b      	b.n	8003d30 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003cf8:	4b1b      	ldr	r3, [pc, #108]	; (8003d68 <xTaskRemoveFromEventList+0x1a0>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	61bb      	str	r3, [r7, #24]
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	61da      	str	r2, [r3, #28]
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	6a3b      	ldr	r3, [r7, #32]
 8003d0a:	621a      	str	r2, [r3, #32]
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	6a3a      	ldr	r2, [r7, #32]
 8003d12:	3218      	adds	r2, #24
 8003d14:	605a      	str	r2, [r3, #4]
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	f103 0218 	add.w	r2, r3, #24
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	609a      	str	r2, [r3, #8]
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	4a11      	ldr	r2, [pc, #68]	; (8003d68 <xTaskRemoveFromEventList+0x1a0>)
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
 8003d26:	4b10      	ldr	r3, [pc, #64]	; (8003d68 <xTaskRemoveFromEventList+0x1a0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	4a0e      	ldr	r2, [pc, #56]	; (8003d68 <xTaskRemoveFromEventList+0x1a0>)
 8003d2e:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d30:	6a3b      	ldr	r3, [r7, #32]
 8003d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <xTaskRemoveFromEventList+0x1a4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d905      	bls.n	8003d4a <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003d42:	4b0b      	ldr	r3, [pc, #44]	; (8003d70 <xTaskRemoveFromEventList+0x1a8>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	e001      	b.n	8003d4e <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	372c      	adds	r7, #44	; 0x2c
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	2000020c 	.word	0x2000020c
 8003d60:	200001ec 	.word	0x200001ec
 8003d64:	20000110 	.word	0x20000110
 8003d68:	200001a4 	.word	0x200001a4
 8003d6c:	2000010c 	.word	0x2000010c
 8003d70:	200001f8 	.word	0x200001f8

08003d74 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d7c:	4b06      	ldr	r3, [pc, #24]	; (8003d98 <vTaskInternalSetTimeOutState+0x24>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <vTaskInternalSetTimeOutState+0x28>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	605a      	str	r2, [r3, #4]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	200001fc 	.word	0x200001fc
 8003d9c:	200001e8 	.word	0x200001e8

08003da0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10a      	bne.n	8003dc6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	613b      	str	r3, [r7, #16]
    }
 8003dc2:	bf00      	nop
 8003dc4:	e7fe      	b.n	8003dc4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	60fb      	str	r3, [r7, #12]
    }
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003de2:	f000 feb9 	bl	8004b58 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003de6:	4b1f      	ldr	r3, [pc, #124]	; (8003e64 <xTaskCheckForTimeOut+0xc4>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	d102      	bne.n	8003e06 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	e026      	b.n	8003e54 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <xTaskCheckForTimeOut+0xc8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d00a      	beq.n	8003e28 <xTaskCheckForTimeOut+0x88>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d305      	bcc.n	8003e28 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2200      	movs	r2, #0
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	e015      	b.n	8003e54 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d20b      	bcs.n	8003e4a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	1ad2      	subs	r2, r2, r3
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff ff98 	bl	8003d74 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	e004      	b.n	8003e54 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003e54:	f000 feb0 	bl	8004bb8 <vPortExitCritical>

    return xReturn;
 8003e58:	69fb      	ldr	r3, [r7, #28]
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200001e8 	.word	0x200001e8
 8003e68:	200001fc 	.word	0x200001fc

08003e6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003e70:	4b03      	ldr	r3, [pc, #12]	; (8003e80 <vTaskMissedYield+0x14>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
}
 8003e76:	bf00      	nop
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr
 8003e80:	200001f8 	.word	0x200001f8

08003e84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003e8c:	f000 f852 	bl	8003f34 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <prvIdleTask+0x28>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d9f9      	bls.n	8003e8c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003e98:	4b05      	ldr	r3, [pc, #20]	; (8003eb0 <prvIdleTask+0x2c>)
 8003e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003ea8:	e7f0      	b.n	8003e8c <prvIdleTask+0x8>
 8003eaa:	bf00      	nop
 8003eac:	20000110 	.word	0x20000110
 8003eb0:	e000ed04 	.word	0xe000ed04

08003eb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]
 8003ebe:	e00c      	b.n	8003eda <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <prvInitialiseTaskLists+0x60>)
 8003ecc:	4413      	add	r3, r2
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f7fe fc12 	bl	80026f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	607b      	str	r3, [r7, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b04      	cmp	r3, #4
 8003ede:	d9ef      	bls.n	8003ec0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003ee0:	480d      	ldr	r0, [pc, #52]	; (8003f18 <prvInitialiseTaskLists+0x64>)
 8003ee2:	f7fe fc09 	bl	80026f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ee6:	480d      	ldr	r0, [pc, #52]	; (8003f1c <prvInitialiseTaskLists+0x68>)
 8003ee8:	f7fe fc06 	bl	80026f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003eec:	480c      	ldr	r0, [pc, #48]	; (8003f20 <prvInitialiseTaskLists+0x6c>)
 8003eee:	f7fe fc03 	bl	80026f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003ef2:	480c      	ldr	r0, [pc, #48]	; (8003f24 <prvInitialiseTaskLists+0x70>)
 8003ef4:	f7fe fc00 	bl	80026f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003ef8:	480b      	ldr	r0, [pc, #44]	; (8003f28 <prvInitialiseTaskLists+0x74>)
 8003efa:	f7fe fbfd 	bl	80026f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003efe:	4b0b      	ldr	r3, [pc, #44]	; (8003f2c <prvInitialiseTaskLists+0x78>)
 8003f00:	4a05      	ldr	r2, [pc, #20]	; (8003f18 <prvInitialiseTaskLists+0x64>)
 8003f02:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f04:	4b0a      	ldr	r3, [pc, #40]	; (8003f30 <prvInitialiseTaskLists+0x7c>)
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <prvInitialiseTaskLists+0x68>)
 8003f08:	601a      	str	r2, [r3, #0]
}
 8003f0a:	bf00      	nop
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000110 	.word	0x20000110
 8003f18:	20000174 	.word	0x20000174
 8003f1c:	20000188 	.word	0x20000188
 8003f20:	200001a4 	.word	0x200001a4
 8003f24:	200001b8 	.word	0x200001b8
 8003f28:	200001d0 	.word	0x200001d0
 8003f2c:	2000019c 	.word	0x2000019c
 8003f30:	200001a0 	.word	0x200001a0

08003f34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f3a:	e019      	b.n	8003f70 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003f3c:	f000 fe0c 	bl	8004b58 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f40:	4b10      	ldr	r3, [pc, #64]	; (8003f84 <prvCheckTasksWaitingTermination+0x50>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fc39 	bl	80027c4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003f52:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <prvCheckTasksWaitingTermination+0x54>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	4a0b      	ldr	r2, [pc, #44]	; (8003f88 <prvCheckTasksWaitingTermination+0x54>)
 8003f5a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <prvCheckTasksWaitingTermination+0x58>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	4a0a      	ldr	r2, [pc, #40]	; (8003f8c <prvCheckTasksWaitingTermination+0x58>)
 8003f64:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003f66:	f000 fe27 	bl	8004bb8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f810 	bl	8003f90 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003f70:	4b06      	ldr	r3, [pc, #24]	; (8003f8c <prvCheckTasksWaitingTermination+0x58>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1e1      	bne.n	8003f3c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	3708      	adds	r7, #8
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	200001b8 	.word	0x200001b8
 8003f88:	200001e4 	.word	0x200001e4
 8003f8c:	200001cc 	.word	0x200001cc

08003f90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 ffdd 	bl	8004f5c <vPortFree>
                vPortFree( pxTCB );
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 ffda 	bl	8004f5c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003fa8:	bf00      	nop
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fb4:	4b0a      	ldr	r3, [pc, #40]	; (8003fe0 <prvResetNextTaskUnblockTime+0x30>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d104      	bne.n	8003fc8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003fbe:	4b09      	ldr	r3, [pc, #36]	; (8003fe4 <prvResetNextTaskUnblockTime+0x34>)
 8003fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003fc6:	e005      	b.n	8003fd4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fc8:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <prvResetNextTaskUnblockTime+0x30>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68db      	ldr	r3, [r3, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <prvResetNextTaskUnblockTime+0x34>)
 8003fd2:	6013      	str	r3, [r2, #0]
}
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	2000019c 	.word	0x2000019c
 8003fe4:	20000204 	.word	0x20000204

08003fe8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003fee:	4b0b      	ldr	r3, [pc, #44]	; (800401c <xTaskGetSchedulerState+0x34>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	e008      	b.n	800400e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ffc:	4b08      	ldr	r3, [pc, #32]	; (8004020 <xTaskGetSchedulerState+0x38>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d102      	bne.n	800400a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004004:	2302      	movs	r3, #2
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	e001      	b.n	800400e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800400e:	687b      	ldr	r3, [r7, #4]
    }
 8004010:	4618      	mov	r0, r3
 8004012:	370c      	adds	r7, #12
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	200001f0 	.word	0x200001f0
 8004020:	2000020c 	.word	0x2000020c

08004024 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004030:	2300      	movs	r3, #0
 8004032:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8087 	beq.w	800414a <xTaskPriorityInherit+0x126>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004040:	4b44      	ldr	r3, [pc, #272]	; (8004154 <xTaskPriorityInherit+0x130>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004046:	429a      	cmp	r2, r3
 8004048:	d276      	bcs.n	8004138 <xTaskPriorityInherit+0x114>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b00      	cmp	r3, #0
 8004050:	db06      	blt.n	8004060 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004052:	4b40      	ldr	r3, [pc, #256]	; (8004154 <xTaskPriorityInherit+0x130>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004058:	f1c3 0205 	rsb	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	6959      	ldr	r1, [r3, #20]
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004068:	4613      	mov	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	4413      	add	r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4a39      	ldr	r2, [pc, #228]	; (8004158 <xTaskPriorityInherit+0x134>)
 8004072:	4413      	add	r3, r2
 8004074:	4299      	cmp	r1, r3
 8004076:	d157      	bne.n	8004128 <xTaskPriorityInherit+0x104>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	3304      	adds	r3, #4
 800407c:	4618      	mov	r0, r3
 800407e:	f7fe fba1 	bl	80027c4 <uxListRemove>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	2201      	movs	r2, #1
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43da      	mvns	r2, r3
 8004094:	4b31      	ldr	r3, [pc, #196]	; (800415c <xTaskPriorityInherit+0x138>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4013      	ands	r3, r2
 800409a:	4a30      	ldr	r2, [pc, #192]	; (800415c <xTaskPriorityInherit+0x138>)
 800409c:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800409e:	4b2d      	ldr	r3, [pc, #180]	; (8004154 <xTaskPriorityInherit+0x130>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	62da      	str	r2, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	2201      	movs	r2, #1
 80040ae:	409a      	lsls	r2, r3
 80040b0:	4b2a      	ldr	r3, [pc, #168]	; (800415c <xTaskPriorityInherit+0x138>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	4a29      	ldr	r2, [pc, #164]	; (800415c <xTaskPriorityInherit+0x138>)
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040be:	4926      	ldr	r1, [pc, #152]	; (8004158 <xTaskPriorityInherit+0x134>)
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	3304      	adds	r3, #4
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60fb      	str	r3, [r7, #12]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689a      	ldr	r2, [r3, #8]
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	60da      	str	r2, [r3, #12]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	3204      	adds	r2, #4
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	609a      	str	r2, [r3, #8]
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4a16      	ldr	r2, [pc, #88]	; (8004158 <xTaskPriorityInherit+0x134>)
 80040fe:	441a      	add	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	615a      	str	r2, [r3, #20]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004108:	4913      	ldr	r1, [pc, #76]	; (8004158 <xTaskPriorityInherit+0x134>)
 800410a:	4613      	mov	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	4413      	add	r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	1c59      	adds	r1, r3, #1
 8004118:	480f      	ldr	r0, [pc, #60]	; (8004158 <xTaskPriorityInherit+0x134>)
 800411a:	4613      	mov	r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	4413      	add	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4403      	add	r3, r0
 8004124:	6019      	str	r1, [r3, #0]
 8004126:	e004      	b.n	8004132 <xTaskPriorityInherit+0x10e>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004128:	4b0a      	ldr	r3, [pc, #40]	; (8004154 <xTaskPriorityInherit+0x130>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	62da      	str	r2, [r3, #44]	; 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8004132:	2301      	movs	r3, #1
 8004134:	617b      	str	r3, [r7, #20]
 8004136:	e008      	b.n	800414a <xTaskPriorityInherit+0x126>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <xTaskPriorityInherit+0x130>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004142:	429a      	cmp	r2, r3
 8004144:	d201      	bcs.n	800414a <xTaskPriorityInherit+0x126>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8004146:	2301      	movs	r3, #1
 8004148:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800414a:	697b      	ldr	r3, [r7, #20]
    }
 800414c:	4618      	mov	r0, r3
 800414e:	3718      	adds	r7, #24
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}
 8004154:	2000010c 	.word	0x2000010c
 8004158:	20000110 	.word	0x20000110
 800415c:	200001ec 	.word	0x200001ec

08004160 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004160:	b580      	push	{r7, lr}
 8004162:	b08a      	sub	sp, #40	; 0x28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800416e:	2301      	movs	r3, #1
 8004170:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80a1 	beq.w	80042bc <vTaskPriorityDisinheritAfterTimeout+0x15c>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800417a:	6a3b      	ldr	r3, [r7, #32]
 800417c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10a      	bne.n	8004198 <vTaskPriorityDisinheritAfterTimeout+0x38>
        __asm volatile
 8004182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004186:	f383 8811 	msr	BASEPRI, r3
 800418a:	f3bf 8f6f 	isb	sy
 800418e:	f3bf 8f4f 	dsb	sy
 8004192:	613b      	str	r3, [r7, #16]
    }
 8004194:	bf00      	nop
 8004196:	e7fe      	b.n	8004196 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	429a      	cmp	r2, r3
 80041a0:	d902      	bls.n	80041a8 <vTaskPriorityDisinheritAfterTimeout+0x48>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	627b      	str	r3, [r7, #36]	; 0x24
 80041a6:	e002      	b.n	80041ae <vTaskPriorityDisinheritAfterTimeout+0x4e>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ac:	627b      	str	r3, [r7, #36]	; 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 80041ae:	6a3b      	ldr	r3, [r7, #32]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b4:	429a      	cmp	r2, r3
 80041b6:	f000 8081 	beq.w	80042bc <vTaskPriorityDisinheritAfterTimeout+0x15c>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d17b      	bne.n	80042bc <vTaskPriorityDisinheritAfterTimeout+0x15c>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80041c4:	4b3f      	ldr	r3, [pc, #252]	; (80042c4 <vTaskPriorityDisinheritAfterTimeout+0x164>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6a3a      	ldr	r2, [r7, #32]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d10a      	bne.n	80041e4 <vTaskPriorityDisinheritAfterTimeout+0x84>
        __asm volatile
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	60fb      	str	r3, [r7, #12]
    }
 80041e0:	bf00      	nop
 80041e2:	e7fe      	b.n	80041e2 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e8:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ee:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	699b      	ldr	r3, [r3, #24]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db04      	blt.n	8004202 <vTaskPriorityDisinheritAfterTimeout+0xa2>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fa:	f1c3 0205 	rsb	r2, r3, #5
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	6959      	ldr	r1, [r3, #20]
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4a2d      	ldr	r2, [pc, #180]	; (80042c8 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004212:	4413      	add	r3, r2
 8004214:	4299      	cmp	r1, r3
 8004216:	d151      	bne.n	80042bc <vTaskPriorityDisinheritAfterTimeout+0x15c>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	3304      	adds	r3, #4
 800421c:	4618      	mov	r0, r3
 800421e:	f7fe fad1 	bl	80027c4 <uxListRemove>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <vTaskPriorityDisinheritAfterTimeout+0xde>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422c:	2201      	movs	r2, #1
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43da      	mvns	r2, r3
 8004234:	4b25      	ldr	r3, [pc, #148]	; (80042cc <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4013      	ands	r3, r2
 800423a:	4a24      	ldr	r2, [pc, #144]	; (80042cc <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800423c:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	2201      	movs	r2, #1
 8004244:	409a      	lsls	r2, r3
 8004246:	4b21      	ldr	r3, [pc, #132]	; (80042cc <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	4a1f      	ldr	r2, [pc, #124]	; (80042cc <vTaskPriorityDisinheritAfterTimeout+0x16c>)
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	491c      	ldr	r1, [pc, #112]	; (80042c8 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004256:	4613      	mov	r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	3304      	adds	r3, #4
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	617b      	str	r3, [r7, #20]
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	609a      	str	r2, [r3, #8]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	60da      	str	r2, [r3, #12]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	6a3a      	ldr	r2, [r7, #32]
 800427a:	3204      	adds	r2, #4
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	1d1a      	adds	r2, r3, #4
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	609a      	str	r2, [r3, #8]
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 8004294:	441a      	add	r2, r3
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	615a      	str	r2, [r3, #20]
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429e:	490a      	ldr	r1, [pc, #40]	; (80042c8 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	440b      	add	r3, r1
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	1c59      	adds	r1, r3, #1
 80042ae:	4806      	ldr	r0, [pc, #24]	; (80042c8 <vTaskPriorityDisinheritAfterTimeout+0x168>)
 80042b0:	4613      	mov	r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4403      	add	r3, r0
 80042ba:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80042bc:	bf00      	nop
 80042be:	3728      	adds	r7, #40	; 0x28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	2000010c 	.word	0x2000010c
 80042c8:	20000110 	.word	0x20000110
 80042cc:	200001ec 	.word	0x200001ec

080042d0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80042d4:	4b07      	ldr	r3, [pc, #28]	; (80042f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80042dc:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042e2:	3201      	adds	r2, #1
 80042e4:	64da      	str	r2, [r3, #76]	; 0x4c
        }

        return pxCurrentTCB;
 80042e6:	4b03      	ldr	r3, [pc, #12]	; (80042f4 <pvTaskIncrementMutexHeldCount+0x24>)
 80042e8:	681b      	ldr	r3, [r3, #0]
    }
 80042ea:	4618      	mov	r0, r3
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr
 80042f4:	2000010c 	.word	0x2000010c

080042f8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004302:	4b36      	ldr	r3, [pc, #216]	; (80043dc <prvAddCurrentTaskToDelayedList+0xe4>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004308:	4b35      	ldr	r3, [pc, #212]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3304      	adds	r3, #4
 800430e:	4618      	mov	r0, r3
 8004310:	f7fe fa58 	bl	80027c4 <uxListRemove>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800431a:	4b31      	ldr	r3, [pc, #196]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	2201      	movs	r2, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43da      	mvns	r2, r3
 8004328:	4b2e      	ldr	r3, [pc, #184]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xec>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4013      	ands	r3, r2
 800432e:	4a2d      	ldr	r2, [pc, #180]	; (80043e4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004330:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d124      	bne.n	8004384 <prvAddCurrentTaskToDelayedList+0x8c>
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d021      	beq.n	8004384 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004340:	4b29      	ldr	r3, [pc, #164]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	4b26      	ldr	r3, [pc, #152]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	609a      	str	r2, [r3, #8]
 800434e:	4b24      	ldr	r3, [pc, #144]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	6892      	ldr	r2, [r2, #8]
 8004356:	60da      	str	r2, [r3, #12]
 8004358:	4b21      	ldr	r3, [pc, #132]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	3204      	adds	r2, #4
 8004362:	605a      	str	r2, [r3, #4]
 8004364:	4b1e      	ldr	r3, [pc, #120]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	1d1a      	adds	r2, r3, #4
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	609a      	str	r2, [r3, #8]
 800436e:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004374:	615a      	str	r2, [r3, #20]
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3301      	adds	r3, #1
 800437c:	4a1a      	ldr	r2, [pc, #104]	; (80043e8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004382:	e026      	b.n	80043d2 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	429a      	cmp	r2, r3
 800439a:	d209      	bcs.n	80043b0 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800439c:	4b13      	ldr	r3, [pc, #76]	; (80043ec <prvAddCurrentTaskToDelayedList+0xf4>)
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	4b0f      	ldr	r3, [pc, #60]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f7fe f9d2 	bl	8002752 <vListInsert>
}
 80043ae:	e010      	b.n	80043d2 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <prvAddCurrentTaskToDelayedList+0xf8>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3304      	adds	r3, #4
 80043ba:	4619      	mov	r1, r3
 80043bc:	4610      	mov	r0, r2
 80043be:	f7fe f9c8 	bl	8002752 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80043c2:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d202      	bcs.n	80043d2 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80043cc:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6013      	str	r3, [r2, #0]
}
 80043d2:	bf00      	nop
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	200001e8 	.word	0x200001e8
 80043e0:	2000010c 	.word	0x2000010c
 80043e4:	200001ec 	.word	0x200001ec
 80043e8:	200001d0 	.word	0x200001d0
 80043ec:	200001a0 	.word	0x200001a0
 80043f0:	2000019c 	.word	0x2000019c
 80043f4:	20000204 	.word	0x20000204

080043f8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80043fe:	2300      	movs	r3, #0
 8004400:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8004402:	f000 fa47 	bl	8004894 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8004406:	4b11      	ldr	r3, [pc, #68]	; (800444c <xTimerCreateTimerTask+0x54>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00b      	beq.n	8004426 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800440e:	4b10      	ldr	r3, [pc, #64]	; (8004450 <xTimerCreateTimerTask+0x58>)
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	2302      	movs	r3, #2
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	2300      	movs	r3, #0
 8004418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800441c:	490d      	ldr	r1, [pc, #52]	; (8004454 <xTimerCreateTimerTask+0x5c>)
 800441e:	480e      	ldr	r0, [pc, #56]	; (8004458 <xTimerCreateTimerTask+0x60>)
 8004420:	f7fe feda 	bl	80031d8 <xTaskCreate>
 8004424:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10a      	bne.n	8004442 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800442c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004430:	f383 8811 	msr	BASEPRI, r3
 8004434:	f3bf 8f6f 	isb	sy
 8004438:	f3bf 8f4f 	dsb	sy
 800443c:	603b      	str	r3, [r7, #0]
    }
 800443e:	bf00      	nop
 8004440:	e7fe      	b.n	8004440 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004442:	687b      	ldr	r3, [r7, #4]
    }
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000240 	.word	0x20000240
 8004450:	20000244 	.word	0x20000244
 8004454:	08005348 	.word	0x08005348
 8004458:	08004501 	.word	0x08004501

0800445c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004468:	e008      	b.n	800447c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	4413      	add	r3, r2
 8004472:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	699a      	ldr	r2, [r3, #24]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	18d1      	adds	r1, r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f8dd 	bl	8004648 <prvInsertTimerInActiveList>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1ea      	bne.n	800446a <prvReloadTimer+0xe>
        }
    }
 8004494:	bf00      	nop
 8004496:	bf00      	nop
 8004498:	3710      	adds	r7, #16
 800449a:	46bd      	mov	sp, r7
 800449c:	bd80      	pop	{r7, pc}
	...

080044a0 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044aa:	4b14      	ldr	r3, [pc, #80]	; (80044fc <prvProcessExpiredTimer+0x5c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7fe f983 	bl	80027c4 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d005      	beq.n	80044d8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	6879      	ldr	r1, [r7, #4]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f7ff ffc3 	bl	800445c <prvReloadTimer>
 80044d6:	e008      	b.n	80044ea <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	b2da      	uxtb	r2, r3
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	68f8      	ldr	r0, [r7, #12]
 80044f0:	4798      	blx	r3
    }
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20000238 	.word	0x20000238

08004500 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004500:	b580      	push	{r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004508:	f107 0308 	add.w	r3, r7, #8
 800450c:	4618      	mov	r0, r3
 800450e:	f000 f857 	bl	80045c0 <prvGetNextExpireTime>
 8004512:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4619      	mov	r1, r3
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	f000 f803 	bl	8004524 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800451e:	f000 f8d5 	bl	80046cc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004522:	e7f1      	b.n	8004508 <prvTimerTask+0x8>

08004524 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800452e:	f7ff f855 	bl	80035dc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004532:	f107 0308 	add.w	r3, r7, #8
 8004536:	4618      	mov	r0, r3
 8004538:	f000 f866 	bl	8004608 <prvSampleTimeNow>
 800453c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d130      	bne.n	80045a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d10a      	bne.n	8004560 <prvProcessTimerOrBlockTask+0x3c>
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	429a      	cmp	r2, r3
 8004550:	d806      	bhi.n	8004560 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004552:	f7ff f851 	bl	80035f8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff ffa1 	bl	80044a0 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800455e:	e024      	b.n	80045aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004566:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <prvProcessTimerOrBlockTask+0x90>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <prvProcessTimerOrBlockTask+0x50>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <prvProcessTimerOrBlockTask+0x52>
 8004574:	2300      	movs	r3, #0
 8004576:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004578:	4b0f      	ldr	r3, [pc, #60]	; (80045b8 <prvProcessTimerOrBlockTask+0x94>)
 800457a:	6818      	ldr	r0, [r3, #0]
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	4619      	mov	r1, r3
 8004586:	f7fe fdf3 	bl	8003170 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800458a:	f7ff f835 	bl	80035f8 <xTaskResumeAll>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004594:	4b09      	ldr	r3, [pc, #36]	; (80045bc <prvProcessTimerOrBlockTask+0x98>)
 8004596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	f3bf 8f6f 	isb	sy
    }
 80045a4:	e001      	b.n	80045aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80045a6:	f7ff f827 	bl	80035f8 <xTaskResumeAll>
    }
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	2000023c 	.word	0x2000023c
 80045b8:	20000240 	.word	0x20000240
 80045bc:	e000ed04 	.word	0xe000ed04

080045c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <prvGetNextExpireTime+0x44>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d101      	bne.n	80045d6 <prvGetNextExpireTime+0x16>
 80045d2:	2201      	movs	r2, #1
 80045d4:	e000      	b.n	80045d8 <prvGetNextExpireTime+0x18>
 80045d6:	2200      	movs	r2, #0
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d105      	bne.n	80045f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <prvGetNextExpireTime+0x44>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	e001      	b.n	80045f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80045f0:	2300      	movs	r3, #0
 80045f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80045f4:	68fb      	ldr	r3, [r7, #12]
    }
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000238 	.word	0x20000238

08004608 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004610:	f7ff f8ee 	bl	80037f0 <xTaskGetTickCount>
 8004614:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004616:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <prvSampleTimeNow+0x3c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68fa      	ldr	r2, [r7, #12]
 800461c:	429a      	cmp	r2, r3
 800461e:	d205      	bcs.n	800462c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004620:	f000 f912 	bl	8004848 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	e002      	b.n	8004632 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004632:	4a04      	ldr	r2, [pc, #16]	; (8004644 <prvSampleTimeNow+0x3c>)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004638:	68fb      	ldr	r3, [r7, #12]
    }
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000248 	.word	0x20000248

08004648 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	429a      	cmp	r2, r3
 800466c:	d812      	bhi.n	8004694 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	1ad2      	subs	r2, r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	429a      	cmp	r2, r3
 800467a:	d302      	bcc.n	8004682 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800467c:	2301      	movs	r3, #1
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e01b      	b.n	80046ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004682:	4b10      	ldr	r3, [pc, #64]	; (80046c4 <prvInsertTimerInActiveList+0x7c>)
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f7fe f860 	bl	8002752 <vListInsert>
 8004692:	e012      	b.n	80046ba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d206      	bcs.n	80046aa <prvInsertTimerInActiveList+0x62>
 800469c:	68ba      	ldr	r2, [r7, #8]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d302      	bcc.n	80046aa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80046a4:	2301      	movs	r3, #1
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	e007      	b.n	80046ba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80046aa:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <prvInsertTimerInActiveList+0x80>)
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3304      	adds	r3, #4
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f7fe f84c 	bl	8002752 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80046ba:	697b      	ldr	r3, [r7, #20]
    }
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	2000023c 	.word	0x2000023c
 80046c8:	20000238 	.word	0x20000238

080046cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046d2:	e0a6      	b.n	8004822 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f2c0 80a2 	blt.w	8004820 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	695b      	ldr	r3, [r3, #20]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d004      	beq.n	80046f2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7fe f869 	bl	80027c4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff87 	bl	8004608 <prvSampleTimeNow>
 80046fa:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	3b01      	subs	r3, #1
 8004700:	2b08      	cmp	r3, #8
 8004702:	f200 808e 	bhi.w	8004822 <prvProcessReceivedCommands+0x156>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <prvProcessReceivedCommands+0x40>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004731 	.word	0x08004731
 8004710:	08004731 	.word	0x08004731
 8004714:	08004799 	.word	0x08004799
 8004718:	080047ad 	.word	0x080047ad
 800471c:	080047f7 	.word	0x080047f7
 8004720:	08004731 	.word	0x08004731
 8004724:	08004731 	.word	0x08004731
 8004728:	08004799 	.word	0x08004799
 800472c:	080047ad 	.word	0x080047ad
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	18d1      	adds	r1, r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	69f8      	ldr	r0, [r7, #28]
 8004750:	f7ff ff7a 	bl	8004648 <prvInsertTimerInActiveList>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d063      	beq.n	8004822 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d009      	beq.n	800477c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	4413      	add	r3, r2
 8004770:	69ba      	ldr	r2, [r7, #24]
 8004772:	4619      	mov	r1, r3
 8004774:	69f8      	ldr	r0, [r7, #28]
 8004776:	f7ff fe71 	bl	800445c <prvReloadTimer>
 800477a:	e008      	b.n	800478e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004782:	f023 0301 	bic.w	r3, r3, #1
 8004786:	b2da      	uxtb	r2, r3
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	69f8      	ldr	r0, [r7, #28]
 8004794:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004796:	e044      	b.n	8004822 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800479e:	f023 0301 	bic.w	r3, r3, #1
 80047a2:	b2da      	uxtb	r2, r3
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80047aa:	e03a      	b.n	8004822 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047b2:	f043 0301 	orr.w	r3, r3, #1
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	617b      	str	r3, [r7, #20]
    }
 80047de:	bf00      	nop
 80047e0:	e7fe      	b.n	80047e0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	699a      	ldr	r2, [r3, #24]
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	18d1      	adds	r1, r2, r3
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	69f8      	ldr	r0, [r7, #28]
 80047f0:	f7ff ff2a 	bl	8004648 <prvInsertTimerInActiveList>
                        break;
 80047f4:	e015      	b.n	8004822 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047fc:	f003 0302 	and.w	r3, r3, #2
 8004800:	2b00      	cmp	r3, #0
 8004802:	d103      	bne.n	800480c <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8004804:	69f8      	ldr	r0, [r7, #28]
 8004806:	f000 fba9 	bl	8004f5c <vPortFree>
 800480a:	e00a      	b.n	8004822 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004812:	f023 0301 	bic.w	r3, r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800481e:	e000      	b.n	8004822 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8004820:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004822:	4b08      	ldr	r3, [pc, #32]	; (8004844 <prvProcessReceivedCommands+0x178>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f107 0108 	add.w	r1, r7, #8
 800482a:	2200      	movs	r2, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f7fe f9bf 	bl	8002bb0 <xQueueReceive>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	f47f af4d 	bne.w	80046d4 <prvProcessReceivedCommands+0x8>
        }
    }
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	3720      	adds	r7, #32
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	20000240 	.word	0x20000240

08004848 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800484e:	e009      	b.n	8004864 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004850:	4b0e      	ldr	r3, [pc, #56]	; (800488c <prvSwitchTimerLists+0x44>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800485a:	f04f 31ff 	mov.w	r1, #4294967295
 800485e:	6838      	ldr	r0, [r7, #0]
 8004860:	f7ff fe1e 	bl	80044a0 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <prvSwitchTimerLists+0x44>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f0      	bne.n	8004850 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800486e:	4b07      	ldr	r3, [pc, #28]	; (800488c <prvSwitchTimerLists+0x44>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <prvSwitchTimerLists+0x48>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a04      	ldr	r2, [pc, #16]	; (800488c <prvSwitchTimerLists+0x44>)
 800487a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800487c:	4a04      	ldr	r2, [pc, #16]	; (8004890 <prvSwitchTimerLists+0x48>)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6013      	str	r3, [r2, #0]
    }
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	20000238 	.word	0x20000238
 8004890:	2000023c 	.word	0x2000023c

08004894 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004894:	b580      	push	{r7, lr}
 8004896:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004898:	f000 f95e 	bl	8004b58 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800489c:	4b12      	ldr	r3, [pc, #72]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d11d      	bne.n	80048e0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80048a4:	4811      	ldr	r0, [pc, #68]	; (80048ec <prvCheckForValidListAndQueue+0x58>)
 80048a6:	f7fd ff27 	bl	80026f8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80048aa:	4811      	ldr	r0, [pc, #68]	; (80048f0 <prvCheckForValidListAndQueue+0x5c>)
 80048ac:	f7fd ff24 	bl	80026f8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <prvCheckForValidListAndQueue+0x60>)
 80048b2:	4a0e      	ldr	r2, [pc, #56]	; (80048ec <prvCheckForValidListAndQueue+0x58>)
 80048b4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80048b6:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <prvCheckForValidListAndQueue+0x64>)
 80048b8:	4a0d      	ldr	r2, [pc, #52]	; (80048f0 <prvCheckForValidListAndQueue+0x5c>)
 80048ba:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80048bc:	2200      	movs	r2, #0
 80048be:	210c      	movs	r1, #12
 80048c0:	200a      	movs	r0, #10
 80048c2:	f7fe f839 	bl	8002938 <xQueueGenericCreate>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 80048ca:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 80048cc:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80048d4:	4b04      	ldr	r3, [pc, #16]	; (80048e8 <prvCheckForValidListAndQueue+0x54>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4908      	ldr	r1, [pc, #32]	; (80048fc <prvCheckForValidListAndQueue+0x68>)
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe fbfa 	bl	80030d4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80048e0:	f000 f96a 	bl	8004bb8 <vPortExitCritical>
    }
 80048e4:	bf00      	nop
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20000240 	.word	0x20000240
 80048ec:	20000210 	.word	0x20000210
 80048f0:	20000224 	.word	0x20000224
 80048f4:	20000238 	.word	0x20000238
 80048f8:	2000023c 	.word	0x2000023c
 80048fc:	08005350 	.word	0x08005350

08004900 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004900:	b480      	push	{r7}
 8004902:	b085      	sub	sp, #20
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3b04      	subs	r3, #4
 8004910:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004918:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3b04      	subs	r3, #4
 800491e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f023 0201 	bic.w	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3b04      	subs	r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004930:	4a0c      	ldr	r2, [pc, #48]	; (8004964 <pxPortInitialiseStack+0x64>)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	3b14      	subs	r3, #20
 800493a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3b04      	subs	r3, #4
 8004946:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f06f 0202 	mvn.w	r2, #2
 800494e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3b20      	subs	r3, #32
 8004954:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004956:	68fb      	ldr	r3, [r7, #12]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	08004969 	.word	0x08004969

08004968 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800496e:	2300      	movs	r3, #0
 8004970:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004972:	4b12      	ldr	r3, [pc, #72]	; (80049bc <prvTaskExitError+0x54>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497a:	d00a      	beq.n	8004992 <prvTaskExitError+0x2a>
        __asm volatile
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	60fb      	str	r3, [r7, #12]
    }
 800498e:	bf00      	nop
 8004990:	e7fe      	b.n	8004990 <prvTaskExitError+0x28>
        __asm volatile
 8004992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004996:	f383 8811 	msr	BASEPRI, r3
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	f3bf 8f4f 	dsb	sy
 80049a2:	60bb      	str	r3, [r7, #8]
    }
 80049a4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80049a6:	bf00      	nop
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0fc      	beq.n	80049a8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	3714      	adds	r7, #20
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	20000010 	.word	0x20000010

080049c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80049c0:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <pxCurrentTCBConst2>)
 80049c2:	6819      	ldr	r1, [r3, #0]
 80049c4:	6808      	ldr	r0, [r1, #0]
 80049c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049ca:	f380 8809 	msr	PSP, r0
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f04f 0000 	mov.w	r0, #0
 80049d6:	f380 8811 	msr	BASEPRI, r0
 80049da:	4770      	bx	lr
 80049dc:	f3af 8000 	nop.w

080049e0 <pxCurrentTCBConst2>:
 80049e0:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop

080049e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80049e8:	4808      	ldr	r0, [pc, #32]	; (8004a0c <prvPortStartFirstTask+0x24>)
 80049ea:	6800      	ldr	r0, [r0, #0]
 80049ec:	6800      	ldr	r0, [r0, #0]
 80049ee:	f380 8808 	msr	MSP, r0
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f380 8814 	msr	CONTROL, r0
 80049fa:	b662      	cpsie	i
 80049fc:	b661      	cpsie	f
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	df00      	svc	0
 8004a08:	bf00      	nop
 8004a0a:	0000      	.short	0x0000
 8004a0c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004a10:	bf00      	nop
 8004a12:	bf00      	nop

08004a14 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a1a:	4b46      	ldr	r3, [pc, #280]	; (8004b34 <xPortStartScheduler+0x120>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a46      	ldr	r2, [pc, #280]	; (8004b38 <xPortStartScheduler+0x124>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d10a      	bne.n	8004a3a <xPortStartScheduler+0x26>
        __asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	613b      	str	r3, [r7, #16]
    }
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004a3a:	4b3e      	ldr	r3, [pc, #248]	; (8004b34 <xPortStartScheduler+0x120>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a3f      	ldr	r2, [pc, #252]	; (8004b3c <xPortStartScheduler+0x128>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d10a      	bne.n	8004a5a <xPortStartScheduler+0x46>
        __asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	60fb      	str	r3, [r7, #12]
    }
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004a5a:	4b39      	ldr	r3, [pc, #228]	; (8004b40 <xPortStartScheduler+0x12c>)
 8004a5c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	22ff      	movs	r2, #255	; 0xff
 8004a6a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <xPortStartScheduler+0x130>)
 8004a80:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a82:	4b31      	ldr	r3, [pc, #196]	; (8004b48 <xPortStartScheduler+0x134>)
 8004a84:	2207      	movs	r2, #7
 8004a86:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a88:	e009      	b.n	8004a9e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8004a8a:	4b2f      	ldr	r3, [pc, #188]	; (8004b48 <xPortStartScheduler+0x134>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	4a2d      	ldr	r2, [pc, #180]	; (8004b48 <xPortStartScheduler+0x134>)
 8004a92:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a9e:	78fb      	ldrb	r3, [r7, #3]
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d0ef      	beq.n	8004a8a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004aaa:	4b27      	ldr	r3, [pc, #156]	; (8004b48 <xPortStartScheduler+0x134>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f1c3 0307 	rsb	r3, r3, #7
 8004ab2:	2b04      	cmp	r3, #4
 8004ab4:	d00a      	beq.n	8004acc <xPortStartScheduler+0xb8>
        __asm volatile
 8004ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aba:	f383 8811 	msr	BASEPRI, r3
 8004abe:	f3bf 8f6f 	isb	sy
 8004ac2:	f3bf 8f4f 	dsb	sy
 8004ac6:	60bb      	str	r3, [r7, #8]
    }
 8004ac8:	bf00      	nop
 8004aca:	e7fe      	b.n	8004aca <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004acc:	4b1e      	ldr	r3, [pc, #120]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ad4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ade:	4a1a      	ldr	r2, [pc, #104]	; (8004b48 <xPortStartScheduler+0x134>)
 8004ae0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004aea:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <xPortStartScheduler+0x138>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <xPortStartScheduler+0x138>)
 8004af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004af4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004af6:	4b15      	ldr	r3, [pc, #84]	; (8004b4c <xPortStartScheduler+0x138>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a14      	ldr	r2, [pc, #80]	; (8004b4c <xPortStartScheduler+0x138>)
 8004afc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b00:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004b02:	f000 f8db 	bl	8004cbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004b06:	4b12      	ldr	r3, [pc, #72]	; (8004b50 <xPortStartScheduler+0x13c>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004b0c:	f000 f8fa 	bl	8004d04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b10:	4b10      	ldr	r3, [pc, #64]	; (8004b54 <xPortStartScheduler+0x140>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <xPortStartScheduler+0x140>)
 8004b16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b1a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004b1c:	f7ff ff64 	bl	80049e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004b20:	f7fe ff8c 	bl	8003a3c <vTaskSwitchContext>
    prvTaskExitError();
 8004b24:	f7ff ff20 	bl	8004968 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	e000ed00 	.word	0xe000ed00
 8004b38:	410fc271 	.word	0x410fc271
 8004b3c:	410fc270 	.word	0x410fc270
 8004b40:	e000e400 	.word	0xe000e400
 8004b44:	2000024c 	.word	0x2000024c
 8004b48:	20000250 	.word	0x20000250
 8004b4c:	e000ed20 	.word	0xe000ed20
 8004b50:	20000010 	.word	0x20000010
 8004b54:	e000ef34 	.word	0xe000ef34

08004b58 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
        __asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	607b      	str	r3, [r7, #4]
    }
 8004b70:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004b72:	4b0f      	ldr	r3, [pc, #60]	; (8004bb0 <vPortEnterCritical+0x58>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3301      	adds	r3, #1
 8004b78:	4a0d      	ldr	r2, [pc, #52]	; (8004bb0 <vPortEnterCritical+0x58>)
 8004b7a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <vPortEnterCritical+0x58>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d10f      	bne.n	8004ba4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b84:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <vPortEnterCritical+0x5c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <vPortEnterCritical+0x4c>
        __asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	603b      	str	r3, [r7, #0]
    }
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <vPortEnterCritical+0x4a>
    }
}
 8004ba4:	bf00      	nop
 8004ba6:	370c      	adds	r7, #12
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bae:	4770      	bx	lr
 8004bb0:	20000010 	.word	0x20000010
 8004bb4:	e000ed04 	.word	0xe000ed04

08004bb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004bbe:	4b12      	ldr	r3, [pc, #72]	; (8004c08 <vPortExitCritical+0x50>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <vPortExitCritical+0x24>
        __asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	607b      	str	r3, [r7, #4]
    }
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <vPortExitCritical+0x50>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	4a09      	ldr	r2, [pc, #36]	; (8004c08 <vPortExitCritical+0x50>)
 8004be4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004be6:	4b08      	ldr	r3, [pc, #32]	; (8004c08 <vPortExitCritical+0x50>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d105      	bne.n	8004bfa <vPortExitCritical+0x42>
 8004bee:	2300      	movs	r3, #0
 8004bf0:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	f383 8811 	msr	BASEPRI, r3
    }
 8004bf8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000010 	.word	0x20000010
 8004c0c:	00000000 	.word	0x00000000

08004c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004c10:	f3ef 8009 	mrs	r0, PSP
 8004c14:	f3bf 8f6f 	isb	sy
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <pxCurrentTCBConst>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	f01e 0f10 	tst.w	lr, #16
 8004c20:	bf08      	it	eq
 8004c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c2a:	6010      	str	r0, [r2, #0]
 8004c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c34:	f380 8811 	msr	BASEPRI, r0
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	f3bf 8f6f 	isb	sy
 8004c40:	f7fe fefc 	bl	8003a3c <vTaskSwitchContext>
 8004c44:	f04f 0000 	mov.w	r0, #0
 8004c48:	f380 8811 	msr	BASEPRI, r0
 8004c4c:	bc09      	pop	{r0, r3}
 8004c4e:	6819      	ldr	r1, [r3, #0]
 8004c50:	6808      	ldr	r0, [r1, #0]
 8004c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c56:	f01e 0f10 	tst.w	lr, #16
 8004c5a:	bf08      	it	eq
 8004c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004c60:	f380 8809 	msr	PSP, r0
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	f3af 8000 	nop.w

08004c70 <pxCurrentTCBConst>:
 8004c70:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004c74:	bf00      	nop
 8004c76:	bf00      	nop

08004c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
        __asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	607b      	str	r3, [r7, #4]
    }
 8004c90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004c92:	f7fe fdbd 	bl	8003810 <xTaskIncrementTick>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <SysTick_Handler+0x40>)
 8004c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca2:	601a      	str	r2, [r3, #0]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	f383 8811 	msr	BASEPRI, r3
    }
 8004cae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004cb0:	bf00      	nop
 8004cb2:	3708      	adds	r7, #8
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	e000ed04 	.word	0xe000ed04

08004cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	; (8004cf0 <vPortSetupTimerInterrupt+0x34>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	; (8004cf4 <vPortSetupTimerInterrupt+0x38>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <vPortSetupTimerInterrupt+0x3c>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a0a      	ldr	r2, [pc, #40]	; (8004cfc <vPortSetupTimerInterrupt+0x40>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <vPortSetupTimerInterrupt+0x44>)
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004cde:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <vPortSetupTimerInterrupt+0x34>)
 8004ce0:	2207      	movs	r2, #7
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	bf00      	nop
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	e000e010 	.word	0xe000e010
 8004cf4:	e000e018 	.word	0xe000e018
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	10624dd3 	.word	0x10624dd3
 8004d00:	e000e014 	.word	0xe000e014

08004d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d14 <vPortEnableVFP+0x10>
 8004d08:	6801      	ldr	r1, [r0, #0]
 8004d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d0e:	6001      	str	r1, [r0, #0]
 8004d10:	4770      	bx	lr
 8004d12:	0000      	.short	0x0000
 8004d14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop

08004d1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004d22:	f3ef 8305 	mrs	r3, IPSR
 8004d26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b0f      	cmp	r3, #15
 8004d2c:	d914      	bls.n	8004d58 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d2e:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <vPortValidateInterruptPriority+0x70>)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004d38:	4b15      	ldr	r3, [pc, #84]	; (8004d90 <vPortValidateInterruptPriority+0x74>)
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	7afa      	ldrb	r2, [r7, #11]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d20a      	bcs.n	8004d58 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	607b      	str	r3, [r7, #4]
    }
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004d58:	4b0e      	ldr	r3, [pc, #56]	; (8004d94 <vPortValidateInterruptPriority+0x78>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004d60:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <vPortValidateInterruptPriority+0x7c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	429a      	cmp	r2, r3
 8004d66:	d90a      	bls.n	8004d7e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6c:	f383 8811 	msr	BASEPRI, r3
 8004d70:	f3bf 8f6f 	isb	sy
 8004d74:	f3bf 8f4f 	dsb	sy
 8004d78:	603b      	str	r3, [r7, #0]
    }
 8004d7a:	bf00      	nop
 8004d7c:	e7fe      	b.n	8004d7c <vPortValidateInterruptPriority+0x60>
    }
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	e000e3f0 	.word	0xe000e3f0
 8004d90:	2000024c 	.word	0x2000024c
 8004d94:	e000ed0c 	.word	0xe000ed0c
 8004d98:	20000250 	.word	0x20000250

08004d9c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08a      	sub	sp, #40	; 0x28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004da8:	f7fe fc18 	bl	80035dc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004dac:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <pvPortMalloc+0x1a8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004db4:	f000 f934 	bl	8005020 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004db8:	4b63      	ldr	r3, [pc, #396]	; (8004f48 <pvPortMalloc+0x1ac>)
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f040 80a7 	bne.w	8004f14 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d02d      	beq.n	8004e28 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004dcc:	2208      	movs	r2, #8
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d227      	bcs.n	8004e28 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004dd8:	2208      	movs	r2, #8
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f003 0307 	and.w	r3, r3, #7
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d021      	beq.n	8004e2e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f023 0307 	bic.w	r3, r3, #7
 8004df0:	3308      	adds	r3, #8
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d214      	bcs.n	8004e22 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f023 0307 	bic.w	r3, r3, #7
 8004dfe:	3308      	adds	r3, #8
 8004e00:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f003 0307 	and.w	r3, r3, #7
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d010      	beq.n	8004e2e <pvPortMalloc+0x92>
        __asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	617b      	str	r3, [r7, #20]
    }
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e26:	e002      	b.n	8004e2e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	607b      	str	r3, [r7, #4]
 8004e2c:	e000      	b.n	8004e30 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e2e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d06e      	beq.n	8004f14 <pvPortMalloc+0x178>
 8004e36:	4b45      	ldr	r3, [pc, #276]	; (8004f4c <pvPortMalloc+0x1b0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d869      	bhi.n	8004f14 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004e40:	4b43      	ldr	r3, [pc, #268]	; (8004f50 <pvPortMalloc+0x1b4>)
 8004e42:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004e44:	4b42      	ldr	r3, [pc, #264]	; (8004f50 <pvPortMalloc+0x1b4>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e4a:	e004      	b.n	8004e56 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8004e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d903      	bls.n	8004e68 <pvPortMalloc+0xcc>
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f1      	bne.n	8004e4c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004e68:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <pvPortMalloc+0x1a8>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d050      	beq.n	8004f14 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2208      	movs	r2, #8
 8004e78:	4413      	add	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1ad2      	subs	r2, r2, r3
 8004e8c:	2308      	movs	r3, #8
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d91f      	bls.n	8004ed4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4413      	add	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f003 0307 	and.w	r3, r3, #7
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <pvPortMalloc+0x120>
        __asm volatile
 8004ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eaa:	f383 8811 	msr	BASEPRI, r3
 8004eae:	f3bf 8f6f 	isb	sy
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	613b      	str	r3, [r7, #16]
    }
 8004eb8:	bf00      	nop
 8004eba:	e7fe      	b.n	8004eba <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	1ad2      	subs	r2, r2, r3
 8004ec4:	69bb      	ldr	r3, [r7, #24]
 8004ec6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ece:	69b8      	ldr	r0, [r7, #24]
 8004ed0:	f000 f908 	bl	80050e4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ed4:	4b1d      	ldr	r3, [pc, #116]	; (8004f4c <pvPortMalloc+0x1b0>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	4a1b      	ldr	r2, [pc, #108]	; (8004f4c <pvPortMalloc+0x1b0>)
 8004ee0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ee2:	4b1a      	ldr	r3, [pc, #104]	; (8004f4c <pvPortMalloc+0x1b0>)
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <pvPortMalloc+0x1b8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d203      	bcs.n	8004ef6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004eee:	4b17      	ldr	r3, [pc, #92]	; (8004f4c <pvPortMalloc+0x1b0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <pvPortMalloc+0x1b8>)
 8004ef4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	4b13      	ldr	r3, [pc, #76]	; (8004f48 <pvPortMalloc+0x1ac>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f0a:	4b13      	ldr	r3, [pc, #76]	; (8004f58 <pvPortMalloc+0x1bc>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	4a11      	ldr	r2, [pc, #68]	; (8004f58 <pvPortMalloc+0x1bc>)
 8004f12:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004f14:	f7fe fb70 	bl	80035f8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <pvPortMalloc+0x19c>
        __asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	60fb      	str	r3, [r7, #12]
    }
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <pvPortMalloc+0x19a>
    return pvReturn;
 8004f38:	69fb      	ldr	r3, [r7, #28]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3728      	adds	r7, #40	; 0x28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20012e5c 	.word	0x20012e5c
 8004f48:	20012e70 	.word	0x20012e70
 8004f4c:	20012e60 	.word	0x20012e60
 8004f50:	20012e54 	.word	0x20012e54
 8004f54:	20012e64 	.word	0x20012e64
 8004f58:	20012e68 	.word	0x20012e68

08004f5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d04d      	beq.n	800500a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004f6e:	2308      	movs	r3, #8
 8004f70:	425b      	negs	r3, r3
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4413      	add	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	4b24      	ldr	r3, [pc, #144]	; (8005014 <vPortFree+0xb8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4013      	ands	r3, r2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10a      	bne.n	8004fa0 <vPortFree+0x44>
        __asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	60fb      	str	r3, [r7, #12]
    }
 8004f9c:	bf00      	nop
 8004f9e:	e7fe      	b.n	8004f9e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <vPortFree+0x62>
        __asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	60bb      	str	r3, [r7, #8]
    }
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	4b14      	ldr	r3, [pc, #80]	; (8005014 <vPortFree+0xb8>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01e      	beq.n	800500a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d11a      	bne.n	800500a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	4b0e      	ldr	r3, [pc, #56]	; (8005014 <vPortFree+0xb8>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	401a      	ands	r2, r3
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004fe4:	f7fe fafa 	bl	80035dc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	4b0a      	ldr	r3, [pc, #40]	; (8005018 <vPortFree+0xbc>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <vPortFree+0xbc>)
 8004ff4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ff6:	6938      	ldr	r0, [r7, #16]
 8004ff8:	f000 f874 	bl	80050e4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004ffc:	4b07      	ldr	r3, [pc, #28]	; (800501c <vPortFree+0xc0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	3301      	adds	r3, #1
 8005002:	4a06      	ldr	r2, [pc, #24]	; (800501c <vPortFree+0xc0>)
 8005004:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005006:	f7fe faf7 	bl	80035f8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800500a:	bf00      	nop
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	20012e70 	.word	0x20012e70
 8005018:	20012e60 	.word	0x20012e60
 800501c:	20012e6c 	.word	0x20012e6c

08005020 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005020:	b480      	push	{r7}
 8005022:	b085      	sub	sp, #20
 8005024:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005026:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800502a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800502c:	4b27      	ldr	r3, [pc, #156]	; (80050cc <prvHeapInit+0xac>)
 800502e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00c      	beq.n	8005054 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	3307      	adds	r3, #7
 800503e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0307 	bic.w	r3, r3, #7
 8005046:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005048:	68ba      	ldr	r2, [r7, #8]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <prvHeapInit+0xac>)
 8005050:	4413      	add	r3, r2
 8005052:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005058:	4a1d      	ldr	r2, [pc, #116]	; (80050d0 <prvHeapInit+0xb0>)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800505e:	4b1c      	ldr	r3, [pc, #112]	; (80050d0 <prvHeapInit+0xb0>)
 8005060:	2200      	movs	r2, #0
 8005062:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68ba      	ldr	r2, [r7, #8]
 8005068:	4413      	add	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800506c:	2208      	movs	r2, #8
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	1a9b      	subs	r3, r3, r2
 8005072:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0307 	bic.w	r3, r3, #7
 800507a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a15      	ldr	r2, [pc, #84]	; (80050d4 <prvHeapInit+0xb4>)
 8005080:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <prvHeapInit+0xb4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	2200      	movs	r2, #0
 8005088:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800508a:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <prvHeapInit+0xb4>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2200      	movs	r2, #0
 8005090:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	1ad2      	subs	r2, r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <prvHeapInit+0xb4>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4a0a      	ldr	r2, [pc, #40]	; (80050d8 <prvHeapInit+0xb8>)
 80050ae:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	4a09      	ldr	r2, [pc, #36]	; (80050dc <prvHeapInit+0xbc>)
 80050b6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050b8:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <prvHeapInit+0xc0>)
 80050ba:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050be:	601a      	str	r2, [r3, #0]
}
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	20000254 	.word	0x20000254
 80050d0:	20012e54 	.word	0x20012e54
 80050d4:	20012e5c 	.word	0x20012e5c
 80050d8:	20012e64 	.word	0x20012e64
 80050dc:	20012e60 	.word	0x20012e60
 80050e0:	20012e70 	.word	0x20012e70

080050e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80050ec:	4b28      	ldr	r3, [pc, #160]	; (8005190 <prvInsertBlockIntoFreeList+0xac>)
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	e002      	b.n	80050f8 <prvInsertBlockIntoFreeList+0x14>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d8f7      	bhi.n	80050f2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	4413      	add	r3, r2
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	429a      	cmp	r2, r3
 8005112:	d108      	bne.n	8005126 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	441a      	add	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	441a      	add	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d118      	bne.n	800516c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4b15      	ldr	r3, [pc, #84]	; (8005194 <prvInsertBlockIntoFreeList+0xb0>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	d00d      	beq.n	8005162 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	441a      	add	r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	601a      	str	r2, [r3, #0]
 8005160:	e008      	b.n	8005174 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005162:	4b0c      	ldr	r3, [pc, #48]	; (8005194 <prvInsertBlockIntoFreeList+0xb0>)
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	e003      	b.n	8005174 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	429a      	cmp	r2, r3
 800517a:	d002      	beq.n	8005182 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20012e54 	.word	0x20012e54
 8005194:	20012e5c 	.word	0x20012e5c

08005198 <__libc_init_array>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	4d0d      	ldr	r5, [pc, #52]	; (80051d0 <__libc_init_array+0x38>)
 800519c:	4c0d      	ldr	r4, [pc, #52]	; (80051d4 <__libc_init_array+0x3c>)
 800519e:	1b64      	subs	r4, r4, r5
 80051a0:	10a4      	asrs	r4, r4, #2
 80051a2:	2600      	movs	r6, #0
 80051a4:	42a6      	cmp	r6, r4
 80051a6:	d109      	bne.n	80051bc <__libc_init_array+0x24>
 80051a8:	4d0b      	ldr	r5, [pc, #44]	; (80051d8 <__libc_init_array+0x40>)
 80051aa:	4c0c      	ldr	r4, [pc, #48]	; (80051dc <__libc_init_array+0x44>)
 80051ac:	f000 f82e 	bl	800520c <_init>
 80051b0:	1b64      	subs	r4, r4, r5
 80051b2:	10a4      	asrs	r4, r4, #2
 80051b4:	2600      	movs	r6, #0
 80051b6:	42a6      	cmp	r6, r4
 80051b8:	d105      	bne.n	80051c6 <__libc_init_array+0x2e>
 80051ba:	bd70      	pop	{r4, r5, r6, pc}
 80051bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c0:	4798      	blx	r3
 80051c2:	3601      	adds	r6, #1
 80051c4:	e7ee      	b.n	80051a4 <__libc_init_array+0xc>
 80051c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ca:	4798      	blx	r3
 80051cc:	3601      	adds	r6, #1
 80051ce:	e7f2      	b.n	80051b6 <__libc_init_array+0x1e>
 80051d0:	08005378 	.word	0x08005378
 80051d4:	08005378 	.word	0x08005378
 80051d8:	08005378 	.word	0x08005378
 80051dc:	0800537c 	.word	0x0800537c

080051e0 <memcpy>:
 80051e0:	440a      	add	r2, r1
 80051e2:	4291      	cmp	r1, r2
 80051e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80051e8:	d100      	bne.n	80051ec <memcpy+0xc>
 80051ea:	4770      	bx	lr
 80051ec:	b510      	push	{r4, lr}
 80051ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80051f6:	4291      	cmp	r1, r2
 80051f8:	d1f9      	bne.n	80051ee <memcpy+0xe>
 80051fa:	bd10      	pop	{r4, pc}

080051fc <memset>:
 80051fc:	4402      	add	r2, r0
 80051fe:	4603      	mov	r3, r0
 8005200:	4293      	cmp	r3, r2
 8005202:	d100      	bne.n	8005206 <memset+0xa>
 8005204:	4770      	bx	lr
 8005206:	f803 1b01 	strb.w	r1, [r3], #1
 800520a:	e7f9      	b.n	8005200 <memset+0x4>

0800520c <_init>:
 800520c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520e:	bf00      	nop
 8005210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005212:	bc08      	pop	{r3}
 8005214:	469e      	mov	lr, r3
 8005216:	4770      	bx	lr

08005218 <_fini>:
 8005218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521a:	bf00      	nop
 800521c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800521e:	bc08      	pop	{r3}
 8005220:	469e      	mov	lr, r3
 8005222:	4770      	bx	lr
