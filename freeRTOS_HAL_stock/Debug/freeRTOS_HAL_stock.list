
freeRTOS_HAL_stock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003404  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003594  08003594  00013594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035cc  080035cc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080035cc  080035cc  000135cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035d4  080035d4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035d4  080035d4  000135d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080035dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00012dd0  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012de4  20012de4  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008a55  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ada  00000000  00000000  00028a99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008a0  00000000  00000000  0002a578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007c8  00000000  00000000  0002ae18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020352  00000000  00000000  0002b5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009bf1  00000000  00000000  0004b932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c78e9  00000000  00000000  00055523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011ce0c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021d0  00000000  00000000  0011ce5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800357c 	.word	0x0800357c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800357c 	.word	0x0800357c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004da:	f000 f923 	bl	8000724 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004de:	f000 f825 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e2:	f000 f881 	bl	80005e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  // 3. Adım Görev Olusturma
  	xTaskCreate(Task1_Handler,
 80004e6:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <main+0x40>)
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	2304      	movs	r3, #4
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2300      	movs	r3, #0
 80004f0:	2282      	movs	r2, #130	; 0x82
 80004f2:	4909      	ldr	r1, [pc, #36]	; (8000518 <main+0x44>)
 80004f4:	4809      	ldr	r0, [pc, #36]	; (800051c <main+0x48>)
 80004f6:	f001 f9ff 	bl	80018f8 <xTaskCreate>
  				configMINIMAL_STACK_SIZE,
  				NULL,
  				4,
  				&TASK1_Handle);

  	xTaskCreate(Task2_Handler,
 80004fa:	4b09      	ldr	r3, [pc, #36]	; (8000520 <main+0x4c>)
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	2304      	movs	r3, #4
 8000500:	9300      	str	r3, [sp, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	2282      	movs	r2, #130	; 0x82
 8000506:	4907      	ldr	r1, [pc, #28]	; (8000524 <main+0x50>)
 8000508:	4807      	ldr	r0, [pc, #28]	; (8000528 <main+0x54>)
 800050a:	f001 f9f5 	bl	80018f8 <xTaskCreate>
  				configMINIMAL_STACK_SIZE,
  				NULL,
  				4,
  				&TASK2_Handle);

  	vTaskStartScheduler();
 800050e:	f001 fb6f 	bl	8001bf0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000512:	e7fe      	b.n	8000512 <main+0x3e>
 8000514:	20000030 	.word	0x20000030
 8000518:	08003594 	.word	0x08003594
 800051c:	0800061d 	.word	0x0800061d
 8000520:	20000034 	.word	0x20000034
 8000524:	0800359c 	.word	0x0800359c
 8000528:	08000627 	.word	0x08000627

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b094      	sub	sp, #80	; 0x50
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0320 	add.w	r3, r7, #32
 8000536:	2230      	movs	r2, #48	; 0x30
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f003 f816 	bl	800356c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	f107 030c 	add.w	r3, r7, #12
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000550:	2300      	movs	r3, #0
 8000552:	60bb      	str	r3, [r7, #8]
 8000554:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <SystemClock_Config+0xb4>)
 8000556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000558:	4a21      	ldr	r2, [pc, #132]	; (80005e0 <SystemClock_Config+0xb4>)
 800055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055e:	6413      	str	r3, [r2, #64]	; 0x40
 8000560:	4b1f      	ldr	r3, [pc, #124]	; (80005e0 <SystemClock_Config+0xb4>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056c:	2300      	movs	r3, #0
 800056e:	607b      	str	r3, [r7, #4]
 8000570:	4b1c      	ldr	r3, [pc, #112]	; (80005e4 <SystemClock_Config+0xb8>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a1b      	ldr	r2, [pc, #108]	; (80005e4 <SystemClock_Config+0xb8>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057a:	6013      	str	r3, [r2, #0]
 800057c:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <SystemClock_Config+0xb8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000588:	2302      	movs	r3, #2
 800058a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058c:	2301      	movs	r3, #1
 800058e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000594:	2300      	movs	r3, #0
 8000596:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000598:	f107 0320 	add.w	r3, r7, #32
 800059c:	4618      	mov	r0, r3
 800059e:	f000 fa05 	bl	80009ac <HAL_RCC_OscConfig>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005a8:	f000 f842 	bl	8000630 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ac:	230f      	movs	r3, #15
 80005ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005b0:	2300      	movs	r3, #0
 80005b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005bc:	2300      	movs	r3, #0
 80005be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f000 fc68 	bl	8000e9c <HAL_RCC_ClockConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005d2:	f000 f82d 	bl	8000630 <Error_Handler>
  }
}
 80005d6:	bf00      	nop
 80005d8:	3750      	adds	r7, #80	; 0x50
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40023800 	.word	0x40023800
 80005e4:	40007000 	.word	0x40007000

080005e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_GPIO_Init+0x30>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a08      	ldr	r2, [pc, #32]	; (8000618 <MX_GPIO_Init+0x30>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_GPIO_Init+0x30>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]

}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800

0800061c <Task1_Handler>:

/* USER CODE BEGIN 4 */
void Task1_Handler(void *params)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	while(1)
 8000624:	e7fe      	b.n	8000624 <Task1_Handler+0x8>

08000626 <Task2_Handler>:

	}
}

void Task2_Handler(void *params)
{
 8000626:	b480      	push	{r7}
 8000628:	b083      	sub	sp, #12
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
	while(1)
 800062e:	e7fe      	b.n	800062e <Task2_Handler+0x8>

08000630 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000634:	b672      	cpsid	i
}
 8000636:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000638:	e7fe      	b.n	8000638 <Error_Handler+0x8>
	...

0800063c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <HAL_MspInit+0x4c>)
 8000648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <HAL_MspInit+0x4c>)
 800064c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000650:	6453      	str	r3, [r2, #68]	; 0x44
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <HAL_MspInit+0x4c>)
 8000654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000656:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <HAL_MspInit+0x4c>)
 8000664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000666:	4a08      	ldr	r2, [pc, #32]	; (8000688 <HAL_MspInit+0x4c>)
 8000668:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066c:	6413      	str	r3, [r2, #64]	; 0x40
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_MspInit+0x4c>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000676:	603b      	str	r3, [r7, #0]
 8000678:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000690:	e7fe      	b.n	8000690 <MemManage_Handler+0x4>

08000692 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000692:	b480      	push	{r7}
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000696:	e7fe      	b.n	8000696 <BusFault_Handler+0x4>

08000698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069c:	e7fe      	b.n	800069c <UsageFault_Handler+0x4>

0800069e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemInit+0x20>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <SystemInit+0x20>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000708 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006d6:	490e      	ldr	r1, [pc, #56]	; (8000710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006ec:	4c0b      	ldr	r4, [pc, #44]	; (800071c <LoopFillZerobss+0x26>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80006fa:	f7ff ffd7 	bl	80006ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fe:	f002 ff03 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000702:	f7ff fee7 	bl	80004d4 <main>
  bx  lr    
 8000706:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000708:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000714:	080035dc 	.word	0x080035dc
  ldr r2, =_sbss
 8000718:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800071c:	20012de4 	.word	0x20012de4

08000720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC_IRQHandler>
	...

08000724 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000728:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <HAL_Init+0x40>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a0d      	ldr	r2, [pc, #52]	; (8000764 <HAL_Init+0x40>)
 800072e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000732:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <HAL_Init+0x40>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <HAL_Init+0x40>)
 800073a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800073e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <HAL_Init+0x40>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <HAL_Init+0x40>)
 8000746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800074a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800074c:	2003      	movs	r0, #3
 800074e:	f000 f8f9 	bl	8000944 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000752:	200f      	movs	r0, #15
 8000754:	f000 f808 	bl	8000768 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000758:	f7ff ff70 	bl	800063c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	40023c00 	.word	0x40023c00

08000768 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_InitTick+0x54>)
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_InitTick+0x58>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	4619      	mov	r1, r3
 800077a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000782:	fbb2 f3f3 	udiv	r3, r2, r3
 8000786:	4618      	mov	r0, r3
 8000788:	f000 f903 	bl	8000992 <HAL_SYSTICK_Config>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000792:	2301      	movs	r3, #1
 8000794:	e00e      	b.n	80007b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b0f      	cmp	r3, #15
 800079a:	d80a      	bhi.n	80007b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800079c:	2200      	movs	r2, #0
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	f04f 30ff 	mov.w	r0, #4294967295
 80007a4:	f000 f8d9 	bl	800095a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a8:	4a06      	ldr	r2, [pc, #24]	; (80007c4 <HAL_InitTick+0x5c>)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007ae:	2300      	movs	r3, #0
 80007b0:	e000      	b.n	80007b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007b2:	2301      	movs	r3, #1
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	3708      	adds	r7, #8
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	20000000 	.word	0x20000000
 80007c0:	20000008 	.word	0x20000008
 80007c4:	20000004 	.word	0x20000004

080007c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
  return uwTick;
 80007cc:	4b03      	ldr	r3, [pc, #12]	; (80007dc <HAL_GetTick+0x14>)
 80007ce:	681b      	ldr	r3, [r3, #0]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	20000038 	.word	0x20000038

080007e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	f003 0307 	and.w	r3, r3, #7
 80007ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007f0:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007f6:	68ba      	ldr	r2, [r7, #8]
 80007f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007fc:	4013      	ands	r3, r2
 80007fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000808:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800080c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000810:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000812:	4a04      	ldr	r2, [pc, #16]	; (8000824 <__NVIC_SetPriorityGrouping+0x44>)
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	60d3      	str	r3, [r2, #12]
}
 8000818:	bf00      	nop
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000ed00 	.word	0xe000ed00

08000828 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800082c:	4b04      	ldr	r3, [pc, #16]	; (8000840 <__NVIC_GetPriorityGrouping+0x18>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	0a1b      	lsrs	r3, r3, #8
 8000832:	f003 0307 	and.w	r3, r3, #7
}
 8000836:	4618      	mov	r0, r3
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000844:	b480      	push	{r7}
 8000846:	b083      	sub	sp, #12
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000854:	2b00      	cmp	r3, #0
 8000856:	db0a      	blt.n	800086e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	b2da      	uxtb	r2, r3
 800085c:	490c      	ldr	r1, [pc, #48]	; (8000890 <__NVIC_SetPriority+0x4c>)
 800085e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000862:	0112      	lsls	r2, r2, #4
 8000864:	b2d2      	uxtb	r2, r2
 8000866:	440b      	add	r3, r1
 8000868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800086c:	e00a      	b.n	8000884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4908      	ldr	r1, [pc, #32]	; (8000894 <__NVIC_SetPriority+0x50>)
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	f003 030f 	and.w	r3, r3, #15
 800087a:	3b04      	subs	r3, #4
 800087c:	0112      	lsls	r2, r2, #4
 800087e:	b2d2      	uxtb	r2, r2
 8000880:	440b      	add	r3, r1
 8000882:	761a      	strb	r2, [r3, #24]
}
 8000884:	bf00      	nop
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f1c3 0307 	rsb	r3, r3, #7
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	bf28      	it	cs
 80008b6:	2304      	movcs	r3, #4
 80008b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3304      	adds	r3, #4
 80008be:	2b06      	cmp	r3, #6
 80008c0:	d902      	bls.n	80008c8 <NVIC_EncodePriority+0x30>
 80008c2:	69fb      	ldr	r3, [r7, #28]
 80008c4:	3b03      	subs	r3, #3
 80008c6:	e000      	b.n	80008ca <NVIC_EncodePriority+0x32>
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008cc:	f04f 32ff 	mov.w	r2, #4294967295
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43da      	mvns	r2, r3
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	401a      	ands	r2, r3
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ea:	43d9      	mvns	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008f0:	4313      	orrs	r3, r2
         );
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3724      	adds	r7, #36	; 0x24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000910:	d301      	bcc.n	8000916 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000912:	2301      	movs	r3, #1
 8000914:	e00f      	b.n	8000936 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000916:	4a0a      	ldr	r2, [pc, #40]	; (8000940 <SysTick_Config+0x40>)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b01      	subs	r3, #1
 800091c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800091e:	210f      	movs	r1, #15
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	f7ff ff8e 	bl	8000844 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <SysTick_Config+0x40>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092e:	4b04      	ldr	r3, [pc, #16]	; (8000940 <SysTick_Config+0x40>)
 8000930:	2207      	movs	r2, #7
 8000932:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000934:	2300      	movs	r3, #0
}
 8000936:	4618      	mov	r0, r3
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	e000e010 	.word	0xe000e010

08000944 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ff47 	bl	80007e0 <__NVIC_SetPriorityGrouping>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	4603      	mov	r3, r0
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
 8000966:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800096c:	f7ff ff5c 	bl	8000828 <__NVIC_GetPriorityGrouping>
 8000970:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	68b9      	ldr	r1, [r7, #8]
 8000976:	6978      	ldr	r0, [r7, #20]
 8000978:	f7ff ff8e 	bl	8000898 <NVIC_EncodePriority>
 800097c:	4602      	mov	r2, r0
 800097e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000982:	4611      	mov	r1, r2
 8000984:	4618      	mov	r0, r3
 8000986:	f7ff ff5d 	bl	8000844 <__NVIC_SetPriority>
}
 800098a:	bf00      	nop
 800098c:	3718      	adds	r7, #24
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}

08000992 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b082      	sub	sp, #8
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f7ff ffb0 	bl	8000900 <SysTick_Config>
 80009a0:	4603      	mov	r3, r0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
	...

080009ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d101      	bne.n	80009be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80009ba:	2301      	movs	r3, #1
 80009bc:	e267      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d075      	beq.n	8000ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009ca:	4b88      	ldr	r3, [pc, #544]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 80009cc:	689b      	ldr	r3, [r3, #8]
 80009ce:	f003 030c 	and.w	r3, r3, #12
 80009d2:	2b04      	cmp	r3, #4
 80009d4:	d00c      	beq.n	80009f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009d6:	4b85      	ldr	r3, [pc, #532]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80009de:	2b08      	cmp	r3, #8
 80009e0:	d112      	bne.n	8000a08 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80009e2:	4b82      	ldr	r3, [pc, #520]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80009ee:	d10b      	bne.n	8000a08 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009f0:	4b7e      	ldr	r3, [pc, #504]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d05b      	beq.n	8000ab4 <HAL_RCC_OscConfig+0x108>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d157      	bne.n	8000ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000a04:	2301      	movs	r3, #1
 8000a06:	e242      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a10:	d106      	bne.n	8000a20 <HAL_RCC_OscConfig+0x74>
 8000a12:	4b76      	ldr	r3, [pc, #472]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4a75      	ldr	r2, [pc, #468]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a1c:	6013      	str	r3, [r2, #0]
 8000a1e:	e01d      	b.n	8000a5c <HAL_RCC_OscConfig+0xb0>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a28:	d10c      	bne.n	8000a44 <HAL_RCC_OscConfig+0x98>
 8000a2a:	4b70      	ldr	r3, [pc, #448]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	4a6f      	ldr	r2, [pc, #444]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a34:	6013      	str	r3, [r2, #0]
 8000a36:	4b6d      	ldr	r3, [pc, #436]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a6c      	ldr	r2, [pc, #432]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a40:	6013      	str	r3, [r2, #0]
 8000a42:	e00b      	b.n	8000a5c <HAL_RCC_OscConfig+0xb0>
 8000a44:	4b69      	ldr	r3, [pc, #420]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a68      	ldr	r2, [pc, #416]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	4b66      	ldr	r3, [pc, #408]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a65      	ldr	r2, [pc, #404]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d013      	beq.n	8000a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a64:	f7ff feb0 	bl	80007c8 <HAL_GetTick>
 8000a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a6a:	e008      	b.n	8000a7e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a6c:	f7ff feac 	bl	80007c8 <HAL_GetTick>
 8000a70:	4602      	mov	r2, r0
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	2b64      	cmp	r3, #100	; 0x64
 8000a78:	d901      	bls.n	8000a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000a7a:	2303      	movs	r3, #3
 8000a7c:	e207      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000a7e:	4b5b      	ldr	r3, [pc, #364]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f0      	beq.n	8000a6c <HAL_RCC_OscConfig+0xc0>
 8000a8a:	e014      	b.n	8000ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a8c:	f7ff fe9c 	bl	80007c8 <HAL_GetTick>
 8000a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a92:	e008      	b.n	8000aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a94:	f7ff fe98 	bl	80007c8 <HAL_GetTick>
 8000a98:	4602      	mov	r2, r0
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	2b64      	cmp	r3, #100	; 0x64
 8000aa0:	d901      	bls.n	8000aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	e1f3      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000aa6:	4b51      	ldr	r3, [pc, #324]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1f0      	bne.n	8000a94 <HAL_RCC_OscConfig+0xe8>
 8000ab2:	e000      	b.n	8000ab6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d063      	beq.n	8000b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ac2:	4b4a      	ldr	r3, [pc, #296]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	f003 030c 	and.w	r3, r3, #12
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d00b      	beq.n	8000ae6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ace:	4b47      	ldr	r3, [pc, #284]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ad6:	2b08      	cmp	r3, #8
 8000ad8:	d11c      	bne.n	8000b14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ada:	4b44      	ldr	r3, [pc, #272]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d116      	bne.n	8000b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ae6:	4b41      	ldr	r3, [pc, #260]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d005      	beq.n	8000afe <HAL_RCC_OscConfig+0x152>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d001      	beq.n	8000afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e1c7      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000afe:	4b3b      	ldr	r3, [pc, #236]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	691b      	ldr	r3, [r3, #16]
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	4937      	ldr	r1, [pc, #220]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b12:	e03a      	b.n	8000b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d020      	beq.n	8000b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000b1c:	4b34      	ldr	r3, [pc, #208]	; (8000bf0 <HAL_RCC_OscConfig+0x244>)
 8000b1e:	2201      	movs	r2, #1
 8000b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b22:	f7ff fe51 	bl	80007c8 <HAL_GetTick>
 8000b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b28:	e008      	b.n	8000b3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b2a:	f7ff fe4d 	bl	80007c8 <HAL_GetTick>
 8000b2e:	4602      	mov	r2, r0
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	1ad3      	subs	r3, r2, r3
 8000b34:	2b02      	cmp	r3, #2
 8000b36:	d901      	bls.n	8000b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	e1a8      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b3c:	4b2b      	ldr	r3, [pc, #172]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f003 0302 	and.w	r3, r3, #2
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d0f0      	beq.n	8000b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	691b      	ldr	r3, [r3, #16]
 8000b54:	00db      	lsls	r3, r3, #3
 8000b56:	4925      	ldr	r1, [pc, #148]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	600b      	str	r3, [r1, #0]
 8000b5c:	e015      	b.n	8000b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000b5e:	4b24      	ldr	r3, [pc, #144]	; (8000bf0 <HAL_RCC_OscConfig+0x244>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b64:	f7ff fe30 	bl	80007c8 <HAL_GetTick>
 8000b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b6a:	e008      	b.n	8000b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b6c:	f7ff fe2c 	bl	80007c8 <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d901      	bls.n	8000b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e187      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b7e:	4b1b      	ldr	r3, [pc, #108]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d1f0      	bne.n	8000b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	f003 0308 	and.w	r3, r3, #8
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d036      	beq.n	8000c04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	695b      	ldr	r3, [r3, #20]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d016      	beq.n	8000bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_RCC_OscConfig+0x248>)
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ba4:	f7ff fe10 	bl	80007c8 <HAL_GetTick>
 8000ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000baa:	e008      	b.n	8000bbe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bac:	f7ff fe0c 	bl	80007c8 <HAL_GetTick>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	1ad3      	subs	r3, r2, r3
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	d901      	bls.n	8000bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	e167      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_RCC_OscConfig+0x240>)
 8000bc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d0f0      	beq.n	8000bac <HAL_RCC_OscConfig+0x200>
 8000bca:	e01b      	b.n	8000c04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <HAL_RCC_OscConfig+0x248>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bd2:	f7ff fdf9 	bl	80007c8 <HAL_GetTick>
 8000bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd8:	e00e      	b.n	8000bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bda:	f7ff fdf5 	bl	80007c8 <HAL_GetTick>
 8000bde:	4602      	mov	r2, r0
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d907      	bls.n	8000bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000be8:	2303      	movs	r3, #3
 8000bea:	e150      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	42470000 	.word	0x42470000
 8000bf4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bf8:	4b88      	ldr	r3, [pc, #544]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000bfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000bfc:	f003 0302 	and.w	r3, r3, #2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d1ea      	bne.n	8000bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f003 0304 	and.w	r3, r3, #4
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f000 8097 	beq.w	8000d40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000c12:	2300      	movs	r3, #0
 8000c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c16:	4b81      	ldr	r3, [pc, #516]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10f      	bne.n	8000c42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b7d      	ldr	r3, [pc, #500]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	4a7c      	ldr	r2, [pc, #496]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	; 0x40
 8000c32:	4b7a      	ldr	r3, [pc, #488]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c42:	4b77      	ldr	r3, [pc, #476]	; (8000e20 <HAL_RCC_OscConfig+0x474>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d118      	bne.n	8000c80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c4e:	4b74      	ldr	r3, [pc, #464]	; (8000e20 <HAL_RCC_OscConfig+0x474>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a73      	ldr	r2, [pc, #460]	; (8000e20 <HAL_RCC_OscConfig+0x474>)
 8000c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000c5a:	f7ff fdb5 	bl	80007c8 <HAL_GetTick>
 8000c5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c60:	e008      	b.n	8000c74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c62:	f7ff fdb1 	bl	80007c8 <HAL_GetTick>
 8000c66:	4602      	mov	r2, r0
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d901      	bls.n	8000c74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e10c      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c74:	4b6a      	ldr	r3, [pc, #424]	; (8000e20 <HAL_RCC_OscConfig+0x474>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f0      	beq.n	8000c62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	689b      	ldr	r3, [r3, #8]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d106      	bne.n	8000c96 <HAL_RCC_OscConfig+0x2ea>
 8000c88:	4b64      	ldr	r3, [pc, #400]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000c8c:	4a63      	ldr	r2, [pc, #396]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	6713      	str	r3, [r2, #112]	; 0x70
 8000c94:	e01c      	b.n	8000cd0 <HAL_RCC_OscConfig+0x324>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	2b05      	cmp	r3, #5
 8000c9c:	d10c      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x30c>
 8000c9e:	4b5f      	ldr	r3, [pc, #380]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ca2:	4a5e      	ldr	r2, [pc, #376]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8000caa:	4b5c      	ldr	r3, [pc, #368]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cae:	4a5b      	ldr	r2, [pc, #364]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8000cb6:	e00b      	b.n	8000cd0 <HAL_RCC_OscConfig+0x324>
 8000cb8:	4b58      	ldr	r3, [pc, #352]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cbc:	4a57      	ldr	r2, [pc, #348]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000cbe:	f023 0301 	bic.w	r3, r3, #1
 8000cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8000cc4:	4b55      	ldr	r3, [pc, #340]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cc8:	4a54      	ldr	r2, [pc, #336]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000cca:	f023 0304 	bic.w	r3, r3, #4
 8000cce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d015      	beq.n	8000d04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cd8:	f7ff fd76 	bl	80007c8 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cde:	e00a      	b.n	8000cf6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ce0:	f7ff fd72 	bl	80007c8 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e0cb      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf6:	4b49      	ldr	r3, [pc, #292]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000cfa:	f003 0302 	and.w	r3, r3, #2
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0ee      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x334>
 8000d02:	e014      	b.n	8000d2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d04:	f7ff fd60 	bl	80007c8 <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d0a:	e00a      	b.n	8000d22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d0c:	f7ff fd5c 	bl	80007c8 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e0b5      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d1ee      	bne.n	8000d0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000d2e:	7dfb      	ldrb	r3, [r7, #23]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d105      	bne.n	8000d40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d34:	4b39      	ldr	r3, [pc, #228]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d38:	4a38      	ldr	r2, [pc, #224]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	f000 80a1 	beq.w	8000e8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d4a:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f003 030c 	and.w	r3, r3, #12
 8000d52:	2b08      	cmp	r3, #8
 8000d54:	d05c      	beq.n	8000e10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d141      	bne.n	8000de2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d5e:	4b31      	ldr	r3, [pc, #196]	; (8000e24 <HAL_RCC_OscConfig+0x478>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d64:	f7ff fd30 	bl	80007c8 <HAL_GetTick>
 8000d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d6a:	e008      	b.n	8000d7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000d6c:	f7ff fd2c 	bl	80007c8 <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d901      	bls.n	8000d7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	e087      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d7e:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f0      	bne.n	8000d6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	69da      	ldr	r2, [r3, #28]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a1b      	ldr	r3, [r3, #32]
 8000d92:	431a      	orrs	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	431a      	orrs	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000da0:	085b      	lsrs	r3, r3, #1
 8000da2:	3b01      	subs	r3, #1
 8000da4:	041b      	lsls	r3, r3, #16
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	061b      	lsls	r3, r3, #24
 8000dae:	491b      	ldr	r1, [pc, #108]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000db0:	4313      	orrs	r3, r2
 8000db2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000db4:	4b1b      	ldr	r3, [pc, #108]	; (8000e24 <HAL_RCC_OscConfig+0x478>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dba:	f7ff fd05 	bl	80007c8 <HAL_GetTick>
 8000dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dc0:	e008      	b.n	8000dd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc2:	f7ff fd01 	bl	80007c8 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d901      	bls.n	8000dd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e05c      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d0f0      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x416>
 8000de0:	e054      	b.n	8000e8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <HAL_RCC_OscConfig+0x478>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de8:	f7ff fcee 	bl	80007c8 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000df0:	f7ff fcea 	bl	80007c8 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e045      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_RCC_OscConfig+0x470>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f0      	bne.n	8000df0 <HAL_RCC_OscConfig+0x444>
 8000e0e:	e03d      	b.n	8000e8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d107      	bne.n	8000e28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	e038      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000
 8000e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000e28:	4b1b      	ldr	r3, [pc, #108]	; (8000e98 <HAL_RCC_OscConfig+0x4ec>)
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d028      	beq.n	8000e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d121      	bne.n	8000e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d11a      	bne.n	8000e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000e58:	4013      	ands	r3, r2
 8000e5a:	687a      	ldr	r2, [r7, #4]
 8000e5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000e60:	4293      	cmp	r3, r2
 8000e62:	d111      	bne.n	8000e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6e:	085b      	lsrs	r3, r3, #1
 8000e70:	3b01      	subs	r3, #1
 8000e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d107      	bne.n	8000e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d001      	beq.n	8000e8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e000      	b.n	8000e8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023800 	.word	0x40023800

08000e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000eac:	2301      	movs	r3, #1
 8000eae:	e0cc      	b.n	800104a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000eb0:	4b68      	ldr	r3, [pc, #416]	; (8001054 <HAL_RCC_ClockConfig+0x1b8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	683a      	ldr	r2, [r7, #0]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d90c      	bls.n	8000ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ebe:	4b65      	ldr	r3, [pc, #404]	; (8001054 <HAL_RCC_ClockConfig+0x1b8>)
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ec6:	4b63      	ldr	r3, [pc, #396]	; (8001054 <HAL_RCC_ClockConfig+0x1b8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	683a      	ldr	r2, [r7, #0]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d001      	beq.n	8000ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e0b8      	b.n	800104a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d020      	beq.n	8000f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f003 0304 	and.w	r3, r3, #4
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d005      	beq.n	8000efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ef0:	4b59      	ldr	r3, [pc, #356]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	4a58      	ldr	r2, [pc, #352]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000ef6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000efa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0308 	and.w	r3, r3, #8
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d005      	beq.n	8000f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f08:	4b53      	ldr	r3, [pc, #332]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	4a52      	ldr	r2, [pc, #328]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000f0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f14:	4b50      	ldr	r3, [pc, #320]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	494d      	ldr	r1, [pc, #308]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d044      	beq.n	8000fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b01      	cmp	r3, #1
 8000f38:	d107      	bne.n	8000f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3a:	4b47      	ldr	r3, [pc, #284]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d119      	bne.n	8000f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	e07f      	b.n	800104a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d003      	beq.n	8000f5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f56:	2b03      	cmp	r3, #3
 8000f58:	d107      	bne.n	8000f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f5a:	4b3f      	ldr	r3, [pc, #252]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d109      	bne.n	8000f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e06f      	b.n	800104a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f6a:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d101      	bne.n	8000f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e067      	b.n	800104a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f023 0203 	bic.w	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	4934      	ldr	r1, [pc, #208]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f8c:	f7ff fc1c 	bl	80007c8 <HAL_GetTick>
 8000f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f92:	e00a      	b.n	8000faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f94:	f7ff fc18 	bl	80007c8 <HAL_GetTick>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d901      	bls.n	8000faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e04f      	b.n	800104a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f003 020c 	and.w	r2, r3, #12
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d1eb      	bne.n	8000f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <HAL_RCC_ClockConfig+0x1b8>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0307 	and.w	r3, r3, #7
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d20c      	bcs.n	8000fe4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fca:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_RCC_ClockConfig+0x1b8>)
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fd2:	4b20      	ldr	r3, [pc, #128]	; (8001054 <HAL_RCC_ClockConfig+0x1b8>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	683a      	ldr	r2, [r7, #0]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d001      	beq.n	8000fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e032      	b.n	800104a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0304 	and.w	r3, r3, #4
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d008      	beq.n	8001002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000ff0:	4b19      	ldr	r3, [pc, #100]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	4916      	ldr	r1, [pc, #88]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8000ffe:	4313      	orrs	r3, r2
 8001000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0308 	and.w	r3, r3, #8
 800100a:	2b00      	cmp	r3, #0
 800100c:	d009      	beq.n	8001022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800100e:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	490e      	ldr	r1, [pc, #56]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 800101e:	4313      	orrs	r3, r2
 8001020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001022:	f000 f821 	bl	8001068 <HAL_RCC_GetSysClockFreq>
 8001026:	4602      	mov	r2, r0
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <HAL_RCC_ClockConfig+0x1bc>)
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	091b      	lsrs	r3, r3, #4
 800102e:	f003 030f 	and.w	r3, r3, #15
 8001032:	490a      	ldr	r1, [pc, #40]	; (800105c <HAL_RCC_ClockConfig+0x1c0>)
 8001034:	5ccb      	ldrb	r3, [r1, r3]
 8001036:	fa22 f303 	lsr.w	r3, r2, r3
 800103a:	4a09      	ldr	r2, [pc, #36]	; (8001060 <HAL_RCC_ClockConfig+0x1c4>)
 800103c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <HAL_RCC_ClockConfig+0x1c8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fb90 	bl	8000768 <HAL_InitTick>

  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023c00 	.word	0x40023c00
 8001058:	40023800 	.word	0x40023800
 800105c:	080035bc 	.word	0x080035bc
 8001060:	20000000 	.word	0x20000000
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800106c:	b090      	sub	sp, #64	; 0x40
 800106e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001070:	2300      	movs	r3, #0
 8001072:	637b      	str	r3, [r7, #52]	; 0x34
 8001074:	2300      	movs	r3, #0
 8001076:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001078:	2300      	movs	r3, #0
 800107a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800107c:	2300      	movs	r3, #0
 800107e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001080:	4b59      	ldr	r3, [pc, #356]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001082:	689b      	ldr	r3, [r3, #8]
 8001084:	f003 030c 	and.w	r3, r3, #12
 8001088:	2b08      	cmp	r3, #8
 800108a:	d00d      	beq.n	80010a8 <HAL_RCC_GetSysClockFreq+0x40>
 800108c:	2b08      	cmp	r3, #8
 800108e:	f200 80a1 	bhi.w	80011d4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <HAL_RCC_GetSysClockFreq+0x34>
 8001096:	2b04      	cmp	r3, #4
 8001098:	d003      	beq.n	80010a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800109a:	e09b      	b.n	80011d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800109c:	4b53      	ldr	r3, [pc, #332]	; (80011ec <HAL_RCC_GetSysClockFreq+0x184>)
 800109e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80010a0:	e09b      	b.n	80011da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010a2:	4b53      	ldr	r3, [pc, #332]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80010a6:	e098      	b.n	80011da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80010b0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80010b2:	4b4d      	ldr	r3, [pc, #308]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d028      	beq.n	8001110 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80010be:	4b4a      	ldr	r3, [pc, #296]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	099b      	lsrs	r3, r3, #6
 80010c4:	2200      	movs	r2, #0
 80010c6:	623b      	str	r3, [r7, #32]
 80010c8:	627a      	str	r2, [r7, #36]	; 0x24
 80010ca:	6a3b      	ldr	r3, [r7, #32]
 80010cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80010d0:	2100      	movs	r1, #0
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80010d4:	fb03 f201 	mul.w	r2, r3, r1
 80010d8:	2300      	movs	r3, #0
 80010da:	fb00 f303 	mul.w	r3, r0, r3
 80010de:	4413      	add	r3, r2
 80010e0:	4a43      	ldr	r2, [pc, #268]	; (80011f0 <HAL_RCC_GetSysClockFreq+0x188>)
 80010e2:	fba0 1202 	umull	r1, r2, r0, r2
 80010e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80010e8:	460a      	mov	r2, r1
 80010ea:	62ba      	str	r2, [r7, #40]	; 0x28
 80010ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ee:	4413      	add	r3, r2
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010f4:	2200      	movs	r2, #0
 80010f6:	61bb      	str	r3, [r7, #24]
 80010f8:	61fa      	str	r2, [r7, #28]
 80010fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80010fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001102:	f7ff f865 	bl	80001d0 <__aeabi_uldivmod>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4613      	mov	r3, r2
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800110e:	e053      	b.n	80011b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001110:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	099b      	lsrs	r3, r3, #6
 8001116:	2200      	movs	r2, #0
 8001118:	613b      	str	r3, [r7, #16]
 800111a:	617a      	str	r2, [r7, #20]
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001122:	f04f 0b00 	mov.w	fp, #0
 8001126:	4652      	mov	r2, sl
 8001128:	465b      	mov	r3, fp
 800112a:	f04f 0000 	mov.w	r0, #0
 800112e:	f04f 0100 	mov.w	r1, #0
 8001132:	0159      	lsls	r1, r3, #5
 8001134:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001138:	0150      	lsls	r0, r2, #5
 800113a:	4602      	mov	r2, r0
 800113c:	460b      	mov	r3, r1
 800113e:	ebb2 080a 	subs.w	r8, r2, sl
 8001142:	eb63 090b 	sbc.w	r9, r3, fp
 8001146:	f04f 0200 	mov.w	r2, #0
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001152:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001156:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800115a:	ebb2 0408 	subs.w	r4, r2, r8
 800115e:	eb63 0509 	sbc.w	r5, r3, r9
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	00eb      	lsls	r3, r5, #3
 800116c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001170:	00e2      	lsls	r2, r4, #3
 8001172:	4614      	mov	r4, r2
 8001174:	461d      	mov	r5, r3
 8001176:	eb14 030a 	adds.w	r3, r4, sl
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	eb45 030b 	adc.w	r3, r5, fp
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	f04f 0200 	mov.w	r2, #0
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800118e:	4629      	mov	r1, r5
 8001190:	028b      	lsls	r3, r1, #10
 8001192:	4621      	mov	r1, r4
 8001194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001198:	4621      	mov	r1, r4
 800119a:	028a      	lsls	r2, r1, #10
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a2:	2200      	movs	r2, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	60fa      	str	r2, [r7, #12]
 80011a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80011ac:	f7ff f810 	bl	80001d0 <__aeabi_uldivmod>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4613      	mov	r3, r2
 80011b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80011b8:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <HAL_RCC_GetSysClockFreq+0x180>)
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	0c1b      	lsrs	r3, r3, #16
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	3301      	adds	r3, #1
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80011c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80011ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80011d2:	e002      	b.n	80011da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80011d4:	4b05      	ldr	r3, [pc, #20]	; (80011ec <HAL_RCC_GetSysClockFreq+0x184>)
 80011d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80011d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80011da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3740      	adds	r7, #64	; 0x40
 80011e0:	46bd      	mov	sp, r7
 80011e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800
 80011ec:	00f42400 	.word	0x00f42400
 80011f0:	017d7840 	.word	0x017d7840

080011f4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f103 0208 	add.w	r2, r3, #8
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f04f 32ff 	mov.w	r2, #4294967295
 800120c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f103 0208 	add.w	r2, r3, #8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f103 0208 	add.w	r2, r3, #8
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800124e:	b480      	push	{r7}
 8001250:	b085      	sub	sp, #20
 8001252:	af00      	add	r7, sp, #0
 8001254:	6078      	str	r0, [r7, #4]
 8001256:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d103      	bne.n	800126e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	691b      	ldr	r3, [r3, #16]
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	e00c      	b.n	8001288 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3308      	adds	r3, #8
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	e002      	b.n	800127c <vListInsert+0x2e>
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	429a      	cmp	r2, r3
 8001286:	d2f6      	bcs.n	8001276 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	685a      	ldr	r2, [r3, #4]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	687a      	ldr	r2, [r7, #4]
 80012a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1c5a      	adds	r2, r3, #1
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	bf00      	nop
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	691b      	ldr	r3, [r3, #16]
 80012cc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	6892      	ldr	r2, [r2, #8]
 80012d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	687a      	ldr	r2, [r7, #4]
 80012de:	6852      	ldr	r2, [r2, #4]
 80012e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d103      	bne.n	80012f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1e5a      	subs	r2, r3, #1
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3714      	adds	r7, #20
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800131e:	2301      	movs	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10a      	bne.n	8001342 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800132c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001330:	f383 8811 	msr	BASEPRI, r3
 8001334:	f3bf 8f6f 	isb	sy
 8001338:	f3bf 8f4f 	dsb	sy
 800133c:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800133e:	bf00      	nop
 8001340:	e7fe      	b.n	8001340 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d05d      	beq.n	8001404 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800134c:	2b00      	cmp	r3, #0
 800134e:	d059      	beq.n	8001404 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001358:	2100      	movs	r1, #0
 800135a:	fba3 2302 	umull	r2, r3, r3, r2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d000      	beq.n	8001364 <xQueueGenericReset+0x50>
 8001362:	2101      	movs	r1, #1
 8001364:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8001366:	2b00      	cmp	r3, #0
 8001368:	d14c      	bne.n	8001404 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800136a:	f001 fded 	bl	8002f48 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001376:	6939      	ldr	r1, [r7, #16]
 8001378:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800137a:	fb01 f303 	mul.w	r3, r1, r3
 800137e:	441a      	add	r2, r3
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	2200      	movs	r2, #0
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800139a:	3b01      	subs	r3, #1
 800139c:	6939      	ldr	r1, [r7, #16]
 800139e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80013a0:	fb01 f303 	mul.w	r3, r1, r3
 80013a4:	441a      	add	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	22ff      	movs	r2, #255	; 0xff
 80013ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	22ff      	movs	r2, #255	; 0xff
 80013b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d114      	bne.n	80013ea <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d01a      	beq.n	80013fe <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	3310      	adds	r3, #16
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 ff57 	bl	8002280 <xTaskRemoveFromEventList>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d012      	beq.n	80013fe <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <xQueueGenericReset+0x11c>)
 80013da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	f3bf 8f4f 	dsb	sy
 80013e4:	f3bf 8f6f 	isb	sy
 80013e8:	e009      	b.n	80013fe <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	3310      	adds	r3, #16
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff ff00 	bl	80011f4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	3324      	adds	r3, #36	; 0x24
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fefb 	bl	80011f4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80013fe:	f001 fdd3 	bl	8002fa8 <vPortExitCritical>
 8001402:	e001      	b.n	8001408 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8001404:	2300      	movs	r3, #0
 8001406:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10a      	bne.n	8001424 <xQueueGenericReset+0x110>
        __asm volatile
 800140e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001412:	f383 8811 	msr	BASEPRI, r3
 8001416:	f3bf 8f6f 	isb	sy
 800141a:	f3bf 8f4f 	dsb	sy
 800141e:	60bb      	str	r3, [r7, #8]
    }
 8001420:	bf00      	nop
 8001422:	e7fe      	b.n	8001422 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8001424:	697b      	ldr	r3, [r7, #20]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000ed04 	.word	0xe000ed04

08001434 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8001434:	b580      	push	{r7, lr}
 8001436:	b08a      	sub	sp, #40	; 0x28
 8001438:	af02      	add	r7, sp, #8
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	4613      	mov	r3, r2
 8001440:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d02e      	beq.n	80014aa <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800144c:	2100      	movs	r1, #0
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	fba3 2302 	umull	r2, r3, r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d000      	beq.n	800145c <xQueueGenericCreate+0x28>
 800145a:	2101      	movs	r1, #1
 800145c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800145e:	2b00      	cmp	r3, #0
 8001460:	d123      	bne.n	80014aa <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	68ba      	ldr	r2, [r7, #8]
 8001466:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800146a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800146e:	d81c      	bhi.n	80014aa <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	3350      	adds	r3, #80	; 0x50
 800147e:	4618      	mov	r0, r3
 8001480:	f001 fe44 	bl	800310c <pvPortMalloc>
 8001484:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d01c      	beq.n	80014c6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3350      	adds	r3, #80	; 0x50
 8001494:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001496:	79fa      	ldrb	r2, [r7, #7]
 8001498:	69fb      	ldr	r3, [r7, #28]
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	4613      	mov	r3, r2
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f814 	bl	80014d0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80014a8:	e00d      	b.n	80014c6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10a      	bne.n	80014c6 <xQueueGenericCreate+0x92>
        __asm volatile
 80014b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014b4:	f383 8811 	msr	BASEPRI, r3
 80014b8:	f3bf 8f6f 	isb	sy
 80014bc:	f3bf 8f4f 	dsb	sy
 80014c0:	613b      	str	r3, [r7, #16]
    }
 80014c2:	bf00      	nop
 80014c4:	e7fe      	b.n	80014c4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80014c6:	69fb      	ldr	r3, [r7, #28]
    }
 80014c8:	4618      	mov	r0, r3
 80014ca:	3720      	adds	r7, #32
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b084      	sub	sp, #16
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d103      	bne.n	80014ec <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	e002      	b.n	80014f2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	68fa      	ldr	r2, [r7, #12]
 80014f6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80014fe:	2101      	movs	r1, #1
 8001500:	69b8      	ldr	r0, [r7, #24]
 8001502:	f7ff ff07 	bl	8001314 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	78fa      	ldrb	r2, [r7, #3]
 800150a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08c      	sub	sp, #48	; 0x30
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8001524:	2300      	movs	r3, #0
 8001526:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800152c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10a      	bne.n	8001548 <xQueueReceive+0x30>
        __asm volatile
 8001532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001536:	f383 8811 	msr	BASEPRI, r3
 800153a:	f3bf 8f6f 	isb	sy
 800153e:	f3bf 8f4f 	dsb	sy
 8001542:	623b      	str	r3, [r7, #32]
    }
 8001544:	bf00      	nop
 8001546:	e7fe      	b.n	8001546 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d103      	bne.n	8001556 <xQueueReceive+0x3e>
 800154e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <xQueueReceive+0x42>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <xQueueReceive+0x44>
 800155a:	2300      	movs	r3, #0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d10a      	bne.n	8001576 <xQueueReceive+0x5e>
        __asm volatile
 8001560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001564:	f383 8811 	msr	BASEPRI, r3
 8001568:	f3bf 8f6f 	isb	sy
 800156c:	f3bf 8f4f 	dsb	sy
 8001570:	61fb      	str	r3, [r7, #28]
    }
 8001572:	bf00      	nop
 8001574:	e7fe      	b.n	8001574 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001576:	f001 f893 	bl	80026a0 <xTaskGetSchedulerState>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <xQueueReceive+0x6e>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d101      	bne.n	800158a <xQueueReceive+0x72>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <xQueueReceive+0x74>
 800158a:	2300      	movs	r3, #0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d10a      	bne.n	80015a6 <xQueueReceive+0x8e>
        __asm volatile
 8001590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001594:	f383 8811 	msr	BASEPRI, r3
 8001598:	f3bf 8f6f 	isb	sy
 800159c:	f3bf 8f4f 	dsb	sy
 80015a0:	61bb      	str	r3, [r7, #24]
    }
 80015a2:	bf00      	nop
 80015a4:	e7fe      	b.n	80015a4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80015a6:	f001 fccf 	bl	8002f48 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ae:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80015b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01f      	beq.n	80015f6 <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015ba:	f000 f88d 	bl	80016d8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80015c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d00f      	beq.n	80015ee <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80015ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d0:	3310      	adds	r3, #16
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fe54 	bl	8002280 <xTaskRemoveFromEventList>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80015de:	4b3d      	ldr	r3, [pc, #244]	; (80016d4 <xQueueReceive+0x1bc>)
 80015e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	f3bf 8f4f 	dsb	sy
 80015ea:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80015ee:	f001 fcdb 	bl	8002fa8 <vPortExitCritical>
                return pdPASS;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e069      	b.n	80016ca <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d103      	bne.n	8001604 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80015fc:	f001 fcd4 	bl	8002fa8 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8001600:	2300      	movs	r3, #0
 8001602:	e062      	b.n	80016ca <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8001604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4618      	mov	r0, r3
 8001610:	f000 ff0c 	bl	800242c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8001614:	2301      	movs	r3, #1
 8001616:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8001618:	f001 fcc6 	bl	8002fa8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800161c:	f000 fb3a 	bl	8001c94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8001620:	f001 fc92 	bl	8002f48 <vPortEnterCritical>
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800162a:	b25b      	sxtb	r3, r3
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d103      	bne.n	800163a <xQueueReceive+0x122>
 8001632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001640:	b25b      	sxtb	r3, r3
 8001642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001646:	d103      	bne.n	8001650 <xQueueReceive+0x138>
 8001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001650:	f001 fcaa 	bl	8002fa8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8001654:	1d3a      	adds	r2, r7, #4
 8001656:	f107 0310 	add.w	r3, r7, #16
 800165a:	4611      	mov	r1, r2
 800165c:	4618      	mov	r0, r3
 800165e:	f000 fefb 	bl	8002458 <xTaskCheckForTimeOut>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d123      	bne.n	80016b0 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8001668:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800166a:	f000 f8ad 	bl	80017c8 <prvIsQueueEmpty>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d017      	beq.n	80016a4 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001676:	3324      	adds	r3, #36	; 0x24
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	4611      	mov	r1, r2
 800167c:	4618      	mov	r0, r3
 800167e:	f000 fd95 	bl	80021ac <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8001682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001684:	f000 f84e 	bl	8001724 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8001688:	f000 fb12 	bl	8001cb0 <xTaskResumeAll>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d189      	bne.n	80015a6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8001692:	4b10      	ldr	r3, [pc, #64]	; (80016d4 <xQueueReceive+0x1bc>)
 8001694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f3bf 8f4f 	dsb	sy
 800169e:	f3bf 8f6f 	isb	sy
 80016a2:	e780      	b.n	80015a6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80016a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016a6:	f000 f83d 	bl	8001724 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80016aa:	f000 fb01 	bl	8001cb0 <xTaskResumeAll>
 80016ae:	e77a      	b.n	80015a6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80016b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016b2:	f000 f837 	bl	8001724 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80016b6:	f000 fafb 	bl	8001cb0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80016ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016bc:	f000 f884 	bl	80017c8 <prvIsQueueEmpty>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f43f af6f 	beq.w	80015a6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80016c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3730      	adds	r7, #48	; 0x30
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000ed04 	.word	0xe000ed04

080016d8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d018      	beq.n	800171c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68da      	ldr	r2, [r3, #12]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f2:	441a      	add	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68da      	ldr	r2, [r3, #12]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	429a      	cmp	r2, r3
 8001702:	d303      	bcc.n	800170c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68d9      	ldr	r1, [r3, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	461a      	mov	r2, r3
 8001716:	6838      	ldr	r0, [r7, #0]
 8001718:	f001 ff1a 	bl	8003550 <memcpy>
    }
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800172c:	f001 fc0c 	bl	8002f48 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001736:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001738:	e011      	b.n	800175e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173e:	2b00      	cmp	r3, #0
 8001740:	d012      	beq.n	8001768 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	3324      	adds	r3, #36	; 0x24
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fd9a 	bl	8002280 <xTaskRemoveFromEventList>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8001752:	f000 fee7 	bl	8002524 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	3b01      	subs	r3, #1
 800175a:	b2db      	uxtb	r3, r3
 800175c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	2b00      	cmp	r3, #0
 8001764:	dce9      	bgt.n	800173a <prvUnlockQueue+0x16>
 8001766:	e000      	b.n	800176a <prvUnlockQueue+0x46>
                        break;
 8001768:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	22ff      	movs	r2, #255	; 0xff
 800176e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8001772:	f001 fc19 	bl	8002fa8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8001776:	f001 fbe7 	bl	8002f48 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001780:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001782:	e011      	b.n	80017a8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d012      	beq.n	80017b2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3310      	adds	r3, #16
 8001790:	4618      	mov	r0, r3
 8001792:	f000 fd75 	bl	8002280 <xTaskRemoveFromEventList>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800179c:	f000 fec2 	bl	8002524 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80017a0:	7bbb      	ldrb	r3, [r7, #14]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80017a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	dce9      	bgt.n	8001784 <prvUnlockQueue+0x60>
 80017b0:	e000      	b.n	80017b4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80017b2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	22ff      	movs	r2, #255	; 0xff
 80017b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80017bc:	f001 fbf4 	bl	8002fa8 <vPortExitCritical>
}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80017d0:	f001 fbba 	bl	8002f48 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80017dc:	2301      	movs	r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e001      	b.n	80017e6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80017e6:	f001 fbdf 	bl	8002fa8 <vPortExitCritical>

    return xReturn;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80017f4:	b480      	push	{r7}
 80017f6:	b087      	sub	sp, #28
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        configASSERT( xQueue );
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d10a      	bne.n	800181a <vQueueAddToRegistry+0x26>
        __asm volatile
 8001804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001808:	f383 8811 	msr	BASEPRI, r3
 800180c:	f3bf 8f6f 	isb	sy
 8001810:	f3bf 8f4f 	dsb	sy
 8001814:	60fb      	str	r3, [r7, #12]
    }
 8001816:	bf00      	nop
 8001818:	e7fe      	b.n	8001818 <vQueueAddToRegistry+0x24>

        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]

        if( pcQueueName != NULL )
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d024      	beq.n	800186e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e01e      	b.n	8001868 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800182a:	4a18      	ldr	r2, [pc, #96]	; (800188c <vQueueAddToRegistry+0x98>)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	4413      	add	r3, r2
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	d105      	bne.n	8001846 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <vQueueAddToRegistry+0x98>)
 8001840:	4413      	add	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
                    break;
 8001844:	e013      	b.n	800186e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10a      	bne.n	8001862 <vQueueAddToRegistry+0x6e>
 800184c:	4a0f      	ldr	r2, [pc, #60]	; (800188c <vQueueAddToRegistry+0x98>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d104      	bne.n	8001862 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	4a0b      	ldr	r2, [pc, #44]	; (800188c <vQueueAddToRegistry+0x98>)
 800185e:	4413      	add	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3301      	adds	r3, #1
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2b07      	cmp	r3, #7
 800186c:	d9dd      	bls.n	800182a <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <vQueueAddToRegistry+0x8c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001880:	bf00      	nop
 8001882:	371c      	adds	r7, #28
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	2000003c 	.word	0x2000003c

08001890 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80018a0:	f001 fb52 	bl	8002f48 <vPortEnterCritical>
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018aa:	b25b      	sxtb	r3, r3
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d103      	bne.n	80018ba <vQueueWaitForMessageRestricted+0x2a>
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018c0:	b25b      	sxtb	r3, r3
 80018c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c6:	d103      	bne.n	80018d0 <vQueueWaitForMessageRestricted+0x40>
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80018d0:	f001 fb6a 	bl	8002fa8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d106      	bne.n	80018ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3324      	adds	r3, #36	; 0x24
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fc85 	bl	80021f4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80018ea:	6978      	ldr	r0, [r7, #20]
 80018ec:	f7ff ff1a 	bl	8001724 <prvUnlockQueue>
    }
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af04      	add	r7, sp, #16
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	603b      	str	r3, [r7, #0]
 8001904:	4613      	mov	r3, r2
 8001906:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001908:	88fb      	ldrh	r3, [r7, #6]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4618      	mov	r0, r3
 800190e:	f001 fbfd 	bl	800310c <pvPortMalloc>
 8001912:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d00e      	beq.n	8001938 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800191a:	2058      	movs	r0, #88	; 0x58
 800191c:	f001 fbf6 	bl	800310c <pvPortMalloc>
 8001920:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	697a      	ldr	r2, [r7, #20]
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
 800192e:	e005      	b.n	800193c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8001930:	6978      	ldr	r0, [r7, #20]
 8001932:	f001 fccb 	bl	80032cc <vPortFree>
 8001936:	e001      	b.n	800193c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001938:	2300      	movs	r3, #0
 800193a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d013      	beq.n	800196a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001942:	88fa      	ldrh	r2, [r7, #6]
 8001944:	2300      	movs	r3, #0
 8001946:	9303      	str	r3, [sp, #12]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	9302      	str	r3, [sp, #8]
 800194c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194e:	9301      	str	r3, [sp, #4]
 8001950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68b9      	ldr	r1, [r7, #8]
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 f80e 	bl	800197a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800195e:	69f8      	ldr	r0, [r7, #28]
 8001960:	f000 f8b0 	bl	8001ac4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001964:	2301      	movs	r3, #1
 8001966:	61bb      	str	r3, [r7, #24]
 8001968:	e002      	b.n	8001970 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800196a:	f04f 33ff 	mov.w	r3, #4294967295
 800196e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001970:	69bb      	ldr	r3, [r7, #24]
    }
 8001972:	4618      	mov	r0, r3
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b088      	sub	sp, #32
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
 8001986:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	21a5      	movs	r1, #165	; 0xa5
 8001994:	f001 fdea 	bl	800356c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800199a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80019a2:	3b01      	subs	r3, #1
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	4413      	add	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f023 0307 	bic.w	r3, r3, #7
 80019b0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d00a      	beq.n	80019d2 <prvInitialiseNewTask+0x58>
        __asm volatile
 80019bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019c0:	f383 8811 	msr	BASEPRI, r3
 80019c4:	f3bf 8f6f 	isb	sy
 80019c8:	f3bf 8f4f 	dsb	sy
 80019cc:	617b      	str	r3, [r7, #20]
    }
 80019ce:	bf00      	nop
 80019d0:	e7fe      	b.n	80019d0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d01f      	beq.n	8001a18 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	e012      	b.n	8001a04 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	7819      	ldrb	r1, [r3, #0]
 80019e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	4413      	add	r3, r2
 80019ec:	3334      	adds	r3, #52	; 0x34
 80019ee:	460a      	mov	r2, r1
 80019f0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	4413      	add	r3, r2
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d006      	beq.n	8001a0c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	3301      	adds	r3, #1
 8001a02:	61fb      	str	r3, [r7, #28]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	2b09      	cmp	r3, #9
 8001a08:	d9e9      	bls.n	80019de <prvInitialiseNewTask+0x64>
 8001a0a:	e000      	b.n	8001a0e <prvInitialiseNewTask+0x94>
            {
                break;
 8001a0c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001a16:	e003      	b.n	8001a20 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	d90a      	bls.n	8001a3c <prvInitialiseNewTask+0xc2>
        __asm volatile
 8001a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a2a:	f383 8811 	msr	BASEPRI, r3
 8001a2e:	f3bf 8f6f 	isb	sy
 8001a32:	f3bf 8f4f 	dsb	sy
 8001a36:	613b      	str	r3, [r7, #16]
    }
 8001a38:	bf00      	nop
 8001a3a:	e7fe      	b.n	8001a3a <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d901      	bls.n	8001a46 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a42:	2304      	movs	r3, #4
 8001a44:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a4a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a50:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8001a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a54:	2200      	movs	r2, #0
 8001a56:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	3304      	adds	r3, #4
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fbe9 	bl	8001234 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a64:	3318      	adds	r3, #24
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fbe4 	bl	8001234 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a70:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a74:	f1c3 0205 	rsb	r2, r3, #5
 8001a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a84:	3350      	adds	r3, #80	; 0x50
 8001a86:	2204      	movs	r2, #4
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f001 fd6e 	bl	800356c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a92:	3354      	adds	r3, #84	; 0x54
 8001a94:	2201      	movs	r2, #1
 8001a96:	2100      	movs	r1, #0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f001 fd67 	bl	800356c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	68f9      	ldr	r1, [r7, #12]
 8001aa2:	69b8      	ldr	r0, [r7, #24]
 8001aa4:	f001 f91e 	bl	8002ce4 <pxPortInitialiseStack>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ab8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001aba:	bf00      	nop
 8001abc:	3720      	adds	r7, #32
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001acc:	f001 fa3c 	bl	8002f48 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001ad0:	4b40      	ldr	r3, [pc, #256]	; (8001bd4 <prvAddNewTaskToReadyList+0x110>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a3f      	ldr	r2, [pc, #252]	; (8001bd4 <prvAddNewTaskToReadyList+0x110>)
 8001ad8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001ada:	4b3f      	ldr	r3, [pc, #252]	; (8001bd8 <prvAddNewTaskToReadyList+0x114>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d109      	bne.n	8001af6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001ae2:	4a3d      	ldr	r2, [pc, #244]	; (8001bd8 <prvAddNewTaskToReadyList+0x114>)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <prvAddNewTaskToReadyList+0x110>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d110      	bne.n	8001b12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001af0:	f000 fd3c 	bl	800256c <prvInitialiseTaskLists>
 8001af4:	e00d      	b.n	8001b12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001af6:	4b39      	ldr	r3, [pc, #228]	; (8001bdc <prvAddNewTaskToReadyList+0x118>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d109      	bne.n	8001b12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <prvAddNewTaskToReadyList+0x114>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d802      	bhi.n	8001b12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001b0c:	4a32      	ldr	r2, [pc, #200]	; (8001bd8 <prvAddNewTaskToReadyList+0x114>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001b12:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <prvAddNewTaskToReadyList+0x11c>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	3301      	adds	r3, #1
 8001b18:	4a31      	ldr	r2, [pc, #196]	; (8001be0 <prvAddNewTaskToReadyList+0x11c>)
 8001b1a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001b1c:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <prvAddNewTaskToReadyList+0x11c>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b28:	2201      	movs	r2, #1
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <prvAddNewTaskToReadyList+0x120>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	4a2c      	ldr	r2, [pc, #176]	; (8001be4 <prvAddNewTaskToReadyList+0x120>)
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3a:	492b      	ldr	r1, [pc, #172]	; (8001be8 <prvAddNewTaskToReadyList+0x124>)
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4413      	add	r3, r2
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	440b      	add	r3, r1
 8001b46:	3304      	adds	r3, #4
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	60fb      	str	r3, [r7, #12]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	3204      	adds	r2, #4
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	1d1a      	adds	r2, r3, #4
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	4a1b      	ldr	r2, [pc, #108]	; (8001be8 <prvAddNewTaskToReadyList+0x124>)
 8001b7a:	441a      	add	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	615a      	str	r2, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b84:	4918      	ldr	r1, [pc, #96]	; (8001be8 <prvAddNewTaskToReadyList+0x124>)
 8001b86:	4613      	mov	r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	4413      	add	r3, r2
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	440b      	add	r3, r1
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	1c59      	adds	r1, r3, #1
 8001b94:	4814      	ldr	r0, [pc, #80]	; (8001be8 <prvAddNewTaskToReadyList+0x124>)
 8001b96:	4613      	mov	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	4403      	add	r3, r0
 8001ba0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001ba2:	f001 fa01 	bl	8002fa8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <prvAddNewTaskToReadyList+0x118>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00e      	beq.n	8001bcc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <prvAddNewTaskToReadyList+0x114>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d207      	bcs.n	8001bcc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001bbc:	4b0b      	ldr	r3, [pc, #44]	; (8001bec <prvAddNewTaskToReadyList+0x128>)
 8001bbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	f3bf 8f4f 	dsb	sy
 8001bc8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001bcc:	bf00      	nop
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000154 	.word	0x20000154
 8001bd8:	2000007c 	.word	0x2000007c
 8001bdc:	20000160 	.word	0x20000160
 8001be0:	20000170 	.word	0x20000170
 8001be4:	2000015c 	.word	0x2000015c
 8001be8:	20000080 	.word	0x20000080
 8001bec:	e000ed04 	.word	0xe000ed04

08001bf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001bf6:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <vTaskStartScheduler+0x88>)
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	2282      	movs	r2, #130	; 0x82
 8001c02:	491e      	ldr	r1, [pc, #120]	; (8001c7c <vTaskStartScheduler+0x8c>)
 8001c04:	481e      	ldr	r0, [pc, #120]	; (8001c80 <vTaskStartScheduler+0x90>)
 8001c06:	f7ff fe77 	bl	80018f8 <xTaskCreate>
 8001c0a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d102      	bne.n	8001c18 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8001c12:	f000 fde3 	bl	80027dc <xTimerCreateTimerTask>
 8001c16:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d116      	bne.n	8001c4c <vTaskStartScheduler+0x5c>
        __asm volatile
 8001c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c22:	f383 8811 	msr	BASEPRI, r3
 8001c26:	f3bf 8f6f 	isb	sy
 8001c2a:	f3bf 8f4f 	dsb	sy
 8001c2e:	60bb      	str	r3, [r7, #8]
    }
 8001c30:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001c32:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <vTaskStartScheduler+0x94>)
 8001c34:	f04f 32ff 	mov.w	r2, #4294967295
 8001c38:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <vTaskStartScheduler+0x98>)
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <vTaskStartScheduler+0x9c>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001c46:	f001 f8dd 	bl	8002e04 <xPortStartScheduler>
 8001c4a:	e00e      	b.n	8001c6a <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c52:	d10a      	bne.n	8001c6a <vTaskStartScheduler+0x7a>
        __asm volatile
 8001c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c58:	f383 8811 	msr	BASEPRI, r3
 8001c5c:	f3bf 8f6f 	isb	sy
 8001c60:	f3bf 8f4f 	dsb	sy
 8001c64:	607b      	str	r3, [r7, #4]
    }
 8001c66:	bf00      	nop
 8001c68:	e7fe      	b.n	8001c68 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <vTaskStartScheduler+0xa0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
}
 8001c6e:	bf00      	nop
 8001c70:	3710      	adds	r7, #16
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000178 	.word	0x20000178
 8001c7c:	080035a4 	.word	0x080035a4
 8001c80:	0800253d 	.word	0x0800253d
 8001c84:	20000174 	.word	0x20000174
 8001c88:	20000160 	.word	0x20000160
 8001c8c:	20000158 	.word	0x20000158
 8001c90:	2000000c 	.word	0x2000000c

08001c94 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001c98:	4b04      	ldr	r3, [pc, #16]	; (8001cac <vTaskSuspendAll+0x18>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	4a03      	ldr	r2, [pc, #12]	; (8001cac <vTaskSuspendAll+0x18>)
 8001ca0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001ca2:	bf00      	nop
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	2000017c 	.word	0x2000017c

08001cb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001cbe:	4b71      	ldr	r3, [pc, #452]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10a      	bne.n	8001cdc <xTaskResumeAll+0x2c>
        __asm volatile
 8001cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cca:	f383 8811 	msr	BASEPRI, r3
 8001cce:	f3bf 8f6f 	isb	sy
 8001cd2:	f3bf 8f4f 	dsb	sy
 8001cd6:	607b      	str	r3, [r7, #4]
    }
 8001cd8:	bf00      	nop
 8001cda:	e7fe      	b.n	8001cda <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001cdc:	f001 f934 	bl	8002f48 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001ce0:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3b01      	subs	r3, #1
 8001ce6:	4a67      	ldr	r2, [pc, #412]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001ce8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cea:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <xTaskResumeAll+0x1d4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 80c0 	bne.w	8001e74 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001cf4:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <xTaskResumeAll+0x1d8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80bb 	beq.w	8001e74 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cfe:	e08a      	b.n	8001e16 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d00:	4b62      	ldr	r3, [pc, #392]	; (8001e8c <xTaskResumeAll+0x1dc>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	69fa      	ldr	r2, [r7, #28]
 8001d14:	6a12      	ldr	r2, [r2, #32]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	69d2      	ldr	r2, [r2, #28]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3318      	adds	r3, #24
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d103      	bne.n	8001d36 <xTaskResumeAll+0x86>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	629a      	str	r2, [r3, #40]	; 0x28
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	1e5a      	subs	r2, r3, #1
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	69fa      	ldr	r2, [r7, #28]
 8001d52:	68d2      	ldr	r2, [r2, #12]
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	6892      	ldr	r2, [r2, #8]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	3304      	adds	r3, #4
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d103      	bne.n	8001d74 <xTaskResumeAll+0xc4>
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	68da      	ldr	r2, [r3, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	2200      	movs	r2, #0
 8001d78:	615a      	str	r2, [r3, #20]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2201      	movs	r2, #1
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <xTaskResumeAll+0x1e0>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	4a3f      	ldr	r2, [pc, #252]	; (8001e90 <xTaskResumeAll+0x1e0>)
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	493e      	ldr	r1, [pc, #248]	; (8001e94 <xTaskResumeAll+0x1e4>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	3304      	adds	r3, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60bb      	str	r3, [r7, #8]
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	3204      	adds	r2, #4
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4a2e      	ldr	r2, [pc, #184]	; (8001e94 <xTaskResumeAll+0x1e4>)
 8001dda:	441a      	add	r2, r3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de4:	492b      	ldr	r1, [pc, #172]	; (8001e94 <xTaskResumeAll+0x1e4>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1c59      	adds	r1, r3, #1
 8001df4:	4827      	ldr	r0, [pc, #156]	; (8001e94 <xTaskResumeAll+0x1e4>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4403      	add	r3, r0
 8001e00:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <xTaskResumeAll+0x1e8>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d302      	bcc.n	8001e16 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8001e10:	4b22      	ldr	r3, [pc, #136]	; (8001e9c <xTaskResumeAll+0x1ec>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e16:	4b1d      	ldr	r3, [pc, #116]	; (8001e8c <xTaskResumeAll+0x1dc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f47f af70 	bne.w	8001d00 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001e26:	f000 fc1f 	bl	8002668 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <xTaskResumeAll+0x1f0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d010      	beq.n	8001e58 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001e36:	f000 f847 	bl	8001ec8 <xTaskIncrementTick>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8001e40:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <xTaskResumeAll+0x1ec>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f1      	bne.n	8001e36 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8001e52:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <xTaskResumeAll+0x1f0>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <xTaskResumeAll+0x1ec>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d009      	beq.n	8001e74 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001e60:	2301      	movs	r3, #1
 8001e62:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001e64:	4b0f      	ldr	r3, [pc, #60]	; (8001ea4 <xTaskResumeAll+0x1f4>)
 8001e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	f3bf 8f4f 	dsb	sy
 8001e70:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001e74:	f001 f898 	bl	8002fa8 <vPortExitCritical>

    return xAlreadyYielded;
 8001e78:	69bb      	ldr	r3, [r7, #24]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000017c 	.word	0x2000017c
 8001e88:	20000154 	.word	0x20000154
 8001e8c:	20000114 	.word	0x20000114
 8001e90:	2000015c 	.word	0x2000015c
 8001e94:	20000080 	.word	0x20000080
 8001e98:	2000007c 	.word	0x2000007c
 8001e9c:	20000168 	.word	0x20000168
 8001ea0:	20000164 	.word	0x20000164
 8001ea4:	e000ed04 	.word	0xe000ed04

08001ea8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <xTaskGetTickCount+0x1c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	20000158 	.word	0x20000158

08001ec8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001ed2:	4b7d      	ldr	r3, [pc, #500]	; (80020c8 <xTaskIncrementTick+0x200>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f040 80ec 	bne.w	80020b4 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001edc:	4b7b      	ldr	r3, [pc, #492]	; (80020cc <xTaskIncrementTick+0x204>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001ee4:	4a79      	ldr	r2, [pc, #484]	; (80020cc <xTaskIncrementTick+0x204>)
 8001ee6:	6a3b      	ldr	r3, [r7, #32]
 8001ee8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001eea:	6a3b      	ldr	r3, [r7, #32]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d120      	bne.n	8001f32 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001ef0:	4b77      	ldr	r3, [pc, #476]	; (80020d0 <xTaskIncrementTick+0x208>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00a      	beq.n	8001f10 <xTaskIncrementTick+0x48>
        __asm volatile
 8001efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001efe:	f383 8811 	msr	BASEPRI, r3
 8001f02:	f3bf 8f6f 	isb	sy
 8001f06:	f3bf 8f4f 	dsb	sy
 8001f0a:	607b      	str	r3, [r7, #4]
    }
 8001f0c:	bf00      	nop
 8001f0e:	e7fe      	b.n	8001f0e <xTaskIncrementTick+0x46>
 8001f10:	4b6f      	ldr	r3, [pc, #444]	; (80020d0 <xTaskIncrementTick+0x208>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61fb      	str	r3, [r7, #28]
 8001f16:	4b6f      	ldr	r3, [pc, #444]	; (80020d4 <xTaskIncrementTick+0x20c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a6d      	ldr	r2, [pc, #436]	; (80020d0 <xTaskIncrementTick+0x208>)
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	4a6d      	ldr	r2, [pc, #436]	; (80020d4 <xTaskIncrementTick+0x20c>)
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <xTaskIncrementTick+0x210>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	4a6b      	ldr	r2, [pc, #428]	; (80020d8 <xTaskIncrementTick+0x210>)
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	f000 fb9b 	bl	8002668 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001f32:	4b6a      	ldr	r3, [pc, #424]	; (80020dc <xTaskIncrementTick+0x214>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6a3a      	ldr	r2, [r7, #32]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	f0c0 80a6 	bcc.w	800208a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f3e:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <xTaskIncrementTick+0x208>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f48:	4b64      	ldr	r3, [pc, #400]	; (80020dc <xTaskIncrementTick+0x214>)
 8001f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f4e:	601a      	str	r2, [r3, #0]
                    break;
 8001f50:	e09b      	b.n	800208a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <xTaskIncrementTick+0x208>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8001f62:	6a3a      	ldr	r2, [r7, #32]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d203      	bcs.n	8001f72 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001f6a:	4a5c      	ldr	r2, [pc, #368]	; (80020dc <xTaskIncrementTick+0x214>)
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8001f70:	e08b      	b.n	800208a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	613b      	str	r3, [r7, #16]
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	69ba      	ldr	r2, [r7, #24]
 8001f7e:	68d2      	ldr	r2, [r2, #12]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	6892      	ldr	r2, [r2, #8]
 8001f8a:	605a      	str	r2, [r3, #4]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	3304      	adds	r3, #4
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d103      	bne.n	8001fa0 <xTaskIncrementTick+0xd8>
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	605a      	str	r2, [r3, #4]
 8001fa0:	69bb      	ldr	r3, [r7, #24]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	1e5a      	subs	r2, r3, #1
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d01e      	beq.n	8001ff6 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	6a12      	ldr	r2, [r2, #32]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	69d2      	ldr	r2, [r2, #28]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	69bb      	ldr	r3, [r7, #24]
 8001fd8:	3318      	adds	r3, #24
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d103      	bne.n	8001fe6 <xTaskIncrementTick+0x11e>
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	629a      	str	r2, [r3, #40]	; 0x28
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	1e5a      	subs	r2, r3, #1
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	409a      	lsls	r2, r3
 8001ffe:	4b38      	ldr	r3, [pc, #224]	; (80020e0 <xTaskIncrementTick+0x218>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	4a36      	ldr	r2, [pc, #216]	; (80020e0 <xTaskIncrementTick+0x218>)
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200c:	4935      	ldr	r1, [pc, #212]	; (80020e4 <xTaskIncrementTick+0x21c>)
 800200e:	4613      	mov	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3304      	adds	r3, #4
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	68ba      	ldr	r2, [r7, #8]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	60da      	str	r2, [r3, #12]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	3204      	adds	r2, #4
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	1d1a      	adds	r2, r3, #4
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002042:	4613      	mov	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4a26      	ldr	r2, [pc, #152]	; (80020e4 <xTaskIncrementTick+0x21c>)
 800204c:	441a      	add	r2, r3
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	615a      	str	r2, [r3, #20]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002056:	4923      	ldr	r1, [pc, #140]	; (80020e4 <xTaskIncrementTick+0x21c>)
 8002058:	4613      	mov	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4413      	add	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1c59      	adds	r1, r3, #1
 8002066:	481f      	ldr	r0, [pc, #124]	; (80020e4 <xTaskIncrementTick+0x21c>)
 8002068:	4613      	mov	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4403      	add	r3, r0
 8002072:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002078:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <xTaskIncrementTick+0x220>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207e:	429a      	cmp	r2, r3
 8002080:	f4ff af5d 	bcc.w	8001f3e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002084:	2301      	movs	r3, #1
 8002086:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002088:	e759      	b.n	8001f3e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <xTaskIncrementTick+0x220>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002090:	4914      	ldr	r1, [pc, #80]	; (80020e4 <xTaskIncrementTick+0x21c>)
 8002092:	4613      	mov	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d901      	bls.n	80020a6 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 80020a2:	2301      	movs	r3, #1
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80020a6:	4b11      	ldr	r3, [pc, #68]	; (80020ec <xTaskIncrementTick+0x224>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d007      	beq.n	80020be <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 80020ae:	2301      	movs	r3, #1
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
 80020b2:	e004      	b.n	80020be <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <xTaskIncrementTick+0x228>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <xTaskIncrementTick+0x228>)
 80020bc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3728      	adds	r7, #40	; 0x28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	2000017c 	.word	0x2000017c
 80020cc:	20000158 	.word	0x20000158
 80020d0:	2000010c 	.word	0x2000010c
 80020d4:	20000110 	.word	0x20000110
 80020d8:	2000016c 	.word	0x2000016c
 80020dc:	20000174 	.word	0x20000174
 80020e0:	2000015c 	.word	0x2000015c
 80020e4:	20000080 	.word	0x20000080
 80020e8:	2000007c 	.word	0x2000007c
 80020ec:	20000168 	.word	0x20000168
 80020f0:	20000164 	.word	0x20000164

080020f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020f4:	b480      	push	{r7}
 80020f6:	b087      	sub	sp, #28
 80020f8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020fa:	4b27      	ldr	r3, [pc, #156]	; (8002198 <vTaskSwitchContext+0xa4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002102:	4b26      	ldr	r3, [pc, #152]	; (800219c <vTaskSwitchContext+0xa8>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002108:	e03f      	b.n	800218a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800210a:	4b24      	ldr	r3, [pc, #144]	; (800219c <vTaskSwitchContext+0xa8>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002110:	4b23      	ldr	r3, [pc, #140]	; (80021a0 <vTaskSwitchContext+0xac>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	fab3 f383 	clz	r3, r3
 800211c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	f1c3 031f 	rsb	r3, r3, #31
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	491f      	ldr	r1, [pc, #124]	; (80021a4 <vTaskSwitchContext+0xb0>)
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	440b      	add	r3, r1
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d10a      	bne.n	8002150 <vTaskSwitchContext+0x5c>
        __asm volatile
 800213a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213e:	f383 8811 	msr	BASEPRI, r3
 8002142:	f3bf 8f6f 	isb	sy
 8002146:	f3bf 8f4f 	dsb	sy
 800214a:	607b      	str	r3, [r7, #4]
    }
 800214c:	bf00      	nop
 800214e:	e7fe      	b.n	800214e <vTaskSwitchContext+0x5a>
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <vTaskSwitchContext+0xb0>)
 800215c:	4413      	add	r3, r2
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	3308      	adds	r3, #8
 8002172:	429a      	cmp	r2, r3
 8002174:	d104      	bne.n	8002180 <vTaskSwitchContext+0x8c>
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	4a08      	ldr	r2, [pc, #32]	; (80021a8 <vTaskSwitchContext+0xb4>)
 8002188:	6013      	str	r3, [r2, #0]
}
 800218a:	bf00      	nop
 800218c:	371c      	adds	r7, #28
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	2000017c 	.word	0x2000017c
 800219c:	20000168 	.word	0x20000168
 80021a0:	2000015c 	.word	0x2000015c
 80021a4:	20000080 	.word	0x20000080
 80021a8:	2000007c 	.word	0x2000007c

080021ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d10a      	bne.n	80021d2 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80021bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c0:	f383 8811 	msr	BASEPRI, r3
 80021c4:	f3bf 8f6f 	isb	sy
 80021c8:	f3bf 8f4f 	dsb	sy
 80021cc:	60fb      	str	r3, [r7, #12]
    }
 80021ce:	bf00      	nop
 80021d0:	e7fe      	b.n	80021d0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <vTaskPlaceOnEventList+0x44>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3318      	adds	r3, #24
 80021d8:	4619      	mov	r1, r3
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff f837 	bl	800124e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80021e0:	2101      	movs	r1, #1
 80021e2:	6838      	ldr	r0, [r7, #0]
 80021e4:	f000 fa7a 	bl	80026dc <prvAddCurrentTaskToDelayedList>
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000007c 	.word	0x2000007c

080021f4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10a      	bne.n	800221c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8002206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800220a:	f383 8811 	msr	BASEPRI, r3
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	613b      	str	r3, [r7, #16]
    }
 8002218:	bf00      	nop
 800221a:	e7fe      	b.n	800221a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <vTaskPlaceOnEventListRestricted+0x88>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	61da      	str	r2, [r3, #28]
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <vTaskPlaceOnEventListRestricted+0x88>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	697a      	ldr	r2, [r7, #20]
 8002230:	6892      	ldr	r2, [r2, #8]
 8002232:	621a      	str	r2, [r3, #32]
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <vTaskPlaceOnEventListRestricted+0x88>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	3218      	adds	r2, #24
 800223e:	605a      	str	r2, [r3, #4]
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <vTaskPlaceOnEventListRestricted+0x88>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f103 0218 	add.w	r2, r3, #24
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <vTaskPlaceOnEventListRestricted+0x88>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	1c5a      	adds	r2, r3, #1
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8002264:	f04f 33ff 	mov.w	r3, #4294967295
 8002268:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	68b8      	ldr	r0, [r7, #8]
 800226e:	f000 fa35 	bl	80026dc <prvAddCurrentTaskToDelayedList>
    }
 8002272:	bf00      	nop
 8002274:	3718      	adds	r7, #24
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	2000007c 	.word	0x2000007c

08002280 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8002280:	b480      	push	{r7}
 8002282:	b08b      	sub	sp, #44	; 0x2c
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10a      	bne.n	80022ac <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8002296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800229a:	f383 8811 	msr	BASEPRI, r3
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f3bf 8f4f 	dsb	sy
 80022a6:	60fb      	str	r3, [r7, #12]
    }
 80022a8:	bf00      	nop
 80022aa:	e7fe      	b.n	80022aa <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b0:	61fb      	str	r3, [r7, #28]
 80022b2:	6a3b      	ldr	r3, [r7, #32]
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	6a3a      	ldr	r2, [r7, #32]
 80022b8:	6a12      	ldr	r2, [r2, #32]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	6a1b      	ldr	r3, [r3, #32]
 80022c0:	6a3a      	ldr	r2, [r7, #32]
 80022c2:	69d2      	ldr	r2, [r2, #28]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	3318      	adds	r3, #24
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d103      	bne.n	80022da <xTaskRemoveFromEventList+0x5a>
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	6a1a      	ldr	r2, [r3, #32]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	605a      	str	r2, [r3, #4]
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	2200      	movs	r2, #0
 80022de:	629a      	str	r2, [r3, #40]	; 0x28
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	1e5a      	subs	r2, r3, #1
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ea:	4b4a      	ldr	r3, [pc, #296]	; (8002414 <xTaskRemoveFromEventList+0x194>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d15e      	bne.n	80023b0 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	6a3b      	ldr	r3, [r7, #32]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	6a3a      	ldr	r2, [r7, #32]
 80022fe:	68d2      	ldr	r2, [r2, #12]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	6a3b      	ldr	r3, [r7, #32]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	6a3a      	ldr	r2, [r7, #32]
 8002308:	6892      	ldr	r2, [r2, #8]
 800230a:	605a      	str	r2, [r3, #4]
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	3304      	adds	r3, #4
 8002314:	429a      	cmp	r2, r3
 8002316:	d103      	bne.n	8002320 <xTaskRemoveFromEventList+0xa0>
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	605a      	str	r2, [r3, #4]
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	2200      	movs	r2, #0
 8002324:	615a      	str	r2, [r3, #20]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	1e5a      	subs	r2, r3, #1
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002334:	2201      	movs	r2, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	4b37      	ldr	r3, [pc, #220]	; (8002418 <xTaskRemoveFromEventList+0x198>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4313      	orrs	r3, r2
 800233e:	4a36      	ldr	r2, [pc, #216]	; (8002418 <xTaskRemoveFromEventList+0x198>)
 8002340:	6013      	str	r3, [r2, #0]
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002346:	4935      	ldr	r1, [pc, #212]	; (800241c <xTaskRemoveFromEventList+0x19c>)
 8002348:	4613      	mov	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	609a      	str	r2, [r3, #8]
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	6a3b      	ldr	r3, [r7, #32]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	6a3a      	ldr	r2, [r7, #32]
 800236c:	3204      	adds	r2, #4
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	6a3b      	ldr	r3, [r7, #32]
 8002372:	1d1a      	adds	r2, r3, #4
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237c:	4613      	mov	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4a25      	ldr	r2, [pc, #148]	; (800241c <xTaskRemoveFromEventList+0x19c>)
 8002386:	441a      	add	r2, r3
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	615a      	str	r2, [r3, #20]
 800238c:	6a3b      	ldr	r3, [r7, #32]
 800238e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002390:	4922      	ldr	r1, [pc, #136]	; (800241c <xTaskRemoveFromEventList+0x19c>)
 8002392:	4613      	mov	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	481e      	ldr	r0, [pc, #120]	; (800241c <xTaskRemoveFromEventList+0x19c>)
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4403      	add	r3, r0
 80023ac:	6019      	str	r1, [r3, #0]
 80023ae:	e01b      	b.n	80023e8 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80023b0:	4b1b      	ldr	r3, [pc, #108]	; (8002420 <xTaskRemoveFromEventList+0x1a0>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	61da      	str	r2, [r3, #28]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	621a      	str	r2, [r3, #32]
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	6a3a      	ldr	r2, [r7, #32]
 80023ca:	3218      	adds	r2, #24
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	f103 0218 	add.w	r2, r3, #24
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	4a11      	ldr	r2, [pc, #68]	; (8002420 <xTaskRemoveFromEventList+0x1a0>)
 80023dc:	629a      	str	r2, [r3, #40]	; 0x28
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <xTaskRemoveFromEventList+0x1a0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	4a0e      	ldr	r2, [pc, #56]	; (8002420 <xTaskRemoveFromEventList+0x1a0>)
 80023e6:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80023e8:	6a3b      	ldr	r3, [r7, #32]
 80023ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <xTaskRemoveFromEventList+0x1a4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d905      	bls.n	8002402 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80023f6:	2301      	movs	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <xTaskRemoveFromEventList+0x1a8>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	e001      	b.n	8002406 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8002406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002408:	4618      	mov	r0, r3
 800240a:	372c      	adds	r7, #44	; 0x2c
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	2000017c 	.word	0x2000017c
 8002418:	2000015c 	.word	0x2000015c
 800241c:	20000080 	.word	0x20000080
 8002420:	20000114 	.word	0x20000114
 8002424:	2000007c 	.word	0x2000007c
 8002428:	20000168 	.word	0x20000168

0800242c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <vTaskInternalSetTimeOutState+0x24>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800243c:	4b05      	ldr	r3, [pc, #20]	; (8002454 <vTaskInternalSetTimeOutState+0x28>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	605a      	str	r2, [r3, #4]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	2000016c 	.word	0x2000016c
 8002454:	20000158 	.word	0x20000158

08002458 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	613b      	str	r3, [r7, #16]
    }
 800247a:	bf00      	nop
 800247c:	e7fe      	b.n	800247c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d10a      	bne.n	800249a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8002484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002488:	f383 8811 	msr	BASEPRI, r3
 800248c:	f3bf 8f6f 	isb	sy
 8002490:	f3bf 8f4f 	dsb	sy
 8002494:	60fb      	str	r3, [r7, #12]
    }
 8002496:	bf00      	nop
 8002498:	e7fe      	b.n	8002498 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800249a:	f000 fd55 	bl	8002f48 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800249e:	4b1f      	ldr	r3, [pc, #124]	; (800251c <xTaskCheckForTimeOut+0xc4>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b6:	d102      	bne.n	80024be <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	e026      	b.n	800250c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <xTaskCheckForTimeOut+0xc8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d00a      	beq.n	80024e0 <xTaskCheckForTimeOut+0x88>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d305      	bcc.n	80024e0 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80024d4:	2301      	movs	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e015      	b.n	800250c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d20b      	bcs.n	8002502 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	1ad2      	subs	r2, r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff ff98 	bl	800242c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	e004      	b.n	800250c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002508:	2301      	movs	r3, #1
 800250a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800250c:	f000 fd4c 	bl	8002fa8 <vPortExitCritical>

    return xReturn;
 8002510:	69fb      	ldr	r3, [r7, #28]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3720      	adds	r7, #32
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000158 	.word	0x20000158
 8002520:	2000016c 	.word	0x2000016c

08002524 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <vTaskMissedYield+0x14>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	20000168 	.word	0x20000168

0800253c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002544:	f000 f852 	bl	80025ec <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <prvIdleTask+0x28>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d9f9      	bls.n	8002544 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <prvIdleTask+0x2c>)
 8002552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002560:	e7f0      	b.n	8002544 <prvIdleTask+0x8>
 8002562:	bf00      	nop
 8002564:	20000080 	.word	0x20000080
 8002568:	e000ed04 	.word	0xe000ed04

0800256c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	e00c      	b.n	8002592 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	4413      	add	r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <prvInitialiseTaskLists+0x60>)
 8002584:	4413      	add	r3, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f7fe fe34 	bl	80011f4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	3301      	adds	r3, #1
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d9ef      	bls.n	8002578 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002598:	480d      	ldr	r0, [pc, #52]	; (80025d0 <prvInitialiseTaskLists+0x64>)
 800259a:	f7fe fe2b 	bl	80011f4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800259e:	480d      	ldr	r0, [pc, #52]	; (80025d4 <prvInitialiseTaskLists+0x68>)
 80025a0:	f7fe fe28 	bl	80011f4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80025a4:	480c      	ldr	r0, [pc, #48]	; (80025d8 <prvInitialiseTaskLists+0x6c>)
 80025a6:	f7fe fe25 	bl	80011f4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80025aa:	480c      	ldr	r0, [pc, #48]	; (80025dc <prvInitialiseTaskLists+0x70>)
 80025ac:	f7fe fe22 	bl	80011f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80025b0:	480b      	ldr	r0, [pc, #44]	; (80025e0 <prvInitialiseTaskLists+0x74>)
 80025b2:	f7fe fe1f 	bl	80011f4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <prvInitialiseTaskLists+0x78>)
 80025b8:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <prvInitialiseTaskLists+0x64>)
 80025ba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80025bc:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <prvInitialiseTaskLists+0x7c>)
 80025be:	4a05      	ldr	r2, [pc, #20]	; (80025d4 <prvInitialiseTaskLists+0x68>)
 80025c0:	601a      	str	r2, [r3, #0]
}
 80025c2:	bf00      	nop
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000080 	.word	0x20000080
 80025d0:	200000e4 	.word	0x200000e4
 80025d4:	200000f8 	.word	0x200000f8
 80025d8:	20000114 	.word	0x20000114
 80025dc:	20000128 	.word	0x20000128
 80025e0:	20000140 	.word	0x20000140
 80025e4:	2000010c 	.word	0x2000010c
 80025e8:	20000110 	.word	0x20000110

080025ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025f2:	e019      	b.n	8002628 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80025f4:	f000 fca8 	bl	8002f48 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025f8:	4b10      	ldr	r3, [pc, #64]	; (800263c <prvCheckTasksWaitingTermination+0x50>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	4618      	mov	r0, r3
 8002606:	f7fe fe5b 	bl	80012c0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800260a:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <prvCheckTasksWaitingTermination+0x54>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3b01      	subs	r3, #1
 8002610:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <prvCheckTasksWaitingTermination+0x54>)
 8002612:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002614:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <prvCheckTasksWaitingTermination+0x58>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	3b01      	subs	r3, #1
 800261a:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <prvCheckTasksWaitingTermination+0x58>)
 800261c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800261e:	f000 fcc3 	bl	8002fa8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f810 	bl	8002648 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002628:	4b06      	ldr	r3, [pc, #24]	; (8002644 <prvCheckTasksWaitingTermination+0x58>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1e1      	bne.n	80025f4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000128 	.word	0x20000128
 8002640:	20000154 	.word	0x20000154
 8002644:	2000013c 	.word	0x2000013c

08002648 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fe39 	bl	80032cc <vPortFree>
                vPortFree( pxTCB );
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fe36 	bl	80032cc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002668:	b480      	push	{r7}
 800266a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800266c:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <prvResetNextTaskUnblockTime+0x30>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <prvResetNextTaskUnblockTime+0x34>)
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800267e:	e005      	b.n	800268c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <prvResetNextTaskUnblockTime+0x30>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a04      	ldr	r2, [pc, #16]	; (800269c <prvResetNextTaskUnblockTime+0x34>)
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	2000010c 	.word	0x2000010c
 800269c:	20000174 	.word	0x20000174

080026a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80026a6:	4b0b      	ldr	r3, [pc, #44]	; (80026d4 <xTaskGetSchedulerState+0x34>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80026ae:	2301      	movs	r3, #1
 80026b0:	607b      	str	r3, [r7, #4]
 80026b2:	e008      	b.n	80026c6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <xTaskGetSchedulerState+0x38>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d102      	bne.n	80026c2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80026bc:	2302      	movs	r3, #2
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	e001      	b.n	80026c6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80026c6:	687b      	ldr	r3, [r7, #4]
    }
 80026c8:	4618      	mov	r0, r3
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	20000160 	.word	0x20000160
 80026d8:	2000017c 	.word	0x2000017c

080026dc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80026e6:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80026ec:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3304      	adds	r3, #4
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fde4 	bl	80012c0 <uxListRemove>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80026fe:	4b31      	ldr	r3, [pc, #196]	; (80027c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	2201      	movs	r2, #1
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	4b2e      	ldr	r3, [pc, #184]	; (80027c8 <prvAddCurrentTaskToDelayedList+0xec>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4013      	ands	r3, r2
 8002712:	4a2d      	ldr	r2, [pc, #180]	; (80027c8 <prvAddCurrentTaskToDelayedList+0xec>)
 8002714:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d124      	bne.n	8002768 <prvAddCurrentTaskToDelayedList+0x8c>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d021      	beq.n	8002768 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002724:	4b29      	ldr	r3, [pc, #164]	; (80027cc <prvAddCurrentTaskToDelayedList+0xf0>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b26      	ldr	r3, [pc, #152]	; (80027c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	609a      	str	r2, [r3, #8]
 8002732:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	693a      	ldr	r2, [r7, #16]
 8002738:	6892      	ldr	r2, [r2, #8]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	4b21      	ldr	r3, [pc, #132]	; (80027c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	3204      	adds	r2, #4
 8002746:	605a      	str	r2, [r3, #4]
 8002748:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	1d1a      	adds	r2, r3, #4
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <prvAddCurrentTaskToDelayedList+0xf0>)
 8002758:	615a      	str	r2, [r3, #20]
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <prvAddCurrentTaskToDelayedList+0xf0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	4a1a      	ldr	r2, [pc, #104]	; (80027cc <prvAddCurrentTaskToDelayedList+0xf0>)
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002766:	e026      	b.n	80027b6 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002770:	4b14      	ldr	r3, [pc, #80]	; (80027c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d209      	bcs.n	8002794 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002780:	4b13      	ldr	r3, [pc, #76]	; (80027d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b0f      	ldr	r3, [pc, #60]	; (80027c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	3304      	adds	r3, #4
 800278a:	4619      	mov	r1, r3
 800278c:	4610      	mov	r0, r2
 800278e:	f7fe fd5e 	bl	800124e <vListInsert>
}
 8002792:	e010      	b.n	80027b6 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002794:	4b0f      	ldr	r3, [pc, #60]	; (80027d4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3304      	adds	r3, #4
 800279e:	4619      	mov	r1, r3
 80027a0:	4610      	mov	r0, r2
 80027a2:	f7fe fd54 	bl	800124e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d202      	bcs.n	80027b6 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 80027b0:	4a09      	ldr	r2, [pc, #36]	; (80027d8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6013      	str	r3, [r2, #0]
}
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000158 	.word	0x20000158
 80027c4:	2000007c 	.word	0x2000007c
 80027c8:	2000015c 	.word	0x2000015c
 80027cc:	20000140 	.word	0x20000140
 80027d0:	20000110 	.word	0x20000110
 80027d4:	2000010c 	.word	0x2000010c
 80027d8:	20000174 	.word	0x20000174

080027dc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80027e6:	f000 fa47 	bl	8002c78 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80027ea:	4b11      	ldr	r3, [pc, #68]	; (8002830 <xTimerCreateTimerTask+0x54>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d00b      	beq.n	800280a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80027f2:	4b10      	ldr	r3, [pc, #64]	; (8002834 <xTimerCreateTimerTask+0x58>)
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	2302      	movs	r3, #2
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	2300      	movs	r3, #0
 80027fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002800:	490d      	ldr	r1, [pc, #52]	; (8002838 <xTimerCreateTimerTask+0x5c>)
 8002802:	480e      	ldr	r0, [pc, #56]	; (800283c <xTimerCreateTimerTask+0x60>)
 8002804:	f7ff f878 	bl	80018f8 <xTaskCreate>
 8002808:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8002810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002814:	f383 8811 	msr	BASEPRI, r3
 8002818:	f3bf 8f6f 	isb	sy
 800281c:	f3bf 8f4f 	dsb	sy
 8002820:	603b      	str	r3, [r7, #0]
    }
 8002822:	bf00      	nop
 8002824:	e7fe      	b.n	8002824 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8002826:	687b      	ldr	r3, [r7, #4]
    }
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200001b0 	.word	0x200001b0
 8002834:	200001b4 	.word	0x200001b4
 8002838:	080035ac 	.word	0x080035ac
 800283c:	080028e5 	.word	0x080028e5

08002840 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800284c:	e008      	b.n	8002860 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	699b      	ldr	r3, [r3, #24]
 8002852:	68ba      	ldr	r2, [r7, #8]
 8002854:	4413      	add	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	6a1b      	ldr	r3, [r3, #32]
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	699a      	ldr	r2, [r3, #24]
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	18d1      	adds	r1, r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f8dd 	bl	8002a2c <prvInsertTimerInActiveList>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ea      	bne.n	800284e <prvReloadTimer+0xe>
        }
    }
 8002878:	bf00      	nop
 800287a:	bf00      	nop
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
	...

08002884 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800288e:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <prvProcessExpiredTimer+0x5c>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3304      	adds	r3, #4
 800289c:	4618      	mov	r0, r3
 800289e:	f7fe fd0f 	bl	80012c0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff ffc3 	bl	8002840 <prvReloadTimer>
 80028ba:	e008      	b.n	80028ce <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	4798      	blx	r3
    }
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	200001a8 	.word	0x200001a8

080028e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	4618      	mov	r0, r3
 80028f2:	f000 f857 	bl	80029a4 <prvGetNextExpireTime>
 80028f6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	4619      	mov	r1, r3
 80028fc:	68f8      	ldr	r0, [r7, #12]
 80028fe:	f000 f803 	bl	8002908 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8002902:	f000 f8d5 	bl	8002ab0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8002906:	e7f1      	b.n	80028ec <prvTimerTask+0x8>

08002908 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8002912:	f7ff f9bf 	bl	8001c94 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002916:	f107 0308 	add.w	r3, r7, #8
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f866 	bl	80029ec <prvSampleTimeNow>
 8002920:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d130      	bne.n	800298a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d10a      	bne.n	8002944 <prvProcessTimerOrBlockTask+0x3c>
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	429a      	cmp	r2, r3
 8002934:	d806      	bhi.n	8002944 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8002936:	f7ff f9bb 	bl	8001cb0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800293a:	68f9      	ldr	r1, [r7, #12]
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff ffa1 	bl	8002884 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8002942:	e024      	b.n	800298e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800294a:	4b13      	ldr	r3, [pc, #76]	; (8002998 <prvProcessTimerOrBlockTask+0x90>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <prvProcessTimerOrBlockTask+0x50>
 8002954:	2301      	movs	r3, #1
 8002956:	e000      	b.n	800295a <prvProcessTimerOrBlockTask+0x52>
 8002958:	2300      	movs	r3, #0
 800295a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <prvProcessTimerOrBlockTask+0x94>)
 800295e:	6818      	ldr	r0, [r3, #0]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	4619      	mov	r1, r3
 800296a:	f7fe ff91 	bl	8001890 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800296e:	f7ff f99f 	bl	8001cb0 <xTaskResumeAll>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <prvProcessTimerOrBlockTask+0x98>)
 800297a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	f3bf 8f4f 	dsb	sy
 8002984:	f3bf 8f6f 	isb	sy
    }
 8002988:	e001      	b.n	800298e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800298a:	f7ff f991 	bl	8001cb0 <xTaskResumeAll>
    }
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200001ac 	.word	0x200001ac
 800299c:	200001b0 	.word	0x200001b0
 80029a0:	e000ed04 	.word	0xe000ed04

080029a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <prvGetNextExpireTime+0x44>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <prvGetNextExpireTime+0x16>
 80029b6:	2201      	movs	r2, #1
 80029b8:	e000      	b.n	80029bc <prvGetNextExpireTime+0x18>
 80029ba:	2200      	movs	r2, #0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d105      	bne.n	80029d4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <prvGetNextExpireTime+0x44>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	e001      	b.n	80029d8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80029d8:	68fb      	ldr	r3, [r7, #12]
    }
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	200001a8 	.word	0x200001a8

080029ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80029f4:	f7ff fa58 	bl	8001ea8 <xTaskGetTickCount>
 80029f8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <prvSampleTimeNow+0x3c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d205      	bcs.n	8002a10 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8002a04:	f000 f912 	bl	8002c2c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e002      	b.n	8002a16 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8002a16:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <prvSampleTimeNow+0x3c>)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
    }
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200001b8 	.word	0x200001b8

08002a2c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
 8002a38:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d812      	bhi.n	8002a78 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a52:	687a      	ldr	r2, [r7, #4]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	1ad2      	subs	r2, r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d302      	bcc.n	8002a66 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8002a60:	2301      	movs	r3, #1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	e01b      	b.n	8002a9e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002a66:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <prvInsertTimerInActiveList+0x7c>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4610      	mov	r0, r2
 8002a72:	f7fe fbec 	bl	800124e <vListInsert>
 8002a76:	e012      	b.n	8002a9e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d206      	bcs.n	8002a8e <prvInsertTimerInActiveList+0x62>
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d302      	bcc.n	8002a8e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e007      	b.n	8002a9e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002a8e:	4b07      	ldr	r3, [pc, #28]	; (8002aac <prvInsertTimerInActiveList+0x80>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	3304      	adds	r3, #4
 8002a96:	4619      	mov	r1, r3
 8002a98:	4610      	mov	r0, r2
 8002a9a:	f7fe fbd8 	bl	800124e <vListInsert>
            }
        }

        return xProcessTimerNow;
 8002a9e:	697b      	ldr	r3, [r7, #20]
    }
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3718      	adds	r7, #24
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	200001ac 	.word	0x200001ac
 8002aac:	200001a8 	.word	0x200001a8

08002ab0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b088      	sub	sp, #32
 8002ab4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002ab6:	e0a6      	b.n	8002c06 <prvProcessReceivedCommands+0x156>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f2c0 80a2 	blt.w	8002c04 <prvProcessReceivedCommands+0x154>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	695b      	ldr	r3, [r3, #20]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d004      	beq.n	8002ad6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	3304      	adds	r3, #4
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7fe fbf5 	bl	80012c0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8002ad6:	1d3b      	adds	r3, r7, #4
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff87 	bl	80029ec <prvSampleTimeNow>
 8002ade:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	2b08      	cmp	r3, #8
 8002ae6:	f200 808e 	bhi.w	8002c06 <prvProcessReceivedCommands+0x156>
 8002aea:	a201      	add	r2, pc, #4	; (adr r2, 8002af0 <prvProcessReceivedCommands+0x40>)
 8002aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002af0:	08002b15 	.word	0x08002b15
 8002af4:	08002b15 	.word	0x08002b15
 8002af8:	08002b7d 	.word	0x08002b7d
 8002afc:	08002b91 	.word	0x08002b91
 8002b00:	08002bdb 	.word	0x08002bdb
 8002b04:	08002b15 	.word	0x08002b15
 8002b08:	08002b15 	.word	0x08002b15
 8002b0c:	08002b7d 	.word	0x08002b7d
 8002b10:	08002b91 	.word	0x08002b91
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	18d1      	adds	r1, r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	69f8      	ldr	r0, [r7, #28]
 8002b34:	f7ff ff7a 	bl	8002a2c <prvInsertTimerInActiveList>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d063      	beq.n	8002c06 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b44:	f003 0304 	and.w	r3, r3, #4
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4619      	mov	r1, r3
 8002b58:	69f8      	ldr	r0, [r7, #28]
 8002b5a:	f7ff fe71 	bl	8002840 <prvReloadTimer>
 8002b5e:	e008      	b.n	8002b72 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b66:	f023 0301 	bic.w	r3, r3, #1
 8002b6a:	b2da      	uxtb	r2, r3
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	69f8      	ldr	r0, [r7, #28]
 8002b78:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8002b7a:	e044      	b.n	8002c06 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8002b8e:	e03a      	b.n	8002c06 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10a      	bne.n	8002bc6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	617b      	str	r3, [r7, #20]
    }
 8002bc2:	bf00      	nop
 8002bc4:	e7fe      	b.n	8002bc4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	18d1      	adds	r1, r2, r3
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	69f8      	ldr	r0, [r7, #28]
 8002bd4:	f7ff ff2a 	bl	8002a2c <prvInsertTimerInActiveList>
                        break;
 8002bd8:	e015      	b.n	8002c06 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d103      	bne.n	8002bf0 <prvProcessReceivedCommands+0x140>
                                {
                                    vPortFree( pxTimer );
 8002be8:	69f8      	ldr	r0, [r7, #28]
 8002bea:	f000 fb6f 	bl	80032cc <vPortFree>
 8002bee:	e00a      	b.n	8002c06 <prvProcessReceivedCommands+0x156>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002bf6:	f023 0301 	bic.w	r3, r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8002c02:	e000      	b.n	8002c06 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8002c04:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8002c06:	4b08      	ldr	r3, [pc, #32]	; (8002c28 <prvProcessReceivedCommands+0x178>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f107 0108 	add.w	r1, r7, #8
 8002c0e:	2200      	movs	r2, #0
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7fe fc81 	bl	8001518 <xQueueReceive>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f47f af4d 	bne.w	8002ab8 <prvProcessReceivedCommands+0x8>
        }
    }
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	3720      	adds	r7, #32
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200001b0 	.word	0x200001b0

08002c2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c32:	e009      	b.n	8002c48 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <prvSwitchTimerLists+0x44>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8002c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c42:	6838      	ldr	r0, [r7, #0]
 8002c44:	f7ff fe1e 	bl	8002884 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002c48:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <prvSwitchTimerLists+0x44>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f0      	bne.n	8002c34 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8002c52:	4b07      	ldr	r3, [pc, #28]	; (8002c70 <prvSwitchTimerLists+0x44>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <prvSwitchTimerLists+0x48>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <prvSwitchTimerLists+0x44>)
 8002c5e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8002c60:	4a04      	ldr	r2, [pc, #16]	; (8002c74 <prvSwitchTimerLists+0x48>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6013      	str	r3, [r2, #0]
    }
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	200001a8 	.word	0x200001a8
 8002c74:	200001ac 	.word	0x200001ac

08002c78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8002c7c:	f000 f964 	bl	8002f48 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8002c80:	4b12      	ldr	r3, [pc, #72]	; (8002ccc <prvCheckForValidListAndQueue+0x54>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d11d      	bne.n	8002cc4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8002c88:	4811      	ldr	r0, [pc, #68]	; (8002cd0 <prvCheckForValidListAndQueue+0x58>)
 8002c8a:	f7fe fab3 	bl	80011f4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8002c8e:	4811      	ldr	r0, [pc, #68]	; (8002cd4 <prvCheckForValidListAndQueue+0x5c>)
 8002c90:	f7fe fab0 	bl	80011f4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <prvCheckForValidListAndQueue+0x60>)
 8002c96:	4a0e      	ldr	r2, [pc, #56]	; (8002cd0 <prvCheckForValidListAndQueue+0x58>)
 8002c98:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8002c9a:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <prvCheckForValidListAndQueue+0x64>)
 8002c9c:	4a0d      	ldr	r2, [pc, #52]	; (8002cd4 <prvCheckForValidListAndQueue+0x5c>)
 8002c9e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	210c      	movs	r1, #12
 8002ca4:	200a      	movs	r0, #10
 8002ca6:	f7fe fbc5 	bl	8001434 <xQueueGenericCreate>
 8002caa:	4603      	mov	r3, r0
 8002cac:	4a07      	ldr	r2, [pc, #28]	; (8002ccc <prvCheckForValidListAndQueue+0x54>)
 8002cae:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <prvCheckForValidListAndQueue+0x54>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d005      	beq.n	8002cc4 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <prvCheckForValidListAndQueue+0x54>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4908      	ldr	r1, [pc, #32]	; (8002ce0 <prvCheckForValidListAndQueue+0x68>)
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe fd98 	bl	80017f4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002cc4:	f000 f970 	bl	8002fa8 <vPortExitCritical>
    }
 8002cc8:	bf00      	nop
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	200001b0 	.word	0x200001b0
 8002cd0:	20000180 	.word	0x20000180
 8002cd4:	20000194 	.word	0x20000194
 8002cd8:	200001a8 	.word	0x200001a8
 8002cdc:	200001ac 	.word	0x200001ac
 8002ce0:	080035b4 	.word	0x080035b4

08002ce4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002cfc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3b04      	subs	r3, #4
 8002d02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f023 0201 	bic.w	r2, r3, #1
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	3b04      	subs	r3, #4
 8002d12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d14:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <pxPortInitialiseStack+0x64>)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	3b14      	subs	r3, #20
 8002d1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3b04      	subs	r3, #4
 8002d2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f06f 0202 	mvn.w	r2, #2
 8002d32:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3b20      	subs	r3, #32
 8002d38:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	08002d4d 	.word	0x08002d4d

08002d4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002d56:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <prvTaskExitError+0x54>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d5e:	d00a      	beq.n	8002d76 <prvTaskExitError+0x2a>
        __asm volatile
 8002d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d64:	f383 8811 	msr	BASEPRI, r3
 8002d68:	f3bf 8f6f 	isb	sy
 8002d6c:	f3bf 8f4f 	dsb	sy
 8002d70:	60fb      	str	r3, [r7, #12]
    }
 8002d72:	bf00      	nop
 8002d74:	e7fe      	b.n	8002d74 <prvTaskExitError+0x28>
        __asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	60bb      	str	r3, [r7, #8]
    }
 8002d88:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002d8a:	bf00      	nop
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0fc      	beq.n	8002d8c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002d92:	bf00      	nop
 8002d94:	bf00      	nop
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	20000010 	.word	0x20000010
	...

08002db0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002db0:	4b07      	ldr	r3, [pc, #28]	; (8002dd0 <pxCurrentTCBConst2>)
 8002db2:	6819      	ldr	r1, [r3, #0]
 8002db4:	6808      	ldr	r0, [r1, #0]
 8002db6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dba:	f380 8809 	msr	PSP, r0
 8002dbe:	f3bf 8f6f 	isb	sy
 8002dc2:	f04f 0000 	mov.w	r0, #0
 8002dc6:	f380 8811 	msr	BASEPRI, r0
 8002dca:	4770      	bx	lr
 8002dcc:	f3af 8000 	nop.w

08002dd0 <pxCurrentTCBConst2>:
 8002dd0:	2000007c 	.word	0x2000007c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002dd4:	bf00      	nop
 8002dd6:	bf00      	nop

08002dd8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <prvPortStartFirstTask+0x24>)
 8002dda:	6800      	ldr	r0, [r0, #0]
 8002ddc:	6800      	ldr	r0, [r0, #0]
 8002dde:	f380 8808 	msr	MSP, r0
 8002de2:	f04f 0000 	mov.w	r0, #0
 8002de6:	f380 8814 	msr	CONTROL, r0
 8002dea:	b662      	cpsie	i
 8002dec:	b661      	cpsie	f
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	df00      	svc	0
 8002df8:	bf00      	nop
 8002dfa:	0000      	.short	0x0000
 8002dfc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop

08002e04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b086      	sub	sp, #24
 8002e08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e0a:	4b46      	ldr	r3, [pc, #280]	; (8002f24 <xPortStartScheduler+0x120>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <xPortStartScheduler+0x124>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d10a      	bne.n	8002e2a <xPortStartScheduler+0x26>
        __asm volatile
 8002e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e18:	f383 8811 	msr	BASEPRI, r3
 8002e1c:	f3bf 8f6f 	isb	sy
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	613b      	str	r3, [r7, #16]
    }
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e2a:	4b3e      	ldr	r3, [pc, #248]	; (8002f24 <xPortStartScheduler+0x120>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a3f      	ldr	r2, [pc, #252]	; (8002f2c <xPortStartScheduler+0x128>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10a      	bne.n	8002e4a <xPortStartScheduler+0x46>
        __asm volatile
 8002e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e38:	f383 8811 	msr	BASEPRI, r3
 8002e3c:	f3bf 8f6f 	isb	sy
 8002e40:	f3bf 8f4f 	dsb	sy
 8002e44:	60fb      	str	r3, [r7, #12]
    }
 8002e46:	bf00      	nop
 8002e48:	e7fe      	b.n	8002e48 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <xPortStartScheduler+0x12c>)
 8002e4c:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	22ff      	movs	r2, #255	; 0xff
 8002e5a:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002e64:	78fb      	ldrb	r3, [r7, #3]
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	4b31      	ldr	r3, [pc, #196]	; (8002f34 <xPortStartScheduler+0x130>)
 8002e70:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e74:	2207      	movs	r2, #7
 8002e76:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e78:	e009      	b.n	8002e8e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002e7a:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	4a2d      	ldr	r2, [pc, #180]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e82:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	d0ef      	beq.n	8002e7a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002e9a:	4b27      	ldr	r3, [pc, #156]	; (8002f38 <xPortStartScheduler+0x134>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f1c3 0307 	rsb	r3, r3, #7
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00a      	beq.n	8002ebc <xPortStartScheduler+0xb8>
        __asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	60bb      	str	r3, [r7, #8]
    }
 8002eb8:	bf00      	nop
 8002eba:	e7fe      	b.n	8002eba <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ec4:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ec6:	4b1c      	ldr	r3, [pc, #112]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ece:	4a1a      	ldr	r2, [pc, #104]	; (8002f38 <xPortStartScheduler+0x134>)
 8002ed0:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	b2da      	uxtb	r2, r3
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <xPortStartScheduler+0x138>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <xPortStartScheduler+0x138>)
 8002ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ee4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002ee6:	4b15      	ldr	r3, [pc, #84]	; (8002f3c <xPortStartScheduler+0x138>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a14      	ldr	r2, [pc, #80]	; (8002f3c <xPortStartScheduler+0x138>)
 8002eec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002ef0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002ef2:	f000 f8db 	bl	80030ac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002ef6:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <xPortStartScheduler+0x13c>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002efc:	f000 f8fa 	bl	80030f4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <xPortStartScheduler+0x140>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <xPortStartScheduler+0x140>)
 8002f06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f0a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002f0c:	f7ff ff64 	bl	8002dd8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f10:	f7ff f8f0 	bl	80020f4 <vTaskSwitchContext>
    prvTaskExitError();
 8002f14:	f7ff ff1a 	bl	8002d4c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	e000ed00 	.word	0xe000ed00
 8002f28:	410fc271 	.word	0x410fc271
 8002f2c:	410fc270 	.word	0x410fc270
 8002f30:	e000e400 	.word	0xe000e400
 8002f34:	200001bc 	.word	0x200001bc
 8002f38:	200001c0 	.word	0x200001c0
 8002f3c:	e000ed20 	.word	0xe000ed20
 8002f40:	20000010 	.word	0x20000010
 8002f44:	e000ef34 	.word	0xe000ef34

08002f48 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	607b      	str	r3, [r7, #4]
    }
 8002f60:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <vPortEnterCritical+0x58>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	4a0d      	ldr	r2, [pc, #52]	; (8002fa0 <vPortEnterCritical+0x58>)
 8002f6a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <vPortEnterCritical+0x58>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10f      	bne.n	8002f94 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <vPortEnterCritical+0x5c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <vPortEnterCritical+0x4c>
        __asm volatile
 8002f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	603b      	str	r3, [r7, #0]
    }
 8002f90:	bf00      	nop
 8002f92:	e7fe      	b.n	8002f92 <vPortEnterCritical+0x4a>
    }
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	20000010 	.word	0x20000010
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002fae:	4b12      	ldr	r3, [pc, #72]	; (8002ff8 <vPortExitCritical+0x50>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <vPortExitCritical+0x24>
        __asm volatile
 8002fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	607b      	str	r3, [r7, #4]
    }
 8002fc8:	bf00      	nop
 8002fca:	e7fe      	b.n	8002fca <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002fcc:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <vPortExitCritical+0x50>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <vPortExitCritical+0x50>)
 8002fd4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <vPortExitCritical+0x50>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <vPortExitCritical+0x42>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002fe8:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	20000010 	.word	0x20000010
 8002ffc:	00000000 	.word	0x00000000

08003000 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003000:	f3ef 8009 	mrs	r0, PSP
 8003004:	f3bf 8f6f 	isb	sy
 8003008:	4b15      	ldr	r3, [pc, #84]	; (8003060 <pxCurrentTCBConst>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	f01e 0f10 	tst.w	lr, #16
 8003010:	bf08      	it	eq
 8003012:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003016:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800301a:	6010      	str	r0, [r2, #0]
 800301c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003020:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003024:	f380 8811 	msr	BASEPRI, r0
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f7ff f860 	bl	80020f4 <vTaskSwitchContext>
 8003034:	f04f 0000 	mov.w	r0, #0
 8003038:	f380 8811 	msr	BASEPRI, r0
 800303c:	bc09      	pop	{r0, r3}
 800303e:	6819      	ldr	r1, [r3, #0]
 8003040:	6808      	ldr	r0, [r1, #0]
 8003042:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003046:	f01e 0f10 	tst.w	lr, #16
 800304a:	bf08      	it	eq
 800304c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003050:	f380 8809 	msr	PSP, r0
 8003054:	f3bf 8f6f 	isb	sy
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	f3af 8000 	nop.w

08003060 <pxCurrentTCBConst>:
 8003060:	2000007c 	.word	0x2000007c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003064:	bf00      	nop
 8003066:	bf00      	nop

08003068 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
        __asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	607b      	str	r3, [r7, #4]
    }
 8003080:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003082:	f7fe ff21 	bl	8001ec8 <xTaskIncrementTick>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d003      	beq.n	8003094 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <SysTick_Handler+0x40>)
 800308e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003092:	601a      	str	r2, [r3, #0]
 8003094:	2300      	movs	r3, #0
 8003096:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	f383 8811 	msr	BASEPRI, r3
    }
 800309e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80030a0:	bf00      	nop
 80030a2:	3708      	adds	r7, #8
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	e000ed04 	.word	0xe000ed04

080030ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80030b0:	4b0b      	ldr	r3, [pc, #44]	; (80030e0 <vPortSetupTimerInterrupt+0x34>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <vPortSetupTimerInterrupt+0x38>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80030bc:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <vPortSetupTimerInterrupt+0x3c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0a      	ldr	r2, [pc, #40]	; (80030ec <vPortSetupTimerInterrupt+0x40>)
 80030c2:	fba2 2303 	umull	r2, r3, r2, r3
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	4a09      	ldr	r2, [pc, #36]	; (80030f0 <vPortSetupTimerInterrupt+0x44>)
 80030ca:	3b01      	subs	r3, #1
 80030cc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80030ce:	4b04      	ldr	r3, [pc, #16]	; (80030e0 <vPortSetupTimerInterrupt+0x34>)
 80030d0:	2207      	movs	r2, #7
 80030d2:	601a      	str	r2, [r3, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	e000e010 	.word	0xe000e010
 80030e4:	e000e018 	.word	0xe000e018
 80030e8:	20000000 	.word	0x20000000
 80030ec:	10624dd3 	.word	0x10624dd3
 80030f0:	e000e014 	.word	0xe000e014

080030f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80030f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003104 <vPortEnableVFP+0x10>
 80030f8:	6801      	ldr	r1, [r0, #0]
 80030fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80030fe:	6001      	str	r1, [r0, #0]
 8003100:	4770      	bx	lr
 8003102:	0000      	.short	0x0000
 8003104:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop

0800310c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b08a      	sub	sp, #40	; 0x28
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003114:	2300      	movs	r3, #0
 8003116:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003118:	f7fe fdbc 	bl	8001c94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800311c:	4b65      	ldr	r3, [pc, #404]	; (80032b4 <pvPortMalloc+0x1a8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003124:	f000 f934 	bl	8003390 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003128:	4b63      	ldr	r3, [pc, #396]	; (80032b8 <pvPortMalloc+0x1ac>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4013      	ands	r3, r2
 8003130:	2b00      	cmp	r3, #0
 8003132:	f040 80a7 	bne.w	8003284 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02d      	beq.n	8003198 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800313c:	2208      	movs	r2, #8
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	429a      	cmp	r2, r3
 8003146:	d227      	bcs.n	8003198 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8003148:	2208      	movs	r2, #8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	2b00      	cmp	r3, #0
 8003158:	d021      	beq.n	800319e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f023 0307 	bic.w	r3, r3, #7
 8003160:	3308      	adds	r3, #8
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	429a      	cmp	r2, r3
 8003166:	d214      	bcs.n	8003192 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f023 0307 	bic.w	r3, r3, #7
 800316e:	3308      	adds	r3, #8
 8003170:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f003 0307 	and.w	r3, r3, #7
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <pvPortMalloc+0x92>
        __asm volatile
 800317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003180:	f383 8811 	msr	BASEPRI, r3
 8003184:	f3bf 8f6f 	isb	sy
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	617b      	str	r3, [r7, #20]
    }
 800318e:	bf00      	nop
 8003190:	e7fe      	b.n	8003190 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003192:	2300      	movs	r3, #0
 8003194:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003196:	e002      	b.n	800319e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003198:	2300      	movs	r3, #0
 800319a:	607b      	str	r3, [r7, #4]
 800319c:	e000      	b.n	80031a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800319e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d06e      	beq.n	8003284 <pvPortMalloc+0x178>
 80031a6:	4b45      	ldr	r3, [pc, #276]	; (80032bc <pvPortMalloc+0x1b0>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d869      	bhi.n	8003284 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80031b0:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <pvPortMalloc+0x1b4>)
 80031b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80031b4:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <pvPortMalloc+0x1b4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031ba:	e004      	b.n	80031c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d903      	bls.n	80031d8 <pvPortMalloc+0xcc>
 80031d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f1      	bne.n	80031bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80031d8:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <pvPortMalloc+0x1a8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031de:	429a      	cmp	r2, r3
 80031e0:	d050      	beq.n	8003284 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80031e2:	6a3b      	ldr	r3, [r7, #32]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2208      	movs	r2, #8
 80031e8:	4413      	add	r3, r2
 80031ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80031ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	1ad2      	subs	r2, r2, r3
 80031fc:	2308      	movs	r3, #8
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	429a      	cmp	r2, r3
 8003202:	d91f      	bls.n	8003244 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <pvPortMalloc+0x120>
        __asm volatile
 8003216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321a:	f383 8811 	msr	BASEPRI, r3
 800321e:	f3bf 8f6f 	isb	sy
 8003222:	f3bf 8f4f 	dsb	sy
 8003226:	613b      	str	r3, [r7, #16]
    }
 8003228:	bf00      	nop
 800322a:	e7fe      	b.n	800322a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	1ad2      	subs	r2, r2, r3
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800323e:	69b8      	ldr	r0, [r7, #24]
 8003240:	f000 f908 	bl	8003454 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003244:	4b1d      	ldr	r3, [pc, #116]	; (80032bc <pvPortMalloc+0x1b0>)
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	4a1b      	ldr	r2, [pc, #108]	; (80032bc <pvPortMalloc+0x1b0>)
 8003250:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <pvPortMalloc+0x1b0>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	4b1b      	ldr	r3, [pc, #108]	; (80032c4 <pvPortMalloc+0x1b8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d203      	bcs.n	8003266 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800325e:	4b17      	ldr	r3, [pc, #92]	; (80032bc <pvPortMalloc+0x1b0>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a18      	ldr	r2, [pc, #96]	; (80032c4 <pvPortMalloc+0x1b8>)
 8003264:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4b13      	ldr	r3, [pc, #76]	; (80032b8 <pvPortMalloc+0x1ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	431a      	orrs	r2, r3
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800327a:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <pvPortMalloc+0x1bc>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3301      	adds	r3, #1
 8003280:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <pvPortMalloc+0x1bc>)
 8003282:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003284:	f7fe fd14 	bl	8001cb0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <pvPortMalloc+0x19c>
        __asm volatile
 8003292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	60fb      	str	r3, [r7, #12]
    }
 80032a4:	bf00      	nop
 80032a6:	e7fe      	b.n	80032a6 <pvPortMalloc+0x19a>
    return pvReturn;
 80032a8:	69fb      	ldr	r3, [r7, #28]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3728      	adds	r7, #40	; 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20012dcc 	.word	0x20012dcc
 80032b8:	20012de0 	.word	0x20012de0
 80032bc:	20012dd0 	.word	0x20012dd0
 80032c0:	20012dc4 	.word	0x20012dc4
 80032c4:	20012dd4 	.word	0x20012dd4
 80032c8:	20012dd8 	.word	0x20012dd8

080032cc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d04d      	beq.n	800337a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80032de:	2308      	movs	r3, #8
 80032e0:	425b      	negs	r3, r3
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	4413      	add	r3, r2
 80032e6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4b24      	ldr	r3, [pc, #144]	; (8003384 <vPortFree+0xb8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <vPortFree+0x44>
        __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	60fb      	str	r3, [r7, #12]
    }
 800330c:	bf00      	nop
 800330e:	e7fe      	b.n	800330e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d00a      	beq.n	800332e <vPortFree+0x62>
        __asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	60bb      	str	r3, [r7, #8]
    }
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <vPortFree+0xb8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4013      	ands	r3, r2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01e      	beq.n	800337a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d11a      	bne.n	800337a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	4b0e      	ldr	r3, [pc, #56]	; (8003384 <vPortFree+0xb8>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	43db      	mvns	r3, r3
 800334e:	401a      	ands	r2, r3
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003354:	f7fe fc9e 	bl	8001c94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <vPortFree+0xbc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4413      	add	r3, r2
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <vPortFree+0xbc>)
 8003364:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003366:	6938      	ldr	r0, [r7, #16]
 8003368:	f000 f874 	bl	8003454 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <vPortFree+0xc0>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	4a06      	ldr	r2, [pc, #24]	; (800338c <vPortFree+0xc0>)
 8003374:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003376:	f7fe fc9b 	bl	8001cb0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800337a:	bf00      	nop
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20012de0 	.word	0x20012de0
 8003388:	20012dd0 	.word	0x20012dd0
 800338c:	20012ddc 	.word	0x20012ddc

08003390 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003396:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800339a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800339c:	4b27      	ldr	r3, [pc, #156]	; (800343c <prvHeapInit+0xac>)
 800339e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	3307      	adds	r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0307 	bic.w	r3, r3, #7
 80033b6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	4a1f      	ldr	r2, [pc, #124]	; (800343c <prvHeapInit+0xac>)
 80033c0:	4413      	add	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80033c8:	4a1d      	ldr	r2, [pc, #116]	; (8003440 <prvHeapInit+0xb0>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80033ce:	4b1c      	ldr	r3, [pc, #112]	; (8003440 <prvHeapInit+0xb0>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	4413      	add	r3, r2
 80033da:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80033dc:	2208      	movs	r2, #8
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0307 	bic.w	r3, r3, #7
 80033ea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <prvHeapInit+0xb4>)
 80033f0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80033f2:	4b14      	ldr	r3, [pc, #80]	; (8003444 <prvHeapInit+0xb4>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80033fa:	4b12      	ldr	r3, [pc, #72]	; (8003444 <prvHeapInit+0xb4>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	1ad2      	subs	r2, r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003410:	4b0c      	ldr	r3, [pc, #48]	; (8003444 <prvHeapInit+0xb4>)
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <prvHeapInit+0xb8>)
 800341e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a09      	ldr	r2, [pc, #36]	; (800344c <prvHeapInit+0xbc>)
 8003426:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003428:	4b09      	ldr	r3, [pc, #36]	; (8003450 <prvHeapInit+0xc0>)
 800342a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800342e:	601a      	str	r2, [r3, #0]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	200001c4 	.word	0x200001c4
 8003440:	20012dc4 	.word	0x20012dc4
 8003444:	20012dcc 	.word	0x20012dcc
 8003448:	20012dd4 	.word	0x20012dd4
 800344c:	20012dd0 	.word	0x20012dd0
 8003450:	20012de0 	.word	0x20012de0

08003454 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003454:	b480      	push	{r7}
 8003456:	b085      	sub	sp, #20
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800345c:	4b28      	ldr	r3, [pc, #160]	; (8003500 <prvInsertBlockIntoFreeList+0xac>)
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	e002      	b.n	8003468 <prvInsertBlockIntoFreeList+0x14>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	429a      	cmp	r2, r3
 8003470:	d8f7      	bhi.n	8003462 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4413      	add	r3, r2
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	429a      	cmp	r2, r3
 8003482:	d108      	bne.n	8003496 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	441a      	add	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	441a      	add	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d118      	bne.n	80034dc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	4b15      	ldr	r3, [pc, #84]	; (8003504 <prvInsertBlockIntoFreeList+0xb0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d00d      	beq.n	80034d2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	441a      	add	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e008      	b.n	80034e4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80034d2:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <prvInsertBlockIntoFreeList+0xb0>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e003      	b.n	80034e4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80034e4:	68fa      	ldr	r2, [r7, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d002      	beq.n	80034f2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034f2:	bf00      	nop
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	20012dc4 	.word	0x20012dc4
 8003504:	20012dcc 	.word	0x20012dcc

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	4d0d      	ldr	r5, [pc, #52]	; (8003540 <__libc_init_array+0x38>)
 800350c:	4c0d      	ldr	r4, [pc, #52]	; (8003544 <__libc_init_array+0x3c>)
 800350e:	1b64      	subs	r4, r4, r5
 8003510:	10a4      	asrs	r4, r4, #2
 8003512:	2600      	movs	r6, #0
 8003514:	42a6      	cmp	r6, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	4d0b      	ldr	r5, [pc, #44]	; (8003548 <__libc_init_array+0x40>)
 800351a:	4c0c      	ldr	r4, [pc, #48]	; (800354c <__libc_init_array+0x44>)
 800351c:	f000 f82e 	bl	800357c <_init>
 8003520:	1b64      	subs	r4, r4, r5
 8003522:	10a4      	asrs	r4, r4, #2
 8003524:	2600      	movs	r6, #0
 8003526:	42a6      	cmp	r6, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003530:	4798      	blx	r3
 8003532:	3601      	adds	r6, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	f855 3b04 	ldr.w	r3, [r5], #4
 800353a:	4798      	blx	r3
 800353c:	3601      	adds	r6, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	080035d4 	.word	0x080035d4
 8003544:	080035d4 	.word	0x080035d4
 8003548:	080035d4 	.word	0x080035d4
 800354c:	080035d8 	.word	0x080035d8

08003550 <memcpy>:
 8003550:	440a      	add	r2, r1
 8003552:	4291      	cmp	r1, r2
 8003554:	f100 33ff 	add.w	r3, r0, #4294967295
 8003558:	d100      	bne.n	800355c <memcpy+0xc>
 800355a:	4770      	bx	lr
 800355c:	b510      	push	{r4, lr}
 800355e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003562:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003566:	4291      	cmp	r1, r2
 8003568:	d1f9      	bne.n	800355e <memcpy+0xe>
 800356a:	bd10      	pop	{r4, pc}

0800356c <memset>:
 800356c:	4402      	add	r2, r0
 800356e:	4603      	mov	r3, r0
 8003570:	4293      	cmp	r3, r2
 8003572:	d100      	bne.n	8003576 <memset+0xa>
 8003574:	4770      	bx	lr
 8003576:	f803 1b01 	strb.w	r1, [r3], #1
 800357a:	e7f9      	b.n	8003570 <memset+0x4>

0800357c <_init>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	bf00      	nop
 8003580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003582:	bc08      	pop	{r3}
 8003584:	469e      	mov	lr, r3
 8003586:	4770      	bx	lr

08003588 <_fini>:
 8003588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800358a:	bf00      	nop
 800358c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358e:	bc08      	pop	{r3}
 8003590:	469e      	mov	lr, r3
 8003592:	4770      	bx	lr
